%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.11.2
-module(router_pb).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([
    'enum_symbol_by_value_helium.blockchain_state_channel_state_v1'/1,
    'enum_value_by_symbol_helium.blockchain_state_channel_state_v1'/1
]).
-export([
    'enum_symbol_by_value_packet_pb.packet_type'/1,
    'enum_value_by_symbol_packet_pb.packet_type'/1
]).
-export(['enum_symbol_by_value_helium.region'/1, 'enum_value_by_symbol_helium.region'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("router_pb.hrl").

%% enumerated types
-type 'helium.blockchain_state_channel_state_v1'() :: open | closed.
-type 'packet_pb.packet_type'() :: longfi | lorawan.
-type 'helium.region'() ::
    'US915'
    | 'EU868'
    | 'EU433'
    | 'CN470'
    | 'CN779'
    | 'AU915'
    | 'AS923_1'
    | 'KR920'
    | 'IN865'
    | 'AS923_2'
    | 'AS923_3'
    | 'AS923_4'
    | 'AS923_1B'
    | 'CD900_1A'.
-export_type([
    'helium.blockchain_state_channel_state_v1'/0,
    'packet_pb.packet_type'/0,
    'helium.region'/0
]).

%% message types
-type blockchain_state_channel_summary_v1_pb() :: #blockchain_state_channel_summary_v1_pb{}.

-type blockchain_state_channel_v1_pb() :: #blockchain_state_channel_v1_pb{}.

-type blockchain_state_channel_response_v1_pb() :: #blockchain_state_channel_response_v1_pb{}.

-type blockchain_state_channel_packet_v1_pb() :: #blockchain_state_channel_packet_v1_pb{}.

-type blockchain_state_channel_offer_v1_pb() :: #blockchain_state_channel_offer_v1_pb{}.

-type blockchain_state_channel_purchase_v1_pb() :: #blockchain_state_channel_purchase_v1_pb{}.

-type blockchain_state_channel_diff_v1_pb() :: #blockchain_state_channel_diff_v1_pb{}.

-type blockchain_state_channel_diff_entry_v1_pb() :: #blockchain_state_channel_diff_entry_v1_pb{}.

-type blockchain_state_channel_diff_append_summary_v1_pb() :: #blockchain_state_channel_diff_append_summary_v1_pb{}.

-type blockchain_state_channel_diff_update_summary_v1_pb() :: #blockchain_state_channel_diff_update_summary_v1_pb{}.

-type blockchain_state_channel_banner_v1_pb() :: #blockchain_state_channel_banner_v1_pb{}.

-type blockchain_state_channel_rejection_v1_pb() :: #blockchain_state_channel_rejection_v1_pb{}.

-type blockchain_state_channel_message_v1_pb() :: #blockchain_state_channel_message_v1_pb{}.

-type eui_pb() :: #eui_pb{}.

-type routing_information_pb() :: #routing_information_pb{}.

-type window_pb() :: #window_pb{}.

-type packet_pb() :: #packet_pb{}.

-export_type([
    'blockchain_state_channel_summary_v1_pb'/0,
    'blockchain_state_channel_v1_pb'/0,
    'blockchain_state_channel_response_v1_pb'/0,
    'blockchain_state_channel_packet_v1_pb'/0,
    'blockchain_state_channel_offer_v1_pb'/0,
    'blockchain_state_channel_purchase_v1_pb'/0,
    'blockchain_state_channel_diff_v1_pb'/0,
    'blockchain_state_channel_diff_entry_v1_pb'/0,
    'blockchain_state_channel_diff_append_summary_v1_pb'/0,
    'blockchain_state_channel_diff_update_summary_v1_pb'/0,
    'blockchain_state_channel_banner_v1_pb'/0,
    'blockchain_state_channel_rejection_v1_pb'/0,
    'blockchain_state_channel_message_v1_pb'/0,
    'eui_pb'/0,
    'routing_information_pb'/0,
    'window_pb'/0,
    'packet_pb'/0
]).

-spec encode_msg(
    #blockchain_state_channel_summary_v1_pb{}
    | #blockchain_state_channel_v1_pb{}
    | #blockchain_state_channel_response_v1_pb{}
    | #blockchain_state_channel_packet_v1_pb{}
    | #blockchain_state_channel_offer_v1_pb{}
    | #blockchain_state_channel_purchase_v1_pb{}
    | #blockchain_state_channel_diff_v1_pb{}
    | #blockchain_state_channel_diff_entry_v1_pb{}
    | #blockchain_state_channel_diff_append_summary_v1_pb{}
    | #blockchain_state_channel_diff_update_summary_v1_pb{}
    | #blockchain_state_channel_banner_v1_pb{}
    | #blockchain_state_channel_rejection_v1_pb{}
    | #blockchain_state_channel_message_v1_pb{}
    | #eui_pb{}
    | #routing_information_pb{}
    | #window_pb{}
    | #packet_pb{}
) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(
    #blockchain_state_channel_summary_v1_pb{}
    | #blockchain_state_channel_v1_pb{}
    | #blockchain_state_channel_response_v1_pb{}
    | #blockchain_state_channel_packet_v1_pb{}
    | #blockchain_state_channel_offer_v1_pb{}
    | #blockchain_state_channel_purchase_v1_pb{}
    | #blockchain_state_channel_diff_v1_pb{}
    | #blockchain_state_channel_diff_entry_v1_pb{}
    | #blockchain_state_channel_diff_append_summary_v1_pb{}
    | #blockchain_state_channel_diff_update_summary_v1_pb{}
    | #blockchain_state_channel_banner_v1_pb{}
    | #blockchain_state_channel_rejection_v1_pb{}
    | #blockchain_state_channel_message_v1_pb{}
    | #eui_pb{}
    | #routing_information_pb{}
    | #window_pb{}
    | #packet_pb{},
    atom() | list()
) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts) when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(
    #blockchain_state_channel_summary_v1_pb{}
    | #blockchain_state_channel_v1_pb{}
    | #blockchain_state_channel_response_v1_pb{}
    | #blockchain_state_channel_packet_v1_pb{}
    | #blockchain_state_channel_offer_v1_pb{}
    | #blockchain_state_channel_purchase_v1_pb{}
    | #blockchain_state_channel_diff_v1_pb{}
    | #blockchain_state_channel_diff_entry_v1_pb{}
    | #blockchain_state_channel_diff_append_summary_v1_pb{}
    | #blockchain_state_channel_diff_update_summary_v1_pb{}
    | #blockchain_state_channel_banner_v1_pb{}
    | #blockchain_state_channel_rejection_v1_pb{}
    | #blockchain_state_channel_message_v1_pb{}
    | #eui_pb{}
    | #routing_information_pb{}
    | #window_pb{}
    | #packet_pb{},
    atom(),
    list()
) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        blockchain_state_channel_summary_v1_pb ->
            encode_msg_blockchain_state_channel_summary_v1_pb(
                id(
                    Msg,
                    TrUserData
                ),
                TrUserData
            );
        blockchain_state_channel_v1_pb ->
            encode_msg_blockchain_state_channel_v1_pb(
                id(
                    Msg,
                    TrUserData
                ),
                TrUserData
            );
        blockchain_state_channel_response_v1_pb ->
            encode_msg_blockchain_state_channel_response_v1_pb(
                id(
                    Msg,
                    TrUserData
                ),
                TrUserData
            );
        blockchain_state_channel_packet_v1_pb ->
            encode_msg_blockchain_state_channel_packet_v1_pb(
                id(
                    Msg,
                    TrUserData
                ),
                TrUserData
            );
        blockchain_state_channel_offer_v1_pb ->
            encode_msg_blockchain_state_channel_offer_v1_pb(
                id(
                    Msg,
                    TrUserData
                ),
                TrUserData
            );
        blockchain_state_channel_purchase_v1_pb ->
            encode_msg_blockchain_state_channel_purchase_v1_pb(
                id(
                    Msg,
                    TrUserData
                ),
                TrUserData
            );
        blockchain_state_channel_diff_v1_pb ->
            encode_msg_blockchain_state_channel_diff_v1_pb(
                id(
                    Msg,
                    TrUserData
                ),
                TrUserData
            );
        blockchain_state_channel_diff_entry_v1_pb ->
            encode_msg_blockchain_state_channel_diff_entry_v1_pb(
                id(
                    Msg,
                    TrUserData
                ),
                TrUserData
            );
        blockchain_state_channel_diff_append_summary_v1_pb ->
            encode_msg_blockchain_state_channel_diff_append_summary_v1_pb(
                id(
                    Msg,
                    TrUserData
                ),
                TrUserData
            );
        blockchain_state_channel_diff_update_summary_v1_pb ->
            encode_msg_blockchain_state_channel_diff_update_summary_v1_pb(
                id(
                    Msg,
                    TrUserData
                ),
                TrUserData
            );
        blockchain_state_channel_banner_v1_pb ->
            encode_msg_blockchain_state_channel_banner_v1_pb(
                id(
                    Msg,
                    TrUserData
                ),
                TrUserData
            );
        blockchain_state_channel_rejection_v1_pb ->
            encode_msg_blockchain_state_channel_rejection_v1_pb(
                id(
                    Msg,
                    TrUserData
                ),
                TrUserData
            );
        blockchain_state_channel_message_v1_pb ->
            encode_msg_blockchain_state_channel_message_v1_pb(
                id(
                    Msg,
                    TrUserData
                ),
                TrUserData
            );
        eui_pb ->
            encode_msg_eui_pb(id(Msg, TrUserData), TrUserData);
        routing_information_pb ->
            encode_msg_routing_information_pb(
                id(Msg, TrUserData),
                TrUserData
            );
        window_pb ->
            encode_msg_window_pb(id(Msg, TrUserData), TrUserData);
        packet_pb ->
            encode_msg_packet_pb(id(Msg, TrUserData), TrUserData)
    end.

encode_msg_blockchain_state_channel_summary_v1_pb(
    Msg,
    TrUserData
) ->
    encode_msg_blockchain_state_channel_summary_v1_pb(
        Msg,
        <<>>,
        TrUserData
    ).

encode_msg_blockchain_state_channel_summary_v1_pb(
    #blockchain_state_channel_summary_v1_pb{
        client_pubkeybin =
            F1,
        num_packets =
            F2,
        num_dcs =
            F3
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= 0 -> B1;
                        true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                    end
                end
        end,
    if
        F3 == undefined ->
            B2;
        true ->
            begin
                TrF3 = id(F3, TrUserData),
                if
                    TrF3 =:= 0 -> B2;
                    true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                end
            end
    end.

encode_msg_blockchain_state_channel_v1_pb(
    Msg,
    TrUserData
) ->
    encode_msg_blockchain_state_channel_v1_pb(
        Msg,
        <<>>,
        TrUserData
    ).

encode_msg_blockchain_state_channel_v1_pb(
    #blockchain_state_channel_v1_pb{
        id =
            F1,
        owner =
            F2,
        credits =
            F3,
        nonce =
            F4,
        summaries =
            F5,
        root_hash =
            F6,
        skewed =
            F7,
        state =
            F8,
        expire_at_block =
            F9,
        signature =
            F10
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
        end,
    B3 =
        if
            F3 == undefined ->
                B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    if
                        TrF3 =:= 0 -> B2;
                        true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                    end
                end
        end,
    B4 =
        if
            F4 == undefined ->
                B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    if
                        TrF4 =:= 0 -> B3;
                        true -> e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
                    end
                end
        end,
    B5 = begin
        TrF5 = id(F5, TrUserData),
        if
            TrF5 == [] ->
                B4;
            true ->
                e_field_blockchain_state_channel_v1_pb_summaries(
                    TrF5,
                    B4,
                    TrUserData
                )
        end
    end,
    B6 =
        if
            F6 == undefined ->
                B5;
            true ->
                begin
                    TrF6 = id(F6, TrUserData),
                    case iolist_size(TrF6) of
                        0 -> B5;
                        _ -> e_type_bytes(TrF6, <<B5/binary, 50>>, TrUserData)
                    end
                end
        end,
    B7 =
        if
            F7 == undefined ->
                B6;
            true ->
                begin
                    TrF7 = id(F7, TrUserData),
                    case iolist_size(TrF7) of
                        0 -> B6;
                        _ -> e_type_bytes(TrF7, <<B6/binary, 58>>, TrUserData)
                    end
                end
        end,
    B8 =
        if
            F8 == undefined ->
                B7;
            true ->
                begin
                    TrF8 = id(F8, TrUserData),
                    if
                        TrF8 =:= open; TrF8 =:= 0 ->
                            B7;
                        true ->
                            'e_enum_helium.blockchain_state_channel_state_v1'(
                                TrF8,
                                <<B7/binary, 64>>,
                                TrUserData
                            )
                    end
                end
        end,
    B9 =
        if
            F9 == undefined ->
                B8;
            true ->
                begin
                    TrF9 = id(F9, TrUserData),
                    if
                        TrF9 =:= 0 -> B8;
                        true -> e_varint(TrF9, <<B8/binary, 72>>, TrUserData)
                    end
                end
        end,
    if
        F10 == undefined ->
            B9;
        true ->
            begin
                TrF10 = id(F10, TrUserData),
                case iolist_size(TrF10) of
                    0 -> B9;
                    _ -> e_type_bytes(TrF10, <<B9/binary, 82>>, TrUserData)
                end
            end
    end.

encode_msg_blockchain_state_channel_response_v1_pb(
    Msg,
    TrUserData
) ->
    encode_msg_blockchain_state_channel_response_v1_pb(
        Msg,
        <<>>,
        TrUserData
    ).

encode_msg_blockchain_state_channel_response_v1_pb(
    #blockchain_state_channel_response_v1_pb{
        accepted =
            F1,
        downlink =
            F2
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= false -> Bin;
                        true -> e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
        end,
    if
        F2 == undefined ->
            B1;
        true ->
            begin
                TrF2 = id(F2, TrUserData),
                if
                    TrF2 =:= undefined ->
                        B1;
                    true ->
                        e_mfield_blockchain_state_channel_response_v1_pb_downlink(
                            TrF2,
                            <<B1/binary, 34>>,
                            TrUserData
                        )
                end
            end
    end.

encode_msg_blockchain_state_channel_packet_v1_pb(
    Msg,
    TrUserData
) ->
    encode_msg_blockchain_state_channel_packet_v1_pb(
        Msg,
        <<>>,
        TrUserData
    ).

encode_msg_blockchain_state_channel_packet_v1_pb(
    #blockchain_state_channel_packet_v1_pb{
        packet =
            F1,
        hotspot =
            F2,
        signature =
            F3,
        region =
            F4,
        hold_time =
            F5
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= undefined ->
                            Bin;
                        true ->
                            e_mfield_blockchain_state_channel_packet_v1_pb_packet(
                                TrF1,
                                <<Bin/binary, 10>>,
                                TrUserData
                            )
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
        end,
    B3 =
        if
            F3 == undefined ->
                B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    case iolist_size(TrF3) of
                        0 -> B2;
                        _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
                    end
                end
        end,
    B4 =
        if
            F4 == undefined ->
                B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    if
                        TrF4 =:= 'US915'; TrF4 =:= 0 ->
                            B3;
                        true ->
                            'e_enum_helium.region'(
                                TrF4,
                                <<B3/binary, 32>>,
                                TrUserData
                            )
                    end
                end
        end,
    if
        F5 == undefined ->
            B4;
        true ->
            begin
                TrF5 = id(F5, TrUserData),
                if
                    TrF5 =:= 0 -> B4;
                    true -> e_varint(TrF5, <<B4/binary, 40>>, TrUserData)
                end
            end
    end.

encode_msg_blockchain_state_channel_offer_v1_pb(
    Msg,
    TrUserData
) ->
    encode_msg_blockchain_state_channel_offer_v1_pb(
        Msg,
        <<>>,
        TrUserData
    ).

encode_msg_blockchain_state_channel_offer_v1_pb(
    #blockchain_state_channel_offer_v1_pb{
        routing =
            F1,
        packet_hash =
            F2,
        payload_size =
            F3,
        fcnt =
            F4,
        hotspot =
            F5,
        signature =
            F6,
        region =
            F7,
        req_diff =
            F8
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= undefined ->
                            Bin;
                        true ->
                            e_mfield_blockchain_state_channel_offer_v1_pb_routing(
                                TrF1,
                                <<Bin/binary, 10>>,
                                TrUserData
                            )
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
        end,
    B3 =
        if
            F3 == undefined ->
                B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    if
                        TrF3 =:= 0 -> B2;
                        true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                    end
                end
        end,
    B4 =
        if
            F4 == undefined ->
                B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    if
                        TrF4 =:= 0 -> B3;
                        true -> e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
                    end
                end
        end,
    B5 =
        if
            F5 == undefined ->
                B4;
            true ->
                begin
                    TrF5 = id(F5, TrUserData),
                    case iolist_size(TrF5) of
                        0 -> B4;
                        _ -> e_type_bytes(TrF5, <<B4/binary, 42>>, TrUserData)
                    end
                end
        end,
    B6 =
        if
            F6 == undefined ->
                B5;
            true ->
                begin
                    TrF6 = id(F6, TrUserData),
                    case iolist_size(TrF6) of
                        0 -> B5;
                        _ -> e_type_bytes(TrF6, <<B5/binary, 50>>, TrUserData)
                    end
                end
        end,
    B7 =
        if
            F7 == undefined ->
                B6;
            true ->
                begin
                    TrF7 = id(F7, TrUserData),
                    if
                        TrF7 =:= 'US915'; TrF7 =:= 0 ->
                            B6;
                        true ->
                            'e_enum_helium.region'(
                                TrF7,
                                <<B6/binary, 56>>,
                                TrUserData
                            )
                    end
                end
        end,
    if
        F8 == undefined ->
            B7;
        true ->
            begin
                TrF8 = id(F8, TrUserData),
                if
                    TrF8 =:= false -> B7;
                    true -> e_type_bool(TrF8, <<B7/binary, 64>>, TrUserData)
                end
            end
    end.

encode_msg_blockchain_state_channel_purchase_v1_pb(
    Msg,
    TrUserData
) ->
    encode_msg_blockchain_state_channel_purchase_v1_pb(
        Msg,
        <<>>,
        TrUserData
    ).

encode_msg_blockchain_state_channel_purchase_v1_pb(
    #blockchain_state_channel_purchase_v1_pb{
        sc =
            F1,
        hotspot =
            F2,
        packet_hash =
            F3,
        region =
            F4,
        sc_diff =
            F5
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= undefined ->
                            Bin;
                        true ->
                            e_mfield_blockchain_state_channel_purchase_v1_pb_sc(
                                TrF1,
                                <<Bin/binary, 10>>,
                                TrUserData
                            )
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
        end,
    B3 =
        if
            F3 == undefined ->
                B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    case iolist_size(TrF3) of
                        0 -> B2;
                        _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
                    end
                end
        end,
    B4 =
        if
            F4 == undefined ->
                B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    if
                        TrF4 =:= 'US915'; TrF4 =:= 0 ->
                            B3;
                        true ->
                            'e_enum_helium.region'(
                                TrF4,
                                <<B3/binary, 32>>,
                                TrUserData
                            )
                    end
                end
        end,
    if
        F5 == undefined ->
            B4;
        true ->
            begin
                TrF5 = id(F5, TrUserData),
                if
                    TrF5 =:= undefined ->
                        B4;
                    true ->
                        e_mfield_blockchain_state_channel_purchase_v1_pb_sc_diff(
                            TrF5,
                            <<B4/binary, 42>>,
                            TrUserData
                        )
                end
            end
    end.

encode_msg_blockchain_state_channel_diff_v1_pb(
    Msg,
    TrUserData
) ->
    encode_msg_blockchain_state_channel_diff_v1_pb(
        Msg,
        <<>>,
        TrUserData
    ).

encode_msg_blockchain_state_channel_diff_v1_pb(
    #blockchain_state_channel_diff_v1_pb{
        id =
            F1,
        add_nonce =
            F2,
        signature =
            F3,
        diffs =
            F4
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= 0 -> B1;
                        true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                    end
                end
        end,
    B3 =
        if
            F3 == undefined ->
                B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    case iolist_size(TrF3) of
                        0 -> B2;
                        _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
                    end
                end
        end,
    begin
        TrF4 = id(F4, TrUserData),
        if
            TrF4 == [] ->
                B3;
            true ->
                e_field_blockchain_state_channel_diff_v1_pb_diffs(
                    TrF4,
                    B3,
                    TrUserData
                )
        end
    end.

encode_msg_blockchain_state_channel_diff_entry_v1_pb(
    Msg,
    TrUserData
) ->
    encode_msg_blockchain_state_channel_diff_entry_v1_pb(
        Msg,
        <<>>,
        TrUserData
    ).

encode_msg_blockchain_state_channel_diff_entry_v1_pb(
    #blockchain_state_channel_diff_entry_v1_pb{
        entry =
            F1
    },
    Bin,
    TrUserData
) ->
    if
        F1 =:= undefined ->
            Bin;
        true ->
            case id(F1, TrUserData) of
                {append, TF1} ->
                    begin
                        TrTF1 = id(TF1, TrUserData),
                        e_mfield_blockchain_state_channel_diff_entry_v1_pb_append(
                            TrTF1,
                            <<Bin/binary, 10>>,
                            TrUserData
                        )
                    end;
                {add, TF1} ->
                    begin
                        TrTF1 = id(TF1, TrUserData),
                        e_mfield_blockchain_state_channel_diff_entry_v1_pb_add(
                            TrTF1,
                            <<Bin/binary, 18>>,
                            TrUserData
                        )
                    end
            end
    end.

encode_msg_blockchain_state_channel_diff_append_summary_v1_pb(
    Msg,
    TrUserData
) ->
    encode_msg_blockchain_state_channel_diff_append_summary_v1_pb(
        Msg,
        <<>>,
        TrUserData
    ).

encode_msg_blockchain_state_channel_diff_append_summary_v1_pb(
    #blockchain_state_channel_diff_append_summary_v1_pb{
        client_pubkeybin =
            F1,
        num_packets =
            F2,
        num_dcs =
            F3
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= 0 -> B1;
                        true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                    end
                end
        end,
    if
        F3 == undefined ->
            B2;
        true ->
            begin
                TrF3 = id(F3, TrUserData),
                if
                    TrF3 =:= 0 -> B2;
                    true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                end
            end
    end.

encode_msg_blockchain_state_channel_diff_update_summary_v1_pb(
    Msg,
    TrUserData
) ->
    encode_msg_blockchain_state_channel_diff_update_summary_v1_pb(
        Msg,
        <<>>,
        TrUserData
    ).

encode_msg_blockchain_state_channel_diff_update_summary_v1_pb(
    #blockchain_state_channel_diff_update_summary_v1_pb{
        client_index =
            F1,
        add_packets =
            F2,
        add_dcs =
            F3
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= 0 -> B1;
                        true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                    end
                end
        end,
    if
        F3 == undefined ->
            B2;
        true ->
            begin
                TrF3 = id(F3, TrUserData),
                if
                    TrF3 =:= 0 -> B2;
                    true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                end
            end
    end.

encode_msg_blockchain_state_channel_banner_v1_pb(
    Msg,
    TrUserData
) ->
    encode_msg_blockchain_state_channel_banner_v1_pb(
        Msg,
        <<>>,
        TrUserData
    ).

encode_msg_blockchain_state_channel_banner_v1_pb(
    #blockchain_state_channel_banner_v1_pb{
        sc =
            F1
    },
    Bin,
    TrUserData
) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                if
                    TrF1 =:= undefined ->
                        Bin;
                    true ->
                        e_mfield_blockchain_state_channel_banner_v1_pb_sc(
                            TrF1,
                            <<Bin/binary, 10>>,
                            TrUserData
                        )
                end
            end
    end.

encode_msg_blockchain_state_channel_rejection_v1_pb(
    Msg,
    TrUserData
) ->
    encode_msg_blockchain_state_channel_rejection_v1_pb(
        Msg,
        <<>>,
        TrUserData
    ).

encode_msg_blockchain_state_channel_rejection_v1_pb(
    #blockchain_state_channel_rejection_v1_pb{
        reject =
            F1,
        packet_hash =
            F2
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
        end,
    if
        F2 == undefined ->
            B1;
        true ->
            begin
                TrF2 = id(F2, TrUserData),
                case iolist_size(TrF2) of
                    0 -> B1;
                    _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                end
            end
    end.

encode_msg_blockchain_state_channel_message_v1_pb(
    Msg,
    TrUserData
) ->
    encode_msg_blockchain_state_channel_message_v1_pb(
        Msg,
        <<>>,
        TrUserData
    ).

encode_msg_blockchain_state_channel_message_v1_pb(
    #blockchain_state_channel_message_v1_pb{
        msg =
            F1
    },
    Bin,
    TrUserData
) ->
    if
        F1 =:= undefined ->
            Bin;
        true ->
            case id(F1, TrUserData) of
                {response, TF1} ->
                    begin
                        TrTF1 = id(TF1, TrUserData),
                        e_mfield_blockchain_state_channel_message_v1_pb_response(
                            TrTF1,
                            <<Bin/binary, 18>>,
                            TrUserData
                        )
                    end;
                {packet, TF1} ->
                    begin
                        TrTF1 = id(TF1, TrUserData),
                        e_mfield_blockchain_state_channel_message_v1_pb_packet(
                            TrTF1,
                            <<Bin/binary, 34>>,
                            TrUserData
                        )
                    end;
                {offer, TF1} ->
                    begin
                        TrTF1 = id(TF1, TrUserData),
                        e_mfield_blockchain_state_channel_message_v1_pb_offer(
                            TrTF1,
                            <<Bin/binary, 42>>,
                            TrUserData
                        )
                    end;
                {purchase, TF1} ->
                    begin
                        TrTF1 = id(TF1, TrUserData),
                        e_mfield_blockchain_state_channel_message_v1_pb_purchase(
                            TrTF1,
                            <<Bin/binary, 50>>,
                            TrUserData
                        )
                    end;
                {banner, TF1} ->
                    begin
                        TrTF1 = id(TF1, TrUserData),
                        e_mfield_blockchain_state_channel_message_v1_pb_banner(
                            TrTF1,
                            <<Bin/binary, 58>>,
                            TrUserData
                        )
                    end;
                {reject, TF1} ->
                    begin
                        TrTF1 = id(TF1, TrUserData),
                        e_mfield_blockchain_state_channel_message_v1_pb_reject(
                            TrTF1,
                            <<Bin/binary, 66>>,
                            TrUserData
                        )
                    end
            end
    end.

encode_msg_eui_pb(Msg, TrUserData) ->
    encode_msg_eui_pb(Msg, <<>>, TrUserData).

encode_msg_eui_pb(
    #eui_pb{deveui = F1, appeui = F2},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
        end,
    if
        F2 == undefined ->
            B1;
        true ->
            begin
                TrF2 = id(F2, TrUserData),
                if
                    TrF2 =:= 0 -> B1;
                    true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                end
            end
    end.

encode_msg_routing_information_pb(Msg, TrUserData) ->
    encode_msg_routing_information_pb(
        Msg,
        <<>>,
        TrUserData
    ).

encode_msg_routing_information_pb(
    #routing_information_pb{
        data =
            F1
    },
    Bin,
    TrUserData
) ->
    if
        F1 =:= undefined ->
            Bin;
        true ->
            case id(F1, TrUserData) of
                {devaddr, TF1} ->
                    begin
                        TrTF1 = id(TF1, TrUserData),
                        e_varint(TrTF1, <<Bin/binary, 8>>, TrUserData)
                    end;
                {eui, TF1} ->
                    begin
                        TrTF1 = id(TF1, TrUserData),
                        e_mfield_routing_information_pb_eui(
                            TrTF1,
                            <<Bin/binary, 18>>,
                            TrUserData
                        )
                    end
            end
    end.

encode_msg_window_pb(Msg, TrUserData) ->
    encode_msg_window_pb(Msg, <<>>, TrUserData).

encode_msg_window_pb(
    #window_pb{
        timestamp = F1,
        frequency = F2,
        datarate = F3
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= 0.0 -> B1;
                        true -> e_type_float(TrF2, <<B1/binary, 21>>, TrUserData)
                    end
                end
        end,
    if
        F3 == undefined ->
            B2;
        true ->
            begin
                TrF3 = id(F3, TrUserData),
                case is_empty_string(TrF3) of
                    true -> B2;
                    false -> e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
                end
            end
    end.

encode_msg_packet_pb(Msg, TrUserData) ->
    encode_msg_packet_pb(Msg, <<>>, TrUserData).

encode_msg_packet_pb(
    #packet_pb{
        oui = F1,
        type = F2,
        payload = F3,
        timestamp = F4,
        signal_strength = F5,
        frequency = F6,
        datarate = F7,
        snr = F8,
        routing = F9,
        rx2_window = F10
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= longfi; TrF2 =:= 0 ->
                            B1;
                        true ->
                            'e_enum_packet_pb.packet_type'(
                                TrF2,
                                <<B1/binary, 16>>,
                                TrUserData
                            )
                    end
                end
        end,
    B3 =
        if
            F3 == undefined ->
                B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    case iolist_size(TrF3) of
                        0 -> B2;
                        _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
                    end
                end
        end,
    B4 =
        if
            F4 == undefined ->
                B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    if
                        TrF4 =:= 0 -> B3;
                        true -> e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
                    end
                end
        end,
    B5 =
        if
            F5 == undefined ->
                B4;
            true ->
                begin
                    TrF5 = id(F5, TrUserData),
                    if
                        TrF5 =:= 0.0 -> B4;
                        true -> e_type_float(TrF5, <<B4/binary, 45>>, TrUserData)
                    end
                end
        end,
    B6 =
        if
            F6 == undefined ->
                B5;
            true ->
                begin
                    TrF6 = id(F6, TrUserData),
                    if
                        TrF6 =:= 0.0 -> B5;
                        true -> e_type_float(TrF6, <<B5/binary, 53>>, TrUserData)
                    end
                end
        end,
    B7 =
        if
            F7 == undefined ->
                B6;
            true ->
                begin
                    TrF7 = id(F7, TrUserData),
                    case is_empty_string(TrF7) of
                        true -> B6;
                        false -> e_type_string(TrF7, <<B6/binary, 58>>, TrUserData)
                    end
                end
        end,
    B8 =
        if
            F8 == undefined ->
                B7;
            true ->
                begin
                    TrF8 = id(F8, TrUserData),
                    if
                        TrF8 =:= 0.0 -> B7;
                        true -> e_type_float(TrF8, <<B7/binary, 69>>, TrUserData)
                    end
                end
        end,
    B9 =
        if
            F9 == undefined ->
                B8;
            true ->
                begin
                    TrF9 = id(F9, TrUserData),
                    if
                        TrF9 =:= undefined ->
                            B8;
                        true ->
                            e_mfield_packet_pb_routing(
                                TrF9,
                                <<B8/binary, 74>>,
                                TrUserData
                            )
                    end
                end
        end,
    if
        F10 == undefined ->
            B9;
        true ->
            begin
                TrF10 = id(F10, TrUserData),
                if
                    TrF10 =:= undefined ->
                        B9;
                    true ->
                        e_mfield_packet_pb_rx2_window(
                            TrF10,
                            <<B9/binary, 82>>,
                            TrUserData
                        )
                end
            end
    end.

e_mfield_blockchain_state_channel_v1_pb_summaries(
    Msg,
    Bin,
    TrUserData
) ->
    SubBin =
        encode_msg_blockchain_state_channel_summary_v1_pb(
            Msg,
            <<>>,
            TrUserData
        ),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_blockchain_state_channel_v1_pb_summaries(
    [Elem | Rest],
    Bin,
    TrUserData
) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 =
        e_mfield_blockchain_state_channel_v1_pb_summaries(
            id(
                Elem,
                TrUserData
            ),
            Bin2,
            TrUserData
        ),
    e_field_blockchain_state_channel_v1_pb_summaries(
        Rest,
        Bin3,
        TrUserData
    );
e_field_blockchain_state_channel_v1_pb_summaries(
    [],
    Bin,
    _TrUserData
) ->
    Bin.

e_mfield_blockchain_state_channel_response_v1_pb_downlink(
    Msg,
    Bin,
    TrUserData
) ->
    SubBin = encode_msg_packet_pb(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_blockchain_state_channel_packet_v1_pb_packet(
    Msg,
    Bin,
    TrUserData
) ->
    SubBin = encode_msg_packet_pb(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_blockchain_state_channel_offer_v1_pb_routing(
    Msg,
    Bin,
    TrUserData
) ->
    SubBin = encode_msg_routing_information_pb(
        Msg,
        <<>>,
        TrUserData
    ),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_blockchain_state_channel_purchase_v1_pb_sc(
    Msg,
    Bin,
    TrUserData
) ->
    SubBin = encode_msg_blockchain_state_channel_v1_pb(
        Msg,
        <<>>,
        TrUserData
    ),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_blockchain_state_channel_purchase_v1_pb_sc_diff(
    Msg,
    Bin,
    TrUserData
) ->
    SubBin =
        encode_msg_blockchain_state_channel_diff_v1_pb(
            Msg,
            <<>>,
            TrUserData
        ),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_blockchain_state_channel_diff_v1_pb_diffs(
    Msg,
    Bin,
    TrUserData
) ->
    SubBin =
        encode_msg_blockchain_state_channel_diff_entry_v1_pb(
            Msg,
            <<>>,
            TrUserData
        ),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_blockchain_state_channel_diff_v1_pb_diffs(
    [Elem | Rest],
    Bin,
    TrUserData
) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 =
        e_mfield_blockchain_state_channel_diff_v1_pb_diffs(
            id(
                Elem,
                TrUserData
            ),
            Bin2,
            TrUserData
        ),
    e_field_blockchain_state_channel_diff_v1_pb_diffs(
        Rest,
        Bin3,
        TrUserData
    );
e_field_blockchain_state_channel_diff_v1_pb_diffs(
    [],
    Bin,
    _TrUserData
) ->
    Bin.

e_mfield_blockchain_state_channel_diff_entry_v1_pb_append(
    Msg,
    Bin,
    TrUserData
) ->
    SubBin =
        encode_msg_blockchain_state_channel_diff_append_summary_v1_pb(
            Msg,
            <<>>,
            TrUserData
        ),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_blockchain_state_channel_diff_entry_v1_pb_add(
    Msg,
    Bin,
    TrUserData
) ->
    SubBin =
        encode_msg_blockchain_state_channel_diff_update_summary_v1_pb(
            Msg,
            <<>>,
            TrUserData
        ),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_blockchain_state_channel_banner_v1_pb_sc(
    Msg,
    Bin,
    TrUserData
) ->
    SubBin = encode_msg_blockchain_state_channel_v1_pb(
        Msg,
        <<>>,
        TrUserData
    ),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_blockchain_state_channel_message_v1_pb_response(
    Msg,
    Bin,
    TrUserData
) ->
    SubBin =
        encode_msg_blockchain_state_channel_response_v1_pb(
            Msg,
            <<>>,
            TrUserData
        ),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_blockchain_state_channel_message_v1_pb_packet(
    Msg,
    Bin,
    TrUserData
) ->
    SubBin =
        encode_msg_blockchain_state_channel_packet_v1_pb(
            Msg,
            <<>>,
            TrUserData
        ),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_blockchain_state_channel_message_v1_pb_offer(
    Msg,
    Bin,
    TrUserData
) ->
    SubBin =
        encode_msg_blockchain_state_channel_offer_v1_pb(
            Msg,
            <<>>,
            TrUserData
        ),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_blockchain_state_channel_message_v1_pb_purchase(
    Msg,
    Bin,
    TrUserData
) ->
    SubBin =
        encode_msg_blockchain_state_channel_purchase_v1_pb(
            Msg,
            <<>>,
            TrUserData
        ),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_blockchain_state_channel_message_v1_pb_banner(
    Msg,
    Bin,
    TrUserData
) ->
    SubBin =
        encode_msg_blockchain_state_channel_banner_v1_pb(
            Msg,
            <<>>,
            TrUserData
        ),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_blockchain_state_channel_message_v1_pb_reject(
    Msg,
    Bin,
    TrUserData
) ->
    SubBin =
        encode_msg_blockchain_state_channel_rejection_v1_pb(
            Msg,
            <<>>,
            TrUserData
        ),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_routing_information_pb_eui(
    Msg,
    Bin,
    TrUserData
) ->
    SubBin = encode_msg_eui_pb(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_packet_pb_routing(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_routing_information_pb(
        Msg,
        <<>>,
        TrUserData
    ),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_packet_pb_rx2_window(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_window_pb(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_enum_helium.blockchain_state_channel_state_v1'(
    open,
    Bin,
    _TrUserData
) ->
    <<Bin/binary, 0>>;
'e_enum_helium.blockchain_state_channel_state_v1'(
    closed,
    Bin,
    _TrUserData
) ->
    <<Bin/binary, 1>>;
'e_enum_helium.blockchain_state_channel_state_v1'(
    V,
    Bin,
    _TrUserData
) ->
    e_varint(V, Bin).

'e_enum_packet_pb.packet_type'(
    longfi,
    Bin,
    _TrUserData
) ->
    <<Bin/binary, 0>>;
'e_enum_packet_pb.packet_type'(
    lorawan,
    Bin,
    _TrUserData
) ->
    <<Bin/binary, 1>>;
'e_enum_packet_pb.packet_type'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_helium.region'('US915', Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_helium.region'('EU868', Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_helium.region'('EU433', Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_helium.region'('CN470', Bin, _TrUserData) ->
    <<Bin/binary, 3>>;
'e_enum_helium.region'('CN779', Bin, _TrUserData) ->
    <<Bin/binary, 4>>;
'e_enum_helium.region'('AU915', Bin, _TrUserData) ->
    <<Bin/binary, 5>>;
'e_enum_helium.region'('AS923_1', Bin, _TrUserData) ->
    <<Bin/binary, 6>>;
'e_enum_helium.region'('KR920', Bin, _TrUserData) ->
    <<Bin/binary, 7>>;
'e_enum_helium.region'('IN865', Bin, _TrUserData) ->
    <<Bin/binary, 8>>;
'e_enum_helium.region'('AS923_2', Bin, _TrUserData) ->
    <<Bin/binary, 9>>;
'e_enum_helium.region'('AS923_3', Bin, _TrUserData) ->
    <<Bin/binary, 10>>;
'e_enum_helium.region'('AS923_4', Bin, _TrUserData) ->
    <<Bin/binary, 11>>;
'e_enum_helium.region'('AS923_1B', Bin, _TrUserData) ->
    <<Bin/binary, 12>>;
'e_enum_helium.region'('CD900_1A', Bin, _TrUserData) ->
    <<Bin/binary, 13>>;
'e_enum_helium.region'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

-compile({nowarn_unused_function, e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function, e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function, e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function, e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) ->
    <<Bin/binary, 0>>.

-compile({nowarn_unused_function, e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function, e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function, e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function, e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function, e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function, e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function, e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function, e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function, e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function, e_varint/2}).
e_varint(N, Bin) when N =< 127 ->
    <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") ->
    true;
is_empty_string(<<>>) ->
    true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) ->
    false.

string_has_chars([C | _]) when is_integer(C) ->
    true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
        true -> true;
        false -> string_has_chars(T)
    end;
string_has_chars(B) when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) ->
    true;
string_has_chars(<<>>) ->
    false;
string_has_chars([]) ->
    false.

decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try
        decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        Class:Reason:StackTrace ->
            error({gpb_error, {decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try
        decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        Class:Reason ->
            StackTrace = erlang:get_stacktrace(),
            error({gpb_error, {decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(
    blockchain_state_channel_summary_v1_pb,
    Bin,
    TrUserData
) ->
    id(
        decode_msg_blockchain_state_channel_summary_v1_pb(
            Bin,
            TrUserData
        ),
        TrUserData
    );
decode_msg_2_doit(
    blockchain_state_channel_v1_pb,
    Bin,
    TrUserData
) ->
    id(
        decode_msg_blockchain_state_channel_v1_pb(
            Bin,
            TrUserData
        ),
        TrUserData
    );
decode_msg_2_doit(
    blockchain_state_channel_response_v1_pb,
    Bin,
    TrUserData
) ->
    id(
        decode_msg_blockchain_state_channel_response_v1_pb(
            Bin,
            TrUserData
        ),
        TrUserData
    );
decode_msg_2_doit(
    blockchain_state_channel_packet_v1_pb,
    Bin,
    TrUserData
) ->
    id(
        decode_msg_blockchain_state_channel_packet_v1_pb(
            Bin,
            TrUserData
        ),
        TrUserData
    );
decode_msg_2_doit(
    blockchain_state_channel_offer_v1_pb,
    Bin,
    TrUserData
) ->
    id(
        decode_msg_blockchain_state_channel_offer_v1_pb(
            Bin,
            TrUserData
        ),
        TrUserData
    );
decode_msg_2_doit(
    blockchain_state_channel_purchase_v1_pb,
    Bin,
    TrUserData
) ->
    id(
        decode_msg_blockchain_state_channel_purchase_v1_pb(
            Bin,
            TrUserData
        ),
        TrUserData
    );
decode_msg_2_doit(
    blockchain_state_channel_diff_v1_pb,
    Bin,
    TrUserData
) ->
    id(
        decode_msg_blockchain_state_channel_diff_v1_pb(
            Bin,
            TrUserData
        ),
        TrUserData
    );
decode_msg_2_doit(
    blockchain_state_channel_diff_entry_v1_pb,
    Bin,
    TrUserData
) ->
    id(
        decode_msg_blockchain_state_channel_diff_entry_v1_pb(
            Bin,
            TrUserData
        ),
        TrUserData
    );
decode_msg_2_doit(
    blockchain_state_channel_diff_append_summary_v1_pb,
    Bin,
    TrUserData
) ->
    id(
        decode_msg_blockchain_state_channel_diff_append_summary_v1_pb(
            Bin,
            TrUserData
        ),
        TrUserData
    );
decode_msg_2_doit(
    blockchain_state_channel_diff_update_summary_v1_pb,
    Bin,
    TrUserData
) ->
    id(
        decode_msg_blockchain_state_channel_diff_update_summary_v1_pb(
            Bin,
            TrUserData
        ),
        TrUserData
    );
decode_msg_2_doit(
    blockchain_state_channel_banner_v1_pb,
    Bin,
    TrUserData
) ->
    id(
        decode_msg_blockchain_state_channel_banner_v1_pb(
            Bin,
            TrUserData
        ),
        TrUserData
    );
decode_msg_2_doit(
    blockchain_state_channel_rejection_v1_pb,
    Bin,
    TrUserData
) ->
    id(
        decode_msg_blockchain_state_channel_rejection_v1_pb(
            Bin,
            TrUserData
        ),
        TrUserData
    );
decode_msg_2_doit(
    blockchain_state_channel_message_v1_pb,
    Bin,
    TrUserData
) ->
    id(
        decode_msg_blockchain_state_channel_message_v1_pb(
            Bin,
            TrUserData
        ),
        TrUserData
    );
decode_msg_2_doit(eui_pb, Bin, TrUserData) ->
    id(decode_msg_eui_pb(Bin, TrUserData), TrUserData);
decode_msg_2_doit(
    routing_information_pb,
    Bin,
    TrUserData
) ->
    id(
        decode_msg_routing_information_pb(Bin, TrUserData),
        TrUserData
    );
decode_msg_2_doit(window_pb, Bin, TrUserData) ->
    id(decode_msg_window_pb(Bin, TrUserData), TrUserData);
decode_msg_2_doit(packet_pb, Bin, TrUserData) ->
    id(decode_msg_packet_pb(Bin, TrUserData), TrUserData).

decode_msg_blockchain_state_channel_summary_v1_pb(
    Bin,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_summary_v1_pb(
        Bin,
        0,
        0,
        id(
            <<>>,
            TrUserData
        ),
        id(0, TrUserData),
        id(0, TrUserData),
        TrUserData
    ).

dfp_read_field_def_blockchain_state_channel_summary_v1_pb(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    d_field_blockchain_state_channel_summary_v1_pb_client_pubkeybin(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_summary_v1_pb(
    <<16, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    d_field_blockchain_state_channel_summary_v1_pb_num_packets(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_summary_v1_pb(
    <<24, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    d_field_blockchain_state_channel_summary_v1_pb_num_dcs(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_summary_v1_pb(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    F@_3,
    _
) ->
    #blockchain_state_channel_summary_v1_pb{
        client_pubkeybin =
            F@_1,
        num_packets = F@_2,
        num_dcs = F@_3
    };
dfp_read_field_def_blockchain_state_channel_summary_v1_pb(
    Other,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    dg_read_field_def_blockchain_state_channel_summary_v1_pb(
        Other,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

dg_read_field_def_blockchain_state_channel_summary_v1_pb(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_blockchain_state_channel_summary_v1_pb(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
dg_read_field_def_blockchain_state_channel_summary_v1_pb(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_blockchain_state_channel_summary_v1_pb_client_pubkeybin(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        16 ->
            d_field_blockchain_state_channel_summary_v1_pb_num_packets(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        24 ->
            d_field_blockchain_state_channel_summary_v1_pb_num_dcs(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_blockchain_state_channel_summary_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                1 ->
                    skip_64_blockchain_state_channel_summary_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_blockchain_state_channel_summary_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                3 ->
                    skip_group_blockchain_state_channel_summary_v1_pb(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                5 ->
                    skip_32_blockchain_state_channel_summary_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    )
            end
    end;
dg_read_field_def_blockchain_state_channel_summary_v1_pb(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    F@_3,
    _
) ->
    #blockchain_state_channel_summary_v1_pb{
        client_pubkeybin =
            F@_1,
        num_packets = F@_2,
        num_dcs = F@_3
    }.

d_field_blockchain_state_channel_summary_v1_pb_client_pubkeybin(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_summary_v1_pb_client_pubkeybin(
        Rest,
        N + 7,
        X bsl N +
            Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
d_field_blockchain_state_channel_summary_v1_pb_client_pubkeybin(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_2,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_summary_v1_pb(
        RestF,
        0,
        0,
        NewFValue,
        F@_2,
        F@_3,
        TrUserData
    ).

d_field_blockchain_state_channel_summary_v1_pb_num_packets(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_summary_v1_pb_num_packets(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
d_field_blockchain_state_channel_summary_v1_pb_num_packets(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    _,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_blockchain_state_channel_summary_v1_pb(
        RestF,
        0,
        0,
        F@_1,
        NewFValue,
        F@_3,
        TrUserData
    ).

d_field_blockchain_state_channel_summary_v1_pb_num_dcs(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_summary_v1_pb_num_dcs(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
d_field_blockchain_state_channel_summary_v1_pb_num_dcs(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_blockchain_state_channel_summary_v1_pb(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        NewFValue,
        TrUserData
    ).

skip_varint_blockchain_state_channel_summary_v1_pb(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    skip_varint_blockchain_state_channel_summary_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
skip_varint_blockchain_state_channel_summary_v1_pb(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_summary_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

skip_length_delimited_blockchain_state_channel_summary_v1_pb(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    skip_length_delimited_blockchain_state_channel_summary_v1_pb(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
skip_length_delimited_blockchain_state_channel_summary_v1_pb(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_blockchain_state_channel_summary_v1_pb(
        Rest2,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

skip_group_blockchain_state_channel_summary_v1_pb(
    Bin,
    FNum,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_blockchain_state_channel_summary_v1_pb(
        Rest,
        0,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

skip_32_blockchain_state_channel_summary_v1_pb(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_summary_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

skip_64_blockchain_state_channel_summary_v1_pb(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_summary_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

decode_msg_blockchain_state_channel_v1_pb(
    Bin,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_v1_pb(
        Bin,
        0,
        0,
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        id([], TrUserData),
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        id(open, TrUserData),
        id(0, TrUserData),
        id(<<>>, TrUserData),
        TrUserData
    ).

dfp_read_field_def_blockchain_state_channel_v1_pb(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    d_field_blockchain_state_channel_v1_pb_id(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_v1_pb(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    d_field_blockchain_state_channel_v1_pb_owner(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_v1_pb(
    <<24, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    d_field_blockchain_state_channel_v1_pb_credits(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_v1_pb(
    <<32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    d_field_blockchain_state_channel_v1_pb_nonce(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_v1_pb(
    <<42, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    d_field_blockchain_state_channel_v1_pb_summaries(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_v1_pb(
    <<50, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    d_field_blockchain_state_channel_v1_pb_root_hash(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_v1_pb(
    <<58, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    d_field_blockchain_state_channel_v1_pb_skewed(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_v1_pb(
    <<64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    d_field_blockchain_state_channel_v1_pb_state(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_v1_pb(
    <<72, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    d_field_blockchain_state_channel_v1_pb_expire_at_block(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_v1_pb(
    <<82, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    d_field_blockchain_state_channel_v1_pb_signature(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_v1_pb(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    R1,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    #blockchain_state_channel_v1_pb{
        id = F@_1,
        owner = F@_2,
        credits = F@_3,
        nonce = F@_4,
        summaries = lists_reverse(R1, TrUserData),
        root_hash = F@_6,
        skewed = F@_7,
        state = F@_8,
        expire_at_block = F@_9,
        signature = F@_10
    };
dfp_read_field_def_blockchain_state_channel_v1_pb(
    Other,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    dg_read_field_def_blockchain_state_channel_v1_pb(
        Other,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

dg_read_field_def_blockchain_state_channel_v1_pb(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_blockchain_state_channel_v1_pb(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
dg_read_field_def_blockchain_state_channel_v1_pb(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_blockchain_state_channel_v1_pb_id(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        18 ->
            d_field_blockchain_state_channel_v1_pb_owner(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        24 ->
            d_field_blockchain_state_channel_v1_pb_credits(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        32 ->
            d_field_blockchain_state_channel_v1_pb_nonce(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        42 ->
            d_field_blockchain_state_channel_v1_pb_summaries(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        50 ->
            d_field_blockchain_state_channel_v1_pb_root_hash(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        58 ->
            d_field_blockchain_state_channel_v1_pb_skewed(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        64 ->
            d_field_blockchain_state_channel_v1_pb_state(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        72 ->
            d_field_blockchain_state_channel_v1_pb_expire_at_block(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        82 ->
            d_field_blockchain_state_channel_v1_pb_signature(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_blockchain_state_channel_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        TrUserData
                    );
                1 ->
                    skip_64_blockchain_state_channel_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_blockchain_state_channel_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        TrUserData
                    );
                3 ->
                    skip_group_blockchain_state_channel_v1_pb(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        TrUserData
                    );
                5 ->
                    skip_32_blockchain_state_channel_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        TrUserData
                    )
            end
    end;
dg_read_field_def_blockchain_state_channel_v1_pb(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    R1,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    #blockchain_state_channel_v1_pb{
        id = F@_1,
        owner = F@_2,
        credits = F@_3,
        nonce = F@_4,
        summaries = lists_reverse(R1, TrUserData),
        root_hash = F@_6,
        skewed = F@_7,
        state = F@_8,
        expire_at_block = F@_9,
        signature = F@_10
    }.

d_field_blockchain_state_channel_v1_pb_id(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_v1_pb_id(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
d_field_blockchain_state_channel_v1_pb_id(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_v1_pb(
        RestF,
        0,
        0,
        NewFValue,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

d_field_blockchain_state_channel_v1_pb_owner(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_v1_pb_owner(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
d_field_blockchain_state_channel_v1_pb_owner(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    _,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_v1_pb(
        RestF,
        0,
        0,
        F@_1,
        NewFValue,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

d_field_blockchain_state_channel_v1_pb_credits(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_v1_pb_credits(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
d_field_blockchain_state_channel_v1_pb_credits(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    _,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_blockchain_state_channel_v1_pb(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        NewFValue,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

d_field_blockchain_state_channel_v1_pb_nonce(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_v1_pb_nonce(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
d_field_blockchain_state_channel_v1_pb_nonce(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    _,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_blockchain_state_channel_v1_pb(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        NewFValue,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

d_field_blockchain_state_channel_v1_pb_summaries(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_v1_pb_summaries(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
d_field_blockchain_state_channel_v1_pb_summaries(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    Prev,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id(
                decode_msg_blockchain_state_channel_summary_v1_pb(
                    Bs,
                    TrUserData
                ),
                TrUserData
            ),
            Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_v1_pb(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        cons(
            NewFValue,
            Prev,
            TrUserData
        ),
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

d_field_blockchain_state_channel_v1_pb_root_hash(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_v1_pb_root_hash(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
d_field_blockchain_state_channel_v1_pb_root_hash(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    _,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_v1_pb(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        NewFValue,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

d_field_blockchain_state_channel_v1_pb_skewed(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_v1_pb_skewed(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
d_field_blockchain_state_channel_v1_pb_skewed(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    _,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_v1_pb(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        NewFValue,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

d_field_blockchain_state_channel_v1_pb_state(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_v1_pb_state(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
d_field_blockchain_state_channel_v1_pb_state(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    _,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} =
        {id(
                'd_enum_helium.blockchain_state_channel_state_v1'(begin
                    <<Res:32/signed-native>> =
                        <<(X bsl N +
                                Acc):32/unsigned-native>>,
                    id(
                        Res,
                        TrUserData
                    )
                end),
                TrUserData
            ),
            Rest},
    dfp_read_field_def_blockchain_state_channel_v1_pb(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        NewFValue,
        F@_9,
        F@_10,
        TrUserData
    ).

d_field_blockchain_state_channel_v1_pb_expire_at_block(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_v1_pb_expire_at_block(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
d_field_blockchain_state_channel_v1_pb_expire_at_block(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    _,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_blockchain_state_channel_v1_pb(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        NewFValue,
        F@_10,
        TrUserData
    ).

d_field_blockchain_state_channel_v1_pb_signature(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_v1_pb_signature(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
d_field_blockchain_state_channel_v1_pb_signature(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_v1_pb(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        NewFValue,
        TrUserData
    ).

skip_varint_blockchain_state_channel_v1_pb(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    skip_varint_blockchain_state_channel_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
skip_varint_blockchain_state_channel_v1_pb(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

skip_length_delimited_blockchain_state_channel_v1_pb(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    skip_length_delimited_blockchain_state_channel_v1_pb(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
skip_length_delimited_blockchain_state_channel_v1_pb(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_blockchain_state_channel_v1_pb(
        Rest2,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

skip_group_blockchain_state_channel_v1_pb(
    Bin,
    FNum,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_blockchain_state_channel_v1_pb(
        Rest,
        0,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

skip_32_blockchain_state_channel_v1_pb(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

skip_64_blockchain_state_channel_v1_pb(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

decode_msg_blockchain_state_channel_response_v1_pb(
    Bin,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_response_v1_pb(
        Bin,
        0,
        0,
        id(
            false,
            TrUserData
        ),
        id(
            undefined,
            TrUserData
        ),
        TrUserData
    ).

dfp_read_field_def_blockchain_state_channel_response_v1_pb(
    <<8, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    d_field_blockchain_state_channel_response_v1_pb_accepted(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_response_v1_pb(
    <<34, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    d_field_blockchain_state_channel_response_v1_pb_downlink(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_response_v1_pb(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    _
) ->
    #blockchain_state_channel_response_v1_pb{
        accepted =
            F@_1,
        downlink = F@_2
    };
dfp_read_field_def_blockchain_state_channel_response_v1_pb(
    Other,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dg_read_field_def_blockchain_state_channel_response_v1_pb(
        Other,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

dg_read_field_def_blockchain_state_channel_response_v1_pb(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_blockchain_state_channel_response_v1_pb(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
dg_read_field_def_blockchain_state_channel_response_v1_pb(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_blockchain_state_channel_response_v1_pb_accepted(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                TrUserData
            );
        34 ->
            d_field_blockchain_state_channel_response_v1_pb_downlink(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_blockchain_state_channel_response_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                1 ->
                    skip_64_blockchain_state_channel_response_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_blockchain_state_channel_response_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                3 ->
                    skip_group_blockchain_state_channel_response_v1_pb(
                        Rest,
                        Key bsr
                            3,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                5 ->
                    skip_32_blockchain_state_channel_response_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    )
            end
    end;
dg_read_field_def_blockchain_state_channel_response_v1_pb(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    _
) ->
    #blockchain_state_channel_response_v1_pb{
        accepted =
            F@_1,
        downlink = F@_2
    }.

d_field_blockchain_state_channel_response_v1_pb_accepted(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_response_v1_pb_accepted(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
d_field_blockchain_state_channel_response_v1_pb_accepted(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_2,
    TrUserData
) ->
    {NewFValue, RestF} =
        {id(
                X bsl N + Acc =/= 0,
                TrUserData
            ),
            Rest},
    dfp_read_field_def_blockchain_state_channel_response_v1_pb(
        RestF,
        0,
        0,
        NewFValue,
        F@_2,
        TrUserData
    ).

d_field_blockchain_state_channel_response_v1_pb_downlink(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_response_v1_pb_downlink(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
d_field_blockchain_state_channel_response_v1_pb_downlink(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id(
                decode_msg_packet_pb(Bs, TrUserData),
                TrUserData
            ),
            Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_response_v1_pb(
        RestF,
        0,
        0,
        F@_1,
        if
            Prev ==
                undefined ->
                NewFValue;
            true ->
                merge_msg_packet_pb(
                    Prev,
                    NewFValue,
                    TrUserData
                )
        end,
        TrUserData
    ).

skip_varint_blockchain_state_channel_response_v1_pb(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    skip_varint_blockchain_state_channel_response_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    );
skip_varint_blockchain_state_channel_response_v1_pb(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_response_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_length_delimited_blockchain_state_channel_response_v1_pb(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    skip_length_delimited_blockchain_state_channel_response_v1_pb(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
skip_length_delimited_blockchain_state_channel_response_v1_pb(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_blockchain_state_channel_response_v1_pb(
        Rest2,
        0,
        0,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_group_blockchain_state_channel_response_v1_pb(
    Bin,
    FNum,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_blockchain_state_channel_response_v1_pb(
        Rest,
        0,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_32_blockchain_state_channel_response_v1_pb(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_response_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_64_blockchain_state_channel_response_v1_pb(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_response_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

decode_msg_blockchain_state_channel_packet_v1_pb(
    Bin,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_packet_v1_pb(
        Bin,
        0,
        0,
        id(
            undefined,
            TrUserData
        ),
        id(
            <<>>,
            TrUserData
        ),
        id(
            <<>>,
            TrUserData
        ),
        id(
            'US915',
            TrUserData
        ),
        id(0, TrUserData),
        TrUserData
    ).

dfp_read_field_def_blockchain_state_channel_packet_v1_pb(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    d_field_blockchain_state_channel_packet_v1_pb_packet(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_packet_v1_pb(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    d_field_blockchain_state_channel_packet_v1_pb_hotspot(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_packet_v1_pb(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    d_field_blockchain_state_channel_packet_v1_pb_signature(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_packet_v1_pb(
    <<32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    d_field_blockchain_state_channel_packet_v1_pb_region(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_packet_v1_pb(
    <<40, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    d_field_blockchain_state_channel_packet_v1_pb_hold_time(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_packet_v1_pb(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    _
) ->
    #blockchain_state_channel_packet_v1_pb{
        packet = F@_1,
        hotspot = F@_2,
        signature = F@_3,
        region = F@_4,
        hold_time = F@_5
    };
dfp_read_field_def_blockchain_state_channel_packet_v1_pb(
    Other,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    dg_read_field_def_blockchain_state_channel_packet_v1_pb(
        Other,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

dg_read_field_def_blockchain_state_channel_packet_v1_pb(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_blockchain_state_channel_packet_v1_pb(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
dg_read_field_def_blockchain_state_channel_packet_v1_pb(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_blockchain_state_channel_packet_v1_pb_packet(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        18 ->
            d_field_blockchain_state_channel_packet_v1_pb_hotspot(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        26 ->
            d_field_blockchain_state_channel_packet_v1_pb_signature(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        32 ->
            d_field_blockchain_state_channel_packet_v1_pb_region(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        40 ->
            d_field_blockchain_state_channel_packet_v1_pb_hold_time(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_blockchain_state_channel_packet_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                1 ->
                    skip_64_blockchain_state_channel_packet_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_blockchain_state_channel_packet_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                3 ->
                    skip_group_blockchain_state_channel_packet_v1_pb(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                5 ->
                    skip_32_blockchain_state_channel_packet_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    )
            end
    end;
dg_read_field_def_blockchain_state_channel_packet_v1_pb(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    _
) ->
    #blockchain_state_channel_packet_v1_pb{
        packet = F@_1,
        hotspot = F@_2,
        signature = F@_3,
        region = F@_4,
        hold_time = F@_5
    }.

d_field_blockchain_state_channel_packet_v1_pb_packet(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_packet_v1_pb_packet(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
d_field_blockchain_state_channel_packet_v1_pb_packet(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    Prev,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id(
                decode_msg_packet_pb(Bs, TrUserData),
                TrUserData
            ),
            Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_packet_v1_pb(
        RestF,
        0,
        0,
        if
            Prev ==
                undefined ->
                NewFValue;
            true ->
                merge_msg_packet_pb(
                    Prev,
                    NewFValue,
                    TrUserData
                )
        end,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

d_field_blockchain_state_channel_packet_v1_pb_hotspot(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_packet_v1_pb_hotspot(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
d_field_blockchain_state_channel_packet_v1_pb_hotspot(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    _,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_packet_v1_pb(
        RestF,
        0,
        0,
        F@_1,
        NewFValue,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

d_field_blockchain_state_channel_packet_v1_pb_signature(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_packet_v1_pb_signature(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
d_field_blockchain_state_channel_packet_v1_pb_signature(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    _,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_packet_v1_pb(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        NewFValue,
        F@_4,
        F@_5,
        TrUserData
    ).

d_field_blockchain_state_channel_packet_v1_pb_region(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_packet_v1_pb_region(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
d_field_blockchain_state_channel_packet_v1_pb_region(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    _,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} =
        {id(
                'd_enum_helium.region'(begin
                    <<Res:32/signed-native>> =
                        <<(X bsl N +
                                Acc):32/unsigned-native>>,
                    id(Res, TrUserData)
                end),
                TrUserData
            ),
            Rest},
    dfp_read_field_def_blockchain_state_channel_packet_v1_pb(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        NewFValue,
        F@_5,
        TrUserData
    ).

d_field_blockchain_state_channel_packet_v1_pb_hold_time(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_packet_v1_pb_hold_time(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
d_field_blockchain_state_channel_packet_v1_pb_hold_time(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_blockchain_state_channel_packet_v1_pb(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        NewFValue,
        TrUserData
    ).

skip_varint_blockchain_state_channel_packet_v1_pb(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    skip_varint_blockchain_state_channel_packet_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
skip_varint_blockchain_state_channel_packet_v1_pb(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_packet_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

skip_length_delimited_blockchain_state_channel_packet_v1_pb(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    skip_length_delimited_blockchain_state_channel_packet_v1_pb(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
skip_length_delimited_blockchain_state_channel_packet_v1_pb(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_blockchain_state_channel_packet_v1_pb(
        Rest2,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

skip_group_blockchain_state_channel_packet_v1_pb(
    Bin,
    FNum,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_blockchain_state_channel_packet_v1_pb(
        Rest,
        0,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

skip_32_blockchain_state_channel_packet_v1_pb(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_packet_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

skip_64_blockchain_state_channel_packet_v1_pb(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_packet_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

decode_msg_blockchain_state_channel_offer_v1_pb(
    Bin,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_offer_v1_pb(
        Bin,
        0,
        0,
        id(
            undefined,
            TrUserData
        ),
        id(
            <<>>,
            TrUserData
        ),
        id(0, TrUserData),
        id(0, TrUserData),
        id(
            <<>>,
            TrUserData
        ),
        id(
            <<>>,
            TrUserData
        ),
        id(
            'US915',
            TrUserData
        ),
        id(
            false,
            TrUserData
        ),
        TrUserData
    ).

dfp_read_field_def_blockchain_state_channel_offer_v1_pb(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    d_field_blockchain_state_channel_offer_v1_pb_routing(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_offer_v1_pb(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    d_field_blockchain_state_channel_offer_v1_pb_packet_hash(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_offer_v1_pb(
    <<24, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    d_field_blockchain_state_channel_offer_v1_pb_payload_size(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_offer_v1_pb(
    <<32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    d_field_blockchain_state_channel_offer_v1_pb_fcnt(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_offer_v1_pb(
    <<42, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    d_field_blockchain_state_channel_offer_v1_pb_hotspot(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_offer_v1_pb(
    <<50, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    d_field_blockchain_state_channel_offer_v1_pb_signature(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_offer_v1_pb(
    <<56, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    d_field_blockchain_state_channel_offer_v1_pb_region(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_offer_v1_pb(
    <<64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    d_field_blockchain_state_channel_offer_v1_pb_req_diff(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_offer_v1_pb(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    _
) ->
    #blockchain_state_channel_offer_v1_pb{
        routing = F@_1,
        packet_hash = F@_2,
        payload_size = F@_3,
        fcnt = F@_4,
        hotspot = F@_5,
        signature = F@_6,
        region = F@_7,
        req_diff = F@_8
    };
dfp_read_field_def_blockchain_state_channel_offer_v1_pb(
    Other,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    dg_read_field_def_blockchain_state_channel_offer_v1_pb(
        Other,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    ).

dg_read_field_def_blockchain_state_channel_offer_v1_pb(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_blockchain_state_channel_offer_v1_pb(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
dg_read_field_def_blockchain_state_channel_offer_v1_pb(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_blockchain_state_channel_offer_v1_pb_routing(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                TrUserData
            );
        18 ->
            d_field_blockchain_state_channel_offer_v1_pb_packet_hash(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                TrUserData
            );
        24 ->
            d_field_blockchain_state_channel_offer_v1_pb_payload_size(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                TrUserData
            );
        32 ->
            d_field_blockchain_state_channel_offer_v1_pb_fcnt(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                TrUserData
            );
        42 ->
            d_field_blockchain_state_channel_offer_v1_pb_hotspot(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                TrUserData
            );
        50 ->
            d_field_blockchain_state_channel_offer_v1_pb_signature(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                TrUserData
            );
        56 ->
            d_field_blockchain_state_channel_offer_v1_pb_region(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                TrUserData
            );
        64 ->
            d_field_blockchain_state_channel_offer_v1_pb_req_diff(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_blockchain_state_channel_offer_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        TrUserData
                    );
                1 ->
                    skip_64_blockchain_state_channel_offer_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_blockchain_state_channel_offer_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        TrUserData
                    );
                3 ->
                    skip_group_blockchain_state_channel_offer_v1_pb(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        TrUserData
                    );
                5 ->
                    skip_32_blockchain_state_channel_offer_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        TrUserData
                    )
            end
    end;
dg_read_field_def_blockchain_state_channel_offer_v1_pb(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    _
) ->
    #blockchain_state_channel_offer_v1_pb{
        routing = F@_1,
        packet_hash = F@_2,
        payload_size = F@_3,
        fcnt = F@_4,
        hotspot = F@_5,
        signature = F@_6,
        region = F@_7,
        req_diff = F@_8
    }.

d_field_blockchain_state_channel_offer_v1_pb_routing(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_offer_v1_pb_routing(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
d_field_blockchain_state_channel_offer_v1_pb_routing(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    Prev,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id(
                decode_msg_routing_information_pb(
                    Bs,
                    TrUserData
                ),
                TrUserData
            ),
            Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_offer_v1_pb(
        RestF,
        0,
        0,
        if
            Prev ==
                undefined ->
                NewFValue;
            true ->
                merge_msg_routing_information_pb(
                    Prev,
                    NewFValue,
                    TrUserData
                )
        end,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    ).

d_field_blockchain_state_channel_offer_v1_pb_packet_hash(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_offer_v1_pb_packet_hash(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
d_field_blockchain_state_channel_offer_v1_pb_packet_hash(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    _,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_offer_v1_pb(
        RestF,
        0,
        0,
        F@_1,
        NewFValue,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    ).

d_field_blockchain_state_channel_offer_v1_pb_payload_size(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_offer_v1_pb_payload_size(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
d_field_blockchain_state_channel_offer_v1_pb_payload_size(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    _,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_blockchain_state_channel_offer_v1_pb(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        NewFValue,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    ).

d_field_blockchain_state_channel_offer_v1_pb_fcnt(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_offer_v1_pb_fcnt(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
d_field_blockchain_state_channel_offer_v1_pb_fcnt(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    _,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_blockchain_state_channel_offer_v1_pb(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        NewFValue,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    ).

d_field_blockchain_state_channel_offer_v1_pb_hotspot(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_offer_v1_pb_hotspot(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
d_field_blockchain_state_channel_offer_v1_pb_hotspot(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_offer_v1_pb(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        NewFValue,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    ).

d_field_blockchain_state_channel_offer_v1_pb_signature(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_offer_v1_pb_signature(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
d_field_blockchain_state_channel_offer_v1_pb_signature(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    _,
    F@_7,
    F@_8,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_offer_v1_pb(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        NewFValue,
        F@_7,
        F@_8,
        TrUserData
    ).

d_field_blockchain_state_channel_offer_v1_pb_region(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_offer_v1_pb_region(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
d_field_blockchain_state_channel_offer_v1_pb_region(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    _,
    F@_8,
    TrUserData
) ->
    {NewFValue, RestF} =
        {id(
                'd_enum_helium.region'(begin
                    <<Res:32/signed-native>> =
                        <<(X bsl N +
                                Acc):32/unsigned-native>>,
                    id(Res, TrUserData)
                end),
                TrUserData
            ),
            Rest},
    dfp_read_field_def_blockchain_state_channel_offer_v1_pb(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        NewFValue,
        F@_8,
        TrUserData
    ).

d_field_blockchain_state_channel_offer_v1_pb_req_diff(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_offer_v1_pb_req_diff(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
d_field_blockchain_state_channel_offer_v1_pb_req_diff(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    _,
    TrUserData
) ->
    {NewFValue, RestF} =
        {id(
                X bsl N + Acc =/= 0,
                TrUserData
            ),
            Rest},
    dfp_read_field_def_blockchain_state_channel_offer_v1_pb(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        NewFValue,
        TrUserData
    ).

skip_varint_blockchain_state_channel_offer_v1_pb(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    skip_varint_blockchain_state_channel_offer_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
skip_varint_blockchain_state_channel_offer_v1_pb(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_offer_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    ).

skip_length_delimited_blockchain_state_channel_offer_v1_pb(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) when N < 57 ->
    skip_length_delimited_blockchain_state_channel_offer_v1_pb(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
skip_length_delimited_blockchain_state_channel_offer_v1_pb(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_blockchain_state_channel_offer_v1_pb(
        Rest2,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    ).

skip_group_blockchain_state_channel_offer_v1_pb(
    Bin,
    FNum,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_blockchain_state_channel_offer_v1_pb(
        Rest,
        0,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    ).

skip_32_blockchain_state_channel_offer_v1_pb(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_offer_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    ).

skip_64_blockchain_state_channel_offer_v1_pb(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_offer_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    ).

decode_msg_blockchain_state_channel_purchase_v1_pb(
    Bin,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_purchase_v1_pb(
        Bin,
        0,
        0,
        id(
            undefined,
            TrUserData
        ),
        id(
            <<>>,
            TrUserData
        ),
        id(
            <<>>,
            TrUserData
        ),
        id(
            'US915',
            TrUserData
        ),
        id(
            undefined,
            TrUserData
        ),
        TrUserData
    ).

dfp_read_field_def_blockchain_state_channel_purchase_v1_pb(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    d_field_blockchain_state_channel_purchase_v1_pb_sc(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_purchase_v1_pb(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    d_field_blockchain_state_channel_purchase_v1_pb_hotspot(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_purchase_v1_pb(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    d_field_blockchain_state_channel_purchase_v1_pb_packet_hash(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_purchase_v1_pb(
    <<32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    d_field_blockchain_state_channel_purchase_v1_pb_region(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_purchase_v1_pb(
    <<42, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    d_field_blockchain_state_channel_purchase_v1_pb_sc_diff(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_purchase_v1_pb(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    _
) ->
    #blockchain_state_channel_purchase_v1_pb{
        sc = F@_1,
        hotspot = F@_2,
        packet_hash = F@_3,
        region = F@_4,
        sc_diff = F@_5
    };
dfp_read_field_def_blockchain_state_channel_purchase_v1_pb(
    Other,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    dg_read_field_def_blockchain_state_channel_purchase_v1_pb(
        Other,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

dg_read_field_def_blockchain_state_channel_purchase_v1_pb(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_blockchain_state_channel_purchase_v1_pb(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
dg_read_field_def_blockchain_state_channel_purchase_v1_pb(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_blockchain_state_channel_purchase_v1_pb_sc(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        18 ->
            d_field_blockchain_state_channel_purchase_v1_pb_hotspot(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        26 ->
            d_field_blockchain_state_channel_purchase_v1_pb_packet_hash(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        32 ->
            d_field_blockchain_state_channel_purchase_v1_pb_region(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        42 ->
            d_field_blockchain_state_channel_purchase_v1_pb_sc_diff(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_blockchain_state_channel_purchase_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                1 ->
                    skip_64_blockchain_state_channel_purchase_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_blockchain_state_channel_purchase_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                3 ->
                    skip_group_blockchain_state_channel_purchase_v1_pb(
                        Rest,
                        Key bsr
                            3,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                5 ->
                    skip_32_blockchain_state_channel_purchase_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    )
            end
    end;
dg_read_field_def_blockchain_state_channel_purchase_v1_pb(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    _
) ->
    #blockchain_state_channel_purchase_v1_pb{
        sc = F@_1,
        hotspot = F@_2,
        packet_hash = F@_3,
        region = F@_4,
        sc_diff = F@_5
    }.

d_field_blockchain_state_channel_purchase_v1_pb_sc(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_purchase_v1_pb_sc(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
d_field_blockchain_state_channel_purchase_v1_pb_sc(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    Prev,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id(
                decode_msg_blockchain_state_channel_v1_pb(
                    Bs,
                    TrUserData
                ),
                TrUserData
            ),
            Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_purchase_v1_pb(
        RestF,
        0,
        0,
        if
            Prev ==
                undefined ->
                NewFValue;
            true ->
                merge_msg_blockchain_state_channel_v1_pb(
                    Prev,
                    NewFValue,
                    TrUserData
                )
        end,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

d_field_blockchain_state_channel_purchase_v1_pb_hotspot(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_purchase_v1_pb_hotspot(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
d_field_blockchain_state_channel_purchase_v1_pb_hotspot(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    _,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_purchase_v1_pb(
        RestF,
        0,
        0,
        F@_1,
        NewFValue,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

d_field_blockchain_state_channel_purchase_v1_pb_packet_hash(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_purchase_v1_pb_packet_hash(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
d_field_blockchain_state_channel_purchase_v1_pb_packet_hash(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    _,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_purchase_v1_pb(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        NewFValue,
        F@_4,
        F@_5,
        TrUserData
    ).

d_field_blockchain_state_channel_purchase_v1_pb_region(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_purchase_v1_pb_region(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
d_field_blockchain_state_channel_purchase_v1_pb_region(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    _,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} =
        {id(
                'd_enum_helium.region'(begin
                    <<Res:32/signed-native>> =
                        <<(X bsl N +
                                Acc):32/unsigned-native>>,
                    id(Res, TrUserData)
                end),
                TrUserData
            ),
            Rest},
    dfp_read_field_def_blockchain_state_channel_purchase_v1_pb(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        NewFValue,
        F@_5,
        TrUserData
    ).

d_field_blockchain_state_channel_purchase_v1_pb_sc_diff(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_purchase_v1_pb_sc_diff(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
d_field_blockchain_state_channel_purchase_v1_pb_sc_diff(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id(
                decode_msg_blockchain_state_channel_diff_v1_pb(
                    Bs,
                    TrUserData
                ),
                TrUserData
            ),
            Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_purchase_v1_pb(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        if
            Prev ==
                undefined ->
                NewFValue;
            true ->
                merge_msg_blockchain_state_channel_diff_v1_pb(
                    Prev,
                    NewFValue,
                    TrUserData
                )
        end,
        TrUserData
    ).

skip_varint_blockchain_state_channel_purchase_v1_pb(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    skip_varint_blockchain_state_channel_purchase_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
skip_varint_blockchain_state_channel_purchase_v1_pb(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_purchase_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

skip_length_delimited_blockchain_state_channel_purchase_v1_pb(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    skip_length_delimited_blockchain_state_channel_purchase_v1_pb(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
skip_length_delimited_blockchain_state_channel_purchase_v1_pb(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_blockchain_state_channel_purchase_v1_pb(
        Rest2,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

skip_group_blockchain_state_channel_purchase_v1_pb(
    Bin,
    FNum,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_blockchain_state_channel_purchase_v1_pb(
        Rest,
        0,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

skip_32_blockchain_state_channel_purchase_v1_pb(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_purchase_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

skip_64_blockchain_state_channel_purchase_v1_pb(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_purchase_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

decode_msg_blockchain_state_channel_diff_v1_pb(
    Bin,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_diff_v1_pb(
        Bin,
        0,
        0,
        id(<<>>, TrUserData),
        id(0, TrUserData),
        id(<<>>, TrUserData),
        id([], TrUserData),
        TrUserData
    ).

dfp_read_field_def_blockchain_state_channel_diff_v1_pb(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    d_field_blockchain_state_channel_diff_v1_pb_id(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_diff_v1_pb(
    <<16, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    d_field_blockchain_state_channel_diff_v1_pb_add_nonce(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_diff_v1_pb(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    d_field_blockchain_state_channel_diff_v1_pb_signature(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_diff_v1_pb(
    <<34, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    d_field_blockchain_state_channel_diff_v1_pb_diffs(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_diff_v1_pb(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    F@_3,
    R1,
    TrUserData
) ->
    #blockchain_state_channel_diff_v1_pb{
        id = F@_1,
        add_nonce = F@_2,
        signature = F@_3,
        diffs = lists_reverse(R1, TrUserData)
    };
dfp_read_field_def_blockchain_state_channel_diff_v1_pb(
    Other,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    dg_read_field_def_blockchain_state_channel_diff_v1_pb(
        Other,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

dg_read_field_def_blockchain_state_channel_diff_v1_pb(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_blockchain_state_channel_diff_v1_pb(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
dg_read_field_def_blockchain_state_channel_diff_v1_pb(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_blockchain_state_channel_diff_v1_pb_id(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        16 ->
            d_field_blockchain_state_channel_diff_v1_pb_add_nonce(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        26 ->
            d_field_blockchain_state_channel_diff_v1_pb_signature(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        34 ->
            d_field_blockchain_state_channel_diff_v1_pb_diffs(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_blockchain_state_channel_diff_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                1 ->
                    skip_64_blockchain_state_channel_diff_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_blockchain_state_channel_diff_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                3 ->
                    skip_group_blockchain_state_channel_diff_v1_pb(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                5 ->
                    skip_32_blockchain_state_channel_diff_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    )
            end
    end;
dg_read_field_def_blockchain_state_channel_diff_v1_pb(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    F@_3,
    R1,
    TrUserData
) ->
    #blockchain_state_channel_diff_v1_pb{
        id = F@_1,
        add_nonce = F@_2,
        signature = F@_3,
        diffs = lists_reverse(R1, TrUserData)
    }.

d_field_blockchain_state_channel_diff_v1_pb_id(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_diff_v1_pb_id(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
d_field_blockchain_state_channel_diff_v1_pb_id(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_diff_v1_pb(
        RestF,
        0,
        0,
        NewFValue,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

d_field_blockchain_state_channel_diff_v1_pb_add_nonce(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_diff_v1_pb_add_nonce(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
d_field_blockchain_state_channel_diff_v1_pb_add_nonce(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    _,
    F@_3,
    F@_4,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_blockchain_state_channel_diff_v1_pb(
        RestF,
        0,
        0,
        F@_1,
        NewFValue,
        F@_3,
        F@_4,
        TrUserData
    ).

d_field_blockchain_state_channel_diff_v1_pb_signature(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_diff_v1_pb_signature(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
d_field_blockchain_state_channel_diff_v1_pb_signature(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    _,
    F@_4,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_diff_v1_pb(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        NewFValue,
        F@_4,
        TrUserData
    ).

d_field_blockchain_state_channel_diff_v1_pb_diffs(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_diff_v1_pb_diffs(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
d_field_blockchain_state_channel_diff_v1_pb_diffs(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id(
                decode_msg_blockchain_state_channel_diff_entry_v1_pb(
                    Bs,
                    TrUserData
                ),
                TrUserData
            ),
            Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_diff_v1_pb(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        cons(
            NewFValue,
            Prev,
            TrUserData
        ),
        TrUserData
    ).

skip_varint_blockchain_state_channel_diff_v1_pb(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    skip_varint_blockchain_state_channel_diff_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
skip_varint_blockchain_state_channel_diff_v1_pb(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_diff_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

skip_length_delimited_blockchain_state_channel_diff_v1_pb(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    skip_length_delimited_blockchain_state_channel_diff_v1_pb(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
skip_length_delimited_blockchain_state_channel_diff_v1_pb(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_blockchain_state_channel_diff_v1_pb(
        Rest2,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

skip_group_blockchain_state_channel_diff_v1_pb(
    Bin,
    FNum,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_blockchain_state_channel_diff_v1_pb(
        Rest,
        0,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

skip_32_blockchain_state_channel_diff_v1_pb(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_diff_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

skip_64_blockchain_state_channel_diff_v1_pb(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_diff_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

decode_msg_blockchain_state_channel_diff_entry_v1_pb(
    Bin,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_diff_entry_v1_pb(
        Bin,
        0,
        0,
        id(
            undefined,
            TrUserData
        ),
        TrUserData
    ).

dfp_read_field_def_blockchain_state_channel_diff_entry_v1_pb(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    d_field_blockchain_state_channel_diff_entry_v1_pb_append(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_diff_entry_v1_pb(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    d_field_blockchain_state_channel_diff_entry_v1_pb_add(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_diff_entry_v1_pb(
    <<>>,
    0,
    0,
    F@_1,
    _
) ->
    #blockchain_state_channel_diff_entry_v1_pb{
        entry =
            F@_1
    };
dfp_read_field_def_blockchain_state_channel_diff_entry_v1_pb(
    Other,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    dg_read_field_def_blockchain_state_channel_diff_entry_v1_pb(
        Other,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

dg_read_field_def_blockchain_state_channel_diff_entry_v1_pb(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_blockchain_state_channel_diff_entry_v1_pb(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
dg_read_field_def_blockchain_state_channel_diff_entry_v1_pb(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_blockchain_state_channel_diff_entry_v1_pb_append(
                Rest,
                0,
                0,
                F@_1,
                TrUserData
            );
        18 ->
            d_field_blockchain_state_channel_diff_entry_v1_pb_add(
                Rest,
                0,
                0,
                F@_1,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_blockchain_state_channel_diff_entry_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    skip_64_blockchain_state_channel_diff_entry_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_blockchain_state_channel_diff_entry_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    skip_group_blockchain_state_channel_diff_entry_v1_pb(
                        Rest,
                        Key bsr
                            3,
                        0,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    skip_32_blockchain_state_channel_diff_entry_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        TrUserData
                    )
            end
    end;
dg_read_field_def_blockchain_state_channel_diff_entry_v1_pb(
    <<>>,
    0,
    0,
    F@_1,
    _
) ->
    #blockchain_state_channel_diff_entry_v1_pb{
        entry =
            F@_1
    }.

d_field_blockchain_state_channel_diff_entry_v1_pb_append(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_diff_entry_v1_pb_append(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
d_field_blockchain_state_channel_diff_entry_v1_pb_append(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id(
                decode_msg_blockchain_state_channel_diff_append_summary_v1_pb(
                    Bs,
                    TrUserData
                ),
                TrUserData
            ),
            Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_diff_entry_v1_pb(
        RestF,
        0,
        0,
        case Prev of
            undefined ->
                id(
                    {append, NewFValue},
                    TrUserData
                );
            {append, MVPrev} ->
                id(
                    {append,
                        merge_msg_blockchain_state_channel_diff_append_summary_v1_pb(
                            MVPrev,
                            NewFValue,
                            TrUserData
                        )},
                    TrUserData
                );
            _ ->
                id(
                    {append, NewFValue},
                    TrUserData
                )
        end,
        TrUserData
    ).

d_field_blockchain_state_channel_diff_entry_v1_pb_add(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_diff_entry_v1_pb_add(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
d_field_blockchain_state_channel_diff_entry_v1_pb_add(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id(
                decode_msg_blockchain_state_channel_diff_update_summary_v1_pb(
                    Bs,
                    TrUserData
                ),
                TrUserData
            ),
            Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_diff_entry_v1_pb(
        RestF,
        0,
        0,
        case Prev of
            undefined ->
                id(
                    {add, NewFValue},
                    TrUserData
                );
            {add, MVPrev} ->
                id(
                    {add,
                        merge_msg_blockchain_state_channel_diff_update_summary_v1_pb(
                            MVPrev,
                            NewFValue,
                            TrUserData
                        )},
                    TrUserData
                );
            _ ->
                id(
                    {add, NewFValue},
                    TrUserData
                )
        end,
        TrUserData
    ).

skip_varint_blockchain_state_channel_diff_entry_v1_pb(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    skip_varint_blockchain_state_channel_diff_entry_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    );
skip_varint_blockchain_state_channel_diff_entry_v1_pb(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_diff_entry_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

skip_length_delimited_blockchain_state_channel_diff_entry_v1_pb(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 57 ->
    skip_length_delimited_blockchain_state_channel_diff_entry_v1_pb(
        Rest,
        N + 7,
        X bsl N +
            Acc,
        F@_1,
        TrUserData
    );
skip_length_delimited_blockchain_state_channel_diff_entry_v1_pb(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_blockchain_state_channel_diff_entry_v1_pb(
        Rest2,
        0,
        0,
        F@_1,
        TrUserData
    ).

skip_group_blockchain_state_channel_diff_entry_v1_pb(
    Bin,
    FNum,
    Z2,
    F@_1,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_blockchain_state_channel_diff_entry_v1_pb(
        Rest,
        0,
        Z2,
        F@_1,
        TrUserData
    ).

skip_32_blockchain_state_channel_diff_entry_v1_pb(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_diff_entry_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

skip_64_blockchain_state_channel_diff_entry_v1_pb(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_diff_entry_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

decode_msg_blockchain_state_channel_diff_append_summary_v1_pb(
    Bin,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_diff_append_summary_v1_pb(
        Bin,
        0,
        0,
        id(
            <<>>,
            TrUserData
        ),
        id(
            0,
            TrUserData
        ),
        id(
            0,
            TrUserData
        ),
        TrUserData
    ).

dfp_read_field_def_blockchain_state_channel_diff_append_summary_v1_pb(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    d_field_blockchain_state_channel_diff_append_summary_v1_pb_client_pubkeybin(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_diff_append_summary_v1_pb(
    <<16, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    d_field_blockchain_state_channel_diff_append_summary_v1_pb_num_packets(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_diff_append_summary_v1_pb(
    <<24, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    d_field_blockchain_state_channel_diff_append_summary_v1_pb_num_dcs(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_diff_append_summary_v1_pb(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    F@_3,
    _
) ->
    #blockchain_state_channel_diff_append_summary_v1_pb{
        client_pubkeybin =
            F@_1,
        num_packets = F@_2,
        num_dcs = F@_3
    };
dfp_read_field_def_blockchain_state_channel_diff_append_summary_v1_pb(
    Other,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    dg_read_field_def_blockchain_state_channel_diff_append_summary_v1_pb(
        Other,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

dg_read_field_def_blockchain_state_channel_diff_append_summary_v1_pb(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_blockchain_state_channel_diff_append_summary_v1_pb(
        Rest,
        N + 7,
        X bsl N +
            Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
dg_read_field_def_blockchain_state_channel_diff_append_summary_v1_pb(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_blockchain_state_channel_diff_append_summary_v1_pb_client_pubkeybin(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        16 ->
            d_field_blockchain_state_channel_diff_append_summary_v1_pb_num_packets(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        24 ->
            d_field_blockchain_state_channel_diff_append_summary_v1_pb_num_dcs(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_blockchain_state_channel_diff_append_summary_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                1 ->
                    skip_64_blockchain_state_channel_diff_append_summary_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_blockchain_state_channel_diff_append_summary_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                3 ->
                    skip_group_blockchain_state_channel_diff_append_summary_v1_pb(
                        Rest,
                        Key bsr
                            3,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                5 ->
                    skip_32_blockchain_state_channel_diff_append_summary_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    )
            end
    end;
dg_read_field_def_blockchain_state_channel_diff_append_summary_v1_pb(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    F@_3,
    _
) ->
    #blockchain_state_channel_diff_append_summary_v1_pb{
        client_pubkeybin =
            F@_1,
        num_packets = F@_2,
        num_dcs = F@_3
    }.

d_field_blockchain_state_channel_diff_append_summary_v1_pb_client_pubkeybin(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_diff_append_summary_v1_pb_client_pubkeybin(
        Rest,
        N +
            7,
        X bsl
            N +
            Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
d_field_blockchain_state_channel_diff_append_summary_v1_pb_client_pubkeybin(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_2,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_diff_append_summary_v1_pb(
        RestF,
        0,
        0,
        NewFValue,
        F@_2,
        F@_3,
        TrUserData
    ).

d_field_blockchain_state_channel_diff_append_summary_v1_pb_num_packets(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_diff_append_summary_v1_pb_num_packets(
        Rest,
        N +
            7,
        X bsl
            N +
            Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
d_field_blockchain_state_channel_diff_append_summary_v1_pb_num_packets(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    _,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_blockchain_state_channel_diff_append_summary_v1_pb(
        RestF,
        0,
        0,
        F@_1,
        NewFValue,
        F@_3,
        TrUserData
    ).

d_field_blockchain_state_channel_diff_append_summary_v1_pb_num_dcs(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_diff_append_summary_v1_pb_num_dcs(
        Rest,
        N + 7,
        X bsl N +
            Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
d_field_blockchain_state_channel_diff_append_summary_v1_pb_num_dcs(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_blockchain_state_channel_diff_append_summary_v1_pb(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        NewFValue,
        TrUserData
    ).

skip_varint_blockchain_state_channel_diff_append_summary_v1_pb(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    skip_varint_blockchain_state_channel_diff_append_summary_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
skip_varint_blockchain_state_channel_diff_append_summary_v1_pb(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_diff_append_summary_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

skip_length_delimited_blockchain_state_channel_diff_append_summary_v1_pb(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    skip_length_delimited_blockchain_state_channel_diff_append_summary_v1_pb(
        Rest,
        N +
            7,
        X bsl
            N +
            Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
skip_length_delimited_blockchain_state_channel_diff_append_summary_v1_pb(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_blockchain_state_channel_diff_append_summary_v1_pb(
        Rest2,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

skip_group_blockchain_state_channel_diff_append_summary_v1_pb(
    Bin,
    FNum,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_blockchain_state_channel_diff_append_summary_v1_pb(
        Rest,
        0,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

skip_32_blockchain_state_channel_diff_append_summary_v1_pb(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_diff_append_summary_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

skip_64_blockchain_state_channel_diff_append_summary_v1_pb(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_diff_append_summary_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

decode_msg_blockchain_state_channel_diff_update_summary_v1_pb(
    Bin,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_diff_update_summary_v1_pb(
        Bin,
        0,
        0,
        id(
            0,
            TrUserData
        ),
        id(
            0,
            TrUserData
        ),
        id(
            0,
            TrUserData
        ),
        TrUserData
    ).

dfp_read_field_def_blockchain_state_channel_diff_update_summary_v1_pb(
    <<8, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    d_field_blockchain_state_channel_diff_update_summary_v1_pb_client_index(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_diff_update_summary_v1_pb(
    <<16, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    d_field_blockchain_state_channel_diff_update_summary_v1_pb_add_packets(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_diff_update_summary_v1_pb(
    <<24, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    d_field_blockchain_state_channel_diff_update_summary_v1_pb_add_dcs(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_diff_update_summary_v1_pb(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    F@_3,
    _
) ->
    #blockchain_state_channel_diff_update_summary_v1_pb{
        client_index =
            F@_1,
        add_packets = F@_2,
        add_dcs = F@_3
    };
dfp_read_field_def_blockchain_state_channel_diff_update_summary_v1_pb(
    Other,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    dg_read_field_def_blockchain_state_channel_diff_update_summary_v1_pb(
        Other,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

dg_read_field_def_blockchain_state_channel_diff_update_summary_v1_pb(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_blockchain_state_channel_diff_update_summary_v1_pb(
        Rest,
        N + 7,
        X bsl N +
            Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
dg_read_field_def_blockchain_state_channel_diff_update_summary_v1_pb(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_blockchain_state_channel_diff_update_summary_v1_pb_client_index(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        16 ->
            d_field_blockchain_state_channel_diff_update_summary_v1_pb_add_packets(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        24 ->
            d_field_blockchain_state_channel_diff_update_summary_v1_pb_add_dcs(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_blockchain_state_channel_diff_update_summary_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                1 ->
                    skip_64_blockchain_state_channel_diff_update_summary_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_blockchain_state_channel_diff_update_summary_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                3 ->
                    skip_group_blockchain_state_channel_diff_update_summary_v1_pb(
                        Rest,
                        Key bsr
                            3,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                5 ->
                    skip_32_blockchain_state_channel_diff_update_summary_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    )
            end
    end;
dg_read_field_def_blockchain_state_channel_diff_update_summary_v1_pb(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    F@_3,
    _
) ->
    #blockchain_state_channel_diff_update_summary_v1_pb{
        client_index =
            F@_1,
        add_packets = F@_2,
        add_dcs = F@_3
    }.

d_field_blockchain_state_channel_diff_update_summary_v1_pb_client_index(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_diff_update_summary_v1_pb_client_index(
        Rest,
        N +
            7,
        X bsl
            N +
            Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
d_field_blockchain_state_channel_diff_update_summary_v1_pb_client_index(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_2,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_blockchain_state_channel_diff_update_summary_v1_pb(
        RestF,
        0,
        0,
        NewFValue,
        F@_2,
        F@_3,
        TrUserData
    ).

d_field_blockchain_state_channel_diff_update_summary_v1_pb_add_packets(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_diff_update_summary_v1_pb_add_packets(
        Rest,
        N +
            7,
        X bsl
            N +
            Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
d_field_blockchain_state_channel_diff_update_summary_v1_pb_add_packets(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    _,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_blockchain_state_channel_diff_update_summary_v1_pb(
        RestF,
        0,
        0,
        F@_1,
        NewFValue,
        F@_3,
        TrUserData
    ).

d_field_blockchain_state_channel_diff_update_summary_v1_pb_add_dcs(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_diff_update_summary_v1_pb_add_dcs(
        Rest,
        N + 7,
        X bsl N +
            Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
d_field_blockchain_state_channel_diff_update_summary_v1_pb_add_dcs(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_blockchain_state_channel_diff_update_summary_v1_pb(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        NewFValue,
        TrUserData
    ).

skip_varint_blockchain_state_channel_diff_update_summary_v1_pb(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    skip_varint_blockchain_state_channel_diff_update_summary_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
skip_varint_blockchain_state_channel_diff_update_summary_v1_pb(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_diff_update_summary_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

skip_length_delimited_blockchain_state_channel_diff_update_summary_v1_pb(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    skip_length_delimited_blockchain_state_channel_diff_update_summary_v1_pb(
        Rest,
        N +
            7,
        X bsl
            N +
            Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
skip_length_delimited_blockchain_state_channel_diff_update_summary_v1_pb(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_blockchain_state_channel_diff_update_summary_v1_pb(
        Rest2,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

skip_group_blockchain_state_channel_diff_update_summary_v1_pb(
    Bin,
    FNum,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_blockchain_state_channel_diff_update_summary_v1_pb(
        Rest,
        0,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

skip_32_blockchain_state_channel_diff_update_summary_v1_pb(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_diff_update_summary_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

skip_64_blockchain_state_channel_diff_update_summary_v1_pb(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_diff_update_summary_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

decode_msg_blockchain_state_channel_banner_v1_pb(
    Bin,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_banner_v1_pb(
        Bin,
        0,
        0,
        id(
            undefined,
            TrUserData
        ),
        TrUserData
    ).

dfp_read_field_def_blockchain_state_channel_banner_v1_pb(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    d_field_blockchain_state_channel_banner_v1_pb_sc(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_banner_v1_pb(
    <<>>,
    0,
    0,
    F@_1,
    _
) ->
    #blockchain_state_channel_banner_v1_pb{sc = F@_1};
dfp_read_field_def_blockchain_state_channel_banner_v1_pb(
    Other,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    dg_read_field_def_blockchain_state_channel_banner_v1_pb(
        Other,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

dg_read_field_def_blockchain_state_channel_banner_v1_pb(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_blockchain_state_channel_banner_v1_pb(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
dg_read_field_def_blockchain_state_channel_banner_v1_pb(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_blockchain_state_channel_banner_v1_pb_sc(
                Rest,
                0,
                0,
                F@_1,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_blockchain_state_channel_banner_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    skip_64_blockchain_state_channel_banner_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_blockchain_state_channel_banner_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    skip_group_blockchain_state_channel_banner_v1_pb(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    skip_32_blockchain_state_channel_banner_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        TrUserData
                    )
            end
    end;
dg_read_field_def_blockchain_state_channel_banner_v1_pb(
    <<>>,
    0,
    0,
    F@_1,
    _
) ->
    #blockchain_state_channel_banner_v1_pb{sc = F@_1}.

d_field_blockchain_state_channel_banner_v1_pb_sc(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_banner_v1_pb_sc(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
d_field_blockchain_state_channel_banner_v1_pb_sc(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id(
                decode_msg_blockchain_state_channel_v1_pb(
                    Bs,
                    TrUserData
                ),
                TrUserData
            ),
            Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_banner_v1_pb(
        RestF,
        0,
        0,
        if
            Prev ==
                undefined ->
                NewFValue;
            true ->
                merge_msg_blockchain_state_channel_v1_pb(
                    Prev,
                    NewFValue,
                    TrUserData
                )
        end,
        TrUserData
    ).

skip_varint_blockchain_state_channel_banner_v1_pb(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    skip_varint_blockchain_state_channel_banner_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    );
skip_varint_blockchain_state_channel_banner_v1_pb(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_banner_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

skip_length_delimited_blockchain_state_channel_banner_v1_pb(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 57 ->
    skip_length_delimited_blockchain_state_channel_banner_v1_pb(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
skip_length_delimited_blockchain_state_channel_banner_v1_pb(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_blockchain_state_channel_banner_v1_pb(
        Rest2,
        0,
        0,
        F@_1,
        TrUserData
    ).

skip_group_blockchain_state_channel_banner_v1_pb(
    Bin,
    FNum,
    Z2,
    F@_1,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_blockchain_state_channel_banner_v1_pb(
        Rest,
        0,
        Z2,
        F@_1,
        TrUserData
    ).

skip_32_blockchain_state_channel_banner_v1_pb(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_banner_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

skip_64_blockchain_state_channel_banner_v1_pb(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_banner_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

decode_msg_blockchain_state_channel_rejection_v1_pb(
    Bin,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_rejection_v1_pb(
        Bin,
        0,
        0,
        id(
            0,
            TrUserData
        ),
        id(
            <<>>,
            TrUserData
        ),
        TrUserData
    ).

dfp_read_field_def_blockchain_state_channel_rejection_v1_pb(
    <<8, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    d_field_blockchain_state_channel_rejection_v1_pb_reject(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_rejection_v1_pb(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    d_field_blockchain_state_channel_rejection_v1_pb_packet_hash(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_rejection_v1_pb(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    _
) ->
    #blockchain_state_channel_rejection_v1_pb{
        reject = F@_1,
        packet_hash = F@_2
    };
dfp_read_field_def_blockchain_state_channel_rejection_v1_pb(
    Other,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dg_read_field_def_blockchain_state_channel_rejection_v1_pb(
        Other,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

dg_read_field_def_blockchain_state_channel_rejection_v1_pb(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_blockchain_state_channel_rejection_v1_pb(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
dg_read_field_def_blockchain_state_channel_rejection_v1_pb(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_blockchain_state_channel_rejection_v1_pb_reject(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                TrUserData
            );
        18 ->
            d_field_blockchain_state_channel_rejection_v1_pb_packet_hash(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_blockchain_state_channel_rejection_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                1 ->
                    skip_64_blockchain_state_channel_rejection_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_blockchain_state_channel_rejection_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                3 ->
                    skip_group_blockchain_state_channel_rejection_v1_pb(
                        Rest,
                        Key bsr
                            3,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                5 ->
                    skip_32_blockchain_state_channel_rejection_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    )
            end
    end;
dg_read_field_def_blockchain_state_channel_rejection_v1_pb(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    _
) ->
    #blockchain_state_channel_rejection_v1_pb{
        reject = F@_1,
        packet_hash = F@_2
    }.

d_field_blockchain_state_channel_rejection_v1_pb_reject(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_rejection_v1_pb_reject(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
d_field_blockchain_state_channel_rejection_v1_pb_reject(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_2,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_blockchain_state_channel_rejection_v1_pb(
        RestF,
        0,
        0,
        NewFValue,
        F@_2,
        TrUserData
    ).

d_field_blockchain_state_channel_rejection_v1_pb_packet_hash(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_rejection_v1_pb_packet_hash(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
d_field_blockchain_state_channel_rejection_v1_pb_packet_hash(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_rejection_v1_pb(
        RestF,
        0,
        0,
        F@_1,
        NewFValue,
        TrUserData
    ).

skip_varint_blockchain_state_channel_rejection_v1_pb(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    skip_varint_blockchain_state_channel_rejection_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    );
skip_varint_blockchain_state_channel_rejection_v1_pb(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_rejection_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_length_delimited_blockchain_state_channel_rejection_v1_pb(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    skip_length_delimited_blockchain_state_channel_rejection_v1_pb(
        Rest,
        N + 7,
        X bsl N +
            Acc,
        F@_1,
        F@_2,
        TrUserData
    );
skip_length_delimited_blockchain_state_channel_rejection_v1_pb(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_blockchain_state_channel_rejection_v1_pb(
        Rest2,
        0,
        0,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_group_blockchain_state_channel_rejection_v1_pb(
    Bin,
    FNum,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_blockchain_state_channel_rejection_v1_pb(
        Rest,
        0,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_32_blockchain_state_channel_rejection_v1_pb(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_rejection_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_64_blockchain_state_channel_rejection_v1_pb(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_rejection_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

decode_msg_blockchain_state_channel_message_v1_pb(
    Bin,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_message_v1_pb(
        Bin,
        0,
        0,
        id(
            undefined,
            TrUserData
        ),
        TrUserData
    ).

dfp_read_field_def_blockchain_state_channel_message_v1_pb(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    d_field_blockchain_state_channel_message_v1_pb_response(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_message_v1_pb(
    <<34, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    d_field_blockchain_state_channel_message_v1_pb_packet(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_message_v1_pb(
    <<42, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    d_field_blockchain_state_channel_message_v1_pb_offer(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_message_v1_pb(
    <<50, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    d_field_blockchain_state_channel_message_v1_pb_purchase(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_message_v1_pb(
    <<58, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    d_field_blockchain_state_channel_message_v1_pb_banner(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_message_v1_pb(
    <<66, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    d_field_blockchain_state_channel_message_v1_pb_reject(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_message_v1_pb(
    <<>>,
    0,
    0,
    F@_1,
    _
) ->
    #blockchain_state_channel_message_v1_pb{msg = F@_1};
dfp_read_field_def_blockchain_state_channel_message_v1_pb(
    Other,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    dg_read_field_def_blockchain_state_channel_message_v1_pb(
        Other,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

dg_read_field_def_blockchain_state_channel_message_v1_pb(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_blockchain_state_channel_message_v1_pb(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
dg_read_field_def_blockchain_state_channel_message_v1_pb(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        18 ->
            d_field_blockchain_state_channel_message_v1_pb_response(
                Rest,
                0,
                0,
                F@_1,
                TrUserData
            );
        34 ->
            d_field_blockchain_state_channel_message_v1_pb_packet(
                Rest,
                0,
                0,
                F@_1,
                TrUserData
            );
        42 ->
            d_field_blockchain_state_channel_message_v1_pb_offer(
                Rest,
                0,
                0,
                F@_1,
                TrUserData
            );
        50 ->
            d_field_blockchain_state_channel_message_v1_pb_purchase(
                Rest,
                0,
                0,
                F@_1,
                TrUserData
            );
        58 ->
            d_field_blockchain_state_channel_message_v1_pb_banner(
                Rest,
                0,
                0,
                F@_1,
                TrUserData
            );
        66 ->
            d_field_blockchain_state_channel_message_v1_pb_reject(
                Rest,
                0,
                0,
                F@_1,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_blockchain_state_channel_message_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    skip_64_blockchain_state_channel_message_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_blockchain_state_channel_message_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    skip_group_blockchain_state_channel_message_v1_pb(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    skip_32_blockchain_state_channel_message_v1_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        TrUserData
                    )
            end
    end;
dg_read_field_def_blockchain_state_channel_message_v1_pb(
    <<>>,
    0,
    0,
    F@_1,
    _
) ->
    #blockchain_state_channel_message_v1_pb{msg = F@_1}.

d_field_blockchain_state_channel_message_v1_pb_response(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_message_v1_pb_response(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
d_field_blockchain_state_channel_message_v1_pb_response(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id(
                decode_msg_blockchain_state_channel_response_v1_pb(
                    Bs,
                    TrUserData
                ),
                TrUserData
            ),
            Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_message_v1_pb(
        RestF,
        0,
        0,
        case Prev of
            undefined ->
                id(
                    {response, NewFValue},
                    TrUserData
                );
            {response, MVPrev} ->
                id(
                    {response,
                        merge_msg_blockchain_state_channel_response_v1_pb(
                            MVPrev,
                            NewFValue,
                            TrUserData
                        )},
                    TrUserData
                );
            _ ->
                id(
                    {response, NewFValue},
                    TrUserData
                )
        end,
        TrUserData
    ).

d_field_blockchain_state_channel_message_v1_pb_packet(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_message_v1_pb_packet(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
d_field_blockchain_state_channel_message_v1_pb_packet(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id(
                decode_msg_blockchain_state_channel_packet_v1_pb(
                    Bs,
                    TrUserData
                ),
                TrUserData
            ),
            Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_message_v1_pb(
        RestF,
        0,
        0,
        case Prev of
            undefined ->
                id(
                    {packet, NewFValue},
                    TrUserData
                );
            {packet, MVPrev} ->
                id(
                    {packet,
                        merge_msg_blockchain_state_channel_packet_v1_pb(
                            MVPrev,
                            NewFValue,
                            TrUserData
                        )},
                    TrUserData
                );
            _ ->
                id(
                    {packet, NewFValue},
                    TrUserData
                )
        end,
        TrUserData
    ).

d_field_blockchain_state_channel_message_v1_pb_offer(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_message_v1_pb_offer(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
d_field_blockchain_state_channel_message_v1_pb_offer(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id(
                decode_msg_blockchain_state_channel_offer_v1_pb(
                    Bs,
                    TrUserData
                ),
                TrUserData
            ),
            Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_message_v1_pb(
        RestF,
        0,
        0,
        case Prev of
            undefined ->
                id(
                    {offer, NewFValue},
                    TrUserData
                );
            {offer, MVPrev} ->
                id(
                    {offer,
                        merge_msg_blockchain_state_channel_offer_v1_pb(
                            MVPrev,
                            NewFValue,
                            TrUserData
                        )},
                    TrUserData
                );
            _ ->
                id(
                    {offer, NewFValue},
                    TrUserData
                )
        end,
        TrUserData
    ).

d_field_blockchain_state_channel_message_v1_pb_purchase(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_message_v1_pb_purchase(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
d_field_blockchain_state_channel_message_v1_pb_purchase(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id(
                decode_msg_blockchain_state_channel_purchase_v1_pb(
                    Bs,
                    TrUserData
                ),
                TrUserData
            ),
            Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_message_v1_pb(
        RestF,
        0,
        0,
        case Prev of
            undefined ->
                id(
                    {purchase, NewFValue},
                    TrUserData
                );
            {purchase, MVPrev} ->
                id(
                    {purchase,
                        merge_msg_blockchain_state_channel_purchase_v1_pb(
                            MVPrev,
                            NewFValue,
                            TrUserData
                        )},
                    TrUserData
                );
            _ ->
                id(
                    {purchase, NewFValue},
                    TrUserData
                )
        end,
        TrUserData
    ).

d_field_blockchain_state_channel_message_v1_pb_banner(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_message_v1_pb_banner(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
d_field_blockchain_state_channel_message_v1_pb_banner(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id(
                decode_msg_blockchain_state_channel_banner_v1_pb(
                    Bs,
                    TrUserData
                ),
                TrUserData
            ),
            Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_message_v1_pb(
        RestF,
        0,
        0,
        case Prev of
            undefined ->
                id(
                    {banner, NewFValue},
                    TrUserData
                );
            {banner, MVPrev} ->
                id(
                    {banner,
                        merge_msg_blockchain_state_channel_banner_v1_pb(
                            MVPrev,
                            NewFValue,
                            TrUserData
                        )},
                    TrUserData
                );
            _ ->
                id(
                    {banner, NewFValue},
                    TrUserData
                )
        end,
        TrUserData
    ).

d_field_blockchain_state_channel_message_v1_pb_reject(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_message_v1_pb_reject(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
d_field_blockchain_state_channel_message_v1_pb_reject(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id(
                decode_msg_blockchain_state_channel_rejection_v1_pb(
                    Bs,
                    TrUserData
                ),
                TrUserData
            ),
            Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_message_v1_pb(
        RestF,
        0,
        0,
        case Prev of
            undefined ->
                id(
                    {reject, NewFValue},
                    TrUserData
                );
            {reject, MVPrev} ->
                id(
                    {reject,
                        merge_msg_blockchain_state_channel_rejection_v1_pb(
                            MVPrev,
                            NewFValue,
                            TrUserData
                        )},
                    TrUserData
                );
            _ ->
                id(
                    {reject, NewFValue},
                    TrUserData
                )
        end,
        TrUserData
    ).

skip_varint_blockchain_state_channel_message_v1_pb(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    skip_varint_blockchain_state_channel_message_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    );
skip_varint_blockchain_state_channel_message_v1_pb(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_message_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

skip_length_delimited_blockchain_state_channel_message_v1_pb(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 57 ->
    skip_length_delimited_blockchain_state_channel_message_v1_pb(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
skip_length_delimited_blockchain_state_channel_message_v1_pb(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_blockchain_state_channel_message_v1_pb(
        Rest2,
        0,
        0,
        F@_1,
        TrUserData
    ).

skip_group_blockchain_state_channel_message_v1_pb(
    Bin,
    FNum,
    Z2,
    F@_1,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_blockchain_state_channel_message_v1_pb(
        Rest,
        0,
        Z2,
        F@_1,
        TrUserData
    ).

skip_32_blockchain_state_channel_message_v1_pb(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_message_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

skip_64_blockchain_state_channel_message_v1_pb(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_message_v1_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

decode_msg_eui_pb(Bin, TrUserData) ->
    dfp_read_field_def_eui_pb(
        Bin,
        0,
        0,
        id(0, TrUserData),
        id(0, TrUserData),
        TrUserData
    ).

dfp_read_field_def_eui_pb(
    <<8, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    d_field_eui_pb_deveui(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    );
dfp_read_field_def_eui_pb(
    <<16, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    d_field_eui_pb_appeui(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    );
dfp_read_field_def_eui_pb(<<>>, 0, 0, F@_1, F@_2, _) ->
    #eui_pb{deveui = F@_1, appeui = F@_2};
dfp_read_field_def_eui_pb(
    Other,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dg_read_field_def_eui_pb(
        Other,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

dg_read_field_def_eui_pb(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_eui_pb(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
dg_read_field_def_eui_pb(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_eui_pb_deveui(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                TrUserData
            );
        16 ->
            d_field_eui_pb_appeui(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_eui_pb(Rest, 0, 0, F@_1, F@_2, TrUserData);
                1 ->
                    skip_64_eui_pb(Rest, 0, 0, F@_1, F@_2, TrUserData);
                2 ->
                    skip_length_delimited_eui_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                3 ->
                    skip_group_eui_pb(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                5 ->
                    skip_32_eui_pb(Rest, 0, 0, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_eui_pb(<<>>, 0, 0, F@_1, F@_2, _) ->
    #eui_pb{deveui = F@_1, appeui = F@_2}.

d_field_eui_pb_deveui(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    d_field_eui_pb_deveui(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
d_field_eui_pb_deveui(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_2,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_eui_pb(
        RestF,
        0,
        0,
        NewFValue,
        F@_2,
        TrUserData
    ).

d_field_eui_pb_appeui(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    d_field_eui_pb_appeui(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
d_field_eui_pb_appeui(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_eui_pb(
        RestF,
        0,
        0,
        F@_1,
        NewFValue,
        TrUserData
    ).

skip_varint_eui_pb(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    skip_varint_eui_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    );
skip_varint_eui_pb(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_eui_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_length_delimited_eui_pb(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    skip_length_delimited_eui_pb(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
skip_length_delimited_eui_pb(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_eui_pb(
        Rest2,
        0,
        0,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_group_eui_pb(
    Bin,
    FNum,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_eui_pb(
        Rest,
        0,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_32_eui_pb(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_eui_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_64_eui_pb(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_eui_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

decode_msg_routing_information_pb(Bin, TrUserData) ->
    dfp_read_field_def_routing_information_pb(
        Bin,
        0,
        0,
        id(undefined, TrUserData),
        TrUserData
    ).

dfp_read_field_def_routing_information_pb(
    <<8, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    d_field_routing_information_pb_devaddr(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    );
dfp_read_field_def_routing_information_pb(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    d_field_routing_information_pb_eui(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    );
dfp_read_field_def_routing_information_pb(
    <<>>,
    0,
    0,
    F@_1,
    _
) ->
    #routing_information_pb{data = F@_1};
dfp_read_field_def_routing_information_pb(
    Other,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    dg_read_field_def_routing_information_pb(
        Other,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

dg_read_field_def_routing_information_pb(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_routing_information_pb(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
dg_read_field_def_routing_information_pb(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_routing_information_pb_devaddr(
                Rest,
                0,
                0,
                F@_1,
                TrUserData
            );
        18 ->
            d_field_routing_information_pb_eui(
                Rest,
                0,
                0,
                F@_1,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_routing_information_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    skip_64_routing_information_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_routing_information_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    skip_group_routing_information_pb(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    skip_32_routing_information_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        TrUserData
                    )
            end
    end;
dg_read_field_def_routing_information_pb(
    <<>>,
    0,
    0,
    F@_1,
    _
) ->
    #routing_information_pb{data = F@_1}.

d_field_routing_information_pb_devaddr(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 57 ->
    d_field_routing_information_pb_devaddr(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
d_field_routing_information_pb_devaddr(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_routing_information_pb(
        RestF,
        0,
        0,
        id(
            {devaddr, NewFValue},
            TrUserData
        ),
        TrUserData
    ).

d_field_routing_information_pb_eui(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 57 ->
    d_field_routing_information_pb_eui(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
d_field_routing_information_pb_eui(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id(decode_msg_eui_pb(Bs, TrUserData), TrUserData), Rest2}
    end,
    dfp_read_field_def_routing_information_pb(
        RestF,
        0,
        0,
        case Prev of
            undefined ->
                id(
                    {eui, NewFValue},
                    TrUserData
                );
            {eui, MVPrev} ->
                id(
                    {eui,
                        merge_msg_eui_pb(
                            MVPrev,
                            NewFValue,
                            TrUserData
                        )},
                    TrUserData
                );
            _ ->
                id(
                    {eui, NewFValue},
                    TrUserData
                )
        end,
        TrUserData
    ).

skip_varint_routing_information_pb(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    skip_varint_routing_information_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    );
skip_varint_routing_information_pb(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    dfp_read_field_def_routing_information_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

skip_length_delimited_routing_information_pb(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 57 ->
    skip_length_delimited_routing_information_pb(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
skip_length_delimited_routing_information_pb(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_routing_information_pb(
        Rest2,
        0,
        0,
        F@_1,
        TrUserData
    ).

skip_group_routing_information_pb(
    Bin,
    FNum,
    Z2,
    F@_1,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_routing_information_pb(
        Rest,
        0,
        Z2,
        F@_1,
        TrUserData
    ).

skip_32_routing_information_pb(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    dfp_read_field_def_routing_information_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

skip_64_routing_information_pb(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    dfp_read_field_def_routing_information_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

decode_msg_window_pb(Bin, TrUserData) ->
    dfp_read_field_def_window_pb(
        Bin,
        0,
        0,
        id(0, TrUserData),
        id(0.0, TrUserData),
        id([], TrUserData),
        TrUserData
    ).

dfp_read_field_def_window_pb(
    <<8, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    d_field_window_pb_timestamp(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
dfp_read_field_def_window_pb(
    <<21, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    d_field_window_pb_frequency(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
dfp_read_field_def_window_pb(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    d_field_window_pb_datarate(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
dfp_read_field_def_window_pb(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    F@_3,
    _
) ->
    #window_pb{
        timestamp = F@_1,
        frequency = F@_2,
        datarate = F@_3
    };
dfp_read_field_def_window_pb(
    Other,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    dg_read_field_def_window_pb(
        Other,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

dg_read_field_def_window_pb(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_window_pb(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
dg_read_field_def_window_pb(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_window_pb_timestamp(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        21 ->
            d_field_window_pb_frequency(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        26 ->
            d_field_window_pb_datarate(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_window_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                1 ->
                    skip_64_window_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_window_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                3 ->
                    skip_group_window_pb(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                5 ->
                    skip_32_window_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    )
            end
    end;
dg_read_field_def_window_pb(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    F@_3,
    _
) ->
    #window_pb{
        timestamp = F@_1,
        frequency = F@_2,
        datarate = F@_3
    }.

d_field_window_pb_timestamp(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    d_field_window_pb_timestamp(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
d_field_window_pb_timestamp(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_2,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_window_pb(
        RestF,
        0,
        0,
        NewFValue,
        F@_2,
        F@_3,
        TrUserData
    ).

d_field_window_pb_frequency(
    <<0:16, 128, 127, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    _,
    F@_3,
    TrUserData
) ->
    dfp_read_field_def_window_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        id(infinity, TrUserData),
        F@_3,
        TrUserData
    );
d_field_window_pb_frequency(
    <<0:16, 128, 255, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    _,
    F@_3,
    TrUserData
) ->
    dfp_read_field_def_window_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        id('-infinity', TrUserData),
        F@_3,
        TrUserData
    );
d_field_window_pb_frequency(
    <<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    _,
    F@_3,
    TrUserData
) ->
    dfp_read_field_def_window_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        id(nan, TrUserData),
        F@_3,
        TrUserData
    );
d_field_window_pb_frequency(
    <<Value:32/little-float, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    _,
    F@_3,
    TrUserData
) ->
    dfp_read_field_def_window_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        id(Value, TrUserData),
        F@_3,
        TrUserData
    ).

d_field_window_pb_datarate(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    d_field_window_pb_datarate(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
d_field_window_pb_datarate(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Utf8:Len/binary, Rest2/binary>> = Rest,
        {id(
                unicode:characters_to_list(Utf8, unicode),
                TrUserData
            ),
            Rest2}
    end,
    dfp_read_field_def_window_pb(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        NewFValue,
        TrUserData
    ).

skip_varint_window_pb(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    skip_varint_window_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
skip_varint_window_pb(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    dfp_read_field_def_window_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

skip_length_delimited_window_pb(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    skip_length_delimited_window_pb(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
skip_length_delimited_window_pb(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_window_pb(
        Rest2,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

skip_group_window_pb(
    Bin,
    FNum,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_window_pb(
        Rest,
        0,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

skip_32_window_pb(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    dfp_read_field_def_window_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

skip_64_window_pb(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    dfp_read_field_def_window_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

decode_msg_packet_pb(Bin, TrUserData) ->
    dfp_read_field_def_packet_pb(
        Bin,
        0,
        0,
        id(0, TrUserData),
        id(longfi, TrUserData),
        id(<<>>, TrUserData),
        id(0, TrUserData),
        id(0.0, TrUserData),
        id(0.0, TrUserData),
        id([], TrUserData),
        id(0.0, TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        TrUserData
    ).

dfp_read_field_def_packet_pb(
    <<8, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    d_field_packet_pb_oui(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
dfp_read_field_def_packet_pb(
    <<16, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    d_field_packet_pb_type(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
dfp_read_field_def_packet_pb(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    d_field_packet_pb_payload(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
dfp_read_field_def_packet_pb(
    <<32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    d_field_packet_pb_timestamp(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
dfp_read_field_def_packet_pb(
    <<45, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    d_field_packet_pb_signal_strength(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
dfp_read_field_def_packet_pb(
    <<53, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    d_field_packet_pb_frequency(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
dfp_read_field_def_packet_pb(
    <<58, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    d_field_packet_pb_datarate(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
dfp_read_field_def_packet_pb(
    <<69, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    d_field_packet_pb_snr(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
dfp_read_field_def_packet_pb(
    <<74, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    d_field_packet_pb_routing(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
dfp_read_field_def_packet_pb(
    <<82, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    d_field_packet_pb_rx2_window(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
dfp_read_field_def_packet_pb(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    _
) ->
    #packet_pb{
        oui = F@_1,
        type = F@_2,
        payload = F@_3,
        timestamp = F@_4,
        signal_strength = F@_5,
        frequency = F@_6,
        datarate = F@_7,
        snr = F@_8,
        routing = F@_9,
        rx2_window = F@_10
    };
dfp_read_field_def_packet_pb(
    Other,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    dg_read_field_def_packet_pb(
        Other,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

dg_read_field_def_packet_pb(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_packet_pb(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
dg_read_field_def_packet_pb(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_packet_pb_oui(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        16 ->
            d_field_packet_pb_type(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        26 ->
            d_field_packet_pb_payload(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        32 ->
            d_field_packet_pb_timestamp(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        45 ->
            d_field_packet_pb_signal_strength(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        53 ->
            d_field_packet_pb_frequency(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        58 ->
            d_field_packet_pb_datarate(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        69 ->
            d_field_packet_pb_snr(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        74 ->
            d_field_packet_pb_routing(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        82 ->
            d_field_packet_pb_rx2_window(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_packet_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        TrUserData
                    );
                1 ->
                    skip_64_packet_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_packet_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        TrUserData
                    );
                3 ->
                    skip_group_packet_pb(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        TrUserData
                    );
                5 ->
                    skip_32_packet_pb(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        TrUserData
                    )
            end
    end;
dg_read_field_def_packet_pb(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    _
) ->
    #packet_pb{
        oui = F@_1,
        type = F@_2,
        payload = F@_3,
        timestamp = F@_4,
        signal_strength = F@_5,
        frequency = F@_6,
        datarate = F@_7,
        snr = F@_8,
        routing = F@_9,
        rx2_window = F@_10
    }.

d_field_packet_pb_oui(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    d_field_packet_pb_oui(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
d_field_packet_pb_oui(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_packet_pb(
        RestF,
        0,
        0,
        NewFValue,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

d_field_packet_pb_type(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    d_field_packet_pb_type(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
d_field_packet_pb_type(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    _,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} =
        {id(
                'd_enum_packet_pb.packet_type'(begin
                    <<Res:32/signed-native>> =
                        <<(X bsl
                                N +
                                Acc):32/unsigned-native>>,
                    id(Res, TrUserData)
                end),
                TrUserData
            ),
            Rest},
    dfp_read_field_def_packet_pb(
        RestF,
        0,
        0,
        F@_1,
        NewFValue,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

d_field_packet_pb_payload(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    d_field_packet_pb_payload(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
d_field_packet_pb_payload(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    _,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_packet_pb(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        NewFValue,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

d_field_packet_pb_timestamp(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    d_field_packet_pb_timestamp(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
d_field_packet_pb_timestamp(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    _,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_packet_pb(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        NewFValue,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

d_field_packet_pb_signal_strength(
    <<0:16, 128, 127, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    dfp_read_field_def_packet_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        id(infinity, TrUserData),
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
d_field_packet_pb_signal_strength(
    <<0:16, 128, 255, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    dfp_read_field_def_packet_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        id('-infinity', TrUserData),
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
d_field_packet_pb_signal_strength(
    <<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    dfp_read_field_def_packet_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        id(nan, TrUserData),
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
d_field_packet_pb_signal_strength(
    <<Value:32/little-float, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    dfp_read_field_def_packet_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        id(Value, TrUserData),
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

d_field_packet_pb_frequency(
    <<0:16, 128, 127, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    _,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    dfp_read_field_def_packet_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        id(infinity, TrUserData),
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
d_field_packet_pb_frequency(
    <<0:16, 128, 255, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    _,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    dfp_read_field_def_packet_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        id('-infinity', TrUserData),
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
d_field_packet_pb_frequency(
    <<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    _,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    dfp_read_field_def_packet_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        id(nan, TrUserData),
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
d_field_packet_pb_frequency(
    <<Value:32/little-float, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    _,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    dfp_read_field_def_packet_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        id(Value, TrUserData),
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

d_field_packet_pb_datarate(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    d_field_packet_pb_datarate(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
d_field_packet_pb_datarate(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    _,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Utf8:Len/binary, Rest2/binary>> = Rest,
        {id(
                unicode:characters_to_list(Utf8, unicode),
                TrUserData
            ),
            Rest2}
    end,
    dfp_read_field_def_packet_pb(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        NewFValue,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

d_field_packet_pb_snr(
    <<0:16, 128, 127, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    _,
    F@_9,
    F@_10,
    TrUserData
) ->
    dfp_read_field_def_packet_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        id(infinity, TrUserData),
        F@_9,
        F@_10,
        TrUserData
    );
d_field_packet_pb_snr(
    <<0:16, 128, 255, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    _,
    F@_9,
    F@_10,
    TrUserData
) ->
    dfp_read_field_def_packet_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        id('-infinity', TrUserData),
        F@_9,
        F@_10,
        TrUserData
    );
d_field_packet_pb_snr(
    <<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    _,
    F@_9,
    F@_10,
    TrUserData
) ->
    dfp_read_field_def_packet_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        id(nan, TrUserData),
        F@_9,
        F@_10,
        TrUserData
    );
d_field_packet_pb_snr(
    <<Value:32/little-float, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    _,
    F@_9,
    F@_10,
    TrUserData
) ->
    dfp_read_field_def_packet_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        id(Value, TrUserData),
        F@_9,
        F@_10,
        TrUserData
    ).

d_field_packet_pb_routing(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    d_field_packet_pb_routing(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
d_field_packet_pb_routing(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    Prev,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id(
                decode_msg_routing_information_pb(
                    Bs,
                    TrUserData
                ),
                TrUserData
            ),
            Rest2}
    end,
    dfp_read_field_def_packet_pb(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        if
            Prev == undefined ->
                NewFValue;
            true ->
                merge_msg_routing_information_pb(
                    Prev,
                    NewFValue,
                    TrUserData
                )
        end,
        F@_10,
        TrUserData
    ).

d_field_packet_pb_rx2_window(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    d_field_packet_pb_rx2_window(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
d_field_packet_pb_rx2_window(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id(
                decode_msg_window_pb(Bs, TrUserData),
                TrUserData
            ),
            Rest2}
    end,
    dfp_read_field_def_packet_pb(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        if
            Prev == undefined ->
                NewFValue;
            true ->
                merge_msg_window_pb(
                    Prev,
                    NewFValue,
                    TrUserData
                )
        end,
        TrUserData
    ).

skip_varint_packet_pb(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    skip_varint_packet_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
skip_varint_packet_pb(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    dfp_read_field_def_packet_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

skip_length_delimited_packet_pb(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    skip_length_delimited_packet_pb(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
skip_length_delimited_packet_pb(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_packet_pb(
        Rest2,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

skip_group_packet_pb(
    Bin,
    FNum,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_packet_pb(
        Rest,
        0,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

skip_32_packet_pb(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    dfp_read_field_def_packet_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

skip_64_packet_pb(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    dfp_read_field_def_packet_pb(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

'd_enum_helium.blockchain_state_channel_state_v1'(0) ->
    open;
'd_enum_helium.blockchain_state_channel_state_v1'(1) ->
    closed;
'd_enum_helium.blockchain_state_channel_state_v1'(V) ->
    V.

'd_enum_packet_pb.packet_type'(0) -> longfi;
'd_enum_packet_pb.packet_type'(1) -> lorawan;
'd_enum_packet_pb.packet_type'(V) -> V.

'd_enum_helium.region'(0) -> 'US915';
'd_enum_helium.region'(1) -> 'EU868';
'd_enum_helium.region'(2) -> 'EU433';
'd_enum_helium.region'(3) -> 'CN470';
'd_enum_helium.region'(4) -> 'CN779';
'd_enum_helium.region'(5) -> 'AU915';
'd_enum_helium.region'(6) -> 'AS923_1';
'd_enum_helium.region'(7) -> 'KR920';
'd_enum_helium.region'(8) -> 'IN865';
'd_enum_helium.region'(9) -> 'AS923_2';
'd_enum_helium.region'(10) -> 'AS923_3';
'd_enum_helium.region'(11) -> 'AS923_4';
'd_enum_helium.region'(12) -> 'AS923_1B';
'd_enum_helium.region'(13) -> 'CD900_1A';
'd_enum_helium.region'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum) when N < (32 - 7) ->
    read_gr_b(Tl, N + 7, X bsl N + Acc, NumBytes, TagLen + 1, FieldNum);
read_gr_b(
    <<0:1, X:7, Tl/binary>>,
    N,
    Acc,
    NumBytes,
    TagLen,
    FieldNum
) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        % 4 = group_end
        {FieldNum, 4} ->
            {NumBytes, TagLen1};
        % 0 = varint
        {_, 0} ->
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        % 1 = bits64
        {_, 1} ->
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        % 2 = length_delimited
        {_, 2} ->
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        % 3 = group_start
        {_, 3} ->
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        % 4 = group_end
        {_, 4} ->
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        % 5 = bits32
        {_, 5} ->
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum) when N < (64 - 7) ->
    read_gr_vi(Tl, N + 7, NumBytes + 1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes + 1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) when N < (64 - 7) ->
    read_gr_ld(Tl, N + 7, X bsl N + Acc, NumBytes + 1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts) when
    element(1, Prev) =:= element(1, New),
    is_list(Opts)
->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        blockchain_state_channel_summary_v1_pb ->
            merge_msg_blockchain_state_channel_summary_v1_pb(
                Prev,
                New,
                TrUserData
            );
        blockchain_state_channel_v1_pb ->
            merge_msg_blockchain_state_channel_v1_pb(
                Prev,
                New,
                TrUserData
            );
        blockchain_state_channel_response_v1_pb ->
            merge_msg_blockchain_state_channel_response_v1_pb(
                Prev,
                New,
                TrUserData
            );
        blockchain_state_channel_packet_v1_pb ->
            merge_msg_blockchain_state_channel_packet_v1_pb(
                Prev,
                New,
                TrUserData
            );
        blockchain_state_channel_offer_v1_pb ->
            merge_msg_blockchain_state_channel_offer_v1_pb(
                Prev,
                New,
                TrUserData
            );
        blockchain_state_channel_purchase_v1_pb ->
            merge_msg_blockchain_state_channel_purchase_v1_pb(
                Prev,
                New,
                TrUserData
            );
        blockchain_state_channel_diff_v1_pb ->
            merge_msg_blockchain_state_channel_diff_v1_pb(
                Prev,
                New,
                TrUserData
            );
        blockchain_state_channel_diff_entry_v1_pb ->
            merge_msg_blockchain_state_channel_diff_entry_v1_pb(
                Prev,
                New,
                TrUserData
            );
        blockchain_state_channel_diff_append_summary_v1_pb ->
            merge_msg_blockchain_state_channel_diff_append_summary_v1_pb(
                Prev,
                New,
                TrUserData
            );
        blockchain_state_channel_diff_update_summary_v1_pb ->
            merge_msg_blockchain_state_channel_diff_update_summary_v1_pb(
                Prev,
                New,
                TrUserData
            );
        blockchain_state_channel_banner_v1_pb ->
            merge_msg_blockchain_state_channel_banner_v1_pb(
                Prev,
                New,
                TrUserData
            );
        blockchain_state_channel_rejection_v1_pb ->
            merge_msg_blockchain_state_channel_rejection_v1_pb(
                Prev,
                New,
                TrUserData
            );
        blockchain_state_channel_message_v1_pb ->
            merge_msg_blockchain_state_channel_message_v1_pb(
                Prev,
                New,
                TrUserData
            );
        eui_pb ->
            merge_msg_eui_pb(Prev, New, TrUserData);
        routing_information_pb ->
            merge_msg_routing_information_pb(Prev, New, TrUserData);
        window_pb ->
            merge_msg_window_pb(Prev, New, TrUserData);
        packet_pb ->
            merge_msg_packet_pb(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function, merge_msg_blockchain_state_channel_summary_v1_pb/3}).
merge_msg_blockchain_state_channel_summary_v1_pb(
    #blockchain_state_channel_summary_v1_pb{
        client_pubkeybin =
            PFclient_pubkeybin,
        num_packets =
            PFnum_packets,
        num_dcs =
            PFnum_dcs
    },
    #blockchain_state_channel_summary_v1_pb{
        client_pubkeybin =
            NFclient_pubkeybin,
        num_packets =
            NFnum_packets,
        num_dcs =
            NFnum_dcs
    },
    _
) ->
    #blockchain_state_channel_summary_v1_pb{
        client_pubkeybin =
            if
                NFclient_pubkeybin =:=
                    undefined ->
                    PFclient_pubkeybin;
                true ->
                    NFclient_pubkeybin
            end,
        num_packets =
            if
                NFnum_packets =:=
                    undefined ->
                    PFnum_packets;
                true ->
                    NFnum_packets
            end,
        num_dcs =
            if
                NFnum_dcs =:= undefined ->
                    PFnum_dcs;
                true ->
                    NFnum_dcs
            end
    }.

-compile({nowarn_unused_function, merge_msg_blockchain_state_channel_v1_pb/3}).
merge_msg_blockchain_state_channel_v1_pb(
    #blockchain_state_channel_v1_pb{
        id =
            PFid,
        owner =
            PFowner,
        credits =
            PFcredits,
        nonce =
            PFnonce,
        summaries =
            PFsummaries,
        root_hash =
            PFroot_hash,
        skewed =
            PFskewed,
        state =
            PFstate,
        expire_at_block =
            PFexpire_at_block,
        signature =
            PFsignature
    },
    #blockchain_state_channel_v1_pb{
        id =
            NFid,
        owner =
            NFowner,
        credits =
            NFcredits,
        nonce =
            NFnonce,
        summaries =
            NFsummaries,
        root_hash =
            NFroot_hash,
        skewed =
            NFskewed,
        state =
            NFstate,
        expire_at_block =
            NFexpire_at_block,
        signature =
            NFsignature
    },
    TrUserData
) ->
    #blockchain_state_channel_v1_pb{
        id =
            if
                NFid =:= undefined -> PFid;
                true -> NFid
            end,
        owner =
            if
                NFowner =:= undefined -> PFowner;
                true -> NFowner
            end,
        credits =
            if
                NFcredits =:= undefined -> PFcredits;
                true -> NFcredits
            end,
        nonce =
            if
                NFnonce =:= undefined -> PFnonce;
                true -> NFnonce
            end,
        summaries =
            if
                PFsummaries /= undefined,
                NFsummaries /= undefined ->
                    'erlang_++'(
                        PFsummaries,
                        NFsummaries,
                        TrUserData
                    );
                PFsummaries == undefined ->
                    NFsummaries;
                NFsummaries == undefined ->
                    PFsummaries
            end,
        root_hash =
            if
                NFroot_hash =:= undefined ->
                    PFroot_hash;
                true ->
                    NFroot_hash
            end,
        skewed =
            if
                NFskewed =:= undefined -> PFskewed;
                true -> NFskewed
            end,
        state =
            if
                NFstate =:= undefined -> PFstate;
                true -> NFstate
            end,
        expire_at_block =
            if
                NFexpire_at_block =:= undefined ->
                    PFexpire_at_block;
                true ->
                    NFexpire_at_block
            end,
        signature =
            if
                NFsignature =:= undefined ->
                    PFsignature;
                true ->
                    NFsignature
            end
    }.

-compile({nowarn_unused_function, merge_msg_blockchain_state_channel_response_v1_pb/3}).
merge_msg_blockchain_state_channel_response_v1_pb(
    #blockchain_state_channel_response_v1_pb{
        accepted =
            PFaccepted,
        downlink =
            PFdownlink
    },
    #blockchain_state_channel_response_v1_pb{
        accepted =
            NFaccepted,
        downlink =
            NFdownlink
    },
    TrUserData
) ->
    #blockchain_state_channel_response_v1_pb{
        accepted =
            if
                NFaccepted =:= undefined ->
                    PFaccepted;
                true ->
                    NFaccepted
            end,
        downlink =
            if
                PFdownlink /= undefined,
                NFdownlink /= undefined ->
                    merge_msg_packet_pb(
                        PFdownlink,
                        NFdownlink,
                        TrUserData
                    );
                PFdownlink == undefined ->
                    NFdownlink;
                NFdownlink == undefined ->
                    PFdownlink
            end
    }.

-compile({nowarn_unused_function, merge_msg_blockchain_state_channel_packet_v1_pb/3}).
merge_msg_blockchain_state_channel_packet_v1_pb(
    #blockchain_state_channel_packet_v1_pb{
        packet =
            PFpacket,
        hotspot =
            PFhotspot,
        signature =
            PFsignature,
        region =
            PFregion,
        hold_time =
            PFhold_time
    },
    #blockchain_state_channel_packet_v1_pb{
        packet =
            NFpacket,
        hotspot =
            NFhotspot,
        signature =
            NFsignature,
        region =
            NFregion,
        hold_time =
            NFhold_time
    },
    TrUserData
) ->
    #blockchain_state_channel_packet_v1_pb{
        packet =
            if
                PFpacket /= undefined,
                NFpacket /= undefined ->
                    merge_msg_packet_pb(
                        PFpacket,
                        NFpacket,
                        TrUserData
                    );
                PFpacket == undefined ->
                    NFpacket;
                NFpacket == undefined ->
                    PFpacket
            end,
        hotspot =
            if
                NFhotspot =:= undefined ->
                    PFhotspot;
                true ->
                    NFhotspot
            end,
        signature =
            if
                NFsignature =:= undefined ->
                    PFsignature;
                true ->
                    NFsignature
            end,
        region =
            if
                NFregion =:= undefined ->
                    PFregion;
                true ->
                    NFregion
            end,
        hold_time =
            if
                NFhold_time =:= undefined ->
                    PFhold_time;
                true ->
                    NFhold_time
            end
    }.

-compile({nowarn_unused_function, merge_msg_blockchain_state_channel_offer_v1_pb/3}).
merge_msg_blockchain_state_channel_offer_v1_pb(
    #blockchain_state_channel_offer_v1_pb{
        routing =
            PFrouting,
        packet_hash =
            PFpacket_hash,
        payload_size =
            PFpayload_size,
        fcnt =
            PFfcnt,
        hotspot =
            PFhotspot,
        signature =
            PFsignature,
        region =
            PFregion,
        req_diff =
            PFreq_diff
    },
    #blockchain_state_channel_offer_v1_pb{
        routing =
            NFrouting,
        packet_hash =
            NFpacket_hash,
        payload_size =
            NFpayload_size,
        fcnt =
            NFfcnt,
        hotspot =
            NFhotspot,
        signature =
            NFsignature,
        region =
            NFregion,
        req_diff =
            NFreq_diff
    },
    TrUserData
) ->
    #blockchain_state_channel_offer_v1_pb{
        routing =
            if
                PFrouting /= undefined,
                NFrouting /= undefined ->
                    merge_msg_routing_information_pb(
                        PFrouting,
                        NFrouting,
                        TrUserData
                    );
                PFrouting == undefined ->
                    NFrouting;
                NFrouting == undefined ->
                    PFrouting
            end,
        packet_hash =
            if
                NFpacket_hash =:= undefined ->
                    PFpacket_hash;
                true ->
                    NFpacket_hash
            end,
        payload_size =
            if
                NFpayload_size =:= undefined ->
                    PFpayload_size;
                true ->
                    NFpayload_size
            end,
        fcnt =
            if
                NFfcnt =:= undefined -> PFfcnt;
                true -> NFfcnt
            end,
        hotspot =
            if
                NFhotspot =:= undefined ->
                    PFhotspot;
                true ->
                    NFhotspot
            end,
        signature =
            if
                NFsignature =:= undefined ->
                    PFsignature;
                true ->
                    NFsignature
            end,
        region =
            if
                NFregion =:= undefined ->
                    PFregion;
                true ->
                    NFregion
            end,
        req_diff =
            if
                NFreq_diff =:= undefined ->
                    PFreq_diff;
                true ->
                    NFreq_diff
            end
    }.

-compile({nowarn_unused_function, merge_msg_blockchain_state_channel_purchase_v1_pb/3}).
merge_msg_blockchain_state_channel_purchase_v1_pb(
    #blockchain_state_channel_purchase_v1_pb{
        sc =
            PFsc,
        hotspot =
            PFhotspot,
        packet_hash =
            PFpacket_hash,
        region =
            PFregion,
        sc_diff =
            PFsc_diff
    },
    #blockchain_state_channel_purchase_v1_pb{
        sc =
            NFsc,
        hotspot =
            NFhotspot,
        packet_hash =
            NFpacket_hash,
        region =
            NFregion,
        sc_diff =
            NFsc_diff
    },
    TrUserData
) ->
    #blockchain_state_channel_purchase_v1_pb{
        sc =
            if
                PFsc /= undefined,
                NFsc /= undefined ->
                    merge_msg_blockchain_state_channel_v1_pb(
                        PFsc,
                        NFsc,
                        TrUserData
                    );
                PFsc == undefined ->
                    NFsc;
                NFsc == undefined ->
                    PFsc
            end,
        hotspot =
            if
                NFhotspot =:= undefined ->
                    PFhotspot;
                true ->
                    NFhotspot
            end,
        packet_hash =
            if
                NFpacket_hash =:=
                    undefined ->
                    PFpacket_hash;
                true ->
                    NFpacket_hash
            end,
        region =
            if
                NFregion =:= undefined ->
                    PFregion;
                true ->
                    NFregion
            end,
        sc_diff =
            if
                PFsc_diff /= undefined,
                NFsc_diff /= undefined ->
                    merge_msg_blockchain_state_channel_diff_v1_pb(
                        PFsc_diff,
                        NFsc_diff,
                        TrUserData
                    );
                PFsc_diff == undefined ->
                    NFsc_diff;
                NFsc_diff == undefined ->
                    PFsc_diff
            end
    }.

-compile({nowarn_unused_function, merge_msg_blockchain_state_channel_diff_v1_pb/3}).
merge_msg_blockchain_state_channel_diff_v1_pb(
    #blockchain_state_channel_diff_v1_pb{
        id =
            PFid,
        add_nonce =
            PFadd_nonce,
        signature =
            PFsignature,
        diffs =
            PFdiffs
    },
    #blockchain_state_channel_diff_v1_pb{
        id =
            NFid,
        add_nonce =
            NFadd_nonce,
        signature =
            NFsignature,
        diffs =
            NFdiffs
    },
    TrUserData
) ->
    #blockchain_state_channel_diff_v1_pb{
        id =
            if
                NFid =:= undefined -> PFid;
                true -> NFid
            end,
        add_nonce =
            if
                NFadd_nonce =:= undefined ->
                    PFadd_nonce;
                true ->
                    NFadd_nonce
            end,
        signature =
            if
                NFsignature =:= undefined ->
                    PFsignature;
                true ->
                    NFsignature
            end,
        diffs =
            if
                PFdiffs /= undefined,
                NFdiffs /= undefined ->
                    'erlang_++'(
                        PFdiffs,
                        NFdiffs,
                        TrUserData
                    );
                PFdiffs == undefined ->
                    NFdiffs;
                NFdiffs == undefined ->
                    PFdiffs
            end
    }.

-compile({nowarn_unused_function, merge_msg_blockchain_state_channel_diff_entry_v1_pb/3}).
merge_msg_blockchain_state_channel_diff_entry_v1_pb(
    #blockchain_state_channel_diff_entry_v1_pb{
        entry =
            PFentry
    },
    #blockchain_state_channel_diff_entry_v1_pb{
        entry =
            NFentry
    },
    TrUserData
) ->
    #blockchain_state_channel_diff_entry_v1_pb{
        entry =
            case {PFentry, NFentry} of
                {{append, OPFentry}, {append, ONFentry}} ->
                    {append,
                        merge_msg_blockchain_state_channel_diff_append_summary_v1_pb(
                            OPFentry,
                            ONFentry,
                            TrUserData
                        )};
                {{add, OPFentry}, {add, ONFentry}} ->
                    {add,
                        merge_msg_blockchain_state_channel_diff_update_summary_v1_pb(
                            OPFentry,
                            ONFentry,
                            TrUserData
                        )};
                {_, undefined} ->
                    PFentry;
                _ ->
                    NFentry
            end
    }.

-compile({nowarn_unused_function, merge_msg_blockchain_state_channel_diff_append_summary_v1_pb/3}).
merge_msg_blockchain_state_channel_diff_append_summary_v1_pb(
    #blockchain_state_channel_diff_append_summary_v1_pb{
        client_pubkeybin =
            PFclient_pubkeybin,
        num_packets =
            PFnum_packets,
        num_dcs =
            PFnum_dcs
    },
    #blockchain_state_channel_diff_append_summary_v1_pb{
        client_pubkeybin =
            NFclient_pubkeybin,
        num_packets =
            NFnum_packets,
        num_dcs =
            NFnum_dcs
    },
    _
) ->
    #blockchain_state_channel_diff_append_summary_v1_pb{
        client_pubkeybin =
            if
                NFclient_pubkeybin =:=
                    undefined ->
                    PFclient_pubkeybin;
                true ->
                    NFclient_pubkeybin
            end,
        num_packets =
            if
                NFnum_packets =:=
                    undefined ->
                    PFnum_packets;
                true ->
                    NFnum_packets
            end,
        num_dcs =
            if
                NFnum_dcs =:=
                    undefined ->
                    PFnum_dcs;
                true ->
                    NFnum_dcs
            end
    }.

-compile({nowarn_unused_function, merge_msg_blockchain_state_channel_diff_update_summary_v1_pb/3}).
merge_msg_blockchain_state_channel_diff_update_summary_v1_pb(
    #blockchain_state_channel_diff_update_summary_v1_pb{
        client_index =
            PFclient_index,
        add_packets =
            PFadd_packets,
        add_dcs =
            PFadd_dcs
    },
    #blockchain_state_channel_diff_update_summary_v1_pb{
        client_index =
            NFclient_index,
        add_packets =
            NFadd_packets,
        add_dcs =
            NFadd_dcs
    },
    _
) ->
    #blockchain_state_channel_diff_update_summary_v1_pb{
        client_index =
            if
                NFclient_index =:=
                    undefined ->
                    PFclient_index;
                true ->
                    NFclient_index
            end,
        add_packets =
            if
                NFadd_packets =:=
                    undefined ->
                    PFadd_packets;
                true ->
                    NFadd_packets
            end,
        add_dcs =
            if
                NFadd_dcs =:=
                    undefined ->
                    PFadd_dcs;
                true ->
                    NFadd_dcs
            end
    }.

-compile({nowarn_unused_function, merge_msg_blockchain_state_channel_banner_v1_pb/3}).
merge_msg_blockchain_state_channel_banner_v1_pb(
    #blockchain_state_channel_banner_v1_pb{
        sc =
            PFsc
    },
    #blockchain_state_channel_banner_v1_pb{
        sc =
            NFsc
    },
    TrUserData
) ->
    #blockchain_state_channel_banner_v1_pb{
        sc =
            if
                PFsc /= undefined,
                NFsc /= undefined ->
                    merge_msg_blockchain_state_channel_v1_pb(
                        PFsc,
                        NFsc,
                        TrUserData
                    );
                PFsc == undefined ->
                    NFsc;
                NFsc == undefined ->
                    PFsc
            end
    }.

-compile({nowarn_unused_function, merge_msg_blockchain_state_channel_rejection_v1_pb/3}).
merge_msg_blockchain_state_channel_rejection_v1_pb(
    #blockchain_state_channel_rejection_v1_pb{
        reject =
            PFreject,
        packet_hash =
            PFpacket_hash
    },
    #blockchain_state_channel_rejection_v1_pb{
        reject =
            NFreject,
        packet_hash =
            NFpacket_hash
    },
    _
) ->
    #blockchain_state_channel_rejection_v1_pb{
        reject =
            if
                NFreject =:= undefined ->
                    PFreject;
                true ->
                    NFreject
            end,
        packet_hash =
            if
                NFpacket_hash =:=
                    undefined ->
                    PFpacket_hash;
                true ->
                    NFpacket_hash
            end
    }.

-compile({nowarn_unused_function, merge_msg_blockchain_state_channel_message_v1_pb/3}).
merge_msg_blockchain_state_channel_message_v1_pb(
    #blockchain_state_channel_message_v1_pb{
        msg =
            PFmsg
    },
    #blockchain_state_channel_message_v1_pb{
        msg =
            NFmsg
    },
    TrUserData
) ->
    #blockchain_state_channel_message_v1_pb{
        msg =
            case {PFmsg, NFmsg} of
                {{response, OPFmsg}, {response, ONFmsg}} ->
                    {response,
                        merge_msg_blockchain_state_channel_response_v1_pb(
                            OPFmsg,
                            ONFmsg,
                            TrUserData
                        )};
                {{packet, OPFmsg}, {packet, ONFmsg}} ->
                    {packet,
                        merge_msg_blockchain_state_channel_packet_v1_pb(
                            OPFmsg,
                            ONFmsg,
                            TrUserData
                        )};
                {{offer, OPFmsg}, {offer, ONFmsg}} ->
                    {offer,
                        merge_msg_blockchain_state_channel_offer_v1_pb(
                            OPFmsg,
                            ONFmsg,
                            TrUserData
                        )};
                {{purchase, OPFmsg}, {purchase, ONFmsg}} ->
                    {purchase,
                        merge_msg_blockchain_state_channel_purchase_v1_pb(
                            OPFmsg,
                            ONFmsg,
                            TrUserData
                        )};
                {{banner, OPFmsg}, {banner, ONFmsg}} ->
                    {banner,
                        merge_msg_blockchain_state_channel_banner_v1_pb(
                            OPFmsg,
                            ONFmsg,
                            TrUserData
                        )};
                {{reject, OPFmsg}, {reject, ONFmsg}} ->
                    {reject,
                        merge_msg_blockchain_state_channel_rejection_v1_pb(
                            OPFmsg,
                            ONFmsg,
                            TrUserData
                        )};
                {_, undefined} ->
                    PFmsg;
                _ ->
                    NFmsg
            end
    }.

-compile({nowarn_unused_function, merge_msg_eui_pb/3}).
merge_msg_eui_pb(
    #eui_pb{
        deveui = PFdeveui,
        appeui = PFappeui
    },
    #eui_pb{deveui = NFdeveui, appeui = NFappeui},
    _
) ->
    #eui_pb{
        deveui =
            if
                NFdeveui =:= undefined -> PFdeveui;
                true -> NFdeveui
            end,
        appeui =
            if
                NFappeui =:= undefined -> PFappeui;
                true -> NFappeui
            end
    }.

-compile({nowarn_unused_function, merge_msg_routing_information_pb/3}).
merge_msg_routing_information_pb(
    #routing_information_pb{
        data =
            PFdata
    },
    #routing_information_pb{data = NFdata},
    TrUserData
) ->
    #routing_information_pb{
        data =
            case {PFdata, NFdata} of
                {{eui, OPFdata}, {eui, ONFdata}} ->
                    {eui,
                        merge_msg_eui_pb(
                            OPFdata,
                            ONFdata,
                            TrUserData
                        )};
                {_, undefined} ->
                    PFdata;
                _ ->
                    NFdata
            end
    }.

-compile({nowarn_unused_function, merge_msg_window_pb/3}).
merge_msg_window_pb(
    #window_pb{
        timestamp = PFtimestamp,
        frequency = PFfrequency,
        datarate = PFdatarate
    },
    #window_pb{
        timestamp = NFtimestamp,
        frequency = NFfrequency,
        datarate = NFdatarate
    },
    _
) ->
    #window_pb{
        timestamp =
            if
                NFtimestamp =:= undefined -> PFtimestamp;
                true -> NFtimestamp
            end,
        frequency =
            if
                NFfrequency =:= undefined -> PFfrequency;
                true -> NFfrequency
            end,
        datarate =
            if
                NFdatarate =:= undefined -> PFdatarate;
                true -> NFdatarate
            end
    }.

-compile({nowarn_unused_function, merge_msg_packet_pb/3}).
merge_msg_packet_pb(
    #packet_pb{
        oui = PFoui,
        type = PFtype,
        payload = PFpayload,
        timestamp = PFtimestamp,
        signal_strength = PFsignal_strength,
        frequency = PFfrequency,
        datarate = PFdatarate,
        snr = PFsnr,
        routing = PFrouting,
        rx2_window = PFrx2_window
    },
    #packet_pb{
        oui = NFoui,
        type = NFtype,
        payload = NFpayload,
        timestamp = NFtimestamp,
        signal_strength = NFsignal_strength,
        frequency = NFfrequency,
        datarate = NFdatarate,
        snr = NFsnr,
        routing = NFrouting,
        rx2_window = NFrx2_window
    },
    TrUserData
) ->
    #packet_pb{
        oui =
            if
                NFoui =:= undefined -> PFoui;
                true -> NFoui
            end,
        type =
            if
                NFtype =:= undefined -> PFtype;
                true -> NFtype
            end,
        payload =
            if
                NFpayload =:= undefined -> PFpayload;
                true -> NFpayload
            end,
        timestamp =
            if
                NFtimestamp =:= undefined -> PFtimestamp;
                true -> NFtimestamp
            end,
        signal_strength =
            if
                NFsignal_strength =:= undefined -> PFsignal_strength;
                true -> NFsignal_strength
            end,
        frequency =
            if
                NFfrequency =:= undefined -> PFfrequency;
                true -> NFfrequency
            end,
        datarate =
            if
                NFdatarate =:= undefined -> PFdatarate;
                true -> NFdatarate
            end,
        snr =
            if
                NFsnr =:= undefined -> PFsnr;
                true -> NFsnr
            end,
        routing =
            if
                PFrouting /= undefined, NFrouting /= undefined ->
                    merge_msg_routing_information_pb(
                        PFrouting,
                        NFrouting,
                        TrUserData
                    );
                PFrouting == undefined ->
                    NFrouting;
                NFrouting == undefined ->
                    PFrouting
            end,
        rx2_window =
            if
                PFrx2_window /= undefined,
                NFrx2_window /= undefined ->
                    merge_msg_window_pb(
                        PFrx2_window,
                        NFrx2_window,
                        TrUserData
                    );
                PFrx2_window == undefined ->
                    NFrx2_window;
                NFrx2_window == undefined ->
                    PFrx2_window
            end
    }.

verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        blockchain_state_channel_summary_v1_pb ->
            v_msg_blockchain_state_channel_summary_v1_pb(
                Msg,
                [MsgName],
                TrUserData
            );
        blockchain_state_channel_v1_pb ->
            v_msg_blockchain_state_channel_v1_pb(
                Msg,
                [MsgName],
                TrUserData
            );
        blockchain_state_channel_response_v1_pb ->
            v_msg_blockchain_state_channel_response_v1_pb(
                Msg,
                [MsgName],
                TrUserData
            );
        blockchain_state_channel_packet_v1_pb ->
            v_msg_blockchain_state_channel_packet_v1_pb(
                Msg,
                [MsgName],
                TrUserData
            );
        blockchain_state_channel_offer_v1_pb ->
            v_msg_blockchain_state_channel_offer_v1_pb(
                Msg,
                [MsgName],
                TrUserData
            );
        blockchain_state_channel_purchase_v1_pb ->
            v_msg_blockchain_state_channel_purchase_v1_pb(
                Msg,
                [MsgName],
                TrUserData
            );
        blockchain_state_channel_diff_v1_pb ->
            v_msg_blockchain_state_channel_diff_v1_pb(
                Msg,
                [MsgName],
                TrUserData
            );
        blockchain_state_channel_diff_entry_v1_pb ->
            v_msg_blockchain_state_channel_diff_entry_v1_pb(
                Msg,
                [MsgName],
                TrUserData
            );
        blockchain_state_channel_diff_append_summary_v1_pb ->
            v_msg_blockchain_state_channel_diff_append_summary_v1_pb(
                Msg,
                [MsgName],
                TrUserData
            );
        blockchain_state_channel_diff_update_summary_v1_pb ->
            v_msg_blockchain_state_channel_diff_update_summary_v1_pb(
                Msg,
                [MsgName],
                TrUserData
            );
        blockchain_state_channel_banner_v1_pb ->
            v_msg_blockchain_state_channel_banner_v1_pb(
                Msg,
                [MsgName],
                TrUserData
            );
        blockchain_state_channel_rejection_v1_pb ->
            v_msg_blockchain_state_channel_rejection_v1_pb(
                Msg,
                [MsgName],
                TrUserData
            );
        blockchain_state_channel_message_v1_pb ->
            v_msg_blockchain_state_channel_message_v1_pb(
                Msg,
                [MsgName],
                TrUserData
            );
        eui_pb ->
            v_msg_eui_pb(Msg, [MsgName], TrUserData);
        routing_information_pb ->
            v_msg_routing_information_pb(
                Msg,
                [MsgName],
                TrUserData
            );
        window_pb ->
            v_msg_window_pb(Msg, [MsgName], TrUserData);
        packet_pb ->
            v_msg_packet_pb(Msg, [MsgName], TrUserData);
        _ ->
            mk_type_error(not_a_known_message, Msg, [])
    end.

-compile({nowarn_unused_function, v_msg_blockchain_state_channel_summary_v1_pb/3}).
-dialyzer({nowarn_function, v_msg_blockchain_state_channel_summary_v1_pb/3}).
v_msg_blockchain_state_channel_summary_v1_pb(
    #blockchain_state_channel_summary_v1_pb{
        client_pubkeybin =
            F1,
        num_packets =
            F2,
        num_dcs =
            F3
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [client_pubkeybin | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_uint64(F2, [num_packets | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_uint64(F3, [num_dcs | Path], TrUserData)
    end,
    ok;
v_msg_blockchain_state_channel_summary_v1_pb(
    X,
    Path,
    _TrUserData
) ->
    mk_type_error(
        {expected_msg, blockchain_state_channel_summary_v1_pb},
        X,
        Path
    ).

-compile({nowarn_unused_function, v_msg_blockchain_state_channel_v1_pb/3}).
-dialyzer({nowarn_function, v_msg_blockchain_state_channel_v1_pb/3}).
v_msg_blockchain_state_channel_v1_pb(
    #blockchain_state_channel_v1_pb{
        id =
            F1,
        owner = F2,
        credits =
            F3,
        nonce = F4,
        summaries =
            F5,
        root_hash =
            F6,
        skewed =
            F7,
        state = F8,
        expire_at_block =
            F9,
        signature =
            F10
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [id | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_bytes(F2, [owner | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_uint64(F3, [credits | Path], TrUserData)
    end,
    if
        F4 == undefined -> ok;
        true -> v_type_uint64(F4, [nonce | Path], TrUserData)
    end,
    if
        is_list(F5) ->
            _ = [
                v_msg_blockchain_state_channel_summary_v1_pb(
                    Elem,
                    [summaries | Path],
                    TrUserData
                )
                || Elem <- F5
            ],
            ok;
        true ->
            mk_type_error(
                {invalid_list_of, {msg, blockchain_state_channel_summary_v1_pb}},
                F5,
                [summaries | Path]
            )
    end,
    if
        F6 == undefined -> ok;
        true -> v_type_bytes(F6, [root_hash | Path], TrUserData)
    end,
    if
        F7 == undefined -> ok;
        true -> v_type_bytes(F7, [skewed | Path], TrUserData)
    end,
    if
        F8 == undefined ->
            ok;
        true ->
            'v_enum_helium.blockchain_state_channel_state_v1'(
                F8,
                [state | Path],
                TrUserData
            )
    end,
    if
        F9 == undefined -> ok;
        true -> v_type_uint64(F9, [expire_at_block | Path], TrUserData)
    end,
    if
        F10 == undefined -> ok;
        true -> v_type_bytes(F10, [signature | Path], TrUserData)
    end,
    ok;
v_msg_blockchain_state_channel_v1_pb(
    X,
    Path,
    _TrUserData
) ->
    mk_type_error(
        {expected_msg, blockchain_state_channel_v1_pb},
        X,
        Path
    ).

-compile({nowarn_unused_function, v_msg_blockchain_state_channel_response_v1_pb/3}).
-dialyzer({nowarn_function, v_msg_blockchain_state_channel_response_v1_pb/3}).
v_msg_blockchain_state_channel_response_v1_pb(
    #blockchain_state_channel_response_v1_pb{
        accepted =
            F1,
        downlink =
            F2
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bool(F1, [accepted | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_msg_packet_pb(F2, [downlink | Path], TrUserData)
    end,
    ok;
v_msg_blockchain_state_channel_response_v1_pb(
    X,
    Path,
    _TrUserData
) ->
    mk_type_error(
        {expected_msg, blockchain_state_channel_response_v1_pb},
        X,
        Path
    ).

-compile({nowarn_unused_function, v_msg_blockchain_state_channel_packet_v1_pb/3}).
-dialyzer({nowarn_function, v_msg_blockchain_state_channel_packet_v1_pb/3}).
v_msg_blockchain_state_channel_packet_v1_pb(
    #blockchain_state_channel_packet_v1_pb{
        packet =
            F1,
        hotspot =
            F2,
        signature =
            F3,
        region =
            F4,
        hold_time =
            F5
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_msg_packet_pb(F1, [packet | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_bytes(F2, [hotspot | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_bytes(F3, [signature | Path], TrUserData)
    end,
    if
        F4 == undefined -> ok;
        true -> 'v_enum_helium.region'(F4, [region | Path], TrUserData)
    end,
    if
        F5 == undefined -> ok;
        true -> v_type_uint64(F5, [hold_time | Path], TrUserData)
    end,
    ok;
v_msg_blockchain_state_channel_packet_v1_pb(
    X,
    Path,
    _TrUserData
) ->
    mk_type_error(
        {expected_msg, blockchain_state_channel_packet_v1_pb},
        X,
        Path
    ).

-compile({nowarn_unused_function, v_msg_blockchain_state_channel_offer_v1_pb/3}).
-dialyzer({nowarn_function, v_msg_blockchain_state_channel_offer_v1_pb/3}).
v_msg_blockchain_state_channel_offer_v1_pb(
    #blockchain_state_channel_offer_v1_pb{
        routing =
            F1,
        packet_hash =
            F2,
        payload_size =
            F3,
        fcnt =
            F4,
        hotspot =
            F5,
        signature =
            F6,
        region =
            F7,
        req_diff =
            F8
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined ->
            ok;
        true ->
            v_msg_routing_information_pb(
                F1,
                [routing | Path],
                TrUserData
            )
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_bytes(F2, [packet_hash | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_uint64(F3, [payload_size | Path], TrUserData)
    end,
    if
        F4 == undefined -> ok;
        true -> v_type_uint32(F4, [fcnt | Path], TrUserData)
    end,
    if
        F5 == undefined -> ok;
        true -> v_type_bytes(F5, [hotspot | Path], TrUserData)
    end,
    if
        F6 == undefined -> ok;
        true -> v_type_bytes(F6, [signature | Path], TrUserData)
    end,
    if
        F7 == undefined -> ok;
        true -> 'v_enum_helium.region'(F7, [region | Path], TrUserData)
    end,
    if
        F8 == undefined -> ok;
        true -> v_type_bool(F8, [req_diff | Path], TrUserData)
    end,
    ok;
v_msg_blockchain_state_channel_offer_v1_pb(
    X,
    Path,
    _TrUserData
) ->
    mk_type_error(
        {expected_msg, blockchain_state_channel_offer_v1_pb},
        X,
        Path
    ).

-compile({nowarn_unused_function, v_msg_blockchain_state_channel_purchase_v1_pb/3}).
-dialyzer({nowarn_function, v_msg_blockchain_state_channel_purchase_v1_pb/3}).
v_msg_blockchain_state_channel_purchase_v1_pb(
    #blockchain_state_channel_purchase_v1_pb{
        sc =
            F1,
        hotspot =
            F2,
        packet_hash =
            F3,
        region =
            F4,
        sc_diff =
            F5
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined ->
            ok;
        true ->
            v_msg_blockchain_state_channel_v1_pb(
                F1,
                [sc | Path],
                TrUserData
            )
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_bytes(F2, [hotspot | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_bytes(F3, [packet_hash | Path], TrUserData)
    end,
    if
        F4 == undefined -> ok;
        true -> 'v_enum_helium.region'(F4, [region | Path], TrUserData)
    end,
    if
        F5 == undefined ->
            ok;
        true ->
            v_msg_blockchain_state_channel_diff_v1_pb(
                F5,
                [sc_diff | Path],
                TrUserData
            )
    end,
    ok;
v_msg_blockchain_state_channel_purchase_v1_pb(
    X,
    Path,
    _TrUserData
) ->
    mk_type_error(
        {expected_msg, blockchain_state_channel_purchase_v1_pb},
        X,
        Path
    ).

-compile({nowarn_unused_function, v_msg_blockchain_state_channel_diff_v1_pb/3}).
-dialyzer({nowarn_function, v_msg_blockchain_state_channel_diff_v1_pb/3}).
v_msg_blockchain_state_channel_diff_v1_pb(
    #blockchain_state_channel_diff_v1_pb{
        id =
            F1,
        add_nonce =
            F2,
        signature =
            F3,
        diffs =
            F4
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [id | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_uint64(F2, [add_nonce | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_bytes(F3, [signature | Path], TrUserData)
    end,
    if
        is_list(F4) ->
            _ = [
                v_msg_blockchain_state_channel_diff_entry_v1_pb(
                    Elem,
                    [diffs | Path],
                    TrUserData
                )
                || Elem <- F4
            ],
            ok;
        true ->
            mk_type_error(
                {invalid_list_of, {msg, blockchain_state_channel_diff_entry_v1_pb}},
                F4,
                [diffs | Path]
            )
    end,
    ok;
v_msg_blockchain_state_channel_diff_v1_pb(
    X,
    Path,
    _TrUserData
) ->
    mk_type_error(
        {expected_msg, blockchain_state_channel_diff_v1_pb},
        X,
        Path
    ).

-compile({nowarn_unused_function, v_msg_blockchain_state_channel_diff_entry_v1_pb/3}).
-dialyzer({nowarn_function, v_msg_blockchain_state_channel_diff_entry_v1_pb/3}).
v_msg_blockchain_state_channel_diff_entry_v1_pb(
    #blockchain_state_channel_diff_entry_v1_pb{
        entry =
            F1
    },
    Path,
    TrUserData
) ->
    case F1 of
        undefined ->
            ok;
        {append, OF1} ->
            v_msg_blockchain_state_channel_diff_append_summary_v1_pb(
                OF1,
                [
                    append,
                    entry
                    | Path
                ],
                TrUserData
            );
        {add, OF1} ->
            v_msg_blockchain_state_channel_diff_update_summary_v1_pb(
                OF1,
                [add, entry | Path],
                TrUserData
            );
        _ ->
            mk_type_error(invalid_oneof, F1, [entry | Path])
    end,
    ok;
v_msg_blockchain_state_channel_diff_entry_v1_pb(
    X,
    Path,
    _TrUserData
) ->
    mk_type_error(
        {expected_msg, blockchain_state_channel_diff_entry_v1_pb},
        X,
        Path
    ).

-compile({nowarn_unused_function, v_msg_blockchain_state_channel_diff_append_summary_v1_pb/3}).
-dialyzer({nowarn_function, v_msg_blockchain_state_channel_diff_append_summary_v1_pb/3}).
v_msg_blockchain_state_channel_diff_append_summary_v1_pb(
    #blockchain_state_channel_diff_append_summary_v1_pb{
        client_pubkeybin =
            F1,
        num_packets =
            F2,
        num_dcs =
            F3
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [client_pubkeybin | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_uint64(F2, [num_packets | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_uint64(F3, [num_dcs | Path], TrUserData)
    end,
    ok;
v_msg_blockchain_state_channel_diff_append_summary_v1_pb(
    X,
    Path,
    _TrUserData
) ->
    mk_type_error(
        {expected_msg, blockchain_state_channel_diff_append_summary_v1_pb},
        X,
        Path
    ).

-compile({nowarn_unused_function, v_msg_blockchain_state_channel_diff_update_summary_v1_pb/3}).
-dialyzer({nowarn_function, v_msg_blockchain_state_channel_diff_update_summary_v1_pb/3}).
v_msg_blockchain_state_channel_diff_update_summary_v1_pb(
    #blockchain_state_channel_diff_update_summary_v1_pb{
        client_index =
            F1,
        add_packets =
            F2,
        add_dcs =
            F3
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_uint64(F1, [client_index | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_uint64(F2, [add_packets | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_uint64(F3, [add_dcs | Path], TrUserData)
    end,
    ok;
v_msg_blockchain_state_channel_diff_update_summary_v1_pb(
    X,
    Path,
    _TrUserData
) ->
    mk_type_error(
        {expected_msg, blockchain_state_channel_diff_update_summary_v1_pb},
        X,
        Path
    ).

-compile({nowarn_unused_function, v_msg_blockchain_state_channel_banner_v1_pb/3}).
-dialyzer({nowarn_function, v_msg_blockchain_state_channel_banner_v1_pb/3}).
v_msg_blockchain_state_channel_banner_v1_pb(
    #blockchain_state_channel_banner_v1_pb{
        sc =
            F1
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined ->
            ok;
        true ->
            v_msg_blockchain_state_channel_v1_pb(
                F1,
                [sc | Path],
                TrUserData
            )
    end,
    ok;
v_msg_blockchain_state_channel_banner_v1_pb(
    X,
    Path,
    _TrUserData
) ->
    mk_type_error(
        {expected_msg, blockchain_state_channel_banner_v1_pb},
        X,
        Path
    ).

-compile({nowarn_unused_function, v_msg_blockchain_state_channel_rejection_v1_pb/3}).
-dialyzer({nowarn_function, v_msg_blockchain_state_channel_rejection_v1_pb/3}).
v_msg_blockchain_state_channel_rejection_v1_pb(
    #blockchain_state_channel_rejection_v1_pb{
        reject =
            F1,
        packet_hash =
            F2
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_uint32(F1, [reject | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_bytes(F2, [packet_hash | Path], TrUserData)
    end,
    ok;
v_msg_blockchain_state_channel_rejection_v1_pb(
    X,
    Path,
    _TrUserData
) ->
    mk_type_error(
        {expected_msg, blockchain_state_channel_rejection_v1_pb},
        X,
        Path
    ).

-compile({nowarn_unused_function, v_msg_blockchain_state_channel_message_v1_pb/3}).
-dialyzer({nowarn_function, v_msg_blockchain_state_channel_message_v1_pb/3}).
v_msg_blockchain_state_channel_message_v1_pb(
    #blockchain_state_channel_message_v1_pb{
        msg =
            F1
    },
    Path,
    TrUserData
) ->
    case F1 of
        undefined ->
            ok;
        {response, OF1} ->
            v_msg_blockchain_state_channel_response_v1_pb(
                OF1,
                [response, msg | Path],
                TrUserData
            );
        {packet, OF1} ->
            v_msg_blockchain_state_channel_packet_v1_pb(
                OF1,
                [packet, msg | Path],
                TrUserData
            );
        {offer, OF1} ->
            v_msg_blockchain_state_channel_offer_v1_pb(
                OF1,
                [offer, msg | Path],
                TrUserData
            );
        {purchase, OF1} ->
            v_msg_blockchain_state_channel_purchase_v1_pb(
                OF1,
                [purchase, msg | Path],
                TrUserData
            );
        {banner, OF1} ->
            v_msg_blockchain_state_channel_banner_v1_pb(
                OF1,
                [banner, msg | Path],
                TrUserData
            );
        {reject, OF1} ->
            v_msg_blockchain_state_channel_rejection_v1_pb(
                OF1,
                [reject, msg | Path],
                TrUserData
            );
        _ ->
            mk_type_error(invalid_oneof, F1, [msg | Path])
    end,
    ok;
v_msg_blockchain_state_channel_message_v1_pb(
    X,
    Path,
    _TrUserData
) ->
    mk_type_error(
        {expected_msg, blockchain_state_channel_message_v1_pb},
        X,
        Path
    ).

-compile({nowarn_unused_function, v_msg_eui_pb/3}).
-dialyzer({nowarn_function, v_msg_eui_pb/3}).
v_msg_eui_pb(
    #eui_pb{deveui = F1, appeui = F2},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_uint64(F1, [deveui | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_uint64(F2, [appeui | Path], TrUserData)
    end,
    ok;
v_msg_eui_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, eui_pb}, X, Path).

-compile({nowarn_unused_function, v_msg_routing_information_pb/3}).
-dialyzer({nowarn_function, v_msg_routing_information_pb/3}).
v_msg_routing_information_pb(
    #routing_information_pb{
        data =
            F1
    },
    Path,
    TrUserData
) ->
    case F1 of
        undefined -> ok;
        {devaddr, OF1} -> v_type_uint32(OF1, [devaddr, data | Path], TrUserData);
        {eui, OF1} -> v_msg_eui_pb(OF1, [eui, data | Path], TrUserData);
        _ -> mk_type_error(invalid_oneof, F1, [data | Path])
    end,
    ok;
v_msg_routing_information_pb(X, Path, _TrUserData) ->
    mk_type_error(
        {expected_msg, routing_information_pb},
        X,
        Path
    ).

-compile({nowarn_unused_function, v_msg_window_pb/3}).
-dialyzer({nowarn_function, v_msg_window_pb/3}).
v_msg_window_pb(
    #window_pb{
        timestamp = F1,
        frequency = F2,
        datarate = F3
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_uint64(F1, [timestamp | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_float(F2, [frequency | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_string(F3, [datarate | Path], TrUserData)
    end,
    ok;
v_msg_window_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, window_pb}, X, Path).

-compile({nowarn_unused_function, v_msg_packet_pb/3}).
-dialyzer({nowarn_function, v_msg_packet_pb/3}).
v_msg_packet_pb(
    #packet_pb{
        oui = F1,
        type = F2,
        payload = F3,
        timestamp = F4,
        signal_strength = F5,
        frequency = F6,
        datarate = F7,
        snr = F8,
        routing = F9,
        rx2_window = F10
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_uint32(F1, [oui | Path], TrUserData)
    end,
    if
        F2 == undefined ->
            ok;
        true ->
            'v_enum_packet_pb.packet_type'(
                F2,
                [type | Path],
                TrUserData
            )
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_bytes(F3, [payload | Path], TrUserData)
    end,
    if
        F4 == undefined -> ok;
        true -> v_type_uint64(F4, [timestamp | Path], TrUserData)
    end,
    if
        F5 == undefined -> ok;
        true -> v_type_float(F5, [signal_strength | Path], TrUserData)
    end,
    if
        F6 == undefined -> ok;
        true -> v_type_float(F6, [frequency | Path], TrUserData)
    end,
    if
        F7 == undefined -> ok;
        true -> v_type_string(F7, [datarate | Path], TrUserData)
    end,
    if
        F8 == undefined -> ok;
        true -> v_type_float(F8, [snr | Path], TrUserData)
    end,
    if
        F9 == undefined ->
            ok;
        true ->
            v_msg_routing_information_pb(
                F9,
                [routing | Path],
                TrUserData
            )
    end,
    if
        F10 == undefined -> ok;
        true -> v_msg_window_pb(F10, [rx2_window | Path], TrUserData)
    end,
    ok;
v_msg_packet_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, packet_pb}, X, Path).

-compile({nowarn_unused_function, 'v_enum_helium.blockchain_state_channel_state_v1'/3}).
-dialyzer({nowarn_function, 'v_enum_helium.blockchain_state_channel_state_v1'/3}).
'v_enum_helium.blockchain_state_channel_state_v1'(
    open,
    _Path,
    _TrUserData
) ->
    ok;
'v_enum_helium.blockchain_state_channel_state_v1'(
    closed,
    _Path,
    _TrUserData
) ->
    ok;
'v_enum_helium.blockchain_state_channel_state_v1'(
    V,
    Path,
    TrUserData
) when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_helium.blockchain_state_channel_state_v1'(
    X,
    Path,
    _TrUserData
) ->
    mk_type_error(
        {invalid_enum, 'helium.blockchain_state_channel_state_v1'},
        X,
        Path
    ).

-compile({nowarn_unused_function, 'v_enum_packet_pb.packet_type'/3}).
-dialyzer({nowarn_function, 'v_enum_packet_pb.packet_type'/3}).
'v_enum_packet_pb.packet_type'(
    longfi,
    _Path,
    _TrUserData
) ->
    ok;
'v_enum_packet_pb.packet_type'(
    lorawan,
    _Path,
    _TrUserData
) ->
    ok;
'v_enum_packet_pb.packet_type'(V, Path, TrUserData) when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_packet_pb.packet_type'(X, Path, _TrUserData) ->
    mk_type_error(
        {invalid_enum, 'packet_pb.packet_type'},
        X,
        Path
    ).

-compile({nowarn_unused_function, 'v_enum_helium.region'/3}).
-dialyzer({nowarn_function, 'v_enum_helium.region'/3}).
'v_enum_helium.region'('US915', _Path, _TrUserData) ->
    ok;
'v_enum_helium.region'('EU868', _Path, _TrUserData) ->
    ok;
'v_enum_helium.region'('EU433', _Path, _TrUserData) ->
    ok;
'v_enum_helium.region'('CN470', _Path, _TrUserData) ->
    ok;
'v_enum_helium.region'('CN779', _Path, _TrUserData) ->
    ok;
'v_enum_helium.region'('AU915', _Path, _TrUserData) ->
    ok;
'v_enum_helium.region'('AS923_1', _Path, _TrUserData) ->
    ok;
'v_enum_helium.region'('KR920', _Path, _TrUserData) ->
    ok;
'v_enum_helium.region'('IN865', _Path, _TrUserData) ->
    ok;
'v_enum_helium.region'('AS923_2', _Path, _TrUserData) ->
    ok;
'v_enum_helium.region'('AS923_3', _Path, _TrUserData) ->
    ok;
'v_enum_helium.region'('AS923_4', _Path, _TrUserData) ->
    ok;
'v_enum_helium.region'(
    'AS923_1B',
    _Path,
    _TrUserData
) ->
    ok;
'v_enum_helium.region'(
    'CD900_1A',
    _Path,
    _TrUserData
) ->
    ok;
'v_enum_helium.region'(V, Path, TrUserData) when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_helium.region'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'helium.region'}, X, Path).

-compile({nowarn_unused_function, v_type_sint32/3}).
-dialyzer({nowarn_function, v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData) when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error(
        {value_out_of_range, sint32, signed, 32},
        N,
        Path
    );
v_type_sint32(X, Path, _TrUserData) ->
    mk_type_error(
        {bad_integer, sint32, signed, 32},
        X,
        Path
    ).

-compile({nowarn_unused_function, v_type_uint32/3}).
-dialyzer({nowarn_function, v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData) when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error(
        {value_out_of_range, uint32, unsigned, 32},
        N,
        Path
    );
v_type_uint32(X, Path, _TrUserData) ->
    mk_type_error(
        {bad_integer, uint32, unsigned, 32},
        X,
        Path
    ).

-compile({nowarn_unused_function, v_type_uint64/3}).
-dialyzer({nowarn_function, v_type_uint64/3}).
v_type_uint64(N, _Path, _TrUserData) when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_uint64(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error(
        {value_out_of_range, uint64, unsigned, 64},
        N,
        Path
    );
v_type_uint64(X, Path, _TrUserData) ->
    mk_type_error(
        {bad_integer, uint64, unsigned, 64},
        X,
        Path
    ).

-compile({nowarn_unused_function, v_type_bool/3}).
-dialyzer({nowarn_function, v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) -> mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function, v_type_float/3}).
-dialyzer({nowarn_function, v_type_float/3}).
v_type_float(N, _Path, _TrUserData) when is_float(N) ->
    ok;
v_type_float(N, _Path, _TrUserData) when is_integer(N) ->
    ok;
v_type_float(infinity, _Path, _TrUserData) ->
    ok;
v_type_float('-infinity', _Path, _TrUserData) ->
    ok;
v_type_float(nan, _Path, _TrUserData) ->
    ok;
v_type_float(X, Path, _TrUserData) ->
    mk_type_error(bad_float_value, X, Path).

-compile({nowarn_unused_function, v_type_string/3}).
-dialyzer({nowarn_function, v_type_string/3}).
v_type_string(S, Path, _TrUserData) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} -> mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg ->
            mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function, v_type_bytes/3}).
-dialyzer({nowarn_function, v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) ->
    ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) ->
    ok;
v_type_bytes(X, Path, _TrUserData) ->
    mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function, mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).

-compile({nowarn_unused_function, prettify_path/1}).
-dialyzer({nowarn_function, prettify_path/1}).
prettify_path([]) ->
    top_level;
prettify_path(PathR) ->
    list_to_atom(
        lists:append(
            lists:join(
                ".",
                lists:map(
                    fun atom_to_list/1,
                    lists:reverse(PathR)
                )
            )
        )
    ).

-compile({nowarn_unused_function, id/2}).
-compile({inline, id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function, v_ok/3}).
-compile({inline, v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function, m_overwrite/3}).
-compile({inline, m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function, cons/3}).
-compile({inline, cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function, lists_reverse/2}).
-compile({inline, lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function, 'erlang_++'/3}).
-compile({inline, 'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [
        {{enum, 'helium.blockchain_state_channel_state_v1'}, [{open, 0}, {closed, 1}]},
        {{enum, 'packet_pb.packet_type'}, [{longfi, 0}, {lorawan, 1}]},
        {{enum, 'helium.region'}, [
            {'US915', 0},
            {'EU868', 1},
            {'EU433', 2},
            {'CN470', 3},
            {'CN779', 4},
            {'AU915', 5},
            {'AS923_1', 6},
            {'KR920', 7},
            {'IN865', 8},
            {'AS923_2', 9},
            {'AS923_3', 10},
            {'AS923_4', 11},
            {'AS923_1B', 12},
            {'CD900_1A', 13}
        ]},
        {{msg, blockchain_state_channel_summary_v1_pb}, [
            [
                {name, client_pubkeybin},
                {fnum, 1},
                {rnum, 2},
                {type, bytes},
                {occurrence, optional},
                {opts, []}
            ],
            [
                {name, num_packets},
                {fnum, 2},
                {rnum, 3},
                {type, uint64},
                {occurrence, optional},
                {opts, []}
            ],
            [
                {name, num_dcs},
                {fnum, 3},
                {rnum, 4},
                {type, uint64},
                {occurrence, optional},
                {opts, []}
            ]
        ]},
        {{msg, blockchain_state_channel_v1_pb}, [
            [
                {name, id},
                {fnum, 1},
                {rnum, 2},
                {type, bytes},
                {occurrence, optional},
                {opts, []}
            ],
            [
                {name, owner},
                {fnum, 2},
                {rnum, 3},
                {type, bytes},
                {occurrence, optional},
                {opts, []}
            ],
            [
                {name, credits},
                {fnum, 3},
                {rnum, 4},
                {type, uint64},
                {occurrence, optional},
                {opts, []}
            ],
            [
                {name, nonce},
                {fnum, 4},
                {rnum, 5},
                {type, uint64},
                {occurrence, optional},
                {opts, []}
            ],
            [
                {name, summaries},
                {fnum, 5},
                {rnum, 6},
                {type, {msg, blockchain_state_channel_summary_v1_pb}},
                {occurrence, repeated},
                {opts, []}
            ],
            [
                {name, root_hash},
                {fnum, 6},
                {rnum, 7},
                {type, bytes},
                {occurrence, optional},
                {opts, []}
            ],
            [
                {name, skewed},
                {fnum, 7},
                {rnum, 8},
                {type, bytes},
                {occurrence, optional},
                {opts, []}
            ],
            [
                {name, state},
                {fnum, 8},
                {rnum, 9},
                {type, {enum, 'helium.blockchain_state_channel_state_v1'}},
                {occurrence, optional},
                {opts, []}
            ],
            [
                {name, expire_at_block},
                {fnum, 9},
                {rnum, 10},
                {type, uint64},
                {occurrence, optional},
                {opts, []}
            ],
            [
                {name, signature},
                {fnum, 10},
                {rnum, 11},
                {type, bytes},
                {occurrence, optional},
                {opts, []}
            ]
        ]},
        {{msg, blockchain_state_channel_response_v1_pb}, [
            [
                {name, accepted},
                {fnum, 1},
                {rnum, 2},
                {type, bool},
                {occurrence, optional},
                {opts, []}
            ],
            [
                {name, downlink},
                {fnum, 4},
                {rnum, 3},
                {type, {msg, packet_pb}},
                {occurrence, optional},
                {opts, []}
            ]
        ]},
        {{msg, blockchain_state_channel_packet_v1_pb}, [
            [
                {name, packet},
                {fnum, 1},
                {rnum, 2},
                {type, {msg, packet_pb}},
                {occurrence, optional},
                {opts, []}
            ],
            [
                {name, hotspot},
                {fnum, 2},
                {rnum, 3},
                {type, bytes},
                {occurrence, optional},
                {opts, []}
            ],
            [
                {name, signature},
                {fnum, 3},
                {rnum, 4},
                {type, bytes},
                {occurrence, optional},
                {opts, []}
            ],
            [
                {name, region},
                {fnum, 4},
                {rnum, 5},
                {type, {enum, 'helium.region'}},
                {occurrence, optional},
                {opts, []}
            ],
            [
                {name, hold_time},
                {fnum, 5},
                {rnum, 6},
                {type, uint64},
                {occurrence, optional},
                {opts, []}
            ]
        ]},
        {{msg, blockchain_state_channel_offer_v1_pb}, [
            [
                {name, routing},
                {fnum, 1},
                {rnum, 2},
                {type, {msg, routing_information_pb}},
                {occurrence, optional},
                {opts, []}
            ],
            [
                {name, packet_hash},
                {fnum, 2},
                {rnum, 3},
                {type, bytes},
                {occurrence, optional},
                {opts, []}
            ],
            [
                {name, payload_size},
                {fnum, 3},
                {rnum, 4},
                {type, uint64},
                {occurrence, optional},
                {opts, []}
            ],
            [
                {name, fcnt},
                {fnum, 4},
                {rnum, 5},
                {type, uint32},
                {occurrence, optional},
                {opts, []}
            ],
            [
                {name, hotspot},
                {fnum, 5},
                {rnum, 6},
                {type, bytes},
                {occurrence, optional},
                {opts, []}
            ],
            [
                {name, signature},
                {fnum, 6},
                {rnum, 7},
                {type, bytes},
                {occurrence, optional},
                {opts, []}
            ],
            [
                {name, region},
                {fnum, 7},
                {rnum, 8},
                {type, {enum, 'helium.region'}},
                {occurrence, optional},
                {opts, []}
            ],
            [
                {name, req_diff},
                {fnum, 8},
                {rnum, 9},
                {type, bool},
                {occurrence, optional},
                {opts, []}
            ]
        ]},
        {{msg, blockchain_state_channel_purchase_v1_pb}, [
            [
                {name, sc},
                {fnum, 1},
                {rnum, 2},
                {type, {msg, blockchain_state_channel_v1_pb}},
                {occurrence, optional},
                {opts, []}
            ],
            [
                {name, hotspot},
                {fnum, 2},
                {rnum, 3},
                {type, bytes},
                {occurrence, optional},
                {opts, []}
            ],
            [
                {name, packet_hash},
                {fnum, 3},
                {rnum, 4},
                {type, bytes},
                {occurrence, optional},
                {opts, []}
            ],
            [
                {name, region},
                {fnum, 4},
                {rnum, 5},
                {type, {enum, 'helium.region'}},
                {occurrence, optional},
                {opts, []}
            ],
            [
                {name, sc_diff},
                {fnum, 5},
                {rnum, 6},
                {type, {msg, blockchain_state_channel_diff_v1_pb}},
                {occurrence, optional},
                {opts, []}
            ]
        ]},
        {{msg, blockchain_state_channel_diff_v1_pb}, [
            [
                {name, id},
                {fnum, 1},
                {rnum, 2},
                {type, bytes},
                {occurrence, optional},
                {opts, []}
            ],
            [
                {name, add_nonce},
                {fnum, 2},
                {rnum, 3},
                {type, uint64},
                {occurrence, optional},
                {opts, []}
            ],
            [
                {name, signature},
                {fnum, 3},
                {rnum, 4},
                {type, bytes},
                {occurrence, optional},
                {opts, []}
            ],
            [
                {name, diffs},
                {fnum, 4},
                {rnum, 5},
                {type, {msg, blockchain_state_channel_diff_entry_v1_pb}},
                {occurrence, repeated},
                {opts, []}
            ]
        ]},
        {{msg, blockchain_state_channel_diff_entry_v1_pb}, [
            [
                {name, entry},
                {rnum, 2},
                {fields, [
                    [
                        {name, append},
                        {fnum, 1},
                        {rnum, 2},
                        {type, {msg, blockchain_state_channel_diff_append_summary_v1_pb}},
                        {occurrence, optional},
                        {opts, []}
                    ],
                    [
                        {name, add},
                        {fnum, 2},
                        {rnum, 2},
                        {type, {msg, blockchain_state_channel_diff_update_summary_v1_pb}},
                        {occurrence, optional},
                        {opts, []}
                    ]
                ]}
            ]
        ]},
        {{msg, blockchain_state_channel_diff_append_summary_v1_pb}, [
            [
                {name, client_pubkeybin},
                {fnum, 1},
                {rnum, 2},
                {type, bytes},
                {occurrence, optional},
                {opts, []}
            ],
            [
                {name, num_packets},
                {fnum, 2},
                {rnum, 3},
                {type, uint64},
                {occurrence, optional},
                {opts, []}
            ],
            [
                {name, num_dcs},
                {fnum, 3},
                {rnum, 4},
                {type, uint64},
                {occurrence, optional},
                {opts, []}
            ]
        ]},
        {{msg, blockchain_state_channel_diff_update_summary_v1_pb}, [
            [
                {name, client_index},
                {fnum, 1},
                {rnum, 2},
                {type, uint64},
                {occurrence, optional},
                {opts, []}
            ],
            [
                {name, add_packets},
                {fnum, 2},
                {rnum, 3},
                {type, uint64},
                {occurrence, optional},
                {opts, []}
            ],
            [
                {name, add_dcs},
                {fnum, 3},
                {rnum, 4},
                {type, uint64},
                {occurrence, optional},
                {opts, []}
            ]
        ]},
        {{msg, blockchain_state_channel_banner_v1_pb}, [
            [
                {name, sc},
                {fnum, 1},
                {rnum, 2},
                {type, {msg, blockchain_state_channel_v1_pb}},
                {occurrence, optional},
                {opts, []}
            ]
        ]},
        {{msg, blockchain_state_channel_rejection_v1_pb}, [
            [
                {name, reject},
                {fnum, 1},
                {rnum, 2},
                {type, uint32},
                {occurrence, optional},
                {opts, []}
            ],
            [
                {name, packet_hash},
                {fnum, 2},
                {rnum, 3},
                {type, bytes},
                {occurrence, optional},
                {opts, []}
            ]
        ]},
        {{msg, blockchain_state_channel_message_v1_pb}, [
            [
                {name, msg},
                {rnum, 2},
                {fields, [
                    [
                        {name, response},
                        {fnum, 2},
                        {rnum, 2},
                        {type, {msg, blockchain_state_channel_response_v1_pb}},
                        {occurrence, optional},
                        {opts, []}
                    ],
                    [
                        {name, packet},
                        {fnum, 4},
                        {rnum, 2},
                        {type, {msg, blockchain_state_channel_packet_v1_pb}},
                        {occurrence, optional},
                        {opts, []}
                    ],
                    [
                        {name, offer},
                        {fnum, 5},
                        {rnum, 2},
                        {type, {msg, blockchain_state_channel_offer_v1_pb}},
                        {occurrence, optional},
                        {opts, []}
                    ],
                    [
                        {name, purchase},
                        {fnum, 6},
                        {rnum, 2},
                        {type, {msg, blockchain_state_channel_purchase_v1_pb}},
                        {occurrence, optional},
                        {opts, []}
                    ],
                    [
                        {name, banner},
                        {fnum, 7},
                        {rnum, 2},
                        {type, {msg, blockchain_state_channel_banner_v1_pb}},
                        {occurrence, optional},
                        {opts, []}
                    ],
                    [
                        {name, reject},
                        {fnum, 8},
                        {rnum, 2},
                        {type, {msg, blockchain_state_channel_rejection_v1_pb}},
                        {occurrence, optional},
                        {opts, []}
                    ]
                ]}
            ]
        ]},
        {{msg, eui_pb}, [
            [
                {name, deveui},
                {fnum, 1},
                {rnum, 2},
                {type, uint64},
                {occurrence, optional},
                {opts, []}
            ],
            [
                {name, appeui},
                {fnum, 2},
                {rnum, 3},
                {type, uint64},
                {occurrence, optional},
                {opts, []}
            ]
        ]},
        {{msg, routing_information_pb}, [
            [
                {name, data},
                {rnum, 2},
                {fields, [
                    [
                        {name, devaddr},
                        {fnum, 1},
                        {rnum, 2},
                        {type, uint32},
                        {occurrence, optional},
                        {opts, []}
                    ],
                    [
                        {name, eui},
                        {fnum, 2},
                        {rnum, 2},
                        {type, {msg, eui_pb}},
                        {occurrence, optional},
                        {opts, []}
                    ]
                ]}
            ]
        ]},
        {{msg, window_pb}, [
            [
                {name, timestamp},
                {fnum, 1},
                {rnum, 2},
                {type, uint64},
                {occurrence, optional},
                {opts, []}
            ],
            [
                {name, frequency},
                {fnum, 2},
                {rnum, 3},
                {type, float},
                {occurrence, optional},
                {opts, []}
            ],
            [
                {name, datarate},
                {fnum, 3},
                {rnum, 4},
                {type, string},
                {occurrence, optional},
                {opts, []}
            ]
        ]},
        {{msg, packet_pb}, [
            [
                {name, oui},
                {fnum, 1},
                {rnum, 2},
                {type, uint32},
                {occurrence, optional},
                {opts, []}
            ],
            [
                {name, type},
                {fnum, 2},
                {rnum, 3},
                {type, {enum, 'packet_pb.packet_type'}},
                {occurrence, optional},
                {opts, []}
            ],
            [
                {name, payload},
                {fnum, 3},
                {rnum, 4},
                {type, bytes},
                {occurrence, optional},
                {opts, []}
            ],
            [
                {name, timestamp},
                {fnum, 4},
                {rnum, 5},
                {type, uint64},
                {occurrence, optional},
                {opts, []}
            ],
            [
                {name, signal_strength},
                {fnum, 5},
                {rnum, 6},
                {type, float},
                {occurrence, optional},
                {opts, []}
            ],
            [
                {name, frequency},
                {fnum, 6},
                {rnum, 7},
                {type, float},
                {occurrence, optional},
                {opts, []}
            ],
            [
                {name, datarate},
                {fnum, 7},
                {rnum, 8},
                {type, string},
                {occurrence, optional},
                {opts, []}
            ],
            [
                {name, snr},
                {fnum, 8},
                {rnum, 9},
                {type, float},
                {occurrence, optional},
                {opts, []}
            ],
            [
                {name, routing},
                {fnum, 9},
                {rnum, 10},
                {type, {msg, routing_information_pb}},
                {occurrence, optional},
                {opts, []}
            ],
            [
                {name, rx2_window},
                {fnum, 10},
                {rnum, 11},
                {type, {msg, window_pb}},
                {occurrence, optional},
                {opts, []}
            ]
        ]}
    ].

get_msg_names() ->
    [
        blockchain_state_channel_summary_v1_pb,
        blockchain_state_channel_v1_pb,
        blockchain_state_channel_response_v1_pb,
        blockchain_state_channel_packet_v1_pb,
        blockchain_state_channel_offer_v1_pb,
        blockchain_state_channel_purchase_v1_pb,
        blockchain_state_channel_diff_v1_pb,
        blockchain_state_channel_diff_entry_v1_pb,
        blockchain_state_channel_diff_append_summary_v1_pb,
        blockchain_state_channel_diff_update_summary_v1_pb,
        blockchain_state_channel_banner_v1_pb,
        blockchain_state_channel_rejection_v1_pb,
        blockchain_state_channel_message_v1_pb,
        eui_pb,
        routing_information_pb,
        window_pb,
        packet_pb
    ].

get_group_names() -> [].

get_msg_or_group_names() ->
    [
        blockchain_state_channel_summary_v1_pb,
        blockchain_state_channel_v1_pb,
        blockchain_state_channel_response_v1_pb,
        blockchain_state_channel_packet_v1_pb,
        blockchain_state_channel_offer_v1_pb,
        blockchain_state_channel_purchase_v1_pb,
        blockchain_state_channel_diff_v1_pb,
        blockchain_state_channel_diff_entry_v1_pb,
        blockchain_state_channel_diff_append_summary_v1_pb,
        blockchain_state_channel_diff_update_summary_v1_pb,
        blockchain_state_channel_banner_v1_pb,
        blockchain_state_channel_rejection_v1_pb,
        blockchain_state_channel_message_v1_pb,
        eui_pb,
        routing_information_pb,
        window_pb,
        packet_pb
    ].

get_enum_names() ->
    [
        'helium.blockchain_state_channel_state_v1',
        'packet_pb.packet_type',
        'helium.region'
    ].

fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.

fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
        Es when is_list(Es) -> Es;
        error -> erlang:error({no_such_enum, EnumName})
    end.

find_msg_def(blockchain_state_channel_summary_v1_pb) ->
    [
        [
            {name, client_pubkeybin},
            {fnum, 1},
            {rnum, 2},
            {type, bytes},
            {occurrence, optional},
            {opts, []}
        ],
        [
            {name, num_packets},
            {fnum, 2},
            {rnum, 3},
            {type, uint64},
            {occurrence, optional},
            {opts, []}
        ],
        [
            {name, num_dcs},
            {fnum, 3},
            {rnum, 4},
            {type, uint64},
            {occurrence, optional},
            {opts, []}
        ]
    ];
find_msg_def(blockchain_state_channel_v1_pb) ->
    [
        [
            {name, id},
            {fnum, 1},
            {rnum, 2},
            {type, bytes},
            {occurrence, optional},
            {opts, []}
        ],
        [
            {name, owner},
            {fnum, 2},
            {rnum, 3},
            {type, bytes},
            {occurrence, optional},
            {opts, []}
        ],
        [
            {name, credits},
            {fnum, 3},
            {rnum, 4},
            {type, uint64},
            {occurrence, optional},
            {opts, []}
        ],
        [
            {name, nonce},
            {fnum, 4},
            {rnum, 5},
            {type, uint64},
            {occurrence, optional},
            {opts, []}
        ],
        [
            {name, summaries},
            {fnum, 5},
            {rnum, 6},
            {type, {msg, blockchain_state_channel_summary_v1_pb}},
            {occurrence, repeated},
            {opts, []}
        ],
        [
            {name, root_hash},
            {fnum, 6},
            {rnum, 7},
            {type, bytes},
            {occurrence, optional},
            {opts, []}
        ],
        [
            {name, skewed},
            {fnum, 7},
            {rnum, 8},
            {type, bytes},
            {occurrence, optional},
            {opts, []}
        ],
        [
            {name, state},
            {fnum, 8},
            {rnum, 9},
            {type, {enum, 'helium.blockchain_state_channel_state_v1'}},
            {occurrence, optional},
            {opts, []}
        ],
        [
            {name, expire_at_block},
            {fnum, 9},
            {rnum, 10},
            {type, uint64},
            {occurrence, optional},
            {opts, []}
        ],
        [
            {name, signature},
            {fnum, 10},
            {rnum, 11},
            {type, bytes},
            {occurrence, optional},
            {opts, []}
        ]
    ];
find_msg_def(blockchain_state_channel_response_v1_pb) ->
    [
        [
            {name, accepted},
            {fnum, 1},
            {rnum, 2},
            {type, bool},
            {occurrence, optional},
            {opts, []}
        ],
        [
            {name, downlink},
            {fnum, 4},
            {rnum, 3},
            {type, {msg, packet_pb}},
            {occurrence, optional},
            {opts, []}
        ]
    ];
find_msg_def(blockchain_state_channel_packet_v1_pb) ->
    [
        [
            {name, packet},
            {fnum, 1},
            {rnum, 2},
            {type, {msg, packet_pb}},
            {occurrence, optional},
            {opts, []}
        ],
        [
            {name, hotspot},
            {fnum, 2},
            {rnum, 3},
            {type, bytes},
            {occurrence, optional},
            {opts, []}
        ],
        [
            {name, signature},
            {fnum, 3},
            {rnum, 4},
            {type, bytes},
            {occurrence, optional},
            {opts, []}
        ],
        [
            {name, region},
            {fnum, 4},
            {rnum, 5},
            {type, {enum, 'helium.region'}},
            {occurrence, optional},
            {opts, []}
        ],
        [
            {name, hold_time},
            {fnum, 5},
            {rnum, 6},
            {type, uint64},
            {occurrence, optional},
            {opts, []}
        ]
    ];
find_msg_def(blockchain_state_channel_offer_v1_pb) ->
    [
        [
            {name, routing},
            {fnum, 1},
            {rnum, 2},
            {type, {msg, routing_information_pb}},
            {occurrence, optional},
            {opts, []}
        ],
        [
            {name, packet_hash},
            {fnum, 2},
            {rnum, 3},
            {type, bytes},
            {occurrence, optional},
            {opts, []}
        ],
        [
            {name, payload_size},
            {fnum, 3},
            {rnum, 4},
            {type, uint64},
            {occurrence, optional},
            {opts, []}
        ],
        [
            {name, fcnt},
            {fnum, 4},
            {rnum, 5},
            {type, uint32},
            {occurrence, optional},
            {opts, []}
        ],
        [
            {name, hotspot},
            {fnum, 5},
            {rnum, 6},
            {type, bytes},
            {occurrence, optional},
            {opts, []}
        ],
        [
            {name, signature},
            {fnum, 6},
            {rnum, 7},
            {type, bytes},
            {occurrence, optional},
            {opts, []}
        ],
        [
            {name, region},
            {fnum, 7},
            {rnum, 8},
            {type, {enum, 'helium.region'}},
            {occurrence, optional},
            {opts, []}
        ],
        [
            {name, req_diff},
            {fnum, 8},
            {rnum, 9},
            {type, bool},
            {occurrence, optional},
            {opts, []}
        ]
    ];
find_msg_def(blockchain_state_channel_purchase_v1_pb) ->
    [
        [
            {name, sc},
            {fnum, 1},
            {rnum, 2},
            {type, {msg, blockchain_state_channel_v1_pb}},
            {occurrence, optional},
            {opts, []}
        ],
        [
            {name, hotspot},
            {fnum, 2},
            {rnum, 3},
            {type, bytes},
            {occurrence, optional},
            {opts, []}
        ],
        [
            {name, packet_hash},
            {fnum, 3},
            {rnum, 4},
            {type, bytes},
            {occurrence, optional},
            {opts, []}
        ],
        [
            {name, region},
            {fnum, 4},
            {rnum, 5},
            {type, {enum, 'helium.region'}},
            {occurrence, optional},
            {opts, []}
        ],
        [
            {name, sc_diff},
            {fnum, 5},
            {rnum, 6},
            {type, {msg, blockchain_state_channel_diff_v1_pb}},
            {occurrence, optional},
            {opts, []}
        ]
    ];
find_msg_def(blockchain_state_channel_diff_v1_pb) ->
    [
        [
            {name, id},
            {fnum, 1},
            {rnum, 2},
            {type, bytes},
            {occurrence, optional},
            {opts, []}
        ],
        [
            {name, add_nonce},
            {fnum, 2},
            {rnum, 3},
            {type, uint64},
            {occurrence, optional},
            {opts, []}
        ],
        [
            {name, signature},
            {fnum, 3},
            {rnum, 4},
            {type, bytes},
            {occurrence, optional},
            {opts, []}
        ],
        [
            {name, diffs},
            {fnum, 4},
            {rnum, 5},
            {type, {msg, blockchain_state_channel_diff_entry_v1_pb}},
            {occurrence, repeated},
            {opts, []}
        ]
    ];
find_msg_def(blockchain_state_channel_diff_entry_v1_pb) ->
    [
        [
            {name, entry},
            {rnum, 2},
            {fields, [
                [
                    {name, append},
                    {fnum, 1},
                    {rnum, 2},
                    {type, {msg, blockchain_state_channel_diff_append_summary_v1_pb}},
                    {occurrence, optional},
                    {opts, []}
                ],
                [
                    {name, add},
                    {fnum, 2},
                    {rnum, 2},
                    {type, {msg, blockchain_state_channel_diff_update_summary_v1_pb}},
                    {occurrence, optional},
                    {opts, []}
                ]
            ]}
        ]
    ];
find_msg_def(blockchain_state_channel_diff_append_summary_v1_pb) ->
    [
        [
            {name, client_pubkeybin},
            {fnum, 1},
            {rnum, 2},
            {type, bytes},
            {occurrence, optional},
            {opts, []}
        ],
        [
            {name, num_packets},
            {fnum, 2},
            {rnum, 3},
            {type, uint64},
            {occurrence, optional},
            {opts, []}
        ],
        [
            {name, num_dcs},
            {fnum, 3},
            {rnum, 4},
            {type, uint64},
            {occurrence, optional},
            {opts, []}
        ]
    ];
find_msg_def(blockchain_state_channel_diff_update_summary_v1_pb) ->
    [
        [
            {name, client_index},
            {fnum, 1},
            {rnum, 2},
            {type, uint64},
            {occurrence, optional},
            {opts, []}
        ],
        [
            {name, add_packets},
            {fnum, 2},
            {rnum, 3},
            {type, uint64},
            {occurrence, optional},
            {opts, []}
        ],
        [
            {name, add_dcs},
            {fnum, 3},
            {rnum, 4},
            {type, uint64},
            {occurrence, optional},
            {opts, []}
        ]
    ];
find_msg_def(blockchain_state_channel_banner_v1_pb) ->
    [
        [
            {name, sc},
            {fnum, 1},
            {rnum, 2},
            {type, {msg, blockchain_state_channel_v1_pb}},
            {occurrence, optional},
            {opts, []}
        ]
    ];
find_msg_def(blockchain_state_channel_rejection_v1_pb) ->
    [
        [
            {name, reject},
            {fnum, 1},
            {rnum, 2},
            {type, uint32},
            {occurrence, optional},
            {opts, []}
        ],
        [
            {name, packet_hash},
            {fnum, 2},
            {rnum, 3},
            {type, bytes},
            {occurrence, optional},
            {opts, []}
        ]
    ];
find_msg_def(blockchain_state_channel_message_v1_pb) ->
    [
        [
            {name, msg},
            {rnum, 2},
            {fields, [
                [
                    {name, response},
                    {fnum, 2},
                    {rnum, 2},
                    {type, {msg, blockchain_state_channel_response_v1_pb}},
                    {occurrence, optional},
                    {opts, []}
                ],
                [
                    {name, packet},
                    {fnum, 4},
                    {rnum, 2},
                    {type, {msg, blockchain_state_channel_packet_v1_pb}},
                    {occurrence, optional},
                    {opts, []}
                ],
                [
                    {name, offer},
                    {fnum, 5},
                    {rnum, 2},
                    {type, {msg, blockchain_state_channel_offer_v1_pb}},
                    {occurrence, optional},
                    {opts, []}
                ],
                [
                    {name, purchase},
                    {fnum, 6},
                    {rnum, 2},
                    {type, {msg, blockchain_state_channel_purchase_v1_pb}},
                    {occurrence, optional},
                    {opts, []}
                ],
                [
                    {name, banner},
                    {fnum, 7},
                    {rnum, 2},
                    {type, {msg, blockchain_state_channel_banner_v1_pb}},
                    {occurrence, optional},
                    {opts, []}
                ],
                [
                    {name, reject},
                    {fnum, 8},
                    {rnum, 2},
                    {type, {msg, blockchain_state_channel_rejection_v1_pb}},
                    {occurrence, optional},
                    {opts, []}
                ]
            ]}
        ]
    ];
find_msg_def(eui_pb) ->
    [
        [
            {name, deveui},
            {fnum, 1},
            {rnum, 2},
            {type, uint64},
            {occurrence, optional},
            {opts, []}
        ],
        [
            {name, appeui},
            {fnum, 2},
            {rnum, 3},
            {type, uint64},
            {occurrence, optional},
            {opts, []}
        ]
    ];
find_msg_def(routing_information_pb) ->
    [
        [
            {name, data},
            {rnum, 2},
            {fields, [
                [
                    {name, devaddr},
                    {fnum, 1},
                    {rnum, 2},
                    {type, uint32},
                    {occurrence, optional},
                    {opts, []}
                ],
                [
                    {name, eui},
                    {fnum, 2},
                    {rnum, 2},
                    {type, {msg, eui_pb}},
                    {occurrence, optional},
                    {opts, []}
                ]
            ]}
        ]
    ];
find_msg_def(window_pb) ->
    [
        [
            {name, timestamp},
            {fnum, 1},
            {rnum, 2},
            {type, uint64},
            {occurrence, optional},
            {opts, []}
        ],
        [
            {name, frequency},
            {fnum, 2},
            {rnum, 3},
            {type, float},
            {occurrence, optional},
            {opts, []}
        ],
        [
            {name, datarate},
            {fnum, 3},
            {rnum, 4},
            {type, string},
            {occurrence, optional},
            {opts, []}
        ]
    ];
find_msg_def(packet_pb) ->
    [
        [
            {name, oui},
            {fnum, 1},
            {rnum, 2},
            {type, uint32},
            {occurrence, optional},
            {opts, []}
        ],
        [
            {name, type},
            {fnum, 2},
            {rnum, 3},
            {type, {enum, 'packet_pb.packet_type'}},
            {occurrence, optional},
            {opts, []}
        ],
        [
            {name, payload},
            {fnum, 3},
            {rnum, 4},
            {type, bytes},
            {occurrence, optional},
            {opts, []}
        ],
        [
            {name, timestamp},
            {fnum, 4},
            {rnum, 5},
            {type, uint64},
            {occurrence, optional},
            {opts, []}
        ],
        [
            {name, signal_strength},
            {fnum, 5},
            {rnum, 6},
            {type, float},
            {occurrence, optional},
            {opts, []}
        ],
        [
            {name, frequency},
            {fnum, 6},
            {rnum, 7},
            {type, float},
            {occurrence, optional},
            {opts, []}
        ],
        [
            {name, datarate},
            {fnum, 7},
            {rnum, 8},
            {type, string},
            {occurrence, optional},
            {opts, []}
        ],
        [
            {name, snr},
            {fnum, 8},
            {rnum, 9},
            {type, float},
            {occurrence, optional},
            {opts, []}
        ],
        [
            {name, routing},
            {fnum, 9},
            {rnum, 10},
            {type, {msg, routing_information_pb}},
            {occurrence, optional},
            {opts, []}
        ],
        [
            {name, rx2_window},
            {fnum, 10},
            {rnum, 11},
            {type, {msg, window_pb}},
            {occurrence, optional},
            {opts, []}
        ]
    ];
find_msg_def(_) ->
    error.

find_enum_def('helium.blockchain_state_channel_state_v1') ->
    [{open, 0}, {closed, 1}];
find_enum_def('packet_pb.packet_type') ->
    [{longfi, 0}, {lorawan, 1}];
find_enum_def('helium.region') ->
    [
        {'US915', 0},
        {'EU868', 1},
        {'EU433', 2},
        {'CN470', 3},
        {'CN779', 4},
        {'AU915', 5},
        {'AS923_1', 6},
        {'KR920', 7},
        {'IN865', 8},
        {'AS923_2', 9},
        {'AS923_3', 10},
        {'AS923_4', 11},
        {'AS923_1B', 12},
        {'CD900_1A', 13}
    ];
find_enum_def(_) ->
    error.

enum_symbol_by_value(
    'helium.blockchain_state_channel_state_v1',
    Value
) ->
    'enum_symbol_by_value_helium.blockchain_state_channel_state_v1'(Value);
enum_symbol_by_value('packet_pb.packet_type', Value) ->
    'enum_symbol_by_value_packet_pb.packet_type'(Value);
enum_symbol_by_value('helium.region', Value) ->
    'enum_symbol_by_value_helium.region'(Value).

enum_value_by_symbol(
    'helium.blockchain_state_channel_state_v1',
    Sym
) ->
    'enum_value_by_symbol_helium.blockchain_state_channel_state_v1'(Sym);
enum_value_by_symbol('packet_pb.packet_type', Sym) ->
    'enum_value_by_symbol_packet_pb.packet_type'(Sym);
enum_value_by_symbol('helium.region', Sym) ->
    'enum_value_by_symbol_helium.region'(Sym).

'enum_symbol_by_value_helium.blockchain_state_channel_state_v1'(0) ->
    open;
'enum_symbol_by_value_helium.blockchain_state_channel_state_v1'(1) ->
    closed.

'enum_value_by_symbol_helium.blockchain_state_channel_state_v1'(open) ->
    0;
'enum_value_by_symbol_helium.blockchain_state_channel_state_v1'(closed) ->
    1.

'enum_symbol_by_value_packet_pb.packet_type'(0) ->
    longfi;
'enum_symbol_by_value_packet_pb.packet_type'(1) ->
    lorawan.

'enum_value_by_symbol_packet_pb.packet_type'(longfi) ->
    0;
'enum_value_by_symbol_packet_pb.packet_type'(lorawan) ->
    1.

'enum_symbol_by_value_helium.region'(0) -> 'US915';
'enum_symbol_by_value_helium.region'(1) -> 'EU868';
'enum_symbol_by_value_helium.region'(2) -> 'EU433';
'enum_symbol_by_value_helium.region'(3) -> 'CN470';
'enum_symbol_by_value_helium.region'(4) -> 'CN779';
'enum_symbol_by_value_helium.region'(5) -> 'AU915';
'enum_symbol_by_value_helium.region'(6) -> 'AS923_1';
'enum_symbol_by_value_helium.region'(7) -> 'KR920';
'enum_symbol_by_value_helium.region'(8) -> 'IN865';
'enum_symbol_by_value_helium.region'(9) -> 'AS923_2';
'enum_symbol_by_value_helium.region'(10) -> 'AS923_3';
'enum_symbol_by_value_helium.region'(11) -> 'AS923_4';
'enum_symbol_by_value_helium.region'(12) -> 'AS923_1B';
'enum_symbol_by_value_helium.region'(13) -> 'CD900_1A'.

'enum_value_by_symbol_helium.region'('US915') -> 0;
'enum_value_by_symbol_helium.region'('EU868') -> 1;
'enum_value_by_symbol_helium.region'('EU433') -> 2;
'enum_value_by_symbol_helium.region'('CN470') -> 3;
'enum_value_by_symbol_helium.region'('CN779') -> 4;
'enum_value_by_symbol_helium.region'('AU915') -> 5;
'enum_value_by_symbol_helium.region'('AS923_1') -> 6;
'enum_value_by_symbol_helium.region'('KR920') -> 7;
'enum_value_by_symbol_helium.region'('IN865') -> 8;
'enum_value_by_symbol_helium.region'('AS923_2') -> 9;
'enum_value_by_symbol_helium.region'('AS923_3') -> 10;
'enum_value_by_symbol_helium.region'('AS923_4') -> 11;
'enum_value_by_symbol_helium.region'('AS923_1B') -> 12;
'enum_value_by_symbol_helium.region'('CD900_1A') -> 13.

get_service_names() -> ['helium.router'].

get_service_def('helium.router') ->
    {{service, 'helium.router'}, [
        [
            {name, route},
            {input, blockchain_state_channel_message_v1_pb},
            {output, blockchain_state_channel_message_v1_pb},
            {input_stream, false},
            {output_stream, false},
            {opts, []}
        ]
    ]};
get_service_def(_) ->
    error.

get_rpc_names('helium.router') -> [route];
get_rpc_names(_) -> error.

find_rpc_def('helium.router', RpcName) ->
    'find_rpc_def_helium.router'(RpcName);
find_rpc_def(_, _) ->
    error.

'find_rpc_def_helium.router'(route) ->
    [
        {name, route},
        {input, blockchain_state_channel_message_v1_pb},
        {output, blockchain_state_channel_message_v1_pb},
        {input_stream, false},
        {output_stream, false},
        {opts, []}
    ];
'find_rpc_def_helium.router'(_) ->
    error.

fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
        Def when is_list(Def) -> Def;
        error -> erlang:error({no_such_rpc, ServiceName, RpcName})
    end.

%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
fqbin_to_service_name(<<"helium.router">>) -> 'helium.router';
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).

%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
service_name_to_fqbin('helium.router') -> <<"helium.router">>;
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).

%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
fqbins_to_service_and_rpc_name(<<"helium.router">>, <<"route">>) ->
    {'helium.router', route};
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).

%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
service_and_rpc_name_to_fqbins(
    'helium.router',
    route
) ->
    {<<"helium.router">>, <<"route">>};
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).

fqbin_to_msg_name(<<"helium.blockchain_state_channel_summary_v1">>) ->
    blockchain_state_channel_summary_v1_pb;
fqbin_to_msg_name(<<"helium.blockchain_state_channel_v1">>) ->
    blockchain_state_channel_v1_pb;
fqbin_to_msg_name(<<"helium.blockchain_state_channel_response_v1">>) ->
    blockchain_state_channel_response_v1_pb;
fqbin_to_msg_name(<<"helium.blockchain_state_channel_packet_v1">>) ->
    blockchain_state_channel_packet_v1_pb;
fqbin_to_msg_name(<<"helium.blockchain_state_channel_offer_v1">>) ->
    blockchain_state_channel_offer_v1_pb;
fqbin_to_msg_name(<<"helium.blockchain_state_channel_purchase_v1">>) ->
    blockchain_state_channel_purchase_v1_pb;
fqbin_to_msg_name(<<"helium.blockchain_state_channel_diff_v1">>) ->
    blockchain_state_channel_diff_v1_pb;
fqbin_to_msg_name(<<"helium.blockchain_state_channel_diff_entry_v1">>) ->
    blockchain_state_channel_diff_entry_v1_pb;
fqbin_to_msg_name(<<"helium.blockchain_state_channel_diff_append_summary_v1">>) ->
    blockchain_state_channel_diff_append_summary_v1_pb;
fqbin_to_msg_name(<<"helium.blockchain_state_channel_diff_update_summary_v1">>) ->
    blockchain_state_channel_diff_update_summary_v1_pb;
fqbin_to_msg_name(<<"helium.blockchain_state_channel_banner_v1">>) ->
    blockchain_state_channel_banner_v1_pb;
fqbin_to_msg_name(<<"helium.blockchain_state_channel_rejection_v1">>) ->
    blockchain_state_channel_rejection_v1_pb;
fqbin_to_msg_name(<<"helium.blockchain_state_channel_message_v1">>) ->
    blockchain_state_channel_message_v1_pb;
fqbin_to_msg_name(<<"helium.eui">>) ->
    eui_pb;
fqbin_to_msg_name(<<"helium.routing_information">>) ->
    routing_information_pb;
fqbin_to_msg_name(<<"helium.window">>) ->
    window_pb;
fqbin_to_msg_name(<<"helium.packet">>) ->
    packet_pb;
fqbin_to_msg_name(E) ->
    error({gpb_error, {badmsg, E}}).

msg_name_to_fqbin(blockchain_state_channel_summary_v1_pb) ->
    <<"helium.blockchain_state_channel_summary_v1">>;
msg_name_to_fqbin(blockchain_state_channel_v1_pb) ->
    <<"helium.blockchain_state_channel_v1">>;
msg_name_to_fqbin(blockchain_state_channel_response_v1_pb) ->
    <<"helium.blockchain_state_channel_response_v1">>;
msg_name_to_fqbin(blockchain_state_channel_packet_v1_pb) ->
    <<"helium.blockchain_state_channel_packet_v1">>;
msg_name_to_fqbin(blockchain_state_channel_offer_v1_pb) ->
    <<"helium.blockchain_state_channel_offer_v1">>;
msg_name_to_fqbin(blockchain_state_channel_purchase_v1_pb) ->
    <<"helium.blockchain_state_channel_purchase_v1">>;
msg_name_to_fqbin(blockchain_state_channel_diff_v1_pb) ->
    <<"helium.blockchain_state_channel_diff_v1">>;
msg_name_to_fqbin(blockchain_state_channel_diff_entry_v1_pb) ->
    <<"helium.blockchain_state_channel_diff_entry_v1">>;
msg_name_to_fqbin(blockchain_state_channel_diff_append_summary_v1_pb) ->
    <<"helium.blockchain_state_channel_diff_append_summary_v1">>;
msg_name_to_fqbin(blockchain_state_channel_diff_update_summary_v1_pb) ->
    <<"helium.blockchain_state_channel_diff_update_summary_v1">>;
msg_name_to_fqbin(blockchain_state_channel_banner_v1_pb) ->
    <<"helium.blockchain_state_channel_banner_v1">>;
msg_name_to_fqbin(blockchain_state_channel_rejection_v1_pb) ->
    <<"helium.blockchain_state_channel_rejection_v1">>;
msg_name_to_fqbin(blockchain_state_channel_message_v1_pb) ->
    <<"helium.blockchain_state_channel_message_v1">>;
msg_name_to_fqbin(eui_pb) ->
    <<"helium.eui">>;
msg_name_to_fqbin(routing_information_pb) ->
    <<"helium.routing_information">>;
msg_name_to_fqbin(window_pb) ->
    <<"helium.window">>;
msg_name_to_fqbin(packet_pb) ->
    <<"helium.packet">>;
msg_name_to_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).

fqbin_to_enum_name(<<"helium.blockchain_state_channel_state_v1">>) ->
    'helium.blockchain_state_channel_state_v1';
fqbin_to_enum_name(<<"helium.packet.packet_type">>) ->
    'packet_pb.packet_type';
fqbin_to_enum_name(<<"helium.region">>) ->
    'helium.region';
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).

enum_name_to_fqbin('helium.blockchain_state_channel_state_v1') ->
    <<"helium.blockchain_state_channel_state_v1">>;
enum_name_to_fqbin('packet_pb.packet_type') ->
    <<"helium.packet.packet_type">>;
enum_name_to_fqbin('helium.region') ->
    <<"helium.region">>;
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).

get_package_name() -> helium.

%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> true.

source_basename() -> "router.proto".

%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() ->
    [
        "router.proto",
        "blockchain_state_channel_v1.proto",
        "packet.proto",
        "region.proto"
    ].

%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() ->
    [
        "router",
        "blockchain_state_channel_v1",
        "packet",
        "region"
    ].

get_msg_containment("router") ->
    [];
get_msg_containment("blockchain_state_channel_v1") ->
    [
        blockchain_state_channel_banner_v1_pb,
        blockchain_state_channel_diff_append_summary_v1_pb,
        blockchain_state_channel_diff_entry_v1_pb,
        blockchain_state_channel_diff_update_summary_v1_pb,
        blockchain_state_channel_diff_v1_pb,
        blockchain_state_channel_message_v1_pb,
        blockchain_state_channel_offer_v1_pb,
        blockchain_state_channel_packet_v1_pb,
        blockchain_state_channel_purchase_v1_pb,
        blockchain_state_channel_rejection_v1_pb,
        blockchain_state_channel_response_v1_pb,
        blockchain_state_channel_summary_v1_pb,
        blockchain_state_channel_v1_pb
    ];
get_msg_containment("packet") ->
    [eui_pb, packet_pb, routing_information_pb, window_pb];
get_msg_containment("region") ->
    [];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).

get_pkg_containment("router") -> helium;
get_pkg_containment("blockchain_state_channel_v1") -> helium;
get_pkg_containment("packet") -> helium;
get_pkg_containment("region") -> helium;
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).

get_service_containment("router") -> ['helium.router'];
get_service_containment("blockchain_state_channel_v1") -> [];
get_service_containment("packet") -> [];
get_service_containment("region") -> [];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).

get_rpc_containment("router") ->
    [{'helium.router', route}];
get_rpc_containment("blockchain_state_channel_v1") ->
    [];
get_rpc_containment("packet") ->
    [];
get_rpc_containment("region") ->
    [];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).

get_enum_containment("router") ->
    [];
get_enum_containment("blockchain_state_channel_v1") ->
    ['helium.blockchain_state_channel_state_v1'];
get_enum_containment("packet") ->
    ['packet_pb.packet_type'];
get_enum_containment("region") ->
    ['helium.region'];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).

get_proto_by_msg_name_as_fqbin(<<"helium.blockchain_state_channel_v1">>) ->
    "blockchain_state_channel_v1";
get_proto_by_msg_name_as_fqbin(<<"helium.blockchain_state_channel_summary_v1">>) ->
    "blockchain_state_channel_v1";
get_proto_by_msg_name_as_fqbin(<<"helium.blockchain_state_channel_response_v1">>) ->
    "blockchain_state_channel_v1";
get_proto_by_msg_name_as_fqbin(<<"helium.blockchain_state_channel_rejection_v1">>) ->
    "blockchain_state_channel_v1";
get_proto_by_msg_name_as_fqbin(<<"helium.blockchain_state_channel_purchase_v1">>) ->
    "blockchain_state_channel_v1";
get_proto_by_msg_name_as_fqbin(<<"helium.blockchain_state_channel_packet_v1">>) ->
    "blockchain_state_channel_v1";
get_proto_by_msg_name_as_fqbin(<<"helium.blockchain_state_channel_offer_v1">>) ->
    "blockchain_state_channel_v1";
get_proto_by_msg_name_as_fqbin(<<"helium.blockchain_state_channel_message_v1">>) ->
    "blockchain_state_channel_v1";
get_proto_by_msg_name_as_fqbin(<<"helium.blockchain_state_channel_diff_v1">>) ->
    "blockchain_state_channel_v1";
get_proto_by_msg_name_as_fqbin(<<"helium.blockchain_state_channel_diff_update_summary_v1">>) ->
    "blockchain_state_channel_v1";
get_proto_by_msg_name_as_fqbin(<<"helium.blockchain_state_channel_diff_entry_v1">>) ->
    "blockchain_state_channel_v1";
get_proto_by_msg_name_as_fqbin(<<"helium.blockchain_state_channel_diff_append_summary_v1">>) ->
    "blockchain_state_channel_v1";
get_proto_by_msg_name_as_fqbin(<<"helium.blockchain_state_channel_banner_v1">>) ->
    "blockchain_state_channel_v1";
get_proto_by_msg_name_as_fqbin(<<"helium.packet">>) ->
    "packet";
get_proto_by_msg_name_as_fqbin(<<"helium.window">>) ->
    "packet";
get_proto_by_msg_name_as_fqbin(<<"helium.eui">>) ->
    "packet";
get_proto_by_msg_name_as_fqbin(<<"helium.routing_information">>) ->
    "packet";
get_proto_by_msg_name_as_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).

get_proto_by_service_name_as_fqbin(<<"helium.router">>) -> "router";
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).

get_proto_by_enum_name_as_fqbin(<<"helium.blockchain_state_channel_state_v1">>) ->
    "blockchain_state_channel_v1";
get_proto_by_enum_name_as_fqbin(<<"helium.packet.packet_type">>) ->
    "packet";
get_proto_by_enum_name_as_fqbin(<<"helium.region">>) ->
    "region";
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).

get_protos_by_pkg_name_as_fqbin(<<"helium">>) ->
    [
        "blockchain_state_channel_v1",
        "packet",
        "region",
        "router"
    ];
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).

gpb_version_as_string() ->
    "4.11.2".

gpb_version_as_list() ->
    [4, 11, 2].
