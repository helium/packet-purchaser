%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.17.0
-module(ns).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_ns.RXWindow'/1, 'enum_value_by_symbol_ns.RXWindow'/1]).
-export([
    'enum_symbol_by_value_ns.AggregationInterval'/1,
    'enum_value_by_symbol_ns.AggregationInterval'/1
]).
-export([
    'enum_symbol_by_value_ns.MulticastGroupType'/1,
    'enum_value_by_symbol_ns.MulticastGroupType'/1
]).
-export(['enum_symbol_by_value_common.Modulation'/1, 'enum_value_by_symbol_common.Modulation'/1]).
-export(['enum_symbol_by_value_common.Region'/1, 'enum_value_by_symbol_common.Region'/1]).
-export(['enum_symbol_by_value_common.MType'/1, 'enum_value_by_symbol_common.MType'/1]).
-export([
    'enum_symbol_by_value_common.LocationSource'/1,
    'enum_value_by_symbol_common.LocationSource'/1
]).
-export(['enum_symbol_by_value_gw.DownlinkTiming'/1, 'enum_value_by_symbol_gw.DownlinkTiming'/1]).
-export([
    'enum_symbol_by_value_gw.FineTimestampType'/1,
    'enum_value_by_symbol_gw.FineTimestampType'/1
]).
-export(['enum_symbol_by_value_gw.CRCStatus'/1, 'enum_value_by_symbol_gw.CRCStatus'/1]).
-export(['enum_symbol_by_value_gw.TxAckStatus'/1, 'enum_value_by_symbol_gw.TxAckStatus'/1]).
-export(['enum_symbol_by_value_gw.ConnState.State'/1, 'enum_value_by_symbol_gw.ConnState.State'/1]).
-export(['enum_symbol_by_value_ns.RatePolicy'/1, 'enum_value_by_symbol_ns.RatePolicy'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("ns.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'ns.RXWindow'() :: 'RX1' | 'RX2'.
-type 'ns.AggregationInterval'() ::
    'SECOND' | 'MINUTE' | 'HOUR' | 'DAY' | 'WEEK' | 'MONTH' | 'QUARTER' | 'YEAR'.
-type 'ns.MulticastGroupType'() :: 'CLASS_C' | 'CLASS_B'.
-type 'common.Modulation'() :: 'LORA' | 'FSK'.
-type 'common.Region'() ::
    'EU868'
    | 'US915'
    | 'CN779'
    | 'EU433'
    | 'AU915'
    | 'CN470'
    | 'AS923'
    | 'KR920'
    | 'IN865'
    | 'RU864'.
-type 'common.MType'() ::
    'JoinRequest'
    | 'JoinAccept'
    | 'UnconfirmedDataUp'
    | 'UnconfirmedDataDown'
    | 'ConfirmedDataUp'
    | 'ConfirmedDataDown'
    | 'RejoinRequest'
    | 'Proprietary'.
-type 'common.LocationSource'() ::
    'UNKNOWN'
    | 'GPS'
    | 'CONFIG'
    | 'GEO_RESOLVER_TDOA'
    | 'GEO_RESOLVER_RSSI'
    | 'GEO_RESOLVER_GNSS'
    | 'GEO_RESOLVER_WIFI'.
-type 'gw.DownlinkTiming'() :: 'IMMEDIATELY' | 'DELAY' | 'GPS_EPOCH'.
-type 'gw.FineTimestampType'() :: 'NONE' | 'ENCRYPTED' | 'PLAIN'.
-type 'gw.CRCStatus'() :: 'NO_CRC' | 'BAD_CRC' | 'CRC_OK'.
-type 'gw.TxAckStatus'() ::
    'IGNORED'
    | 'OK'
    | 'TOO_LATE'
    | 'TOO_EARLY'
    | 'COLLISION_PACKET'
    | 'COLLISION_BEACON'
    | 'TX_FREQ'
    | 'TX_POWER'
    | 'GPS_UNLOCKED'
    | 'QUEUE_FULL'
    | 'INTERNAL_ERROR'.
-type 'gw.ConnState.State'() :: 'OFFLINE' | 'ONLINE'.
-type 'ns.RatePolicy'() :: 'DROP' | 'MARK'.
-export_type([
    'ns.RXWindow'/0,
    'ns.AggregationInterval'/0,
    'ns.MulticastGroupType'/0,
    'common.Modulation'/0,
    'common.Region'/0,
    'common.MType'/0,
    'common.LocationSource'/0,
    'gw.DownlinkTiming'/0,
    'gw.FineTimestampType'/0,
    'gw.CRCStatus'/0,
    'gw.TxAckStatus'/0,
    'gw.ConnState.State'/0,
    'ns.RatePolicy'/0
]).

%% message types
-type 'ns.CreateServiceProfileRequest'() :: #'ns.CreateServiceProfileRequest'{}.

-type 'ns.CreateServiceProfileResponse'() :: #'ns.CreateServiceProfileResponse'{}.

-type 'ns.GetServiceProfileRequest'() :: #'ns.GetServiceProfileRequest'{}.

-type 'ns.GetServiceProfileResponse'() :: #'ns.GetServiceProfileResponse'{}.

-type 'ns.UpdateServiceProfileRequest'() :: #'ns.UpdateServiceProfileRequest'{}.

-type 'ns.DeleteServiceProfileRequest'() :: #'ns.DeleteServiceProfileRequest'{}.

-type 'ns.CreateRoutingProfileRequest'() :: #'ns.CreateRoutingProfileRequest'{}.

-type 'ns.CreateRoutingProfileResponse'() :: #'ns.CreateRoutingProfileResponse'{}.

-type 'ns.GetRoutingProfileRequest'() :: #'ns.GetRoutingProfileRequest'{}.

-type 'ns.GetRoutingProfileResponse'() :: #'ns.GetRoutingProfileResponse'{}.

-type 'ns.UpdateRoutingProfileRequest'() :: #'ns.UpdateRoutingProfileRequest'{}.

-type 'ns.DeleteRoutingProfileRequest'() :: #'ns.DeleteRoutingProfileRequest'{}.

-type 'ns.CreateDeviceProfileRequest'() :: #'ns.CreateDeviceProfileRequest'{}.

-type 'ns.CreateDeviceProfileResponse'() :: #'ns.CreateDeviceProfileResponse'{}.

-type 'ns.GetDeviceProfileRequest'() :: #'ns.GetDeviceProfileRequest'{}.

-type 'ns.GetDeviceProfileResponse'() :: #'ns.GetDeviceProfileResponse'{}.

-type 'ns.UpdateDeviceProfileRequest'() :: #'ns.UpdateDeviceProfileRequest'{}.

-type 'ns.DeleteDeviceProfileRequest'() :: #'ns.DeleteDeviceProfileRequest'{}.

-type 'ns.Device'() :: #'ns.Device'{}.

-type 'ns.CreateDeviceRequest'() :: #'ns.CreateDeviceRequest'{}.

-type 'ns.GetDeviceRequest'() :: #'ns.GetDeviceRequest'{}.

-type 'ns.GetDeviceResponse'() :: #'ns.GetDeviceResponse'{}.

-type 'ns.UpdateDeviceRequest'() :: #'ns.UpdateDeviceRequest'{}.

-type 'ns.DeleteDeviceRequest'() :: #'ns.DeleteDeviceRequest'{}.

-type 'ns.DeviceActivation'() :: #'ns.DeviceActivation'{}.

-type 'ns.ActivateDeviceRequest'() :: #'ns.ActivateDeviceRequest'{}.

-type 'ns.DeactivateDeviceRequest'() :: #'ns.DeactivateDeviceRequest'{}.

-type 'ns.GetDeviceActivationRequest'() :: #'ns.GetDeviceActivationRequest'{}.

-type 'ns.GetDeviceActivationResponse'() :: #'ns.GetDeviceActivationResponse'{}.

-type 'ns.GetRandomDevAddrResponse'() :: #'ns.GetRandomDevAddrResponse'{}.

-type 'ns.CreateMACCommandQueueItemRequest'() :: #'ns.CreateMACCommandQueueItemRequest'{}.

-type 'ns.SendProprietaryPayloadRequest'() :: #'ns.SendProprietaryPayloadRequest'{}.

-type 'ns.Gateway'() :: #'ns.Gateway'{}.

-type 'ns.GatewayBoard'() :: #'ns.GatewayBoard'{}.

-type 'ns.CreateGatewayRequest'() :: #'ns.CreateGatewayRequest'{}.

-type 'ns.GetGatewayRequest'() :: #'ns.GetGatewayRequest'{}.

-type 'ns.GetGatewayResponse'() :: #'ns.GetGatewayResponse'{}.

-type 'ns.UpdateGatewayRequest'() :: #'ns.UpdateGatewayRequest'{}.

-type 'ns.DeleteGatewayRequest'() :: #'ns.DeleteGatewayRequest'{}.

-type 'ns.GenerateGatewayClientCertificateRequest'() :: #'ns.GenerateGatewayClientCertificateRequest'{}.

-type 'ns.GenerateGatewayClientCertificateResponse'() :: #'ns.GenerateGatewayClientCertificateResponse'{}.

-type 'ns.GatewayStats'() :: #'ns.GatewayStats'{}.

-type 'ns.GetGatewayStatsRequest'() :: #'ns.GetGatewayStatsRequest'{}.

-type 'ns.GetGatewayStatsResponse'() :: #'ns.GetGatewayStatsResponse'{}.

-type 'ns.DeviceQueueItem'() :: #'ns.DeviceQueueItem'{}.

-type 'ns.CreateDeviceQueueItemRequest'() :: #'ns.CreateDeviceQueueItemRequest'{}.

-type 'ns.FlushDeviceQueueForDevEUIRequest'() :: #'ns.FlushDeviceQueueForDevEUIRequest'{}.

-type 'ns.GetDeviceQueueItemsForDevEUIRequest'() :: #'ns.GetDeviceQueueItemsForDevEUIRequest'{}.

-type 'ns.GetDeviceQueueItemsForDevEUIResponse'() :: #'ns.GetDeviceQueueItemsForDevEUIResponse'{}.

-type 'ns.GetNextDownlinkFCntForDevEUIRequest'() :: #'ns.GetNextDownlinkFCntForDevEUIRequest'{}.

-type 'ns.GetNextDownlinkFCntForDevEUIResponse'() :: #'ns.GetNextDownlinkFCntForDevEUIResponse'{}.

-type 'ns.UplinkFrameLog'() :: #'ns.UplinkFrameLog'{}.

-type 'ns.DownlinkFrameLog'() :: #'ns.DownlinkFrameLog'{}.

-type 'ns.StreamFrameLogsForGatewayRequest'() :: #'ns.StreamFrameLogsForGatewayRequest'{}.

-type 'ns.StreamFrameLogsForGatewayResponse'() :: #'ns.StreamFrameLogsForGatewayResponse'{}.

-type 'ns.StreamFrameLogsForDeviceRequest'() :: #'ns.StreamFrameLogsForDeviceRequest'{}.

-type 'ns.StreamFrameLogsForDeviceResponse'() :: #'ns.StreamFrameLogsForDeviceResponse'{}.

-type 'ns.GetVersionResponse'() :: #'ns.GetVersionResponse'{}.

-type 'ns.GatewayProfile'() :: #'ns.GatewayProfile'{}.

-type 'ns.GatewayProfileExtraChannel'() :: #'ns.GatewayProfileExtraChannel'{}.

-type 'ns.CreateGatewayProfileRequest'() :: #'ns.CreateGatewayProfileRequest'{}.

-type 'ns.CreateGatewayProfileResponse'() :: #'ns.CreateGatewayProfileResponse'{}.

-type 'ns.GetGatewayProfileRequest'() :: #'ns.GetGatewayProfileRequest'{}.

-type 'ns.GetGatewayProfileResponse'() :: #'ns.GetGatewayProfileResponse'{}.

-type 'ns.UpdateGatewayProfileRequest'() :: #'ns.UpdateGatewayProfileRequest'{}.

-type 'ns.DeleteGatewayProfileRequest'() :: #'ns.DeleteGatewayProfileRequest'{}.

-type 'ns.MulticastGroup'() :: #'ns.MulticastGroup'{}.

-type 'ns.CreateMulticastGroupRequest'() :: #'ns.CreateMulticastGroupRequest'{}.

-type 'ns.CreateMulticastGroupResponse'() :: #'ns.CreateMulticastGroupResponse'{}.

-type 'ns.GetMulticastGroupRequest'() :: #'ns.GetMulticastGroupRequest'{}.

-type 'ns.GetMulticastGroupResponse'() :: #'ns.GetMulticastGroupResponse'{}.

-type 'ns.UpdateMulticastGroupRequest'() :: #'ns.UpdateMulticastGroupRequest'{}.

-type 'ns.DeleteMulticastGroupRequest'() :: #'ns.DeleteMulticastGroupRequest'{}.

-type 'ns.AddDeviceToMulticastGroupRequest'() :: #'ns.AddDeviceToMulticastGroupRequest'{}.

-type 'ns.RemoveDeviceFromMulticastGroupRequest'() :: #'ns.RemoveDeviceFromMulticastGroupRequest'{}.

-type 'ns.MulticastQueueItem'() :: #'ns.MulticastQueueItem'{}.

-type 'ns.EnqueueMulticastQueueItemRequest'() :: #'ns.EnqueueMulticastQueueItemRequest'{}.

-type 'ns.FlushMulticastQueueForMulticastGroupRequest'() :: #'ns.FlushMulticastQueueForMulticastGroupRequest'{}.

-type 'ns.GetMulticastQueueItemsForMulticastGroupRequest'() :: #'ns.GetMulticastQueueItemsForMulticastGroupRequest'{}.

-type 'ns.GetMulticastQueueItemsForMulticastGroupResponse'() :: #'ns.GetMulticastQueueItemsForMulticastGroupResponse'{}.

-type 'ns.GetADRAlgorithmsResponse'() :: #'ns.GetADRAlgorithmsResponse'{}.

-type 'ns.ADRAlgorithm'() :: #'ns.ADRAlgorithm'{}.

-type 'google.protobuf.Timestamp'() :: #'google.protobuf.Timestamp'{}.

-type 'google.protobuf.Duration'() :: #'google.protobuf.Duration'{}.

-type 'google.protobuf.Empty'() :: #'google.protobuf.Empty'{}.

-type 'common.KeyEnvelope'() :: #'common.KeyEnvelope'{}.

-type 'common.Location'() :: #'common.Location'{}.

-type 'gw.UplinkTXInfo'() :: #'gw.UplinkTXInfo'{}.

-type 'gw.LoRaModulationInfo'() :: #'gw.LoRaModulationInfo'{}.

-type 'gw.FSKModulationInfo'() :: #'gw.FSKModulationInfo'{}.

-type 'gw.EncryptedFineTimestamp'() :: #'gw.EncryptedFineTimestamp'{}.

-type 'gw.PlainFineTimestamp'() :: #'gw.PlainFineTimestamp'{}.

-type 'gw.GatewayStats'() :: #'gw.GatewayStats'{}.

-type 'gw.UplinkRXInfo'() :: #'gw.UplinkRXInfo'{}.

-type 'gw.DownlinkTXInfo'() :: #'gw.DownlinkTXInfo'{}.

-type 'gw.ImmediatelyTimingInfo'() :: #'gw.ImmediatelyTimingInfo'{}.

-type 'gw.DelayTimingInfo'() :: #'gw.DelayTimingInfo'{}.

-type 'gw.GPSEpochTimingInfo'() :: #'gw.GPSEpochTimingInfo'{}.

-type 'gw.UplinkFrame'() :: #'gw.UplinkFrame'{}.

-type 'gw.UplinkFrameSet'() :: #'gw.UplinkFrameSet'{}.

-type 'gw.DownlinkFrame'() :: #'gw.DownlinkFrame'{}.

-type 'gw.DownlinkFrameItem'() :: #'gw.DownlinkFrameItem'{}.

-type 'gw.DownlinkTXAck'() :: #'gw.DownlinkTXAck'{}.

-type 'gw.DownlinkTXAckItem'() :: #'gw.DownlinkTXAckItem'{}.

-type 'gw.GatewayConfiguration'() :: #'gw.GatewayConfiguration'{}.

-type 'gw.ChannelConfiguration'() :: #'gw.ChannelConfiguration'{}.

-type 'gw.LoRaModulationConfig'() :: #'gw.LoRaModulationConfig'{}.

-type 'gw.FSKModulationConfig'() :: #'gw.FSKModulationConfig'{}.

-type 'gw.GatewayCommandExecRequest'() :: #'gw.GatewayCommandExecRequest'{}.

-type 'gw.GatewayCommandExecResponse'() :: #'gw.GatewayCommandExecResponse'{}.

-type 'gw.RawPacketForwarderEvent'() :: #'gw.RawPacketForwarderEvent'{}.

-type 'gw.RawPacketForwarderCommand'() :: #'gw.RawPacketForwarderCommand'{}.

-type 'gw.ConnState'() :: #'gw.ConnState'{}.

-type 'ns.ServiceProfile'() :: #'ns.ServiceProfile'{}.

-type 'ns.DeviceProfile'() :: #'ns.DeviceProfile'{}.

-type 'ns.RoutingProfile'() :: #'ns.RoutingProfile'{}.

-export_type([
    'ns.CreateServiceProfileRequest'/0,
    'ns.CreateServiceProfileResponse'/0,
    'ns.GetServiceProfileRequest'/0,
    'ns.GetServiceProfileResponse'/0,
    'ns.UpdateServiceProfileRequest'/0,
    'ns.DeleteServiceProfileRequest'/0,
    'ns.CreateRoutingProfileRequest'/0,
    'ns.CreateRoutingProfileResponse'/0,
    'ns.GetRoutingProfileRequest'/0,
    'ns.GetRoutingProfileResponse'/0,
    'ns.UpdateRoutingProfileRequest'/0,
    'ns.DeleteRoutingProfileRequest'/0,
    'ns.CreateDeviceProfileRequest'/0,
    'ns.CreateDeviceProfileResponse'/0,
    'ns.GetDeviceProfileRequest'/0,
    'ns.GetDeviceProfileResponse'/0,
    'ns.UpdateDeviceProfileRequest'/0,
    'ns.DeleteDeviceProfileRequest'/0,
    'ns.Device'/0,
    'ns.CreateDeviceRequest'/0,
    'ns.GetDeviceRequest'/0,
    'ns.GetDeviceResponse'/0,
    'ns.UpdateDeviceRequest'/0,
    'ns.DeleteDeviceRequest'/0,
    'ns.DeviceActivation'/0,
    'ns.ActivateDeviceRequest'/0,
    'ns.DeactivateDeviceRequest'/0,
    'ns.GetDeviceActivationRequest'/0,
    'ns.GetDeviceActivationResponse'/0,
    'ns.GetRandomDevAddrResponse'/0,
    'ns.CreateMACCommandQueueItemRequest'/0,
    'ns.SendProprietaryPayloadRequest'/0,
    'ns.Gateway'/0,
    'ns.GatewayBoard'/0,
    'ns.CreateGatewayRequest'/0,
    'ns.GetGatewayRequest'/0,
    'ns.GetGatewayResponse'/0,
    'ns.UpdateGatewayRequest'/0,
    'ns.DeleteGatewayRequest'/0,
    'ns.GenerateGatewayClientCertificateRequest'/0,
    'ns.GenerateGatewayClientCertificateResponse'/0,
    'ns.GatewayStats'/0,
    'ns.GetGatewayStatsRequest'/0,
    'ns.GetGatewayStatsResponse'/0,
    'ns.DeviceQueueItem'/0,
    'ns.CreateDeviceQueueItemRequest'/0,
    'ns.FlushDeviceQueueForDevEUIRequest'/0,
    'ns.GetDeviceQueueItemsForDevEUIRequest'/0,
    'ns.GetDeviceQueueItemsForDevEUIResponse'/0,
    'ns.GetNextDownlinkFCntForDevEUIRequest'/0,
    'ns.GetNextDownlinkFCntForDevEUIResponse'/0,
    'ns.UplinkFrameLog'/0,
    'ns.DownlinkFrameLog'/0,
    'ns.StreamFrameLogsForGatewayRequest'/0,
    'ns.StreamFrameLogsForGatewayResponse'/0,
    'ns.StreamFrameLogsForDeviceRequest'/0,
    'ns.StreamFrameLogsForDeviceResponse'/0,
    'ns.GetVersionResponse'/0,
    'ns.GatewayProfile'/0,
    'ns.GatewayProfileExtraChannel'/0,
    'ns.CreateGatewayProfileRequest'/0,
    'ns.CreateGatewayProfileResponse'/0,
    'ns.GetGatewayProfileRequest'/0,
    'ns.GetGatewayProfileResponse'/0,
    'ns.UpdateGatewayProfileRequest'/0,
    'ns.DeleteGatewayProfileRequest'/0,
    'ns.MulticastGroup'/0,
    'ns.CreateMulticastGroupRequest'/0,
    'ns.CreateMulticastGroupResponse'/0,
    'ns.GetMulticastGroupRequest'/0,
    'ns.GetMulticastGroupResponse'/0,
    'ns.UpdateMulticastGroupRequest'/0,
    'ns.DeleteMulticastGroupRequest'/0,
    'ns.AddDeviceToMulticastGroupRequest'/0,
    'ns.RemoveDeviceFromMulticastGroupRequest'/0,
    'ns.MulticastQueueItem'/0,
    'ns.EnqueueMulticastQueueItemRequest'/0,
    'ns.FlushMulticastQueueForMulticastGroupRequest'/0,
    'ns.GetMulticastQueueItemsForMulticastGroupRequest'/0,
    'ns.GetMulticastQueueItemsForMulticastGroupResponse'/0,
    'ns.GetADRAlgorithmsResponse'/0,
    'ns.ADRAlgorithm'/0,
    'google.protobuf.Timestamp'/0,
    'google.protobuf.Duration'/0,
    'google.protobuf.Empty'/0,
    'common.KeyEnvelope'/0,
    'common.Location'/0,
    'gw.UplinkTXInfo'/0,
    'gw.LoRaModulationInfo'/0,
    'gw.FSKModulationInfo'/0,
    'gw.EncryptedFineTimestamp'/0,
    'gw.PlainFineTimestamp'/0,
    'gw.GatewayStats'/0,
    'gw.UplinkRXInfo'/0,
    'gw.DownlinkTXInfo'/0,
    'gw.ImmediatelyTimingInfo'/0,
    'gw.DelayTimingInfo'/0,
    'gw.GPSEpochTimingInfo'/0,
    'gw.UplinkFrame'/0,
    'gw.UplinkFrameSet'/0,
    'gw.DownlinkFrame'/0,
    'gw.DownlinkFrameItem'/0,
    'gw.DownlinkTXAck'/0,
    'gw.DownlinkTXAckItem'/0,
    'gw.GatewayConfiguration'/0,
    'gw.ChannelConfiguration'/0,
    'gw.LoRaModulationConfig'/0,
    'gw.FSKModulationConfig'/0,
    'gw.GatewayCommandExecRequest'/0,
    'gw.GatewayCommandExecResponse'/0,
    'gw.RawPacketForwarderEvent'/0,
    'gw.RawPacketForwarderCommand'/0,
    'gw.ConnState'/0,
    'ns.ServiceProfile'/0,
    'ns.DeviceProfile'/0,
    'ns.RoutingProfile'/0
]).
-type '$msg_name'() ::
    'ns.CreateServiceProfileRequest'
    | 'ns.CreateServiceProfileResponse'
    | 'ns.GetServiceProfileRequest'
    | 'ns.GetServiceProfileResponse'
    | 'ns.UpdateServiceProfileRequest'
    | 'ns.DeleteServiceProfileRequest'
    | 'ns.CreateRoutingProfileRequest'
    | 'ns.CreateRoutingProfileResponse'
    | 'ns.GetRoutingProfileRequest'
    | 'ns.GetRoutingProfileResponse'
    | 'ns.UpdateRoutingProfileRequest'
    | 'ns.DeleteRoutingProfileRequest'
    | 'ns.CreateDeviceProfileRequest'
    | 'ns.CreateDeviceProfileResponse'
    | 'ns.GetDeviceProfileRequest'
    | 'ns.GetDeviceProfileResponse'
    | 'ns.UpdateDeviceProfileRequest'
    | 'ns.DeleteDeviceProfileRequest'
    | 'ns.Device'
    | 'ns.CreateDeviceRequest'
    | 'ns.GetDeviceRequest'
    | 'ns.GetDeviceResponse'
    | 'ns.UpdateDeviceRequest'
    | 'ns.DeleteDeviceRequest'
    | 'ns.DeviceActivation'
    | 'ns.ActivateDeviceRequest'
    | 'ns.DeactivateDeviceRequest'
    | 'ns.GetDeviceActivationRequest'
    | 'ns.GetDeviceActivationResponse'
    | 'ns.GetRandomDevAddrResponse'
    | 'ns.CreateMACCommandQueueItemRequest'
    | 'ns.SendProprietaryPayloadRequest'
    | 'ns.Gateway'
    | 'ns.GatewayBoard'
    | 'ns.CreateGatewayRequest'
    | 'ns.GetGatewayRequest'
    | 'ns.GetGatewayResponse'
    | 'ns.UpdateGatewayRequest'
    | 'ns.DeleteGatewayRequest'
    | 'ns.GenerateGatewayClientCertificateRequest'
    | 'ns.GenerateGatewayClientCertificateResponse'
    | 'ns.GatewayStats'
    | 'ns.GetGatewayStatsRequest'
    | 'ns.GetGatewayStatsResponse'
    | 'ns.DeviceQueueItem'
    | 'ns.CreateDeviceQueueItemRequest'
    | 'ns.FlushDeviceQueueForDevEUIRequest'
    | 'ns.GetDeviceQueueItemsForDevEUIRequest'
    | 'ns.GetDeviceQueueItemsForDevEUIResponse'
    | 'ns.GetNextDownlinkFCntForDevEUIRequest'
    | 'ns.GetNextDownlinkFCntForDevEUIResponse'
    | 'ns.UplinkFrameLog'
    | 'ns.DownlinkFrameLog'
    | 'ns.StreamFrameLogsForGatewayRequest'
    | 'ns.StreamFrameLogsForGatewayResponse'
    | 'ns.StreamFrameLogsForDeviceRequest'
    | 'ns.StreamFrameLogsForDeviceResponse'
    | 'ns.GetVersionResponse'
    | 'ns.GatewayProfile'
    | 'ns.GatewayProfileExtraChannel'
    | 'ns.CreateGatewayProfileRequest'
    | 'ns.CreateGatewayProfileResponse'
    | 'ns.GetGatewayProfileRequest'
    | 'ns.GetGatewayProfileResponse'
    | 'ns.UpdateGatewayProfileRequest'
    | 'ns.DeleteGatewayProfileRequest'
    | 'ns.MulticastGroup'
    | 'ns.CreateMulticastGroupRequest'
    | 'ns.CreateMulticastGroupResponse'
    | 'ns.GetMulticastGroupRequest'
    | 'ns.GetMulticastGroupResponse'
    | 'ns.UpdateMulticastGroupRequest'
    | 'ns.DeleteMulticastGroupRequest'
    | 'ns.AddDeviceToMulticastGroupRequest'
    | 'ns.RemoveDeviceFromMulticastGroupRequest'
    | 'ns.MulticastQueueItem'
    | 'ns.EnqueueMulticastQueueItemRequest'
    | 'ns.FlushMulticastQueueForMulticastGroupRequest'
    | 'ns.GetMulticastQueueItemsForMulticastGroupRequest'
    | 'ns.GetMulticastQueueItemsForMulticastGroupResponse'
    | 'ns.GetADRAlgorithmsResponse'
    | 'ns.ADRAlgorithm'
    | 'google.protobuf.Timestamp'
    | 'google.protobuf.Duration'
    | 'google.protobuf.Empty'
    | 'common.KeyEnvelope'
    | 'common.Location'
    | 'gw.UplinkTXInfo'
    | 'gw.LoRaModulationInfo'
    | 'gw.FSKModulationInfo'
    | 'gw.EncryptedFineTimestamp'
    | 'gw.PlainFineTimestamp'
    | 'gw.GatewayStats'
    | 'gw.UplinkRXInfo'
    | 'gw.DownlinkTXInfo'
    | 'gw.ImmediatelyTimingInfo'
    | 'gw.DelayTimingInfo'
    | 'gw.GPSEpochTimingInfo'
    | 'gw.UplinkFrame'
    | 'gw.UplinkFrameSet'
    | 'gw.DownlinkFrame'
    | 'gw.DownlinkFrameItem'
    | 'gw.DownlinkTXAck'
    | 'gw.DownlinkTXAckItem'
    | 'gw.GatewayConfiguration'
    | 'gw.ChannelConfiguration'
    | 'gw.LoRaModulationConfig'
    | 'gw.FSKModulationConfig'
    | 'gw.GatewayCommandExecRequest'
    | 'gw.GatewayCommandExecResponse'
    | 'gw.RawPacketForwarderEvent'
    | 'gw.RawPacketForwarderCommand'
    | 'gw.ConnState'
    | 'ns.ServiceProfile'
    | 'ns.DeviceProfile'
    | 'ns.RoutingProfile'.
-type '$msg'() ::
    'ns.CreateServiceProfileRequest'()
    | 'ns.CreateServiceProfileResponse'()
    | 'ns.GetServiceProfileRequest'()
    | 'ns.GetServiceProfileResponse'()
    | 'ns.UpdateServiceProfileRequest'()
    | 'ns.DeleteServiceProfileRequest'()
    | 'ns.CreateRoutingProfileRequest'()
    | 'ns.CreateRoutingProfileResponse'()
    | 'ns.GetRoutingProfileRequest'()
    | 'ns.GetRoutingProfileResponse'()
    | 'ns.UpdateRoutingProfileRequest'()
    | 'ns.DeleteRoutingProfileRequest'()
    | 'ns.CreateDeviceProfileRequest'()
    | 'ns.CreateDeviceProfileResponse'()
    | 'ns.GetDeviceProfileRequest'()
    | 'ns.GetDeviceProfileResponse'()
    | 'ns.UpdateDeviceProfileRequest'()
    | 'ns.DeleteDeviceProfileRequest'()
    | 'ns.Device'()
    | 'ns.CreateDeviceRequest'()
    | 'ns.GetDeviceRequest'()
    | 'ns.GetDeviceResponse'()
    | 'ns.UpdateDeviceRequest'()
    | 'ns.DeleteDeviceRequest'()
    | 'ns.DeviceActivation'()
    | 'ns.ActivateDeviceRequest'()
    | 'ns.DeactivateDeviceRequest'()
    | 'ns.GetDeviceActivationRequest'()
    | 'ns.GetDeviceActivationResponse'()
    | 'ns.GetRandomDevAddrResponse'()
    | 'ns.CreateMACCommandQueueItemRequest'()
    | 'ns.SendProprietaryPayloadRequest'()
    | 'ns.Gateway'()
    | 'ns.GatewayBoard'()
    | 'ns.CreateGatewayRequest'()
    | 'ns.GetGatewayRequest'()
    | 'ns.GetGatewayResponse'()
    | 'ns.UpdateGatewayRequest'()
    | 'ns.DeleteGatewayRequest'()
    | 'ns.GenerateGatewayClientCertificateRequest'()
    | 'ns.GenerateGatewayClientCertificateResponse'()
    | 'ns.GatewayStats'()
    | 'ns.GetGatewayStatsRequest'()
    | 'ns.GetGatewayStatsResponse'()
    | 'ns.DeviceQueueItem'()
    | 'ns.CreateDeviceQueueItemRequest'()
    | 'ns.FlushDeviceQueueForDevEUIRequest'()
    | 'ns.GetDeviceQueueItemsForDevEUIRequest'()
    | 'ns.GetDeviceQueueItemsForDevEUIResponse'()
    | 'ns.GetNextDownlinkFCntForDevEUIRequest'()
    | 'ns.GetNextDownlinkFCntForDevEUIResponse'()
    | 'ns.UplinkFrameLog'()
    | 'ns.DownlinkFrameLog'()
    | 'ns.StreamFrameLogsForGatewayRequest'()
    | 'ns.StreamFrameLogsForGatewayResponse'()
    | 'ns.StreamFrameLogsForDeviceRequest'()
    | 'ns.StreamFrameLogsForDeviceResponse'()
    | 'ns.GetVersionResponse'()
    | 'ns.GatewayProfile'()
    | 'ns.GatewayProfileExtraChannel'()
    | 'ns.CreateGatewayProfileRequest'()
    | 'ns.CreateGatewayProfileResponse'()
    | 'ns.GetGatewayProfileRequest'()
    | 'ns.GetGatewayProfileResponse'()
    | 'ns.UpdateGatewayProfileRequest'()
    | 'ns.DeleteGatewayProfileRequest'()
    | 'ns.MulticastGroup'()
    | 'ns.CreateMulticastGroupRequest'()
    | 'ns.CreateMulticastGroupResponse'()
    | 'ns.GetMulticastGroupRequest'()
    | 'ns.GetMulticastGroupResponse'()
    | 'ns.UpdateMulticastGroupRequest'()
    | 'ns.DeleteMulticastGroupRequest'()
    | 'ns.AddDeviceToMulticastGroupRequest'()
    | 'ns.RemoveDeviceFromMulticastGroupRequest'()
    | 'ns.MulticastQueueItem'()
    | 'ns.EnqueueMulticastQueueItemRequest'()
    | 'ns.FlushMulticastQueueForMulticastGroupRequest'()
    | 'ns.GetMulticastQueueItemsForMulticastGroupRequest'()
    | 'ns.GetMulticastQueueItemsForMulticastGroupResponse'()
    | 'ns.GetADRAlgorithmsResponse'()
    | 'ns.ADRAlgorithm'()
    | 'google.protobuf.Timestamp'()
    | 'google.protobuf.Duration'()
    | 'google.protobuf.Empty'()
    | 'common.KeyEnvelope'()
    | 'common.Location'()
    | 'gw.UplinkTXInfo'()
    | 'gw.LoRaModulationInfo'()
    | 'gw.FSKModulationInfo'()
    | 'gw.EncryptedFineTimestamp'()
    | 'gw.PlainFineTimestamp'()
    | 'gw.GatewayStats'()
    | 'gw.UplinkRXInfo'()
    | 'gw.DownlinkTXInfo'()
    | 'gw.ImmediatelyTimingInfo'()
    | 'gw.DelayTimingInfo'()
    | 'gw.GPSEpochTimingInfo'()
    | 'gw.UplinkFrame'()
    | 'gw.UplinkFrameSet'()
    | 'gw.DownlinkFrame'()
    | 'gw.DownlinkFrameItem'()
    | 'gw.DownlinkTXAck'()
    | 'gw.DownlinkTXAckItem'()
    | 'gw.GatewayConfiguration'()
    | 'gw.ChannelConfiguration'()
    | 'gw.LoRaModulationConfig'()
    | 'gw.FSKModulationConfig'()
    | 'gw.GatewayCommandExecRequest'()
    | 'gw.GatewayCommandExecResponse'()
    | 'gw.RawPacketForwarderEvent'()
    | 'gw.RawPacketForwarderCommand'()
    | 'gw.ConnState'()
    | 'ns.ServiceProfile'()
    | 'ns.DeviceProfile'()
    | 'ns.RoutingProfile'().
-export_type(['$msg_name'/0, '$msg'/0]).

-record('map<string,string>', {key, value}).
-spec encode_msg('$msg'()) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 -> encode_msg(Msg, element(1, Msg), []).

-spec encode_msg('$msg'(), '$msg_name'() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts) when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg('$msg'(), '$msg_name'(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'ns.CreateServiceProfileRequest' ->
            'encode_msg_ns.CreateServiceProfileRequest'(id(Msg, TrUserData), TrUserData);
        'ns.CreateServiceProfileResponse' ->
            'encode_msg_ns.CreateServiceProfileResponse'(id(Msg, TrUserData), TrUserData);
        'ns.GetServiceProfileRequest' ->
            'encode_msg_ns.GetServiceProfileRequest'(id(Msg, TrUserData), TrUserData);
        'ns.GetServiceProfileResponse' ->
            'encode_msg_ns.GetServiceProfileResponse'(id(Msg, TrUserData), TrUserData);
        'ns.UpdateServiceProfileRequest' ->
            'encode_msg_ns.UpdateServiceProfileRequest'(id(Msg, TrUserData), TrUserData);
        'ns.DeleteServiceProfileRequest' ->
            'encode_msg_ns.DeleteServiceProfileRequest'(id(Msg, TrUserData), TrUserData);
        'ns.CreateRoutingProfileRequest' ->
            'encode_msg_ns.CreateRoutingProfileRequest'(id(Msg, TrUserData), TrUserData);
        'ns.CreateRoutingProfileResponse' ->
            'encode_msg_ns.CreateRoutingProfileResponse'(id(Msg, TrUserData), TrUserData);
        'ns.GetRoutingProfileRequest' ->
            'encode_msg_ns.GetRoutingProfileRequest'(id(Msg, TrUserData), TrUserData);
        'ns.GetRoutingProfileResponse' ->
            'encode_msg_ns.GetRoutingProfileResponse'(id(Msg, TrUserData), TrUserData);
        'ns.UpdateRoutingProfileRequest' ->
            'encode_msg_ns.UpdateRoutingProfileRequest'(id(Msg, TrUserData), TrUserData);
        'ns.DeleteRoutingProfileRequest' ->
            'encode_msg_ns.DeleteRoutingProfileRequest'(id(Msg, TrUserData), TrUserData);
        'ns.CreateDeviceProfileRequest' ->
            'encode_msg_ns.CreateDeviceProfileRequest'(id(Msg, TrUserData), TrUserData);
        'ns.CreateDeviceProfileResponse' ->
            'encode_msg_ns.CreateDeviceProfileResponse'(id(Msg, TrUserData), TrUserData);
        'ns.GetDeviceProfileRequest' ->
            'encode_msg_ns.GetDeviceProfileRequest'(id(Msg, TrUserData), TrUserData);
        'ns.GetDeviceProfileResponse' ->
            'encode_msg_ns.GetDeviceProfileResponse'(id(Msg, TrUserData), TrUserData);
        'ns.UpdateDeviceProfileRequest' ->
            'encode_msg_ns.UpdateDeviceProfileRequest'(id(Msg, TrUserData), TrUserData);
        'ns.DeleteDeviceProfileRequest' ->
            'encode_msg_ns.DeleteDeviceProfileRequest'(id(Msg, TrUserData), TrUserData);
        'ns.Device' ->
            'encode_msg_ns.Device'(id(Msg, TrUserData), TrUserData);
        'ns.CreateDeviceRequest' ->
            'encode_msg_ns.CreateDeviceRequest'(id(Msg, TrUserData), TrUserData);
        'ns.GetDeviceRequest' ->
            'encode_msg_ns.GetDeviceRequest'(id(Msg, TrUserData), TrUserData);
        'ns.GetDeviceResponse' ->
            'encode_msg_ns.GetDeviceResponse'(id(Msg, TrUserData), TrUserData);
        'ns.UpdateDeviceRequest' ->
            'encode_msg_ns.UpdateDeviceRequest'(id(Msg, TrUserData), TrUserData);
        'ns.DeleteDeviceRequest' ->
            'encode_msg_ns.DeleteDeviceRequest'(id(Msg, TrUserData), TrUserData);
        'ns.DeviceActivation' ->
            'encode_msg_ns.DeviceActivation'(id(Msg, TrUserData), TrUserData);
        'ns.ActivateDeviceRequest' ->
            'encode_msg_ns.ActivateDeviceRequest'(id(Msg, TrUserData), TrUserData);
        'ns.DeactivateDeviceRequest' ->
            'encode_msg_ns.DeactivateDeviceRequest'(id(Msg, TrUserData), TrUserData);
        'ns.GetDeviceActivationRequest' ->
            'encode_msg_ns.GetDeviceActivationRequest'(id(Msg, TrUserData), TrUserData);
        'ns.GetDeviceActivationResponse' ->
            'encode_msg_ns.GetDeviceActivationResponse'(id(Msg, TrUserData), TrUserData);
        'ns.GetRandomDevAddrResponse' ->
            'encode_msg_ns.GetRandomDevAddrResponse'(id(Msg, TrUserData), TrUserData);
        'ns.CreateMACCommandQueueItemRequest' ->
            'encode_msg_ns.CreateMACCommandQueueItemRequest'(id(Msg, TrUserData), TrUserData);
        'ns.SendProprietaryPayloadRequest' ->
            'encode_msg_ns.SendProprietaryPayloadRequest'(id(Msg, TrUserData), TrUserData);
        'ns.Gateway' ->
            'encode_msg_ns.Gateway'(id(Msg, TrUserData), TrUserData);
        'ns.GatewayBoard' ->
            'encode_msg_ns.GatewayBoard'(id(Msg, TrUserData), TrUserData);
        'ns.CreateGatewayRequest' ->
            'encode_msg_ns.CreateGatewayRequest'(id(Msg, TrUserData), TrUserData);
        'ns.GetGatewayRequest' ->
            'encode_msg_ns.GetGatewayRequest'(id(Msg, TrUserData), TrUserData);
        'ns.GetGatewayResponse' ->
            'encode_msg_ns.GetGatewayResponse'(id(Msg, TrUserData), TrUserData);
        'ns.UpdateGatewayRequest' ->
            'encode_msg_ns.UpdateGatewayRequest'(id(Msg, TrUserData), TrUserData);
        'ns.DeleteGatewayRequest' ->
            'encode_msg_ns.DeleteGatewayRequest'(id(Msg, TrUserData), TrUserData);
        'ns.GenerateGatewayClientCertificateRequest' ->
            'encode_msg_ns.GenerateGatewayClientCertificateRequest'(
                id(Msg, TrUserData),
                TrUserData
            );
        'ns.GenerateGatewayClientCertificateResponse' ->
            'encode_msg_ns.GenerateGatewayClientCertificateResponse'(
                id(Msg, TrUserData),
                TrUserData
            );
        'ns.GatewayStats' ->
            'encode_msg_ns.GatewayStats'(id(Msg, TrUserData), TrUserData);
        'ns.GetGatewayStatsRequest' ->
            'encode_msg_ns.GetGatewayStatsRequest'(id(Msg, TrUserData), TrUserData);
        'ns.GetGatewayStatsResponse' ->
            'encode_msg_ns.GetGatewayStatsResponse'(id(Msg, TrUserData), TrUserData);
        'ns.DeviceQueueItem' ->
            'encode_msg_ns.DeviceQueueItem'(id(Msg, TrUserData), TrUserData);
        'ns.CreateDeviceQueueItemRequest' ->
            'encode_msg_ns.CreateDeviceQueueItemRequest'(id(Msg, TrUserData), TrUserData);
        'ns.FlushDeviceQueueForDevEUIRequest' ->
            'encode_msg_ns.FlushDeviceQueueForDevEUIRequest'(id(Msg, TrUserData), TrUserData);
        'ns.GetDeviceQueueItemsForDevEUIRequest' ->
            'encode_msg_ns.GetDeviceQueueItemsForDevEUIRequest'(id(Msg, TrUserData), TrUserData);
        'ns.GetDeviceQueueItemsForDevEUIResponse' ->
            'encode_msg_ns.GetDeviceQueueItemsForDevEUIResponse'(id(Msg, TrUserData), TrUserData);
        'ns.GetNextDownlinkFCntForDevEUIRequest' ->
            'encode_msg_ns.GetNextDownlinkFCntForDevEUIRequest'(id(Msg, TrUserData), TrUserData);
        'ns.GetNextDownlinkFCntForDevEUIResponse' ->
            'encode_msg_ns.GetNextDownlinkFCntForDevEUIResponse'(id(Msg, TrUserData), TrUserData);
        'ns.UplinkFrameLog' ->
            'encode_msg_ns.UplinkFrameLog'(id(Msg, TrUserData), TrUserData);
        'ns.DownlinkFrameLog' ->
            'encode_msg_ns.DownlinkFrameLog'(id(Msg, TrUserData), TrUserData);
        'ns.StreamFrameLogsForGatewayRequest' ->
            'encode_msg_ns.StreamFrameLogsForGatewayRequest'(id(Msg, TrUserData), TrUserData);
        'ns.StreamFrameLogsForGatewayResponse' ->
            'encode_msg_ns.StreamFrameLogsForGatewayResponse'(id(Msg, TrUserData), TrUserData);
        'ns.StreamFrameLogsForDeviceRequest' ->
            'encode_msg_ns.StreamFrameLogsForDeviceRequest'(id(Msg, TrUserData), TrUserData);
        'ns.StreamFrameLogsForDeviceResponse' ->
            'encode_msg_ns.StreamFrameLogsForDeviceResponse'(id(Msg, TrUserData), TrUserData);
        'ns.GetVersionResponse' ->
            'encode_msg_ns.GetVersionResponse'(id(Msg, TrUserData), TrUserData);
        'ns.GatewayProfile' ->
            'encode_msg_ns.GatewayProfile'(id(Msg, TrUserData), TrUserData);
        'ns.GatewayProfileExtraChannel' ->
            'encode_msg_ns.GatewayProfileExtraChannel'(id(Msg, TrUserData), TrUserData);
        'ns.CreateGatewayProfileRequest' ->
            'encode_msg_ns.CreateGatewayProfileRequest'(id(Msg, TrUserData), TrUserData);
        'ns.CreateGatewayProfileResponse' ->
            'encode_msg_ns.CreateGatewayProfileResponse'(id(Msg, TrUserData), TrUserData);
        'ns.GetGatewayProfileRequest' ->
            'encode_msg_ns.GetGatewayProfileRequest'(id(Msg, TrUserData), TrUserData);
        'ns.GetGatewayProfileResponse' ->
            'encode_msg_ns.GetGatewayProfileResponse'(id(Msg, TrUserData), TrUserData);
        'ns.UpdateGatewayProfileRequest' ->
            'encode_msg_ns.UpdateGatewayProfileRequest'(id(Msg, TrUserData), TrUserData);
        'ns.DeleteGatewayProfileRequest' ->
            'encode_msg_ns.DeleteGatewayProfileRequest'(id(Msg, TrUserData), TrUserData);
        'ns.MulticastGroup' ->
            'encode_msg_ns.MulticastGroup'(id(Msg, TrUserData), TrUserData);
        'ns.CreateMulticastGroupRequest' ->
            'encode_msg_ns.CreateMulticastGroupRequest'(id(Msg, TrUserData), TrUserData);
        'ns.CreateMulticastGroupResponse' ->
            'encode_msg_ns.CreateMulticastGroupResponse'(id(Msg, TrUserData), TrUserData);
        'ns.GetMulticastGroupRequest' ->
            'encode_msg_ns.GetMulticastGroupRequest'(id(Msg, TrUserData), TrUserData);
        'ns.GetMulticastGroupResponse' ->
            'encode_msg_ns.GetMulticastGroupResponse'(id(Msg, TrUserData), TrUserData);
        'ns.UpdateMulticastGroupRequest' ->
            'encode_msg_ns.UpdateMulticastGroupRequest'(id(Msg, TrUserData), TrUserData);
        'ns.DeleteMulticastGroupRequest' ->
            'encode_msg_ns.DeleteMulticastGroupRequest'(id(Msg, TrUserData), TrUserData);
        'ns.AddDeviceToMulticastGroupRequest' ->
            'encode_msg_ns.AddDeviceToMulticastGroupRequest'(id(Msg, TrUserData), TrUserData);
        'ns.RemoveDeviceFromMulticastGroupRequest' ->
            'encode_msg_ns.RemoveDeviceFromMulticastGroupRequest'(id(Msg, TrUserData), TrUserData);
        'ns.MulticastQueueItem' ->
            'encode_msg_ns.MulticastQueueItem'(id(Msg, TrUserData), TrUserData);
        'ns.EnqueueMulticastQueueItemRequest' ->
            'encode_msg_ns.EnqueueMulticastQueueItemRequest'(id(Msg, TrUserData), TrUserData);
        'ns.FlushMulticastQueueForMulticastGroupRequest' ->
            'encode_msg_ns.FlushMulticastQueueForMulticastGroupRequest'(
                id(Msg, TrUserData),
                TrUserData
            );
        'ns.GetMulticastQueueItemsForMulticastGroupRequest' ->
            'encode_msg_ns.GetMulticastQueueItemsForMulticastGroupRequest'(
                id(Msg, TrUserData),
                TrUserData
            );
        'ns.GetMulticastQueueItemsForMulticastGroupResponse' ->
            'encode_msg_ns.GetMulticastQueueItemsForMulticastGroupResponse'(
                id(Msg, TrUserData),
                TrUserData
            );
        'ns.GetADRAlgorithmsResponse' ->
            'encode_msg_ns.GetADRAlgorithmsResponse'(id(Msg, TrUserData), TrUserData);
        'ns.ADRAlgorithm' ->
            'encode_msg_ns.ADRAlgorithm'(id(Msg, TrUserData), TrUserData);
        'google.protobuf.Timestamp' ->
            'encode_msg_google.protobuf.Timestamp'(id(Msg, TrUserData), TrUserData);
        'google.protobuf.Duration' ->
            'encode_msg_google.protobuf.Duration'(id(Msg, TrUserData), TrUserData);
        'google.protobuf.Empty' ->
            'encode_msg_google.protobuf.Empty'(id(Msg, TrUserData), TrUserData);
        'common.KeyEnvelope' ->
            'encode_msg_common.KeyEnvelope'(id(Msg, TrUserData), TrUserData);
        'common.Location' ->
            'encode_msg_common.Location'(id(Msg, TrUserData), TrUserData);
        'gw.UplinkTXInfo' ->
            'encode_msg_gw.UplinkTXInfo'(id(Msg, TrUserData), TrUserData);
        'gw.LoRaModulationInfo' ->
            'encode_msg_gw.LoRaModulationInfo'(id(Msg, TrUserData), TrUserData);
        'gw.FSKModulationInfo' ->
            'encode_msg_gw.FSKModulationInfo'(id(Msg, TrUserData), TrUserData);
        'gw.EncryptedFineTimestamp' ->
            'encode_msg_gw.EncryptedFineTimestamp'(id(Msg, TrUserData), TrUserData);
        'gw.PlainFineTimestamp' ->
            'encode_msg_gw.PlainFineTimestamp'(id(Msg, TrUserData), TrUserData);
        'gw.GatewayStats' ->
            'encode_msg_gw.GatewayStats'(id(Msg, TrUserData), TrUserData);
        'gw.UplinkRXInfo' ->
            'encode_msg_gw.UplinkRXInfo'(id(Msg, TrUserData), TrUserData);
        'gw.DownlinkTXInfo' ->
            'encode_msg_gw.DownlinkTXInfo'(id(Msg, TrUserData), TrUserData);
        'gw.ImmediatelyTimingInfo' ->
            'encode_msg_gw.ImmediatelyTimingInfo'(id(Msg, TrUserData), TrUserData);
        'gw.DelayTimingInfo' ->
            'encode_msg_gw.DelayTimingInfo'(id(Msg, TrUserData), TrUserData);
        'gw.GPSEpochTimingInfo' ->
            'encode_msg_gw.GPSEpochTimingInfo'(id(Msg, TrUserData), TrUserData);
        'gw.UplinkFrame' ->
            'encode_msg_gw.UplinkFrame'(id(Msg, TrUserData), TrUserData);
        'gw.UplinkFrameSet' ->
            'encode_msg_gw.UplinkFrameSet'(id(Msg, TrUserData), TrUserData);
        'gw.DownlinkFrame' ->
            'encode_msg_gw.DownlinkFrame'(id(Msg, TrUserData), TrUserData);
        'gw.DownlinkFrameItem' ->
            'encode_msg_gw.DownlinkFrameItem'(id(Msg, TrUserData), TrUserData);
        'gw.DownlinkTXAck' ->
            'encode_msg_gw.DownlinkTXAck'(id(Msg, TrUserData), TrUserData);
        'gw.DownlinkTXAckItem' ->
            'encode_msg_gw.DownlinkTXAckItem'(id(Msg, TrUserData), TrUserData);
        'gw.GatewayConfiguration' ->
            'encode_msg_gw.GatewayConfiguration'(id(Msg, TrUserData), TrUserData);
        'gw.ChannelConfiguration' ->
            'encode_msg_gw.ChannelConfiguration'(id(Msg, TrUserData), TrUserData);
        'gw.LoRaModulationConfig' ->
            'encode_msg_gw.LoRaModulationConfig'(id(Msg, TrUserData), TrUserData);
        'gw.FSKModulationConfig' ->
            'encode_msg_gw.FSKModulationConfig'(id(Msg, TrUserData), TrUserData);
        'gw.GatewayCommandExecRequest' ->
            'encode_msg_gw.GatewayCommandExecRequest'(id(Msg, TrUserData), TrUserData);
        'gw.GatewayCommandExecResponse' ->
            'encode_msg_gw.GatewayCommandExecResponse'(id(Msg, TrUserData), TrUserData);
        'gw.RawPacketForwarderEvent' ->
            'encode_msg_gw.RawPacketForwarderEvent'(id(Msg, TrUserData), TrUserData);
        'gw.RawPacketForwarderCommand' ->
            'encode_msg_gw.RawPacketForwarderCommand'(id(Msg, TrUserData), TrUserData);
        'gw.ConnState' ->
            'encode_msg_gw.ConnState'(id(Msg, TrUserData), TrUserData);
        'ns.ServiceProfile' ->
            'encode_msg_ns.ServiceProfile'(id(Msg, TrUserData), TrUserData);
        'ns.DeviceProfile' ->
            'encode_msg_ns.DeviceProfile'(id(Msg, TrUserData), TrUserData);
        'ns.RoutingProfile' ->
            'encode_msg_ns.RoutingProfile'(id(Msg, TrUserData), TrUserData)
    end.

'encode_msg_ns.CreateServiceProfileRequest'(Msg, TrUserData) ->
    'encode_msg_ns.CreateServiceProfileRequest'(Msg, <<>>, TrUserData).

'encode_msg_ns.CreateServiceProfileRequest'(
    #'ns.CreateServiceProfileRequest'{service_profile = F1},
    Bin,
    TrUserData
) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                if
                    TrF1 =:= undefined ->
                        Bin;
                    true ->
                        'e_mfield_ns.CreateServiceProfileRequest_service_profile'(
                            TrF1,
                            <<Bin/binary, 10>>,
                            TrUserData
                        )
                end
            end
    end.

'encode_msg_ns.CreateServiceProfileResponse'(Msg, TrUserData) ->
    'encode_msg_ns.CreateServiceProfileResponse'(Msg, <<>>, TrUserData).

'encode_msg_ns.CreateServiceProfileResponse'(
    #'ns.CreateServiceProfileResponse'{id = F1},
    Bin,
    TrUserData
) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                case iolist_size(TrF1) of
                    0 -> Bin;
                    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.GetServiceProfileRequest'(Msg, TrUserData) ->
    'encode_msg_ns.GetServiceProfileRequest'(Msg, <<>>, TrUserData).

'encode_msg_ns.GetServiceProfileRequest'(#'ns.GetServiceProfileRequest'{id = F1}, Bin, TrUserData) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                case iolist_size(TrF1) of
                    0 -> Bin;
                    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.GetServiceProfileResponse'(Msg, TrUserData) ->
    'encode_msg_ns.GetServiceProfileResponse'(Msg, <<>>, TrUserData).

'encode_msg_ns.GetServiceProfileResponse'(
    #'ns.GetServiceProfileResponse'{service_profile = F1, created_at = F2, updated_at = F3},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= undefined ->
                            Bin;
                        true ->
                            'e_mfield_ns.GetServiceProfileResponse_service_profile'(
                                TrF1,
                                <<Bin/binary, 10>>,
                                TrUserData
                            )
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= undefined ->
                            B1;
                        true ->
                            'e_mfield_ns.GetServiceProfileResponse_created_at'(
                                TrF2,
                                <<B1/binary, 18>>,
                                TrUserData
                            )
                    end
                end
        end,
    if
        F3 == undefined ->
            B2;
        true ->
            begin
                TrF3 = id(F3, TrUserData),
                if
                    TrF3 =:= undefined ->
                        B2;
                    true ->
                        'e_mfield_ns.GetServiceProfileResponse_updated_at'(
                            TrF3,
                            <<B2/binary, 26>>,
                            TrUserData
                        )
                end
            end
    end.

'encode_msg_ns.UpdateServiceProfileRequest'(Msg, TrUserData) ->
    'encode_msg_ns.UpdateServiceProfileRequest'(Msg, <<>>, TrUserData).

'encode_msg_ns.UpdateServiceProfileRequest'(
    #'ns.UpdateServiceProfileRequest'{service_profile = F1},
    Bin,
    TrUserData
) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                if
                    TrF1 =:= undefined ->
                        Bin;
                    true ->
                        'e_mfield_ns.UpdateServiceProfileRequest_service_profile'(
                            TrF1,
                            <<Bin/binary, 10>>,
                            TrUserData
                        )
                end
            end
    end.

'encode_msg_ns.DeleteServiceProfileRequest'(Msg, TrUserData) ->
    'encode_msg_ns.DeleteServiceProfileRequest'(Msg, <<>>, TrUserData).

'encode_msg_ns.DeleteServiceProfileRequest'(
    #'ns.DeleteServiceProfileRequest'{id = F1},
    Bin,
    TrUserData
) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                case iolist_size(TrF1) of
                    0 -> Bin;
                    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.CreateRoutingProfileRequest'(Msg, TrUserData) ->
    'encode_msg_ns.CreateRoutingProfileRequest'(Msg, <<>>, TrUserData).

'encode_msg_ns.CreateRoutingProfileRequest'(
    #'ns.CreateRoutingProfileRequest'{routing_profile = F1},
    Bin,
    TrUserData
) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                if
                    TrF1 =:= undefined ->
                        Bin;
                    true ->
                        'e_mfield_ns.CreateRoutingProfileRequest_routing_profile'(
                            TrF1,
                            <<Bin/binary, 10>>,
                            TrUserData
                        )
                end
            end
    end.

'encode_msg_ns.CreateRoutingProfileResponse'(Msg, TrUserData) ->
    'encode_msg_ns.CreateRoutingProfileResponse'(Msg, <<>>, TrUserData).

'encode_msg_ns.CreateRoutingProfileResponse'(
    #'ns.CreateRoutingProfileResponse'{id = F1},
    Bin,
    TrUserData
) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                case iolist_size(TrF1) of
                    0 -> Bin;
                    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.GetRoutingProfileRequest'(Msg, TrUserData) ->
    'encode_msg_ns.GetRoutingProfileRequest'(Msg, <<>>, TrUserData).

'encode_msg_ns.GetRoutingProfileRequest'(#'ns.GetRoutingProfileRequest'{id = F1}, Bin, TrUserData) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                case iolist_size(TrF1) of
                    0 -> Bin;
                    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.GetRoutingProfileResponse'(Msg, TrUserData) ->
    'encode_msg_ns.GetRoutingProfileResponse'(Msg, <<>>, TrUserData).

'encode_msg_ns.GetRoutingProfileResponse'(
    #'ns.GetRoutingProfileResponse'{routing_profile = F1, created_at = F2, updated_at = F3},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= undefined ->
                            Bin;
                        true ->
                            'e_mfield_ns.GetRoutingProfileResponse_routing_profile'(
                                TrF1,
                                <<Bin/binary, 10>>,
                                TrUserData
                            )
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= undefined ->
                            B1;
                        true ->
                            'e_mfield_ns.GetRoutingProfileResponse_created_at'(
                                TrF2,
                                <<B1/binary, 18>>,
                                TrUserData
                            )
                    end
                end
        end,
    if
        F3 == undefined ->
            B2;
        true ->
            begin
                TrF3 = id(F3, TrUserData),
                if
                    TrF3 =:= undefined ->
                        B2;
                    true ->
                        'e_mfield_ns.GetRoutingProfileResponse_updated_at'(
                            TrF3,
                            <<B2/binary, 26>>,
                            TrUserData
                        )
                end
            end
    end.

'encode_msg_ns.UpdateRoutingProfileRequest'(Msg, TrUserData) ->
    'encode_msg_ns.UpdateRoutingProfileRequest'(Msg, <<>>, TrUserData).

'encode_msg_ns.UpdateRoutingProfileRequest'(
    #'ns.UpdateRoutingProfileRequest'{routing_profile = F1},
    Bin,
    TrUserData
) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                if
                    TrF1 =:= undefined ->
                        Bin;
                    true ->
                        'e_mfield_ns.UpdateRoutingProfileRequest_routing_profile'(
                            TrF1,
                            <<Bin/binary, 10>>,
                            TrUserData
                        )
                end
            end
    end.

'encode_msg_ns.DeleteRoutingProfileRequest'(Msg, TrUserData) ->
    'encode_msg_ns.DeleteRoutingProfileRequest'(Msg, <<>>, TrUserData).

'encode_msg_ns.DeleteRoutingProfileRequest'(
    #'ns.DeleteRoutingProfileRequest'{id = F1},
    Bin,
    TrUserData
) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                case iolist_size(TrF1) of
                    0 -> Bin;
                    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.CreateDeviceProfileRequest'(Msg, TrUserData) ->
    'encode_msg_ns.CreateDeviceProfileRequest'(Msg, <<>>, TrUserData).

'encode_msg_ns.CreateDeviceProfileRequest'(
    #'ns.CreateDeviceProfileRequest'{device_profile = F1},
    Bin,
    TrUserData
) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                if
                    TrF1 =:= undefined ->
                        Bin;
                    true ->
                        'e_mfield_ns.CreateDeviceProfileRequest_device_profile'(
                            TrF1,
                            <<Bin/binary, 10>>,
                            TrUserData
                        )
                end
            end
    end.

'encode_msg_ns.CreateDeviceProfileResponse'(Msg, TrUserData) ->
    'encode_msg_ns.CreateDeviceProfileResponse'(Msg, <<>>, TrUserData).

'encode_msg_ns.CreateDeviceProfileResponse'(
    #'ns.CreateDeviceProfileResponse'{id = F1},
    Bin,
    TrUserData
) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                case iolist_size(TrF1) of
                    0 -> Bin;
                    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.GetDeviceProfileRequest'(Msg, TrUserData) ->
    'encode_msg_ns.GetDeviceProfileRequest'(Msg, <<>>, TrUserData).

'encode_msg_ns.GetDeviceProfileRequest'(#'ns.GetDeviceProfileRequest'{id = F1}, Bin, TrUserData) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                case iolist_size(TrF1) of
                    0 -> Bin;
                    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.GetDeviceProfileResponse'(Msg, TrUserData) ->
    'encode_msg_ns.GetDeviceProfileResponse'(Msg, <<>>, TrUserData).

'encode_msg_ns.GetDeviceProfileResponse'(
    #'ns.GetDeviceProfileResponse'{device_profile = F1, created_at = F2, updated_at = F3},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= undefined ->
                            Bin;
                        true ->
                            'e_mfield_ns.GetDeviceProfileResponse_device_profile'(
                                TrF1,
                                <<Bin/binary, 10>>,
                                TrUserData
                            )
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= undefined ->
                            B1;
                        true ->
                            'e_mfield_ns.GetDeviceProfileResponse_created_at'(
                                TrF2,
                                <<B1/binary, 18>>,
                                TrUserData
                            )
                    end
                end
        end,
    if
        F3 == undefined ->
            B2;
        true ->
            begin
                TrF3 = id(F3, TrUserData),
                if
                    TrF3 =:= undefined ->
                        B2;
                    true ->
                        'e_mfield_ns.GetDeviceProfileResponse_updated_at'(
                            TrF3,
                            <<B2/binary, 26>>,
                            TrUserData
                        )
                end
            end
    end.

'encode_msg_ns.UpdateDeviceProfileRequest'(Msg, TrUserData) ->
    'encode_msg_ns.UpdateDeviceProfileRequest'(Msg, <<>>, TrUserData).

'encode_msg_ns.UpdateDeviceProfileRequest'(
    #'ns.UpdateDeviceProfileRequest'{device_profile = F1},
    Bin,
    TrUserData
) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                if
                    TrF1 =:= undefined ->
                        Bin;
                    true ->
                        'e_mfield_ns.UpdateDeviceProfileRequest_device_profile'(
                            TrF1,
                            <<Bin/binary, 10>>,
                            TrUserData
                        )
                end
            end
    end.

'encode_msg_ns.DeleteDeviceProfileRequest'(Msg, TrUserData) ->
    'encode_msg_ns.DeleteDeviceProfileRequest'(Msg, <<>>, TrUserData).

'encode_msg_ns.DeleteDeviceProfileRequest'(
    #'ns.DeleteDeviceProfileRequest'{id = F1},
    Bin,
    TrUserData
) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                case iolist_size(TrF1) of
                    0 -> Bin;
                    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.Device'(Msg, TrUserData) -> 'encode_msg_ns.Device'(Msg, <<>>, TrUserData).

'encode_msg_ns.Device'(
    #'ns.Device'{
        dev_eui = F1,
        device_profile_id = F2,
        service_profile_id = F3,
        routing_profile_id = F4,
        skip_f_cnt_check = F5,
        reference_altitude = F6,
        is_disabled = F7
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
        end,
    B3 =
        if
            F3 == undefined ->
                B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    case iolist_size(TrF3) of
                        0 -> B2;
                        _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
                    end
                end
        end,
    B4 =
        if
            F4 == undefined ->
                B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    case iolist_size(TrF4) of
                        0 -> B3;
                        _ -> e_type_bytes(TrF4, <<B3/binary, 34>>, TrUserData)
                    end
                end
        end,
    B5 =
        if
            F5 == undefined ->
                B4;
            true ->
                begin
                    TrF5 = id(F5, TrUserData),
                    if
                        TrF5 =:= false -> B4;
                        true -> e_type_bool(TrF5, <<B4/binary, 40>>, TrUserData)
                    end
                end
        end,
    B6 =
        if
            F6 == undefined ->
                B5;
            true ->
                begin
                    TrF6 = id(F6, TrUserData),
                    if
                        TrF6 =:= 0.0 -> B5;
                        true -> e_type_double(TrF6, <<B5/binary, 49>>, TrUserData)
                    end
                end
        end,
    if
        F7 == undefined ->
            B6;
        true ->
            begin
                TrF7 = id(F7, TrUserData),
                if
                    TrF7 =:= false -> B6;
                    true -> e_type_bool(TrF7, <<B6/binary, 56>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.CreateDeviceRequest'(Msg, TrUserData) ->
    'encode_msg_ns.CreateDeviceRequest'(Msg, <<>>, TrUserData).

'encode_msg_ns.CreateDeviceRequest'(#'ns.CreateDeviceRequest'{device = F1}, Bin, TrUserData) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                if
                    TrF1 =:= undefined ->
                        Bin;
                    true ->
                        'e_mfield_ns.CreateDeviceRequest_device'(
                            TrF1,
                            <<Bin/binary, 10>>,
                            TrUserData
                        )
                end
            end
    end.

'encode_msg_ns.GetDeviceRequest'(Msg, TrUserData) ->
    'encode_msg_ns.GetDeviceRequest'(Msg, <<>>, TrUserData).

'encode_msg_ns.GetDeviceRequest'(#'ns.GetDeviceRequest'{dev_eui = F1}, Bin, TrUserData) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                case iolist_size(TrF1) of
                    0 -> Bin;
                    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.GetDeviceResponse'(Msg, TrUserData) ->
    'encode_msg_ns.GetDeviceResponse'(Msg, <<>>, TrUserData).

'encode_msg_ns.GetDeviceResponse'(
    #'ns.GetDeviceResponse'{device = F1, created_at = F2, updated_at = F3},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= undefined ->
                            Bin;
                        true ->
                            'e_mfield_ns.GetDeviceResponse_device'(
                                TrF1,
                                <<Bin/binary, 10>>,
                                TrUserData
                            )
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= undefined ->
                            B1;
                        true ->
                            'e_mfield_ns.GetDeviceResponse_created_at'(
                                TrF2,
                                <<B1/binary, 18>>,
                                TrUserData
                            )
                    end
                end
        end,
    if
        F3 == undefined ->
            B2;
        true ->
            begin
                TrF3 = id(F3, TrUserData),
                if
                    TrF3 =:= undefined ->
                        B2;
                    true ->
                        'e_mfield_ns.GetDeviceResponse_updated_at'(
                            TrF3,
                            <<B2/binary, 26>>,
                            TrUserData
                        )
                end
            end
    end.

'encode_msg_ns.UpdateDeviceRequest'(Msg, TrUserData) ->
    'encode_msg_ns.UpdateDeviceRequest'(Msg, <<>>, TrUserData).

'encode_msg_ns.UpdateDeviceRequest'(#'ns.UpdateDeviceRequest'{device = F1}, Bin, TrUserData) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                if
                    TrF1 =:= undefined ->
                        Bin;
                    true ->
                        'e_mfield_ns.UpdateDeviceRequest_device'(
                            TrF1,
                            <<Bin/binary, 10>>,
                            TrUserData
                        )
                end
            end
    end.

'encode_msg_ns.DeleteDeviceRequest'(Msg, TrUserData) ->
    'encode_msg_ns.DeleteDeviceRequest'(Msg, <<>>, TrUserData).

'encode_msg_ns.DeleteDeviceRequest'(#'ns.DeleteDeviceRequest'{dev_eui = F1}, Bin, TrUserData) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                case iolist_size(TrF1) of
                    0 -> Bin;
                    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.DeviceActivation'(Msg, TrUserData) ->
    'encode_msg_ns.DeviceActivation'(Msg, <<>>, TrUserData).

'encode_msg_ns.DeviceActivation'(
    #'ns.DeviceActivation'{
        dev_eui = F1,
        dev_addr = F2,
        s_nwk_s_int_key = F3,
        f_nwk_s_int_key = F4,
        nwk_s_enc_key = F5,
        f_cnt_up = F6,
        n_f_cnt_down = F7,
        a_f_cnt_down = F8,
        skip_f_cnt_check = F9
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
        end,
    B3 =
        if
            F3 == undefined ->
                B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    case iolist_size(TrF3) of
                        0 -> B2;
                        _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
                    end
                end
        end,
    B4 =
        if
            F4 == undefined ->
                B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    case iolist_size(TrF4) of
                        0 -> B3;
                        _ -> e_type_bytes(TrF4, <<B3/binary, 34>>, TrUserData)
                    end
                end
        end,
    B5 =
        if
            F5 == undefined ->
                B4;
            true ->
                begin
                    TrF5 = id(F5, TrUserData),
                    case iolist_size(TrF5) of
                        0 -> B4;
                        _ -> e_type_bytes(TrF5, <<B4/binary, 42>>, TrUserData)
                    end
                end
        end,
    B6 =
        if
            F6 == undefined ->
                B5;
            true ->
                begin
                    TrF6 = id(F6, TrUserData),
                    if
                        TrF6 =:= 0 -> B5;
                        true -> e_varint(TrF6, <<B5/binary, 48>>, TrUserData)
                    end
                end
        end,
    B7 =
        if
            F7 == undefined ->
                B6;
            true ->
                begin
                    TrF7 = id(F7, TrUserData),
                    if
                        TrF7 =:= 0 -> B6;
                        true -> e_varint(TrF7, <<B6/binary, 56>>, TrUserData)
                    end
                end
        end,
    B8 =
        if
            F8 == undefined ->
                B7;
            true ->
                begin
                    TrF8 = id(F8, TrUserData),
                    if
                        TrF8 =:= 0 -> B7;
                        true -> e_varint(TrF8, <<B7/binary, 64>>, TrUserData)
                    end
                end
        end,
    if
        F9 == undefined ->
            B8;
        true ->
            begin
                TrF9 = id(F9, TrUserData),
                if
                    TrF9 =:= false -> B8;
                    true -> e_type_bool(TrF9, <<B8/binary, 72>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.ActivateDeviceRequest'(Msg, TrUserData) ->
    'encode_msg_ns.ActivateDeviceRequest'(Msg, <<>>, TrUserData).

'encode_msg_ns.ActivateDeviceRequest'(
    #'ns.ActivateDeviceRequest'{device_activation = F1},
    Bin,
    TrUserData
) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                if
                    TrF1 =:= undefined ->
                        Bin;
                    true ->
                        'e_mfield_ns.ActivateDeviceRequest_device_activation'(
                            TrF1,
                            <<Bin/binary, 10>>,
                            TrUserData
                        )
                end
            end
    end.

'encode_msg_ns.DeactivateDeviceRequest'(Msg, TrUserData) ->
    'encode_msg_ns.DeactivateDeviceRequest'(Msg, <<>>, TrUserData).

'encode_msg_ns.DeactivateDeviceRequest'(
    #'ns.DeactivateDeviceRequest'{dev_eui = F1},
    Bin,
    TrUserData
) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                case iolist_size(TrF1) of
                    0 -> Bin;
                    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.GetDeviceActivationRequest'(Msg, TrUserData) ->
    'encode_msg_ns.GetDeviceActivationRequest'(Msg, <<>>, TrUserData).

'encode_msg_ns.GetDeviceActivationRequest'(
    #'ns.GetDeviceActivationRequest'{dev_eui = F1},
    Bin,
    TrUserData
) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                case iolist_size(TrF1) of
                    0 -> Bin;
                    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.GetDeviceActivationResponse'(Msg, TrUserData) ->
    'encode_msg_ns.GetDeviceActivationResponse'(Msg, <<>>, TrUserData).

'encode_msg_ns.GetDeviceActivationResponse'(
    #'ns.GetDeviceActivationResponse'{device_activation = F1},
    Bin,
    TrUserData
) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                if
                    TrF1 =:= undefined ->
                        Bin;
                    true ->
                        'e_mfield_ns.GetDeviceActivationResponse_device_activation'(
                            TrF1,
                            <<Bin/binary, 10>>,
                            TrUserData
                        )
                end
            end
    end.

'encode_msg_ns.GetRandomDevAddrResponse'(Msg, TrUserData) ->
    'encode_msg_ns.GetRandomDevAddrResponse'(Msg, <<>>, TrUserData).

'encode_msg_ns.GetRandomDevAddrResponse'(
    #'ns.GetRandomDevAddrResponse'{dev_addr = F1},
    Bin,
    TrUserData
) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                case iolist_size(TrF1) of
                    0 -> Bin;
                    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.CreateMACCommandQueueItemRequest'(Msg, TrUserData) ->
    'encode_msg_ns.CreateMACCommandQueueItemRequest'(Msg, <<>>, TrUserData).

'encode_msg_ns.CreateMACCommandQueueItemRequest'(
    #'ns.CreateMACCommandQueueItemRequest'{dev_eui = F1, cid = F2, commands = F3},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= 0 -> B1;
                        true -> e_varint(TrF2, <<B1/binary, 32>>, TrUserData)
                    end
                end
        end,
    begin
        TrF3 = id(F3, TrUserData),
        if
            TrF3 == [] -> B2;
            true -> 'e_field_ns.CreateMACCommandQueueItemRequest_commands'(TrF3, B2, TrUserData)
        end
    end.

'encode_msg_ns.SendProprietaryPayloadRequest'(Msg, TrUserData) ->
    'encode_msg_ns.SendProprietaryPayloadRequest'(Msg, <<>>, TrUserData).

'encode_msg_ns.SendProprietaryPayloadRequest'(
    #'ns.SendProprietaryPayloadRequest'{
        mac_payload = F1,
        mic = F2,
        gateway_macs = F3,
        polarization_inversion = F4,
        frequency = F5,
        dr = F6
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
        end,
    B3 = begin
        TrF3 = id(F3, TrUserData),
        if
            TrF3 == [] -> B2;
            true -> 'e_field_ns.SendProprietaryPayloadRequest_gateway_macs'(TrF3, B2, TrUserData)
        end
    end,
    B4 =
        if
            F4 == undefined ->
                B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    if
                        TrF4 =:= false -> B3;
                        true -> e_type_bool(TrF4, <<B3/binary, 32>>, TrUserData)
                    end
                end
        end,
    B5 =
        if
            F5 == undefined ->
                B4;
            true ->
                begin
                    TrF5 = id(F5, TrUserData),
                    if
                        TrF5 =:= 0 -> B4;
                        true -> e_varint(TrF5, <<B4/binary, 40>>, TrUserData)
                    end
                end
        end,
    if
        F6 == undefined ->
            B5;
        true ->
            begin
                TrF6 = id(F6, TrUserData),
                if
                    TrF6 =:= 0 -> B5;
                    true -> e_varint(TrF6, <<B5/binary, 48>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.Gateway'(Msg, TrUserData) -> 'encode_msg_ns.Gateway'(Msg, <<>>, TrUserData).

'encode_msg_ns.Gateway'(
    #'ns.Gateway'{
        id = F1,
        location = F2,
        gateway_profile_id = F3,
        boards = F4,
        routing_profile_id = F5,
        service_profile_id = F6
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= undefined -> B1;
                        true -> 'e_mfield_ns.Gateway_location'(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
        end,
    B3 =
        if
            F3 == undefined ->
                B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    case iolist_size(TrF3) of
                        0 -> B2;
                        _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
                    end
                end
        end,
    B4 = begin
        TrF4 = id(F4, TrUserData),
        if
            TrF4 == [] -> B3;
            true -> 'e_field_ns.Gateway_boards'(TrF4, B3, TrUserData)
        end
    end,
    B5 =
        if
            F5 == undefined ->
                B4;
            true ->
                begin
                    TrF5 = id(F5, TrUserData),
                    case iolist_size(TrF5) of
                        0 -> B4;
                        _ -> e_type_bytes(TrF5, <<B4/binary, 42>>, TrUserData)
                    end
                end
        end,
    if
        F6 == undefined ->
            B5;
        true ->
            begin
                TrF6 = id(F6, TrUserData),
                case iolist_size(TrF6) of
                    0 -> B5;
                    _ -> e_type_bytes(TrF6, <<B5/binary, 50>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.GatewayBoard'(Msg, TrUserData) ->
    'encode_msg_ns.GatewayBoard'(Msg, <<>>, TrUserData).

'encode_msg_ns.GatewayBoard'(
    #'ns.GatewayBoard'{fpga_id = F1, fine_timestamp_key = F2},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    if
        F2 == undefined ->
            B1;
        true ->
            begin
                TrF2 = id(F2, TrUserData),
                case iolist_size(TrF2) of
                    0 -> B1;
                    _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.CreateGatewayRequest'(Msg, TrUserData) ->
    'encode_msg_ns.CreateGatewayRequest'(Msg, <<>>, TrUserData).

'encode_msg_ns.CreateGatewayRequest'(#'ns.CreateGatewayRequest'{gateway = F1}, Bin, TrUserData) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                if
                    TrF1 =:= undefined ->
                        Bin;
                    true ->
                        'e_mfield_ns.CreateGatewayRequest_gateway'(
                            TrF1,
                            <<Bin/binary, 10>>,
                            TrUserData
                        )
                end
            end
    end.

'encode_msg_ns.GetGatewayRequest'(Msg, TrUserData) ->
    'encode_msg_ns.GetGatewayRequest'(Msg, <<>>, TrUserData).

'encode_msg_ns.GetGatewayRequest'(#'ns.GetGatewayRequest'{id = F1}, Bin, TrUserData) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                case iolist_size(TrF1) of
                    0 -> Bin;
                    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.GetGatewayResponse'(Msg, TrUserData) ->
    'encode_msg_ns.GetGatewayResponse'(Msg, <<>>, TrUserData).

'encode_msg_ns.GetGatewayResponse'(
    #'ns.GetGatewayResponse'{
        gateway = F1,
        created_at = F2,
        updated_at = F3,
        first_seen_at = F4,
        last_seen_at = F5
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= undefined ->
                            Bin;
                        true ->
                            'e_mfield_ns.GetGatewayResponse_gateway'(
                                TrF1,
                                <<Bin/binary, 10>>,
                                TrUserData
                            )
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= undefined ->
                            B1;
                        true ->
                            'e_mfield_ns.GetGatewayResponse_created_at'(
                                TrF2,
                                <<B1/binary, 18>>,
                                TrUserData
                            )
                    end
                end
        end,
    B3 =
        if
            F3 == undefined ->
                B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    if
                        TrF3 =:= undefined ->
                            B2;
                        true ->
                            'e_mfield_ns.GetGatewayResponse_updated_at'(
                                TrF3,
                                <<B2/binary, 26>>,
                                TrUserData
                            )
                    end
                end
        end,
    B4 =
        if
            F4 == undefined ->
                B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    if
                        TrF4 =:= undefined ->
                            B3;
                        true ->
                            'e_mfield_ns.GetGatewayResponse_first_seen_at'(
                                TrF4,
                                <<B3/binary, 34>>,
                                TrUserData
                            )
                    end
                end
        end,
    if
        F5 == undefined ->
            B4;
        true ->
            begin
                TrF5 = id(F5, TrUserData),
                if
                    TrF5 =:= undefined ->
                        B4;
                    true ->
                        'e_mfield_ns.GetGatewayResponse_last_seen_at'(
                            TrF5,
                            <<B4/binary, 42>>,
                            TrUserData
                        )
                end
            end
    end.

'encode_msg_ns.UpdateGatewayRequest'(Msg, TrUserData) ->
    'encode_msg_ns.UpdateGatewayRequest'(Msg, <<>>, TrUserData).

'encode_msg_ns.UpdateGatewayRequest'(#'ns.UpdateGatewayRequest'{gateway = F1}, Bin, TrUserData) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                if
                    TrF1 =:= undefined ->
                        Bin;
                    true ->
                        'e_mfield_ns.UpdateGatewayRequest_gateway'(
                            TrF1,
                            <<Bin/binary, 10>>,
                            TrUserData
                        )
                end
            end
    end.

'encode_msg_ns.DeleteGatewayRequest'(Msg, TrUserData) ->
    'encode_msg_ns.DeleteGatewayRequest'(Msg, <<>>, TrUserData).

'encode_msg_ns.DeleteGatewayRequest'(#'ns.DeleteGatewayRequest'{id = F1}, Bin, TrUserData) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                case iolist_size(TrF1) of
                    0 -> Bin;
                    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.GenerateGatewayClientCertificateRequest'(Msg, TrUserData) ->
    'encode_msg_ns.GenerateGatewayClientCertificateRequest'(Msg, <<>>, TrUserData).

'encode_msg_ns.GenerateGatewayClientCertificateRequest'(
    #'ns.GenerateGatewayClientCertificateRequest'{id = F1},
    Bin,
    TrUserData
) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                case iolist_size(TrF1) of
                    0 -> Bin;
                    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.GenerateGatewayClientCertificateResponse'(Msg, TrUserData) ->
    'encode_msg_ns.GenerateGatewayClientCertificateResponse'(Msg, <<>>, TrUserData).

'encode_msg_ns.GenerateGatewayClientCertificateResponse'(
    #'ns.GenerateGatewayClientCertificateResponse'{
        tls_cert = F1,
        tls_key = F2,
        ca_cert = F3,
        expires_at = F4
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
        end,
    B3 =
        if
            F3 == undefined ->
                B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    case iolist_size(TrF3) of
                        0 -> B2;
                        _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
                    end
                end
        end,
    if
        F4 == undefined ->
            B3;
        true ->
            begin
                TrF4 = id(F4, TrUserData),
                if
                    TrF4 =:= undefined ->
                        B3;
                    true ->
                        'e_mfield_ns.GenerateGatewayClientCertificateResponse_expires_at'(
                            TrF4,
                            <<B3/binary, 34>>,
                            TrUserData
                        )
                end
            end
    end.

'encode_msg_ns.GatewayStats'(Msg, TrUserData) ->
    'encode_msg_ns.GatewayStats'(Msg, <<>>, TrUserData).

'encode_msg_ns.GatewayStats'(
    #'ns.GatewayStats'{
        timestamp = F1,
        rx_packets_received = F2,
        rx_packets_received_ok = F3,
        tx_packets_received = F4,
        tx_packets_emitted = F5
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= undefined ->
                            Bin;
                        true ->
                            'e_mfield_ns.GatewayStats_timestamp'(
                                TrF1,
                                <<Bin/binary, 10>>,
                                TrUserData
                            )
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= 0 -> B1;
                        true -> e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
                    end
                end
        end,
    B3 =
        if
            F3 == undefined ->
                B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    if
                        TrF3 =:= 0 -> B2;
                        true -> e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
                    end
                end
        end,
    B4 =
        if
            F4 == undefined ->
                B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    if
                        TrF4 =:= 0 -> B3;
                        true -> e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
                    end
                end
        end,
    if
        F5 == undefined ->
            B4;
        true ->
            begin
                TrF5 = id(F5, TrUserData),
                if
                    TrF5 =:= 0 -> B4;
                    true -> e_type_int32(TrF5, <<B4/binary, 40>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.GetGatewayStatsRequest'(Msg, TrUserData) ->
    'encode_msg_ns.GetGatewayStatsRequest'(Msg, <<>>, TrUserData).

'encode_msg_ns.GetGatewayStatsRequest'(
    #'ns.GetGatewayStatsRequest'{
        gateway_id = F1,
        interval = F2,
        start_timestamp = F3,
        end_timestamp = F4
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= 'SECOND'; TrF2 =:= 0 -> B1;
                        true -> 'e_enum_ns.AggregationInterval'(TrF2, <<B1/binary, 16>>, TrUserData)
                    end
                end
        end,
    B3 =
        if
            F3 == undefined ->
                B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    if
                        TrF3 =:= undefined ->
                            B2;
                        true ->
                            'e_mfield_ns.GetGatewayStatsRequest_start_timestamp'(
                                TrF3,
                                <<B2/binary, 26>>,
                                TrUserData
                            )
                    end
                end
        end,
    if
        F4 == undefined ->
            B3;
        true ->
            begin
                TrF4 = id(F4, TrUserData),
                if
                    TrF4 =:= undefined ->
                        B3;
                    true ->
                        'e_mfield_ns.GetGatewayStatsRequest_end_timestamp'(
                            TrF4,
                            <<B3/binary, 34>>,
                            TrUserData
                        )
                end
            end
    end.

'encode_msg_ns.GetGatewayStatsResponse'(Msg, TrUserData) ->
    'encode_msg_ns.GetGatewayStatsResponse'(Msg, <<>>, TrUserData).

'encode_msg_ns.GetGatewayStatsResponse'(
    #'ns.GetGatewayStatsResponse'{result = F1},
    Bin,
    TrUserData
) ->
    begin
        TrF1 = id(F1, TrUserData),
        if
            TrF1 == [] -> Bin;
            true -> 'e_field_ns.GetGatewayStatsResponse_result'(TrF1, Bin, TrUserData)
        end
    end.

'encode_msg_ns.DeviceQueueItem'(Msg, TrUserData) ->
    'encode_msg_ns.DeviceQueueItem'(Msg, <<>>, TrUserData).

'encode_msg_ns.DeviceQueueItem'(
    #'ns.DeviceQueueItem'{
        dev_eui = F1,
        frm_payload = F2,
        f_cnt = F3,
        f_port = F4,
        confirmed = F5,
        dev_addr = F6
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
        end,
    B3 =
        if
            F3 == undefined ->
                B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    if
                        TrF3 =:= 0 -> B2;
                        true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                    end
                end
        end,
    B4 =
        if
            F4 == undefined ->
                B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    if
                        TrF4 =:= 0 -> B3;
                        true -> e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
                    end
                end
        end,
    B5 =
        if
            F5 == undefined ->
                B4;
            true ->
                begin
                    TrF5 = id(F5, TrUserData),
                    if
                        TrF5 =:= false -> B4;
                        true -> e_type_bool(TrF5, <<B4/binary, 40>>, TrUserData)
                    end
                end
        end,
    if
        F6 == undefined ->
            B5;
        true ->
            begin
                TrF6 = id(F6, TrUserData),
                case iolist_size(TrF6) of
                    0 -> B5;
                    _ -> e_type_bytes(TrF6, <<B5/binary, 50>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.CreateDeviceQueueItemRequest'(Msg, TrUserData) ->
    'encode_msg_ns.CreateDeviceQueueItemRequest'(Msg, <<>>, TrUserData).

'encode_msg_ns.CreateDeviceQueueItemRequest'(
    #'ns.CreateDeviceQueueItemRequest'{item = F1},
    Bin,
    TrUserData
) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                if
                    TrF1 =:= undefined ->
                        Bin;
                    true ->
                        'e_mfield_ns.CreateDeviceQueueItemRequest_item'(
                            TrF1,
                            <<Bin/binary, 10>>,
                            TrUserData
                        )
                end
            end
    end.

'encode_msg_ns.FlushDeviceQueueForDevEUIRequest'(Msg, TrUserData) ->
    'encode_msg_ns.FlushDeviceQueueForDevEUIRequest'(Msg, <<>>, TrUserData).

'encode_msg_ns.FlushDeviceQueueForDevEUIRequest'(
    #'ns.FlushDeviceQueueForDevEUIRequest'{dev_eui = F1},
    Bin,
    TrUserData
) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                case iolist_size(TrF1) of
                    0 -> Bin;
                    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.GetDeviceQueueItemsForDevEUIRequest'(Msg, TrUserData) ->
    'encode_msg_ns.GetDeviceQueueItemsForDevEUIRequest'(Msg, <<>>, TrUserData).

'encode_msg_ns.GetDeviceQueueItemsForDevEUIRequest'(
    #'ns.GetDeviceQueueItemsForDevEUIRequest'{dev_eui = F1, count_only = F2},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    if
        F2 == undefined ->
            B1;
        true ->
            begin
                TrF2 = id(F2, TrUserData),
                if
                    TrF2 =:= false -> B1;
                    true -> e_type_bool(TrF2, <<B1/binary, 16>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.GetDeviceQueueItemsForDevEUIResponse'(Msg, TrUserData) ->
    'encode_msg_ns.GetDeviceQueueItemsForDevEUIResponse'(Msg, <<>>, TrUserData).

'encode_msg_ns.GetDeviceQueueItemsForDevEUIResponse'(
    #'ns.GetDeviceQueueItemsForDevEUIResponse'{items = F1, total_count = F2},
    Bin,
    TrUserData
) ->
    B1 = begin
        TrF1 = id(F1, TrUserData),
        if
            TrF1 == [] -> Bin;
            true -> 'e_field_ns.GetDeviceQueueItemsForDevEUIResponse_items'(TrF1, Bin, TrUserData)
        end
    end,
    if
        F2 == undefined ->
            B1;
        true ->
            begin
                TrF2 = id(F2, TrUserData),
                if
                    TrF2 =:= 0 -> B1;
                    true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.GetNextDownlinkFCntForDevEUIRequest'(Msg, TrUserData) ->
    'encode_msg_ns.GetNextDownlinkFCntForDevEUIRequest'(Msg, <<>>, TrUserData).

'encode_msg_ns.GetNextDownlinkFCntForDevEUIRequest'(
    #'ns.GetNextDownlinkFCntForDevEUIRequest'{dev_eui = F1},
    Bin,
    TrUserData
) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                case iolist_size(TrF1) of
                    0 -> Bin;
                    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.GetNextDownlinkFCntForDevEUIResponse'(Msg, TrUserData) ->
    'encode_msg_ns.GetNextDownlinkFCntForDevEUIResponse'(Msg, <<>>, TrUserData).

'encode_msg_ns.GetNextDownlinkFCntForDevEUIResponse'(
    #'ns.GetNextDownlinkFCntForDevEUIResponse'{f_cnt = F1},
    Bin,
    TrUserData
) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                if
                    TrF1 =:= 0 -> Bin;
                    true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.UplinkFrameLog'(Msg, TrUserData) ->
    'encode_msg_ns.UplinkFrameLog'(Msg, <<>>, TrUserData).

'encode_msg_ns.UplinkFrameLog'(
    #'ns.UplinkFrameLog'{
        phy_payload = F1,
        tx_info = F2,
        rx_info = F3,
        m_type = F4,
        dev_addr = F5,
        dev_eui = F6
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= undefined ->
                            B1;
                        true ->
                            'e_mfield_ns.UplinkFrameLog_tx_info'(
                                TrF2,
                                <<B1/binary, 18>>,
                                TrUserData
                            )
                    end
                end
        end,
    B3 = begin
        TrF3 = id(F3, TrUserData),
        if
            TrF3 == [] -> B2;
            true -> 'e_field_ns.UplinkFrameLog_rx_info'(TrF3, B2, TrUserData)
        end
    end,
    B4 =
        if
            F4 == undefined ->
                B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    if
                        TrF4 =:= 'JoinRequest'; TrF4 =:= 0 -> B3;
                        true -> 'e_enum_common.MType'(TrF4, <<B3/binary, 32>>, TrUserData)
                    end
                end
        end,
    B5 =
        if
            F5 == undefined ->
                B4;
            true ->
                begin
                    TrF5 = id(F5, TrUserData),
                    case iolist_size(TrF5) of
                        0 -> B4;
                        _ -> e_type_bytes(TrF5, <<B4/binary, 42>>, TrUserData)
                    end
                end
        end,
    if
        F6 == undefined ->
            B5;
        true ->
            begin
                TrF6 = id(F6, TrUserData),
                case iolist_size(TrF6) of
                    0 -> B5;
                    _ -> e_type_bytes(TrF6, <<B5/binary, 50>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.DownlinkFrameLog'(Msg, TrUserData) ->
    'encode_msg_ns.DownlinkFrameLog'(Msg, <<>>, TrUserData).

'encode_msg_ns.DownlinkFrameLog'(
    #'ns.DownlinkFrameLog'{
        phy_payload = F1,
        tx_info = F2,
        token = F3,
        downlink_id = F4,
        gateway_id = F5,
        m_type = F6,
        dev_addr = F7,
        dev_eui = F8
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= undefined ->
                            B1;
                        true ->
                            'e_mfield_ns.DownlinkFrameLog_tx_info'(
                                TrF2,
                                <<B1/binary, 18>>,
                                TrUserData
                            )
                    end
                end
        end,
    B3 =
        if
            F3 == undefined ->
                B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    if
                        TrF3 =:= 0 -> B2;
                        true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                    end
                end
        end,
    B4 =
        if
            F4 == undefined ->
                B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    case iolist_size(TrF4) of
                        0 -> B3;
                        _ -> e_type_bytes(TrF4, <<B3/binary, 34>>, TrUserData)
                    end
                end
        end,
    B5 =
        if
            F5 == undefined ->
                B4;
            true ->
                begin
                    TrF5 = id(F5, TrUserData),
                    case iolist_size(TrF5) of
                        0 -> B4;
                        _ -> e_type_bytes(TrF5, <<B4/binary, 42>>, TrUserData)
                    end
                end
        end,
    B6 =
        if
            F6 == undefined ->
                B5;
            true ->
                begin
                    TrF6 = id(F6, TrUserData),
                    if
                        TrF6 =:= 'JoinRequest'; TrF6 =:= 0 -> B5;
                        true -> 'e_enum_common.MType'(TrF6, <<B5/binary, 48>>, TrUserData)
                    end
                end
        end,
    B7 =
        if
            F7 == undefined ->
                B6;
            true ->
                begin
                    TrF7 = id(F7, TrUserData),
                    case iolist_size(TrF7) of
                        0 -> B6;
                        _ -> e_type_bytes(TrF7, <<B6/binary, 58>>, TrUserData)
                    end
                end
        end,
    if
        F8 == undefined ->
            B7;
        true ->
            begin
                TrF8 = id(F8, TrUserData),
                case iolist_size(TrF8) of
                    0 -> B7;
                    _ -> e_type_bytes(TrF8, <<B7/binary, 66>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.StreamFrameLogsForGatewayRequest'(Msg, TrUserData) ->
    'encode_msg_ns.StreamFrameLogsForGatewayRequest'(Msg, <<>>, TrUserData).

'encode_msg_ns.StreamFrameLogsForGatewayRequest'(
    #'ns.StreamFrameLogsForGatewayRequest'{gateway_id = F1},
    Bin,
    TrUserData
) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                case iolist_size(TrF1) of
                    0 -> Bin;
                    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.StreamFrameLogsForGatewayResponse'(Msg, TrUserData) ->
    'encode_msg_ns.StreamFrameLogsForGatewayResponse'(Msg, <<>>, TrUserData).

'encode_msg_ns.StreamFrameLogsForGatewayResponse'(
    #'ns.StreamFrameLogsForGatewayResponse'{frame = F1},
    Bin,
    TrUserData
) ->
    if
        F1 =:= undefined ->
            Bin;
        true ->
            case id(F1, TrUserData) of
                {uplink_frame_set, TF1} ->
                    begin
                        TrTF1 = id(TF1, TrUserData),
                        'e_mfield_ns.StreamFrameLogsForGatewayResponse_uplink_frame_set'(
                            TrTF1,
                            <<Bin/binary, 10>>,
                            TrUserData
                        )
                    end;
                {downlink_frame, TF1} ->
                    begin
                        TrTF1 = id(TF1, TrUserData),
                        'e_mfield_ns.StreamFrameLogsForGatewayResponse_downlink_frame'(
                            TrTF1,
                            <<Bin/binary, 18>>,
                            TrUserData
                        )
                    end
            end
    end.

'encode_msg_ns.StreamFrameLogsForDeviceRequest'(Msg, TrUserData) ->
    'encode_msg_ns.StreamFrameLogsForDeviceRequest'(Msg, <<>>, TrUserData).

'encode_msg_ns.StreamFrameLogsForDeviceRequest'(
    #'ns.StreamFrameLogsForDeviceRequest'{dev_eui = F1},
    Bin,
    TrUserData
) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                case iolist_size(TrF1) of
                    0 -> Bin;
                    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.StreamFrameLogsForDeviceResponse'(Msg, TrUserData) ->
    'encode_msg_ns.StreamFrameLogsForDeviceResponse'(Msg, <<>>, TrUserData).

'encode_msg_ns.StreamFrameLogsForDeviceResponse'(
    #'ns.StreamFrameLogsForDeviceResponse'{frame = F1},
    Bin,
    TrUserData
) ->
    if
        F1 =:= undefined ->
            Bin;
        true ->
            case id(F1, TrUserData) of
                {uplink_frame_set, TF1} ->
                    begin
                        TrTF1 = id(TF1, TrUserData),
                        'e_mfield_ns.StreamFrameLogsForDeviceResponse_uplink_frame_set'(
                            TrTF1,
                            <<Bin/binary, 10>>,
                            TrUserData
                        )
                    end;
                {downlink_frame, TF1} ->
                    begin
                        TrTF1 = id(TF1, TrUserData),
                        'e_mfield_ns.StreamFrameLogsForDeviceResponse_downlink_frame'(
                            TrTF1,
                            <<Bin/binary, 18>>,
                            TrUserData
                        )
                    end
            end
    end.

'encode_msg_ns.GetVersionResponse'(Msg, TrUserData) ->
    'encode_msg_ns.GetVersionResponse'(Msg, <<>>, TrUserData).

'encode_msg_ns.GetVersionResponse'(
    #'ns.GetVersionResponse'{version = F1, region = F2},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    if
        F2 == undefined ->
            B1;
        true ->
            begin
                TrF2 = id(F2, TrUserData),
                if
                    TrF2 =:= 'EU868'; TrF2 =:= 0 -> B1;
                    true -> 'e_enum_common.Region'(TrF2, <<B1/binary, 16>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.GatewayProfile'(Msg, TrUserData) ->
    'encode_msg_ns.GatewayProfile'(Msg, <<>>, TrUserData).

'encode_msg_ns.GatewayProfile'(
    #'ns.GatewayProfile'{id = F1, channels = F2, extra_channels = F3, stats_interval = F4},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    B2 = begin
        TrF2 = id(F2, TrUserData),
        if
            TrF2 == [] -> B1;
            true -> 'e_field_ns.GatewayProfile_channels'(TrF2, B1, TrUserData)
        end
    end,
    B3 = begin
        TrF3 = id(F3, TrUserData),
        if
            TrF3 == [] -> B2;
            true -> 'e_field_ns.GatewayProfile_extra_channels'(TrF3, B2, TrUserData)
        end
    end,
    if
        F4 == undefined ->
            B3;
        true ->
            begin
                TrF4 = id(F4, TrUserData),
                if
                    TrF4 =:= undefined ->
                        B3;
                    true ->
                        'e_mfield_ns.GatewayProfile_stats_interval'(
                            TrF4,
                            <<B3/binary, 34>>,
                            TrUserData
                        )
                end
            end
    end.

'encode_msg_ns.GatewayProfileExtraChannel'(Msg, TrUserData) ->
    'encode_msg_ns.GatewayProfileExtraChannel'(Msg, <<>>, TrUserData).

'encode_msg_ns.GatewayProfileExtraChannel'(
    #'ns.GatewayProfileExtraChannel'{
        modulation = F1,
        frequency = F2,
        bandwidth = F3,
        bitrate = F4,
        spreading_factors = F5
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= 'LORA'; TrF1 =:= 0 -> Bin;
                        true -> 'e_enum_common.Modulation'(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= 0 -> B1;
                        true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                    end
                end
        end,
    B3 =
        if
            F3 == undefined ->
                B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    if
                        TrF3 =:= 0 -> B2;
                        true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                    end
                end
        end,
    B4 =
        if
            F4 == undefined ->
                B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    if
                        TrF4 =:= 0 -> B3;
                        true -> e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
                    end
                end
        end,
    begin
        TrF5 = id(F5, TrUserData),
        if
            TrF5 == [] -> B4;
            true -> 'e_field_ns.GatewayProfileExtraChannel_spreading_factors'(TrF5, B4, TrUserData)
        end
    end.

'encode_msg_ns.CreateGatewayProfileRequest'(Msg, TrUserData) ->
    'encode_msg_ns.CreateGatewayProfileRequest'(Msg, <<>>, TrUserData).

'encode_msg_ns.CreateGatewayProfileRequest'(
    #'ns.CreateGatewayProfileRequest'{gateway_profile = F1},
    Bin,
    TrUserData
) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                if
                    TrF1 =:= undefined ->
                        Bin;
                    true ->
                        'e_mfield_ns.CreateGatewayProfileRequest_gateway_profile'(
                            TrF1,
                            <<Bin/binary, 10>>,
                            TrUserData
                        )
                end
            end
    end.

'encode_msg_ns.CreateGatewayProfileResponse'(Msg, TrUserData) ->
    'encode_msg_ns.CreateGatewayProfileResponse'(Msg, <<>>, TrUserData).

'encode_msg_ns.CreateGatewayProfileResponse'(
    #'ns.CreateGatewayProfileResponse'{id = F1},
    Bin,
    TrUserData
) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                case iolist_size(TrF1) of
                    0 -> Bin;
                    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.GetGatewayProfileRequest'(Msg, TrUserData) ->
    'encode_msg_ns.GetGatewayProfileRequest'(Msg, <<>>, TrUserData).

'encode_msg_ns.GetGatewayProfileRequest'(#'ns.GetGatewayProfileRequest'{id = F1}, Bin, TrUserData) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                case iolist_size(TrF1) of
                    0 -> Bin;
                    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.GetGatewayProfileResponse'(Msg, TrUserData) ->
    'encode_msg_ns.GetGatewayProfileResponse'(Msg, <<>>, TrUserData).

'encode_msg_ns.GetGatewayProfileResponse'(
    #'ns.GetGatewayProfileResponse'{gateway_profile = F1, created_at = F2, updated_at = F3},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= undefined ->
                            Bin;
                        true ->
                            'e_mfield_ns.GetGatewayProfileResponse_gateway_profile'(
                                TrF1,
                                <<Bin/binary, 10>>,
                                TrUserData
                            )
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= undefined ->
                            B1;
                        true ->
                            'e_mfield_ns.GetGatewayProfileResponse_created_at'(
                                TrF2,
                                <<B1/binary, 18>>,
                                TrUserData
                            )
                    end
                end
        end,
    if
        F3 == undefined ->
            B2;
        true ->
            begin
                TrF3 = id(F3, TrUserData),
                if
                    TrF3 =:= undefined ->
                        B2;
                    true ->
                        'e_mfield_ns.GetGatewayProfileResponse_updated_at'(
                            TrF3,
                            <<B2/binary, 26>>,
                            TrUserData
                        )
                end
            end
    end.

'encode_msg_ns.UpdateGatewayProfileRequest'(Msg, TrUserData) ->
    'encode_msg_ns.UpdateGatewayProfileRequest'(Msg, <<>>, TrUserData).

'encode_msg_ns.UpdateGatewayProfileRequest'(
    #'ns.UpdateGatewayProfileRequest'{gateway_profile = F1},
    Bin,
    TrUserData
) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                if
                    TrF1 =:= undefined ->
                        Bin;
                    true ->
                        'e_mfield_ns.UpdateGatewayProfileRequest_gateway_profile'(
                            TrF1,
                            <<Bin/binary, 10>>,
                            TrUserData
                        )
                end
            end
    end.

'encode_msg_ns.DeleteGatewayProfileRequest'(Msg, TrUserData) ->
    'encode_msg_ns.DeleteGatewayProfileRequest'(Msg, <<>>, TrUserData).

'encode_msg_ns.DeleteGatewayProfileRequest'(
    #'ns.DeleteGatewayProfileRequest'{id = F1},
    Bin,
    TrUserData
) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                case iolist_size(TrF1) of
                    0 -> Bin;
                    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.MulticastGroup'(Msg, TrUserData) ->
    'encode_msg_ns.MulticastGroup'(Msg, <<>>, TrUserData).

'encode_msg_ns.MulticastGroup'(
    #'ns.MulticastGroup'{
        id = F1,
        mc_addr = F2,
        mc_nwk_s_key = F3,
        f_cnt = F4,
        group_type = F5,
        dr = F6,
        frequency = F7,
        ping_slot_period = F8,
        service_profile_id = F9,
        routing_profile_id = F10
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
        end,
    B3 =
        if
            F3 == undefined ->
                B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    case iolist_size(TrF3) of
                        0 -> B2;
                        _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
                    end
                end
        end,
    B4 =
        if
            F4 == undefined ->
                B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    if
                        TrF4 =:= 0 -> B3;
                        true -> e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
                    end
                end
        end,
    B5 =
        if
            F5 == undefined ->
                B4;
            true ->
                begin
                    TrF5 = id(F5, TrUserData),
                    if
                        TrF5 =:= 'CLASS_C'; TrF5 =:= 0 -> B4;
                        true -> 'e_enum_ns.MulticastGroupType'(TrF5, <<B4/binary, 40>>, TrUserData)
                    end
                end
        end,
    B6 =
        if
            F6 == undefined ->
                B5;
            true ->
                begin
                    TrF6 = id(F6, TrUserData),
                    if
                        TrF6 =:= 0 -> B5;
                        true -> e_varint(TrF6, <<B5/binary, 48>>, TrUserData)
                    end
                end
        end,
    B7 =
        if
            F7 == undefined ->
                B6;
            true ->
                begin
                    TrF7 = id(F7, TrUserData),
                    if
                        TrF7 =:= 0 -> B6;
                        true -> e_varint(TrF7, <<B6/binary, 56>>, TrUserData)
                    end
                end
        end,
    B8 =
        if
            F8 == undefined ->
                B7;
            true ->
                begin
                    TrF8 = id(F8, TrUserData),
                    if
                        TrF8 =:= 0 -> B7;
                        true -> e_varint(TrF8, <<B7/binary, 64>>, TrUserData)
                    end
                end
        end,
    B9 =
        if
            F9 == undefined ->
                B8;
            true ->
                begin
                    TrF9 = id(F9, TrUserData),
                    case iolist_size(TrF9) of
                        0 -> B8;
                        _ -> e_type_bytes(TrF9, <<B8/binary, 74>>, TrUserData)
                    end
                end
        end,
    if
        F10 == undefined ->
            B9;
        true ->
            begin
                TrF10 = id(F10, TrUserData),
                case iolist_size(TrF10) of
                    0 -> B9;
                    _ -> e_type_bytes(TrF10, <<B9/binary, 82>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.CreateMulticastGroupRequest'(Msg, TrUserData) ->
    'encode_msg_ns.CreateMulticastGroupRequest'(Msg, <<>>, TrUserData).

'encode_msg_ns.CreateMulticastGroupRequest'(
    #'ns.CreateMulticastGroupRequest'{multicast_group = F1},
    Bin,
    TrUserData
) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                if
                    TrF1 =:= undefined ->
                        Bin;
                    true ->
                        'e_mfield_ns.CreateMulticastGroupRequest_multicast_group'(
                            TrF1,
                            <<Bin/binary, 10>>,
                            TrUserData
                        )
                end
            end
    end.

'encode_msg_ns.CreateMulticastGroupResponse'(Msg, TrUserData) ->
    'encode_msg_ns.CreateMulticastGroupResponse'(Msg, <<>>, TrUserData).

'encode_msg_ns.CreateMulticastGroupResponse'(
    #'ns.CreateMulticastGroupResponse'{id = F1},
    Bin,
    TrUserData
) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                case iolist_size(TrF1) of
                    0 -> Bin;
                    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.GetMulticastGroupRequest'(Msg, TrUserData) ->
    'encode_msg_ns.GetMulticastGroupRequest'(Msg, <<>>, TrUserData).

'encode_msg_ns.GetMulticastGroupRequest'(#'ns.GetMulticastGroupRequest'{id = F1}, Bin, TrUserData) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                case iolist_size(TrF1) of
                    0 -> Bin;
                    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.GetMulticastGroupResponse'(Msg, TrUserData) ->
    'encode_msg_ns.GetMulticastGroupResponse'(Msg, <<>>, TrUserData).

'encode_msg_ns.GetMulticastGroupResponse'(
    #'ns.GetMulticastGroupResponse'{multicast_group = F1, created_at = F2, updated_at = F3},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= undefined ->
                            Bin;
                        true ->
                            'e_mfield_ns.GetMulticastGroupResponse_multicast_group'(
                                TrF1,
                                <<Bin/binary, 10>>,
                                TrUserData
                            )
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= undefined ->
                            B1;
                        true ->
                            'e_mfield_ns.GetMulticastGroupResponse_created_at'(
                                TrF2,
                                <<B1/binary, 18>>,
                                TrUserData
                            )
                    end
                end
        end,
    if
        F3 == undefined ->
            B2;
        true ->
            begin
                TrF3 = id(F3, TrUserData),
                if
                    TrF3 =:= undefined ->
                        B2;
                    true ->
                        'e_mfield_ns.GetMulticastGroupResponse_updated_at'(
                            TrF3,
                            <<B2/binary, 26>>,
                            TrUserData
                        )
                end
            end
    end.

'encode_msg_ns.UpdateMulticastGroupRequest'(Msg, TrUserData) ->
    'encode_msg_ns.UpdateMulticastGroupRequest'(Msg, <<>>, TrUserData).

'encode_msg_ns.UpdateMulticastGroupRequest'(
    #'ns.UpdateMulticastGroupRequest'{multicast_group = F1},
    Bin,
    TrUserData
) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                if
                    TrF1 =:= undefined ->
                        Bin;
                    true ->
                        'e_mfield_ns.UpdateMulticastGroupRequest_multicast_group'(
                            TrF1,
                            <<Bin/binary, 10>>,
                            TrUserData
                        )
                end
            end
    end.

'encode_msg_ns.DeleteMulticastGroupRequest'(Msg, TrUserData) ->
    'encode_msg_ns.DeleteMulticastGroupRequest'(Msg, <<>>, TrUserData).

'encode_msg_ns.DeleteMulticastGroupRequest'(
    #'ns.DeleteMulticastGroupRequest'{id = F1},
    Bin,
    TrUserData
) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                case iolist_size(TrF1) of
                    0 -> Bin;
                    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.AddDeviceToMulticastGroupRequest'(Msg, TrUserData) ->
    'encode_msg_ns.AddDeviceToMulticastGroupRequest'(Msg, <<>>, TrUserData).

'encode_msg_ns.AddDeviceToMulticastGroupRequest'(
    #'ns.AddDeviceToMulticastGroupRequest'{dev_eui = F1, multicast_group_id = F2},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    if
        F2 == undefined ->
            B1;
        true ->
            begin
                TrF2 = id(F2, TrUserData),
                case iolist_size(TrF2) of
                    0 -> B1;
                    _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.RemoveDeviceFromMulticastGroupRequest'(Msg, TrUserData) ->
    'encode_msg_ns.RemoveDeviceFromMulticastGroupRequest'(Msg, <<>>, TrUserData).

'encode_msg_ns.RemoveDeviceFromMulticastGroupRequest'(
    #'ns.RemoveDeviceFromMulticastGroupRequest'{dev_eui = F1, multicast_group_id = F2},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    if
        F2 == undefined ->
            B1;
        true ->
            begin
                TrF2 = id(F2, TrUserData),
                case iolist_size(TrF2) of
                    0 -> B1;
                    _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.MulticastQueueItem'(Msg, TrUserData) ->
    'encode_msg_ns.MulticastQueueItem'(Msg, <<>>, TrUserData).

'encode_msg_ns.MulticastQueueItem'(
    #'ns.MulticastQueueItem'{multicast_group_id = F1, f_cnt = F2, f_port = F3, frm_payload = F4},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= 0 -> B1;
                        true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                    end
                end
        end,
    B3 =
        if
            F3 == undefined ->
                B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    if
                        TrF3 =:= 0 -> B2;
                        true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                    end
                end
        end,
    if
        F4 == undefined ->
            B3;
        true ->
            begin
                TrF4 = id(F4, TrUserData),
                case iolist_size(TrF4) of
                    0 -> B3;
                    _ -> e_type_bytes(TrF4, <<B3/binary, 34>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.EnqueueMulticastQueueItemRequest'(Msg, TrUserData) ->
    'encode_msg_ns.EnqueueMulticastQueueItemRequest'(Msg, <<>>, TrUserData).

'encode_msg_ns.EnqueueMulticastQueueItemRequest'(
    #'ns.EnqueueMulticastQueueItemRequest'{multicast_queue_item = F1},
    Bin,
    TrUserData
) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                if
                    TrF1 =:= undefined ->
                        Bin;
                    true ->
                        'e_mfield_ns.EnqueueMulticastQueueItemRequest_multicast_queue_item'(
                            TrF1,
                            <<Bin/binary, 10>>,
                            TrUserData
                        )
                end
            end
    end.

'encode_msg_ns.FlushMulticastQueueForMulticastGroupRequest'(Msg, TrUserData) ->
    'encode_msg_ns.FlushMulticastQueueForMulticastGroupRequest'(Msg, <<>>, TrUserData).

'encode_msg_ns.FlushMulticastQueueForMulticastGroupRequest'(
    #'ns.FlushMulticastQueueForMulticastGroupRequest'{multicast_group_id = F1},
    Bin,
    TrUserData
) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                case iolist_size(TrF1) of
                    0 -> Bin;
                    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.GetMulticastQueueItemsForMulticastGroupRequest'(Msg, TrUserData) ->
    'encode_msg_ns.GetMulticastQueueItemsForMulticastGroupRequest'(Msg, <<>>, TrUserData).

'encode_msg_ns.GetMulticastQueueItemsForMulticastGroupRequest'(
    #'ns.GetMulticastQueueItemsForMulticastGroupRequest'{multicast_group_id = F1},
    Bin,
    TrUserData
) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                case iolist_size(TrF1) of
                    0 -> Bin;
                    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.GetMulticastQueueItemsForMulticastGroupResponse'(Msg, TrUserData) ->
    'encode_msg_ns.GetMulticastQueueItemsForMulticastGroupResponse'(Msg, <<>>, TrUserData).

'encode_msg_ns.GetMulticastQueueItemsForMulticastGroupResponse'(
    #'ns.GetMulticastQueueItemsForMulticastGroupResponse'{multicast_queue_items = F1},
    Bin,
    TrUserData
) ->
    begin
        TrF1 = id(F1, TrUserData),
        if
            TrF1 == [] ->
                Bin;
            true ->
                'e_field_ns.GetMulticastQueueItemsForMulticastGroupResponse_multicast_queue_items'(
                    TrF1,
                    Bin,
                    TrUserData
                )
        end
    end.

'encode_msg_ns.GetADRAlgorithmsResponse'(Msg, TrUserData) ->
    'encode_msg_ns.GetADRAlgorithmsResponse'(Msg, <<>>, TrUserData).

'encode_msg_ns.GetADRAlgorithmsResponse'(
    #'ns.GetADRAlgorithmsResponse'{adr_algorithms = F1},
    Bin,
    TrUserData
) ->
    begin
        TrF1 = id(F1, TrUserData),
        if
            TrF1 == [] -> Bin;
            true -> 'e_field_ns.GetADRAlgorithmsResponse_adr_algorithms'(TrF1, Bin, TrUserData)
        end
    end.

'encode_msg_ns.ADRAlgorithm'(Msg, TrUserData) ->
    'encode_msg_ns.ADRAlgorithm'(Msg, <<>>, TrUserData).

'encode_msg_ns.ADRAlgorithm'(#'ns.ADRAlgorithm'{id = F1, name = F2}, Bin, TrUserData) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    if
        F2 == undefined ->
            B1;
        true ->
            begin
                TrF2 = id(F2, TrUserData),
                case is_empty_string(TrF2) of
                    true -> B1;
                    false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                end
            end
    end.

'encode_msg_google.protobuf.Timestamp'(Msg, TrUserData) ->
    'encode_msg_google.protobuf.Timestamp'(Msg, <<>>, TrUserData).

'encode_msg_google.protobuf.Timestamp'(
    #'google.protobuf.Timestamp'{seconds = F1, nanos = F2},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= 0 -> Bin;
                        true -> e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
        end,
    if
        F2 == undefined ->
            B1;
        true ->
            begin
                TrF2 = id(F2, TrUserData),
                if
                    TrF2 =:= 0 -> B1;
                    true -> e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
                end
            end
    end.

'encode_msg_google.protobuf.Duration'(Msg, TrUserData) ->
    'encode_msg_google.protobuf.Duration'(Msg, <<>>, TrUserData).

'encode_msg_google.protobuf.Duration'(
    #'google.protobuf.Duration'{seconds = F1, nanos = F2},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= 0 -> Bin;
                        true -> e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
        end,
    if
        F2 == undefined ->
            B1;
        true ->
            begin
                TrF2 = id(F2, TrUserData),
                if
                    TrF2 =:= 0 -> B1;
                    true -> e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
                end
            end
    end.

'encode_msg_google.protobuf.Empty'(_Msg, _TrUserData) -> <<>>.

'encode_msg_common.KeyEnvelope'(Msg, TrUserData) ->
    'encode_msg_common.KeyEnvelope'(Msg, <<>>, TrUserData).

'encode_msg_common.KeyEnvelope'(
    #'common.KeyEnvelope'{kek_label = F1, aes_key = F2},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    if
        F2 == undefined ->
            B1;
        true ->
            begin
                TrF2 = id(F2, TrUserData),
                case iolist_size(TrF2) of
                    0 -> B1;
                    _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                end
            end
    end.

'encode_msg_common.Location'(Msg, TrUserData) ->
    'encode_msg_common.Location'(Msg, <<>>, TrUserData).

'encode_msg_common.Location'(
    #'common.Location'{latitude = F1, longitude = F2, altitude = F3, source = F4, accuracy = F5},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= 0.0 -> Bin;
                        true -> e_type_double(TrF1, <<Bin/binary, 9>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= 0.0 -> B1;
                        true -> e_type_double(TrF2, <<B1/binary, 17>>, TrUserData)
                    end
                end
        end,
    B3 =
        if
            F3 == undefined ->
                B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    if
                        TrF3 =:= 0.0 -> B2;
                        true -> e_type_double(TrF3, <<B2/binary, 25>>, TrUserData)
                    end
                end
        end,
    B4 =
        if
            F4 == undefined ->
                B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    if
                        TrF4 =:= 'UNKNOWN'; TrF4 =:= 0 -> B3;
                        true -> 'e_enum_common.LocationSource'(TrF4, <<B3/binary, 32>>, TrUserData)
                    end
                end
        end,
    if
        F5 == undefined ->
            B4;
        true ->
            begin
                TrF5 = id(F5, TrUserData),
                if
                    TrF5 =:= 0 -> B4;
                    true -> e_varint(TrF5, <<B4/binary, 40>>, TrUserData)
                end
            end
    end.

'encode_msg_gw.UplinkTXInfo'(Msg, TrUserData) ->
    'encode_msg_gw.UplinkTXInfo'(Msg, <<>>, TrUserData).

'encode_msg_gw.UplinkTXInfo'(
    #'gw.UplinkTXInfo'{frequency = F1, modulation = F2, modulation_info = F3},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= 'LORA'; TrF2 =:= 0 -> B1;
                        true -> 'e_enum_common.Modulation'(TrF2, <<B1/binary, 16>>, TrUserData)
                    end
                end
        end,
    if
        F3 =:= undefined ->
            B2;
        true ->
            case id(F3, TrUserData) of
                {lora_modulation_info, TF3} ->
                    begin
                        TrTF3 = id(TF3, TrUserData),
                        'e_mfield_gw.UplinkTXInfo_lora_modulation_info'(
                            TrTF3,
                            <<B2/binary, 26>>,
                            TrUserData
                        )
                    end;
                {fsk_modulation_info, TF3} ->
                    begin
                        TrTF3 = id(TF3, TrUserData),
                        'e_mfield_gw.UplinkTXInfo_fsk_modulation_info'(
                            TrTF3,
                            <<B2/binary, 34>>,
                            TrUserData
                        )
                    end
            end
    end.

'encode_msg_gw.LoRaModulationInfo'(Msg, TrUserData) ->
    'encode_msg_gw.LoRaModulationInfo'(Msg, <<>>, TrUserData).

'encode_msg_gw.LoRaModulationInfo'(
    #'gw.LoRaModulationInfo'{
        bandwidth = F1,
        spreading_factor = F2,
        code_rate = F3,
        polarization_inversion = F4
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= 0 -> B1;
                        true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                    end
                end
        end,
    B3 =
        if
            F3 == undefined ->
                B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    case is_empty_string(TrF3) of
                        true -> B2;
                        false -> e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
                    end
                end
        end,
    if
        F4 == undefined ->
            B3;
        true ->
            begin
                TrF4 = id(F4, TrUserData),
                if
                    TrF4 =:= false -> B3;
                    true -> e_type_bool(TrF4, <<B3/binary, 32>>, TrUserData)
                end
            end
    end.

'encode_msg_gw.FSKModulationInfo'(Msg, TrUserData) ->
    'encode_msg_gw.FSKModulationInfo'(Msg, <<>>, TrUserData).

'encode_msg_gw.FSKModulationInfo'(
    #'gw.FSKModulationInfo'{frequency_deviation = F1, datarate = F2},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
        end,
    if
        F2 == undefined ->
            B1;
        true ->
            begin
                TrF2 = id(F2, TrUserData),
                if
                    TrF2 =:= 0 -> B1;
                    true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                end
            end
    end.

'encode_msg_gw.EncryptedFineTimestamp'(Msg, TrUserData) ->
    'encode_msg_gw.EncryptedFineTimestamp'(Msg, <<>>, TrUserData).

'encode_msg_gw.EncryptedFineTimestamp'(
    #'gw.EncryptedFineTimestamp'{aes_key_index = F1, encrypted_ns = F2, fpga_id = F3},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
        end,
    if
        F3 == undefined ->
            B2;
        true ->
            begin
                TrF3 = id(F3, TrUserData),
                case iolist_size(TrF3) of
                    0 -> B2;
                    _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
                end
            end
    end.

'encode_msg_gw.PlainFineTimestamp'(Msg, TrUserData) ->
    'encode_msg_gw.PlainFineTimestamp'(Msg, <<>>, TrUserData).

'encode_msg_gw.PlainFineTimestamp'(#'gw.PlainFineTimestamp'{time = F1}, Bin, TrUserData) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                if
                    TrF1 =:= undefined ->
                        Bin;
                    true ->
                        'e_mfield_gw.PlainFineTimestamp_time'(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end
    end.

'encode_msg_gw.GatewayStats'(Msg, TrUserData) ->
    'encode_msg_gw.GatewayStats'(Msg, <<>>, TrUserData).

'encode_msg_gw.GatewayStats'(
    #'gw.GatewayStats'{
        gateway_id = F1,
        ip = F2,
        time = F3,
        location = F4,
        config_version = F5,
        rx_packets_received = F6,
        rx_packets_received_ok = F7,
        tx_packets_received = F8,
        tx_packets_emitted = F9,
        meta_data = F10,
        stats_id = F11
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case is_empty_string(TrF2) of
                        true -> B1;
                        false -> e_type_string(TrF2, <<B1/binary, 74>>, TrUserData)
                    end
                end
        end,
    B3 =
        if
            F3 == undefined ->
                B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    if
                        TrF3 =:= undefined -> B2;
                        true -> 'e_mfield_gw.GatewayStats_time'(TrF3, <<B2/binary, 18>>, TrUserData)
                    end
                end
        end,
    B4 =
        if
            F4 == undefined ->
                B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    if
                        TrF4 =:= undefined ->
                            B3;
                        true ->
                            'e_mfield_gw.GatewayStats_location'(TrF4, <<B3/binary, 26>>, TrUserData)
                    end
                end
        end,
    B5 =
        if
            F5 == undefined ->
                B4;
            true ->
                begin
                    TrF5 = id(F5, TrUserData),
                    case is_empty_string(TrF5) of
                        true -> B4;
                        false -> e_type_string(TrF5, <<B4/binary, 34>>, TrUserData)
                    end
                end
        end,
    B6 =
        if
            F6 == undefined ->
                B5;
            true ->
                begin
                    TrF6 = id(F6, TrUserData),
                    if
                        TrF6 =:= 0 -> B5;
                        true -> e_varint(TrF6, <<B5/binary, 40>>, TrUserData)
                    end
                end
        end,
    B7 =
        if
            F7 == undefined ->
                B6;
            true ->
                begin
                    TrF7 = id(F7, TrUserData),
                    if
                        TrF7 =:= 0 -> B6;
                        true -> e_varint(TrF7, <<B6/binary, 48>>, TrUserData)
                    end
                end
        end,
    B8 =
        if
            F8 == undefined ->
                B7;
            true ->
                begin
                    TrF8 = id(F8, TrUserData),
                    if
                        TrF8 =:= 0 -> B7;
                        true -> e_varint(TrF8, <<B7/binary, 56>>, TrUserData)
                    end
                end
        end,
    B9 =
        if
            F9 == undefined ->
                B8;
            true ->
                begin
                    TrF9 = id(F9, TrUserData),
                    if
                        TrF9 =:= 0 -> B8;
                        true -> e_varint(TrF9, <<B8/binary, 64>>, TrUserData)
                    end
                end
        end,
    B10 = begin
        TrF10 = id(F10, TrUserData),
        if
            TrF10 == [] -> B9;
            true -> 'e_field_gw.GatewayStats_meta_data'(TrF10, B9, TrUserData)
        end
    end,
    if
        F11 == undefined ->
            B10;
        true ->
            begin
                TrF11 = id(F11, TrUserData),
                case iolist_size(TrF11) of
                    0 -> B10;
                    _ -> e_type_bytes(TrF11, <<B10/binary, 90>>, TrUserData)
                end
            end
    end.

'encode_msg_gw.UplinkRXInfo'(Msg, TrUserData) ->
    'encode_msg_gw.UplinkRXInfo'(Msg, <<>>, TrUserData).

'encode_msg_gw.UplinkRXInfo'(
    #'gw.UplinkRXInfo'{
        gateway_id = F1,
        time = F2,
        time_since_gps_epoch = F3,
        rssi = F4,
        lora_snr = F5,
        channel = F6,
        rf_chain = F7,
        board = F8,
        antenna = F9,
        location = F10,
        fine_timestamp_type = F11,
        fine_timestamp = F12,
        context = F13,
        uplink_id = F14,
        crc_status = F15
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= undefined -> B1;
                        true -> 'e_mfield_gw.UplinkRXInfo_time'(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
        end,
    B3 =
        if
            F3 == undefined ->
                B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    if
                        TrF3 =:= undefined ->
                            B2;
                        true ->
                            'e_mfield_gw.UplinkRXInfo_time_since_gps_epoch'(
                                TrF3,
                                <<B2/binary, 26>>,
                                TrUserData
                            )
                    end
                end
        end,
    B4 =
        if
            F4 == undefined ->
                B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    if
                        TrF4 =:= 0 -> B3;
                        true -> e_type_int32(TrF4, <<B3/binary, 40>>, TrUserData)
                    end
                end
        end,
    B5 =
        if
            F5 == undefined ->
                B4;
            true ->
                begin
                    TrF5 = id(F5, TrUserData),
                    if
                        TrF5 =:= 0.0 -> B4;
                        true -> e_type_double(TrF5, <<B4/binary, 49>>, TrUserData)
                    end
                end
        end,
    B6 =
        if
            F6 == undefined ->
                B5;
            true ->
                begin
                    TrF6 = id(F6, TrUserData),
                    if
                        TrF6 =:= 0 -> B5;
                        true -> e_varint(TrF6, <<B5/binary, 56>>, TrUserData)
                    end
                end
        end,
    B7 =
        if
            F7 == undefined ->
                B6;
            true ->
                begin
                    TrF7 = id(F7, TrUserData),
                    if
                        TrF7 =:= 0 -> B6;
                        true -> e_varint(TrF7, <<B6/binary, 64>>, TrUserData)
                    end
                end
        end,
    B8 =
        if
            F8 == undefined ->
                B7;
            true ->
                begin
                    TrF8 = id(F8, TrUserData),
                    if
                        TrF8 =:= 0 -> B7;
                        true -> e_varint(TrF8, <<B7/binary, 72>>, TrUserData)
                    end
                end
        end,
    B9 =
        if
            F9 == undefined ->
                B8;
            true ->
                begin
                    TrF9 = id(F9, TrUserData),
                    if
                        TrF9 =:= 0 -> B8;
                        true -> e_varint(TrF9, <<B8/binary, 80>>, TrUserData)
                    end
                end
        end,
    B10 =
        if
            F10 == undefined ->
                B9;
            true ->
                begin
                    TrF10 = id(F10, TrUserData),
                    if
                        TrF10 =:= undefined ->
                            B9;
                        true ->
                            'e_mfield_gw.UplinkRXInfo_location'(
                                TrF10,
                                <<B9/binary, 90>>,
                                TrUserData
                            )
                    end
                end
        end,
    B11 =
        if
            F11 == undefined ->
                B10;
            true ->
                begin
                    TrF11 = id(F11, TrUserData),
                    if
                        TrF11 =:= 'NONE'; TrF11 =:= 0 -> B10;
                        true -> 'e_enum_gw.FineTimestampType'(TrF11, <<B10/binary, 96>>, TrUserData)
                    end
                end
        end,
    B12 =
        if
            F12 =:= undefined ->
                B11;
            true ->
                case id(F12, TrUserData) of
                    {encrypted_fine_timestamp, TF12} ->
                        begin
                            TrTF12 = id(TF12, TrUserData),
                            'e_mfield_gw.UplinkRXInfo_encrypted_fine_timestamp'(
                                TrTF12,
                                <<B11/binary, 106>>,
                                TrUserData
                            )
                        end;
                    {plain_fine_timestamp, TF12} ->
                        begin
                            TrTF12 = id(TF12, TrUserData),
                            'e_mfield_gw.UplinkRXInfo_plain_fine_timestamp'(
                                TrTF12,
                                <<B11/binary, 114>>,
                                TrUserData
                            )
                        end
                end
        end,
    B13 =
        if
            F13 == undefined ->
                B12;
            true ->
                begin
                    TrF13 = id(F13, TrUserData),
                    case iolist_size(TrF13) of
                        0 -> B12;
                        _ -> e_type_bytes(TrF13, <<B12/binary, 122>>, TrUserData)
                    end
                end
        end,
    B14 =
        if
            F14 == undefined ->
                B13;
            true ->
                begin
                    TrF14 = id(F14, TrUserData),
                    case iolist_size(TrF14) of
                        0 -> B13;
                        _ -> e_type_bytes(TrF14, <<B13/binary, 130, 1>>, TrUserData)
                    end
                end
        end,
    if
        F15 == undefined ->
            B14;
        true ->
            begin
                TrF15 = id(F15, TrUserData),
                if
                    TrF15 =:= 'NO_CRC'; TrF15 =:= 0 -> B14;
                    true -> 'e_enum_gw.CRCStatus'(TrF15, <<B14/binary, 136, 1>>, TrUserData)
                end
            end
    end.

'encode_msg_gw.DownlinkTXInfo'(Msg, TrUserData) ->
    'encode_msg_gw.DownlinkTXInfo'(Msg, <<>>, TrUserData).

'encode_msg_gw.DownlinkTXInfo'(
    #'gw.DownlinkTXInfo'{
        gateway_id = F1,
        frequency = F2,
        power = F3,
        modulation = F4,
        modulation_info = F5,
        board = F6,
        antenna = F7,
        timing = F8,
        timing_info = F9,
        context = F10
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= 0 -> B1;
                        true -> e_varint(TrF2, <<B1/binary, 40>>, TrUserData)
                    end
                end
        end,
    B3 =
        if
            F3 == undefined ->
                B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    if
                        TrF3 =:= 0 -> B2;
                        true -> e_type_int32(TrF3, <<B2/binary, 48>>, TrUserData)
                    end
                end
        end,
    B4 =
        if
            F4 == undefined ->
                B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    if
                        TrF4 =:= 'LORA'; TrF4 =:= 0 -> B3;
                        true -> 'e_enum_common.Modulation'(TrF4, <<B3/binary, 56>>, TrUserData)
                    end
                end
        end,
    B5 =
        if
            F5 =:= undefined ->
                B4;
            true ->
                case id(F5, TrUserData) of
                    {lora_modulation_info, TF5} ->
                        begin
                            TrTF5 = id(TF5, TrUserData),
                            'e_mfield_gw.DownlinkTXInfo_lora_modulation_info'(
                                TrTF5,
                                <<B4/binary, 66>>,
                                TrUserData
                            )
                        end;
                    {fsk_modulation_info, TF5} ->
                        begin
                            TrTF5 = id(TF5, TrUserData),
                            'e_mfield_gw.DownlinkTXInfo_fsk_modulation_info'(
                                TrTF5,
                                <<B4/binary, 74>>,
                                TrUserData
                            )
                        end
                end
        end,
    B6 =
        if
            F6 == undefined ->
                B5;
            true ->
                begin
                    TrF6 = id(F6, TrUserData),
                    if
                        TrF6 =:= 0 -> B5;
                        true -> e_varint(TrF6, <<B5/binary, 80>>, TrUserData)
                    end
                end
        end,
    B7 =
        if
            F7 == undefined ->
                B6;
            true ->
                begin
                    TrF7 = id(F7, TrUserData),
                    if
                        TrF7 =:= 0 -> B6;
                        true -> e_varint(TrF7, <<B6/binary, 88>>, TrUserData)
                    end
                end
        end,
    B8 =
        if
            F8 == undefined ->
                B7;
            true ->
                begin
                    TrF8 = id(F8, TrUserData),
                    if
                        TrF8 =:= 'IMMEDIATELY'; TrF8 =:= 0 -> B7;
                        true -> 'e_enum_gw.DownlinkTiming'(TrF8, <<B7/binary, 96>>, TrUserData)
                    end
                end
        end,
    B9 =
        if
            F9 =:= undefined ->
                B8;
            true ->
                case id(F9, TrUserData) of
                    {immediately_timing_info, TF9} ->
                        begin
                            TrTF9 = id(TF9, TrUserData),
                            'e_mfield_gw.DownlinkTXInfo_immediately_timing_info'(
                                TrTF9,
                                <<B8/binary, 106>>,
                                TrUserData
                            )
                        end;
                    {delay_timing_info, TF9} ->
                        begin
                            TrTF9 = id(TF9, TrUserData),
                            'e_mfield_gw.DownlinkTXInfo_delay_timing_info'(
                                TrTF9,
                                <<B8/binary, 114>>,
                                TrUserData
                            )
                        end;
                    {gps_epoch_timing_info, TF9} ->
                        begin
                            TrTF9 = id(TF9, TrUserData),
                            'e_mfield_gw.DownlinkTXInfo_gps_epoch_timing_info'(
                                TrTF9,
                                <<B8/binary, 122>>,
                                TrUserData
                            )
                        end
                end
        end,
    if
        F10 == undefined ->
            B9;
        true ->
            begin
                TrF10 = id(F10, TrUserData),
                case iolist_size(TrF10) of
                    0 -> B9;
                    _ -> e_type_bytes(TrF10, <<B9/binary, 130, 1>>, TrUserData)
                end
            end
    end.

'encode_msg_gw.ImmediatelyTimingInfo'(_Msg, _TrUserData) -> <<>>.

'encode_msg_gw.DelayTimingInfo'(Msg, TrUserData) ->
    'encode_msg_gw.DelayTimingInfo'(Msg, <<>>, TrUserData).

'encode_msg_gw.DelayTimingInfo'(#'gw.DelayTimingInfo'{delay = F1}, Bin, TrUserData) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                if
                    TrF1 =:= undefined ->
                        Bin;
                    true ->
                        'e_mfield_gw.DelayTimingInfo_delay'(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end
    end.

'encode_msg_gw.GPSEpochTimingInfo'(Msg, TrUserData) ->
    'encode_msg_gw.GPSEpochTimingInfo'(Msg, <<>>, TrUserData).

'encode_msg_gw.GPSEpochTimingInfo'(
    #'gw.GPSEpochTimingInfo'{time_since_gps_epoch = F1},
    Bin,
    TrUserData
) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                if
                    TrF1 =:= undefined ->
                        Bin;
                    true ->
                        'e_mfield_gw.GPSEpochTimingInfo_time_since_gps_epoch'(
                            TrF1,
                            <<Bin/binary, 10>>,
                            TrUserData
                        )
                end
            end
    end.

'encode_msg_gw.UplinkFrame'(Msg, TrUserData) -> 'encode_msg_gw.UplinkFrame'(Msg, <<>>, TrUserData).

'encode_msg_gw.UplinkFrame'(
    #'gw.UplinkFrame'{phy_payload = F1, tx_info = F2, rx_info = F3},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= undefined ->
                            B1;
                        true ->
                            'e_mfield_gw.UplinkFrame_tx_info'(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
        end,
    if
        F3 == undefined ->
            B2;
        true ->
            begin
                TrF3 = id(F3, TrUserData),
                if
                    TrF3 =:= undefined -> B2;
                    true -> 'e_mfield_gw.UplinkFrame_rx_info'(TrF3, <<B2/binary, 26>>, TrUserData)
                end
            end
    end.

'encode_msg_gw.UplinkFrameSet'(Msg, TrUserData) ->
    'encode_msg_gw.UplinkFrameSet'(Msg, <<>>, TrUserData).

'encode_msg_gw.UplinkFrameSet'(
    #'gw.UplinkFrameSet'{phy_payload = F1, tx_info = F2, rx_info = F3},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= undefined ->
                            B1;
                        true ->
                            'e_mfield_gw.UplinkFrameSet_tx_info'(
                                TrF2,
                                <<B1/binary, 18>>,
                                TrUserData
                            )
                    end
                end
        end,
    begin
        TrF3 = id(F3, TrUserData),
        if
            TrF3 == [] -> B2;
            true -> 'e_field_gw.UplinkFrameSet_rx_info'(TrF3, B2, TrUserData)
        end
    end.

'encode_msg_gw.DownlinkFrame'(Msg, TrUserData) ->
    'encode_msg_gw.DownlinkFrame'(Msg, <<>>, TrUserData).

'encode_msg_gw.DownlinkFrame'(
    #'gw.DownlinkFrame'{
        phy_payload = F1,
        tx_info = F2,
        token = F3,
        downlink_id = F4,
        items = F5,
        gateway_id = F6
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= undefined ->
                            B1;
                        true ->
                            'e_mfield_gw.DownlinkFrame_tx_info'(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
        end,
    B3 =
        if
            F3 == undefined ->
                B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    if
                        TrF3 =:= 0 -> B2;
                        true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                    end
                end
        end,
    B4 =
        if
            F4 == undefined ->
                B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    case iolist_size(TrF4) of
                        0 -> B3;
                        _ -> e_type_bytes(TrF4, <<B3/binary, 34>>, TrUserData)
                    end
                end
        end,
    B5 = begin
        TrF5 = id(F5, TrUserData),
        if
            TrF5 == [] -> B4;
            true -> 'e_field_gw.DownlinkFrame_items'(TrF5, B4, TrUserData)
        end
    end,
    if
        F6 == undefined ->
            B5;
        true ->
            begin
                TrF6 = id(F6, TrUserData),
                case iolist_size(TrF6) of
                    0 -> B5;
                    _ -> e_type_bytes(TrF6, <<B5/binary, 50>>, TrUserData)
                end
            end
    end.

'encode_msg_gw.DownlinkFrameItem'(Msg, TrUserData) ->
    'encode_msg_gw.DownlinkFrameItem'(Msg, <<>>, TrUserData).

'encode_msg_gw.DownlinkFrameItem'(
    #'gw.DownlinkFrameItem'{phy_payload = F1, tx_info = F2},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    if
        F2 == undefined ->
            B1;
        true ->
            begin
                TrF2 = id(F2, TrUserData),
                if
                    TrF2 =:= undefined ->
                        B1;
                    true ->
                        'e_mfield_gw.DownlinkFrameItem_tx_info'(TrF2, <<B1/binary, 18>>, TrUserData)
                end
            end
    end.

'encode_msg_gw.DownlinkTXAck'(Msg, TrUserData) ->
    'encode_msg_gw.DownlinkTXAck'(Msg, <<>>, TrUserData).

'encode_msg_gw.DownlinkTXAck'(
    #'gw.DownlinkTXAck'{gateway_id = F1, token = F2, error = F3, downlink_id = F4, items = F5},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= 0 -> B1;
                        true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                    end
                end
        end,
    B3 =
        if
            F3 == undefined ->
                B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    case is_empty_string(TrF3) of
                        true -> B2;
                        false -> e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
                    end
                end
        end,
    B4 =
        if
            F4 == undefined ->
                B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    case iolist_size(TrF4) of
                        0 -> B3;
                        _ -> e_type_bytes(TrF4, <<B3/binary, 34>>, TrUserData)
                    end
                end
        end,
    begin
        TrF5 = id(F5, TrUserData),
        if
            TrF5 == [] -> B4;
            true -> 'e_field_gw.DownlinkTXAck_items'(TrF5, B4, TrUserData)
        end
    end.

'encode_msg_gw.DownlinkTXAckItem'(Msg, TrUserData) ->
    'encode_msg_gw.DownlinkTXAckItem'(Msg, <<>>, TrUserData).

'encode_msg_gw.DownlinkTXAckItem'(#'gw.DownlinkTXAckItem'{status = F1}, Bin, TrUserData) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                if
                    TrF1 =:= 'IGNORED'; TrF1 =:= 0 -> Bin;
                    true -> 'e_enum_gw.TxAckStatus'(TrF1, <<Bin/binary, 8>>, TrUserData)
                end
            end
    end.

'encode_msg_gw.GatewayConfiguration'(Msg, TrUserData) ->
    'encode_msg_gw.GatewayConfiguration'(Msg, <<>>, TrUserData).

'encode_msg_gw.GatewayConfiguration'(
    #'gw.GatewayConfiguration'{gateway_id = F1, version = F2, channels = F3, stats_interval = F4},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case is_empty_string(TrF2) of
                        true -> B1;
                        false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
        end,
    B3 = begin
        TrF3 = id(F3, TrUserData),
        if
            TrF3 == [] -> B2;
            true -> 'e_field_gw.GatewayConfiguration_channels'(TrF3, B2, TrUserData)
        end
    end,
    if
        F4 == undefined ->
            B3;
        true ->
            begin
                TrF4 = id(F4, TrUserData),
                if
                    TrF4 =:= undefined ->
                        B3;
                    true ->
                        'e_mfield_gw.GatewayConfiguration_stats_interval'(
                            TrF4,
                            <<B3/binary, 34>>,
                            TrUserData
                        )
                end
            end
    end.

'encode_msg_gw.ChannelConfiguration'(Msg, TrUserData) ->
    'encode_msg_gw.ChannelConfiguration'(Msg, <<>>, TrUserData).

'encode_msg_gw.ChannelConfiguration'(
    #'gw.ChannelConfiguration'{
        frequency = F1,
        modulation = F2,
        modulation_config = F3,
        board = F4,
        demodulator = F5
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= 'LORA'; TrF2 =:= 0 -> B1;
                        true -> 'e_enum_common.Modulation'(TrF2, <<B1/binary, 16>>, TrUserData)
                    end
                end
        end,
    B3 =
        if
            F3 =:= undefined ->
                B2;
            true ->
                case id(F3, TrUserData) of
                    {lora_modulation_config, TF3} ->
                        begin
                            TrTF3 = id(TF3, TrUserData),
                            'e_mfield_gw.ChannelConfiguration_lora_modulation_config'(
                                TrTF3,
                                <<B2/binary, 26>>,
                                TrUserData
                            )
                        end;
                    {fsk_modulation_config, TF3} ->
                        begin
                            TrTF3 = id(TF3, TrUserData),
                            'e_mfield_gw.ChannelConfiguration_fsk_modulation_config'(
                                TrTF3,
                                <<B2/binary, 34>>,
                                TrUserData
                            )
                        end
                end
        end,
    B4 =
        if
            F4 == undefined ->
                B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    if
                        TrF4 =:= 0 -> B3;
                        true -> e_varint(TrF4, <<B3/binary, 40>>, TrUserData)
                    end
                end
        end,
    if
        F5 == undefined ->
            B4;
        true ->
            begin
                TrF5 = id(F5, TrUserData),
                if
                    TrF5 =:= 0 -> B4;
                    true -> e_varint(TrF5, <<B4/binary, 48>>, TrUserData)
                end
            end
    end.

'encode_msg_gw.LoRaModulationConfig'(Msg, TrUserData) ->
    'encode_msg_gw.LoRaModulationConfig'(Msg, <<>>, TrUserData).

'encode_msg_gw.LoRaModulationConfig'(
    #'gw.LoRaModulationConfig'{bandwidth = F1, spreading_factors = F2},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
        end,
    begin
        TrF2 = id(F2, TrUserData),
        if
            TrF2 == [] -> B1;
            true -> 'e_field_gw.LoRaModulationConfig_spreading_factors'(TrF2, B1, TrUserData)
        end
    end.

'encode_msg_gw.FSKModulationConfig'(Msg, TrUserData) ->
    'encode_msg_gw.FSKModulationConfig'(Msg, <<>>, TrUserData).

'encode_msg_gw.FSKModulationConfig'(
    #'gw.FSKModulationConfig'{bandwidth = F1, bitrate = F2},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
        end,
    if
        F2 == undefined ->
            B1;
        true ->
            begin
                TrF2 = id(F2, TrUserData),
                if
                    TrF2 =:= 0 -> B1;
                    true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                end
            end
    end.

'encode_msg_gw.GatewayCommandExecRequest'(Msg, TrUserData) ->
    'encode_msg_gw.GatewayCommandExecRequest'(Msg, <<>>, TrUserData).

'encode_msg_gw.GatewayCommandExecRequest'(
    #'gw.GatewayCommandExecRequest'{
        gateway_id = F1,
        command = F2,
        'ExecId' = F3,
        stdin = F4,
        environment = F5
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case is_empty_string(TrF2) of
                        true -> B1;
                        false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
        end,
    B3 =
        if
            F3 == undefined ->
                B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    case iolist_size(TrF3) of
                        0 -> B2;
                        _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
                    end
                end
        end,
    B4 =
        if
            F4 == undefined ->
                B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    case iolist_size(TrF4) of
                        0 -> B3;
                        _ -> e_type_bytes(TrF4, <<B3/binary, 34>>, TrUserData)
                    end
                end
        end,
    begin
        TrF5 = id(F5, TrUserData),
        if
            TrF5 == [] -> B4;
            true -> 'e_field_gw.GatewayCommandExecRequest_environment'(TrF5, B4, TrUserData)
        end
    end.

'encode_msg_gw.GatewayCommandExecResponse'(Msg, TrUserData) ->
    'encode_msg_gw.GatewayCommandExecResponse'(Msg, <<>>, TrUserData).

'encode_msg_gw.GatewayCommandExecResponse'(
    #'gw.GatewayCommandExecResponse'{
        gateway_id = F1,
        exec_id = F2,
        stdout = F3,
        stderr = F4,
        error = F5
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
        end,
    B3 =
        if
            F3 == undefined ->
                B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    case iolist_size(TrF3) of
                        0 -> B2;
                        _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
                    end
                end
        end,
    B4 =
        if
            F4 == undefined ->
                B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    case iolist_size(TrF4) of
                        0 -> B3;
                        _ -> e_type_bytes(TrF4, <<B3/binary, 34>>, TrUserData)
                    end
                end
        end,
    if
        F5 == undefined ->
            B4;
        true ->
            begin
                TrF5 = id(F5, TrUserData),
                case is_empty_string(TrF5) of
                    true -> B4;
                    false -> e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
                end
            end
    end.

'encode_msg_gw.RawPacketForwarderEvent'(Msg, TrUserData) ->
    'encode_msg_gw.RawPacketForwarderEvent'(Msg, <<>>, TrUserData).

'encode_msg_gw.RawPacketForwarderEvent'(
    #'gw.RawPacketForwarderEvent'{gateway_id = F1, raw_id = F2, payload = F3},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
        end,
    if
        F3 == undefined ->
            B2;
        true ->
            begin
                TrF3 = id(F3, TrUserData),
                case iolist_size(TrF3) of
                    0 -> B2;
                    _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
                end
            end
    end.

'encode_msg_gw.RawPacketForwarderCommand'(Msg, TrUserData) ->
    'encode_msg_gw.RawPacketForwarderCommand'(Msg, <<>>, TrUserData).

'encode_msg_gw.RawPacketForwarderCommand'(
    #'gw.RawPacketForwarderCommand'{gateway_id = F1, raw_id = F2, payload = F3},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
        end,
    if
        F3 == undefined ->
            B2;
        true ->
            begin
                TrF3 = id(F3, TrUserData),
                case iolist_size(TrF3) of
                    0 -> B2;
                    _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
                end
            end
    end.

'encode_msg_gw.ConnState'(Msg, TrUserData) -> 'encode_msg_gw.ConnState'(Msg, <<>>, TrUserData).

'encode_msg_gw.ConnState'(#'gw.ConnState'{gateway_id = F1, state = F2}, Bin, TrUserData) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    if
        F2 == undefined ->
            B1;
        true ->
            begin
                TrF2 = id(F2, TrUserData),
                if
                    TrF2 =:= 'OFFLINE'; TrF2 =:= 0 -> B1;
                    true -> 'e_enum_gw.ConnState.State'(TrF2, <<B1/binary, 16>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.ServiceProfile'(Msg, TrUserData) ->
    'encode_msg_ns.ServiceProfile'(Msg, <<>>, TrUserData).

'encode_msg_ns.ServiceProfile'(
    #'ns.ServiceProfile'{
        id = F1,
        ul_rate = F2,
        ul_bucket_size = F3,
        ul_rate_policy = F4,
        dl_rate = F5,
        dl_bucket_size = F6,
        dl_rate_policy = F7,
        add_gw_metadata = F8,
        dev_status_req_freq = F9,
        report_dev_status_battery = F10,
        report_dev_status_margin = F11,
        dr_min = F12,
        dr_max = F13,
        channel_mask = F14,
        pr_allowed = F15,
        hr_allowed = F16,
        ra_allowed = F17,
        nwk_geo_loc = F18,
        target_per = F19,
        min_gw_diversity = F20,
        gws_private = F21
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= 0 -> B1;
                        true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                    end
                end
        end,
    B3 =
        if
            F3 == undefined ->
                B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    if
                        TrF3 =:= 0 -> B2;
                        true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                    end
                end
        end,
    B4 =
        if
            F4 == undefined ->
                B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    if
                        TrF4 =:= 'DROP'; TrF4 =:= 0 -> B3;
                        true -> 'e_enum_ns.RatePolicy'(TrF4, <<B3/binary, 32>>, TrUserData)
                    end
                end
        end,
    B5 =
        if
            F5 == undefined ->
                B4;
            true ->
                begin
                    TrF5 = id(F5, TrUserData),
                    if
                        TrF5 =:= 0 -> B4;
                        true -> e_varint(TrF5, <<B4/binary, 40>>, TrUserData)
                    end
                end
        end,
    B6 =
        if
            F6 == undefined ->
                B5;
            true ->
                begin
                    TrF6 = id(F6, TrUserData),
                    if
                        TrF6 =:= 0 -> B5;
                        true -> e_varint(TrF6, <<B5/binary, 48>>, TrUserData)
                    end
                end
        end,
    B7 =
        if
            F7 == undefined ->
                B6;
            true ->
                begin
                    TrF7 = id(F7, TrUserData),
                    if
                        TrF7 =:= 'DROP'; TrF7 =:= 0 -> B6;
                        true -> 'e_enum_ns.RatePolicy'(TrF7, <<B6/binary, 56>>, TrUserData)
                    end
                end
        end,
    B8 =
        if
            F8 == undefined ->
                B7;
            true ->
                begin
                    TrF8 = id(F8, TrUserData),
                    if
                        TrF8 =:= false -> B7;
                        true -> e_type_bool(TrF8, <<B7/binary, 64>>, TrUserData)
                    end
                end
        end,
    B9 =
        if
            F9 == undefined ->
                B8;
            true ->
                begin
                    TrF9 = id(F9, TrUserData),
                    if
                        TrF9 =:= 0 -> B8;
                        true -> e_varint(TrF9, <<B8/binary, 72>>, TrUserData)
                    end
                end
        end,
    B10 =
        if
            F10 == undefined ->
                B9;
            true ->
                begin
                    TrF10 = id(F10, TrUserData),
                    if
                        TrF10 =:= false -> B9;
                        true -> e_type_bool(TrF10, <<B9/binary, 80>>, TrUserData)
                    end
                end
        end,
    B11 =
        if
            F11 == undefined ->
                B10;
            true ->
                begin
                    TrF11 = id(F11, TrUserData),
                    if
                        TrF11 =:= false -> B10;
                        true -> e_type_bool(TrF11, <<B10/binary, 88>>, TrUserData)
                    end
                end
        end,
    B12 =
        if
            F12 == undefined ->
                B11;
            true ->
                begin
                    TrF12 = id(F12, TrUserData),
                    if
                        TrF12 =:= 0 -> B11;
                        true -> e_varint(TrF12, <<B11/binary, 96>>, TrUserData)
                    end
                end
        end,
    B13 =
        if
            F13 == undefined ->
                B12;
            true ->
                begin
                    TrF13 = id(F13, TrUserData),
                    if
                        TrF13 =:= 0 -> B12;
                        true -> e_varint(TrF13, <<B12/binary, 104>>, TrUserData)
                    end
                end
        end,
    B14 =
        if
            F14 == undefined ->
                B13;
            true ->
                begin
                    TrF14 = id(F14, TrUserData),
                    case iolist_size(TrF14) of
                        0 -> B13;
                        _ -> e_type_bytes(TrF14, <<B13/binary, 114>>, TrUserData)
                    end
                end
        end,
    B15 =
        if
            F15 == undefined ->
                B14;
            true ->
                begin
                    TrF15 = id(F15, TrUserData),
                    if
                        TrF15 =:= false -> B14;
                        true -> e_type_bool(TrF15, <<B14/binary, 120>>, TrUserData)
                    end
                end
        end,
    B16 =
        if
            F16 == undefined ->
                B15;
            true ->
                begin
                    TrF16 = id(F16, TrUserData),
                    if
                        TrF16 =:= false -> B15;
                        true -> e_type_bool(TrF16, <<B15/binary, 128, 1>>, TrUserData)
                    end
                end
        end,
    B17 =
        if
            F17 == undefined ->
                B16;
            true ->
                begin
                    TrF17 = id(F17, TrUserData),
                    if
                        TrF17 =:= false -> B16;
                        true -> e_type_bool(TrF17, <<B16/binary, 136, 1>>, TrUserData)
                    end
                end
        end,
    B18 =
        if
            F18 == undefined ->
                B17;
            true ->
                begin
                    TrF18 = id(F18, TrUserData),
                    if
                        TrF18 =:= false -> B17;
                        true -> e_type_bool(TrF18, <<B17/binary, 144, 1>>, TrUserData)
                    end
                end
        end,
    B19 =
        if
            F19 == undefined ->
                B18;
            true ->
                begin
                    TrF19 = id(F19, TrUserData),
                    if
                        TrF19 =:= 0 -> B18;
                        true -> e_varint(TrF19, <<B18/binary, 152, 1>>, TrUserData)
                    end
                end
        end,
    B20 =
        if
            F20 == undefined ->
                B19;
            true ->
                begin
                    TrF20 = id(F20, TrUserData),
                    if
                        TrF20 =:= 0 -> B19;
                        true -> e_varint(TrF20, <<B19/binary, 160, 1>>, TrUserData)
                    end
                end
        end,
    if
        F21 == undefined ->
            B20;
        true ->
            begin
                TrF21 = id(F21, TrUserData),
                if
                    TrF21 =:= false -> B20;
                    true -> e_type_bool(TrF21, <<B20/binary, 168, 1>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.DeviceProfile'(Msg, TrUserData) ->
    'encode_msg_ns.DeviceProfile'(Msg, <<>>, TrUserData).

'encode_msg_ns.DeviceProfile'(
    #'ns.DeviceProfile'{
        id = F1,
        supports_class_b = F2,
        class_b_timeout = F3,
        ping_slot_period = F4,
        ping_slot_dr = F5,
        ping_slot_freq = F6,
        supports_class_c = F7,
        class_c_timeout = F8,
        mac_version = F9,
        reg_params_revision = F10,
        rx_delay_1 = F11,
        rx_dr_offset_1 = F12,
        rx_datarate_2 = F13,
        rx_freq_2 = F14,
        factory_preset_freqs = F15,
        max_eirp = F16,
        max_duty_cycle = F17,
        supports_join = F18,
        rf_region = F19,
        supports_32bit_f_cnt = F20,
        adr_algorithm_id = F21
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= false -> B1;
                        true -> e_type_bool(TrF2, <<B1/binary, 16>>, TrUserData)
                    end
                end
        end,
    B3 =
        if
            F3 == undefined ->
                B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    if
                        TrF3 =:= 0 -> B2;
                        true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                    end
                end
        end,
    B4 =
        if
            F4 == undefined ->
                B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    if
                        TrF4 =:= 0 -> B3;
                        true -> e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
                    end
                end
        end,
    B5 =
        if
            F5 == undefined ->
                B4;
            true ->
                begin
                    TrF5 = id(F5, TrUserData),
                    if
                        TrF5 =:= 0 -> B4;
                        true -> e_varint(TrF5, <<B4/binary, 40>>, TrUserData)
                    end
                end
        end,
    B6 =
        if
            F6 == undefined ->
                B5;
            true ->
                begin
                    TrF6 = id(F6, TrUserData),
                    if
                        TrF6 =:= 0 -> B5;
                        true -> e_varint(TrF6, <<B5/binary, 48>>, TrUserData)
                    end
                end
        end,
    B7 =
        if
            F7 == undefined ->
                B6;
            true ->
                begin
                    TrF7 = id(F7, TrUserData),
                    if
                        TrF7 =:= false -> B6;
                        true -> e_type_bool(TrF7, <<B6/binary, 56>>, TrUserData)
                    end
                end
        end,
    B8 =
        if
            F8 == undefined ->
                B7;
            true ->
                begin
                    TrF8 = id(F8, TrUserData),
                    if
                        TrF8 =:= 0 -> B7;
                        true -> e_varint(TrF8, <<B7/binary, 64>>, TrUserData)
                    end
                end
        end,
    B9 =
        if
            F9 == undefined ->
                B8;
            true ->
                begin
                    TrF9 = id(F9, TrUserData),
                    case is_empty_string(TrF9) of
                        true -> B8;
                        false -> e_type_string(TrF9, <<B8/binary, 74>>, TrUserData)
                    end
                end
        end,
    B10 =
        if
            F10 == undefined ->
                B9;
            true ->
                begin
                    TrF10 = id(F10, TrUserData),
                    case is_empty_string(TrF10) of
                        true -> B9;
                        false -> e_type_string(TrF10, <<B9/binary, 82>>, TrUserData)
                    end
                end
        end,
    B11 =
        if
            F11 == undefined ->
                B10;
            true ->
                begin
                    TrF11 = id(F11, TrUserData),
                    if
                        TrF11 =:= 0 -> B10;
                        true -> e_varint(TrF11, <<B10/binary, 88>>, TrUserData)
                    end
                end
        end,
    B12 =
        if
            F12 == undefined ->
                B11;
            true ->
                begin
                    TrF12 = id(F12, TrUserData),
                    if
                        TrF12 =:= 0 -> B11;
                        true -> e_varint(TrF12, <<B11/binary, 96>>, TrUserData)
                    end
                end
        end,
    B13 =
        if
            F13 == undefined ->
                B12;
            true ->
                begin
                    TrF13 = id(F13, TrUserData),
                    if
                        TrF13 =:= 0 -> B12;
                        true -> e_varint(TrF13, <<B12/binary, 104>>, TrUserData)
                    end
                end
        end,
    B14 =
        if
            F14 == undefined ->
                B13;
            true ->
                begin
                    TrF14 = id(F14, TrUserData),
                    if
                        TrF14 =:= 0 -> B13;
                        true -> e_varint(TrF14, <<B13/binary, 112>>, TrUserData)
                    end
                end
        end,
    B15 = begin
        TrF15 = id(F15, TrUserData),
        if
            TrF15 == [] -> B14;
            true -> 'e_field_ns.DeviceProfile_factory_preset_freqs'(TrF15, B14, TrUserData)
        end
    end,
    B16 =
        if
            F16 == undefined ->
                B15;
            true ->
                begin
                    TrF16 = id(F16, TrUserData),
                    if
                        TrF16 =:= 0 -> B15;
                        true -> e_varint(TrF16, <<B15/binary, 128, 1>>, TrUserData)
                    end
                end
        end,
    B17 =
        if
            F17 == undefined ->
                B16;
            true ->
                begin
                    TrF17 = id(F17, TrUserData),
                    if
                        TrF17 =:= 0 -> B16;
                        true -> e_varint(TrF17, <<B16/binary, 136, 1>>, TrUserData)
                    end
                end
        end,
    B18 =
        if
            F18 == undefined ->
                B17;
            true ->
                begin
                    TrF18 = id(F18, TrUserData),
                    if
                        TrF18 =:= false -> B17;
                        true -> e_type_bool(TrF18, <<B17/binary, 144, 1>>, TrUserData)
                    end
                end
        end,
    B19 =
        if
            F19 == undefined ->
                B18;
            true ->
                begin
                    TrF19 = id(F19, TrUserData),
                    case is_empty_string(TrF19) of
                        true -> B18;
                        false -> e_type_string(TrF19, <<B18/binary, 154, 1>>, TrUserData)
                    end
                end
        end,
    B20 =
        if
            F20 == undefined ->
                B19;
            true ->
                begin
                    TrF20 = id(F20, TrUserData),
                    if
                        TrF20 =:= false -> B19;
                        true -> e_type_bool(TrF20, <<B19/binary, 160, 1>>, TrUserData)
                    end
                end
        end,
    if
        F21 == undefined ->
            B20;
        true ->
            begin
                TrF21 = id(F21, TrUserData),
                case is_empty_string(TrF21) of
                    true -> B20;
                    false -> e_type_string(TrF21, <<B20/binary, 170, 1>>, TrUserData)
                end
            end
    end.

'encode_msg_ns.RoutingProfile'(Msg, TrUserData) ->
    'encode_msg_ns.RoutingProfile'(Msg, <<>>, TrUserData).

'encode_msg_ns.RoutingProfile'(
    #'ns.RoutingProfile'{id = F1, as_id = F2, ca_cert = F3, tls_cert = F4, tls_key = F5},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case is_empty_string(TrF2) of
                        true -> B1;
                        false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
        end,
    B3 =
        if
            F3 == undefined ->
                B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    case is_empty_string(TrF3) of
                        true -> B2;
                        false -> e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
                    end
                end
        end,
    B4 =
        if
            F4 == undefined ->
                B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    case is_empty_string(TrF4) of
                        true -> B3;
                        false -> e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
                    end
                end
        end,
    if
        F5 == undefined ->
            B4;
        true ->
            begin
                TrF5 = id(F5, TrUserData),
                case is_empty_string(TrF5) of
                    true -> B4;
                    false -> e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
                end
            end
    end.

'e_mfield_ns.CreateServiceProfileRequest_service_profile'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_ns.ServiceProfile'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.GetServiceProfileResponse_service_profile'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_ns.ServiceProfile'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.GetServiceProfileResponse_created_at'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Timestamp'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.GetServiceProfileResponse_updated_at'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Timestamp'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.UpdateServiceProfileRequest_service_profile'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_ns.ServiceProfile'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.CreateRoutingProfileRequest_routing_profile'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_ns.RoutingProfile'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.GetRoutingProfileResponse_routing_profile'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_ns.RoutingProfile'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.GetRoutingProfileResponse_created_at'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Timestamp'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.GetRoutingProfileResponse_updated_at'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Timestamp'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.UpdateRoutingProfileRequest_routing_profile'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_ns.RoutingProfile'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.CreateDeviceProfileRequest_device_profile'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_ns.DeviceProfile'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.GetDeviceProfileResponse_device_profile'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_ns.DeviceProfile'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.GetDeviceProfileResponse_created_at'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Timestamp'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.GetDeviceProfileResponse_updated_at'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Timestamp'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.UpdateDeviceProfileRequest_device_profile'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_ns.DeviceProfile'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.CreateDeviceRequest_device'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_ns.Device'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.GetDeviceResponse_device'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_ns.Device'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.GetDeviceResponse_created_at'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Timestamp'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.GetDeviceResponse_updated_at'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Timestamp'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.UpdateDeviceRequest_device'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_ns.Device'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.ActivateDeviceRequest_device_activation'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_ns.DeviceActivation'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.GetDeviceActivationResponse_device_activation'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_ns.DeviceActivation'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ns.CreateMACCommandQueueItemRequest_commands'([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData), Bin2, TrUserData),
    'e_field_ns.CreateMACCommandQueueItemRequest_commands'(Rest, Bin3, TrUserData);
'e_field_ns.CreateMACCommandQueueItemRequest_commands'([], Bin, _TrUserData) ->
    Bin.

'e_field_ns.SendProprietaryPayloadRequest_gateway_macs'([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData), Bin2, TrUserData),
    'e_field_ns.SendProprietaryPayloadRequest_gateway_macs'(Rest, Bin3, TrUserData);
'e_field_ns.SendProprietaryPayloadRequest_gateway_macs'([], Bin, _TrUserData) ->
    Bin.

'e_mfield_ns.Gateway_location'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_common.Location'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.Gateway_boards'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_ns.GatewayBoard'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ns.Gateway_boards'([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = 'e_mfield_ns.Gateway_boards'(id(Elem, TrUserData), Bin2, TrUserData),
    'e_field_ns.Gateway_boards'(Rest, Bin3, TrUserData);
'e_field_ns.Gateway_boards'([], Bin, _TrUserData) ->
    Bin.

'e_mfield_ns.CreateGatewayRequest_gateway'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_ns.Gateway'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.GetGatewayResponse_gateway'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_ns.Gateway'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.GetGatewayResponse_created_at'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Timestamp'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.GetGatewayResponse_updated_at'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Timestamp'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.GetGatewayResponse_first_seen_at'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Timestamp'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.GetGatewayResponse_last_seen_at'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Timestamp'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.UpdateGatewayRequest_gateway'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_ns.Gateway'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.GenerateGatewayClientCertificateResponse_expires_at'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Timestamp'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.GatewayStats_timestamp'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Timestamp'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.GetGatewayStatsRequest_start_timestamp'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Timestamp'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.GetGatewayStatsRequest_end_timestamp'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Timestamp'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.GetGatewayStatsResponse_result'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_ns.GatewayStats'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ns.GetGatewayStatsResponse_result'([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = 'e_mfield_ns.GetGatewayStatsResponse_result'(id(Elem, TrUserData), Bin2, TrUserData),
    'e_field_ns.GetGatewayStatsResponse_result'(Rest, Bin3, TrUserData);
'e_field_ns.GetGatewayStatsResponse_result'([], Bin, _TrUserData) ->
    Bin.

'e_mfield_ns.CreateDeviceQueueItemRequest_item'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_ns.DeviceQueueItem'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.GetDeviceQueueItemsForDevEUIResponse_items'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_ns.DeviceQueueItem'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ns.GetDeviceQueueItemsForDevEUIResponse_items'([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = 'e_mfield_ns.GetDeviceQueueItemsForDevEUIResponse_items'(
        id(Elem, TrUserData),
        Bin2,
        TrUserData
    ),
    'e_field_ns.GetDeviceQueueItemsForDevEUIResponse_items'(Rest, Bin3, TrUserData);
'e_field_ns.GetDeviceQueueItemsForDevEUIResponse_items'([], Bin, _TrUserData) ->
    Bin.

'e_mfield_ns.UplinkFrameLog_tx_info'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_gw.UplinkTXInfo'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.UplinkFrameLog_rx_info'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_gw.UplinkRXInfo'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ns.UplinkFrameLog_rx_info'([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = 'e_mfield_ns.UplinkFrameLog_rx_info'(id(Elem, TrUserData), Bin2, TrUserData),
    'e_field_ns.UplinkFrameLog_rx_info'(Rest, Bin3, TrUserData);
'e_field_ns.UplinkFrameLog_rx_info'([], Bin, _TrUserData) ->
    Bin.

'e_mfield_ns.DownlinkFrameLog_tx_info'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_gw.DownlinkTXInfo'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.StreamFrameLogsForGatewayResponse_uplink_frame_set'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_ns.UplinkFrameLog'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.StreamFrameLogsForGatewayResponse_downlink_frame'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_ns.DownlinkFrameLog'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.StreamFrameLogsForDeviceResponse_uplink_frame_set'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_ns.UplinkFrameLog'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.StreamFrameLogsForDeviceResponse_downlink_frame'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_ns.DownlinkFrameLog'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ns.GatewayProfile_channels'(Elems, Bin, TrUserData) when Elems =/= [] ->
    SubBin = 'e_pfield_ns.GatewayProfile_channels'(Elems, <<>>, TrUserData),
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_varint(byte_size(SubBin), Bin2),
    <<Bin3/binary, SubBin/binary>>;
'e_field_ns.GatewayProfile_channels'([], Bin, _TrUserData) ->
    Bin.

'e_pfield_ns.GatewayProfile_channels'([Value | Rest], Bin, TrUserData) ->
    Bin2 = e_varint(id(Value, TrUserData), Bin, TrUserData),
    'e_pfield_ns.GatewayProfile_channels'(Rest, Bin2, TrUserData);
'e_pfield_ns.GatewayProfile_channels'([], Bin, _TrUserData) ->
    Bin.

'e_mfield_ns.GatewayProfile_extra_channels'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_ns.GatewayProfileExtraChannel'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ns.GatewayProfile_extra_channels'([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = 'e_mfield_ns.GatewayProfile_extra_channels'(id(Elem, TrUserData), Bin2, TrUserData),
    'e_field_ns.GatewayProfile_extra_channels'(Rest, Bin3, TrUserData);
'e_field_ns.GatewayProfile_extra_channels'([], Bin, _TrUserData) ->
    Bin.

'e_mfield_ns.GatewayProfile_stats_interval'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Duration'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ns.GatewayProfileExtraChannel_spreading_factors'(Elems, Bin, TrUserData) when
    Elems =/= []
->
    SubBin = 'e_pfield_ns.GatewayProfileExtraChannel_spreading_factors'(Elems, <<>>, TrUserData),
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = e_varint(byte_size(SubBin), Bin2),
    <<Bin3/binary, SubBin/binary>>;
'e_field_ns.GatewayProfileExtraChannel_spreading_factors'([], Bin, _TrUserData) ->
    Bin.

'e_pfield_ns.GatewayProfileExtraChannel_spreading_factors'([Value | Rest], Bin, TrUserData) ->
    Bin2 = e_varint(id(Value, TrUserData), Bin, TrUserData),
    'e_pfield_ns.GatewayProfileExtraChannel_spreading_factors'(Rest, Bin2, TrUserData);
'e_pfield_ns.GatewayProfileExtraChannel_spreading_factors'([], Bin, _TrUserData) ->
    Bin.

'e_mfield_ns.CreateGatewayProfileRequest_gateway_profile'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_ns.GatewayProfile'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.GetGatewayProfileResponse_gateway_profile'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_ns.GatewayProfile'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.GetGatewayProfileResponse_created_at'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Timestamp'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.GetGatewayProfileResponse_updated_at'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Timestamp'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.UpdateGatewayProfileRequest_gateway_profile'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_ns.GatewayProfile'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.CreateMulticastGroupRequest_multicast_group'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_ns.MulticastGroup'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.GetMulticastGroupResponse_multicast_group'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_ns.MulticastGroup'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.GetMulticastGroupResponse_created_at'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Timestamp'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.GetMulticastGroupResponse_updated_at'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Timestamp'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.UpdateMulticastGroupRequest_multicast_group'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_ns.MulticastGroup'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.EnqueueMulticastQueueItemRequest_multicast_queue_item'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_ns.MulticastQueueItem'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ns.GetMulticastQueueItemsForMulticastGroupResponse_multicast_queue_items'(
    Msg,
    Bin,
    TrUserData
) ->
    SubBin = 'encode_msg_ns.MulticastQueueItem'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ns.GetMulticastQueueItemsForMulticastGroupResponse_multicast_queue_items'(
    [Elem | Rest],
    Bin,
    TrUserData
) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = 'e_mfield_ns.GetMulticastQueueItemsForMulticastGroupResponse_multicast_queue_items'(
        id(Elem, TrUserData),
        Bin2,
        TrUserData
    ),
    'e_field_ns.GetMulticastQueueItemsForMulticastGroupResponse_multicast_queue_items'(
        Rest,
        Bin3,
        TrUserData
    );
'e_field_ns.GetMulticastQueueItemsForMulticastGroupResponse_multicast_queue_items'(
    [],
    Bin,
    _TrUserData
) ->
    Bin.

'e_mfield_ns.GetADRAlgorithmsResponse_adr_algorithms'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_ns.ADRAlgorithm'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ns.GetADRAlgorithmsResponse_adr_algorithms'([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = 'e_mfield_ns.GetADRAlgorithmsResponse_adr_algorithms'(
        id(Elem, TrUserData),
        Bin2,
        TrUserData
    ),
    'e_field_ns.GetADRAlgorithmsResponse_adr_algorithms'(Rest, Bin3, TrUserData);
'e_field_ns.GetADRAlgorithmsResponse_adr_algorithms'([], Bin, _TrUserData) ->
    Bin.

'e_mfield_gw.UplinkTXInfo_lora_modulation_info'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_gw.LoRaModulationInfo'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_gw.UplinkTXInfo_fsk_modulation_info'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_gw.FSKModulationInfo'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_gw.PlainFineTimestamp_time'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Timestamp'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_gw.GatewayStats_time'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Timestamp'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_gw.GatewayStats_location'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_common.Location'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_gw.GatewayStats_meta_data'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_map<string,string>'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_gw.GatewayStats_meta_data'([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 82>>,
    Bin3 = 'e_mfield_gw.GatewayStats_meta_data'(
        'tr_encode_gw.GatewayStats.meta_data[x]'(Elem, TrUserData),
        Bin2,
        TrUserData
    ),
    'e_field_gw.GatewayStats_meta_data'(Rest, Bin3, TrUserData);
'e_field_gw.GatewayStats_meta_data'([], Bin, _TrUserData) ->
    Bin.

'e_mfield_gw.UplinkRXInfo_time'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Timestamp'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_gw.UplinkRXInfo_time_since_gps_epoch'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Duration'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_gw.UplinkRXInfo_location'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_common.Location'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_gw.UplinkRXInfo_encrypted_fine_timestamp'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_gw.EncryptedFineTimestamp'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_gw.UplinkRXInfo_plain_fine_timestamp'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_gw.PlainFineTimestamp'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_gw.DownlinkTXInfo_lora_modulation_info'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_gw.LoRaModulationInfo'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_gw.DownlinkTXInfo_fsk_modulation_info'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_gw.FSKModulationInfo'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_gw.DownlinkTXInfo_immediately_timing_info'(_Msg, Bin, _TrUserData) -> <<Bin/binary, 0>>.

'e_mfield_gw.DownlinkTXInfo_delay_timing_info'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_gw.DelayTimingInfo'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_gw.DownlinkTXInfo_gps_epoch_timing_info'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_gw.GPSEpochTimingInfo'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_gw.DelayTimingInfo_delay'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Duration'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_gw.GPSEpochTimingInfo_time_since_gps_epoch'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Duration'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_gw.UplinkFrame_tx_info'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_gw.UplinkTXInfo'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_gw.UplinkFrame_rx_info'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_gw.UplinkRXInfo'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_gw.UplinkFrameSet_tx_info'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_gw.UplinkTXInfo'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_gw.UplinkFrameSet_rx_info'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_gw.UplinkRXInfo'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_gw.UplinkFrameSet_rx_info'([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = 'e_mfield_gw.UplinkFrameSet_rx_info'(id(Elem, TrUserData), Bin2, TrUserData),
    'e_field_gw.UplinkFrameSet_rx_info'(Rest, Bin3, TrUserData);
'e_field_gw.UplinkFrameSet_rx_info'([], Bin, _TrUserData) ->
    Bin.

'e_mfield_gw.DownlinkFrame_tx_info'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_gw.DownlinkTXInfo'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_gw.DownlinkFrame_items'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_gw.DownlinkFrameItem'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_gw.DownlinkFrame_items'([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = 'e_mfield_gw.DownlinkFrame_items'(id(Elem, TrUserData), Bin2, TrUserData),
    'e_field_gw.DownlinkFrame_items'(Rest, Bin3, TrUserData);
'e_field_gw.DownlinkFrame_items'([], Bin, _TrUserData) ->
    Bin.

'e_mfield_gw.DownlinkFrameItem_tx_info'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_gw.DownlinkTXInfo'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_gw.DownlinkTXAck_items'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_gw.DownlinkTXAckItem'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_gw.DownlinkTXAck_items'([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = 'e_mfield_gw.DownlinkTXAck_items'(id(Elem, TrUserData), Bin2, TrUserData),
    'e_field_gw.DownlinkTXAck_items'(Rest, Bin3, TrUserData);
'e_field_gw.DownlinkTXAck_items'([], Bin, _TrUserData) ->
    Bin.

'e_mfield_gw.GatewayConfiguration_channels'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_gw.ChannelConfiguration'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_gw.GatewayConfiguration_channels'([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = 'e_mfield_gw.GatewayConfiguration_channels'(id(Elem, TrUserData), Bin2, TrUserData),
    'e_field_gw.GatewayConfiguration_channels'(Rest, Bin3, TrUserData);
'e_field_gw.GatewayConfiguration_channels'([], Bin, _TrUserData) ->
    Bin.

'e_mfield_gw.GatewayConfiguration_stats_interval'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Duration'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_gw.ChannelConfiguration_lora_modulation_config'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_gw.LoRaModulationConfig'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_gw.ChannelConfiguration_fsk_modulation_config'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_gw.FSKModulationConfig'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_gw.LoRaModulationConfig_spreading_factors'(Elems, Bin, TrUserData) when Elems =/= [] ->
    SubBin = 'e_pfield_gw.LoRaModulationConfig_spreading_factors'(Elems, <<>>, TrUserData),
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_varint(byte_size(SubBin), Bin2),
    <<Bin3/binary, SubBin/binary>>;
'e_field_gw.LoRaModulationConfig_spreading_factors'([], Bin, _TrUserData) ->
    Bin.

'e_pfield_gw.LoRaModulationConfig_spreading_factors'([Value | Rest], Bin, TrUserData) ->
    Bin2 = e_varint(id(Value, TrUserData), Bin, TrUserData),
    'e_pfield_gw.LoRaModulationConfig_spreading_factors'(Rest, Bin2, TrUserData);
'e_pfield_gw.LoRaModulationConfig_spreading_factors'([], Bin, _TrUserData) ->
    Bin.

'e_mfield_gw.GatewayCommandExecRequest_environment'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_map<string,string>'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_gw.GatewayCommandExecRequest_environment'([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = 'e_mfield_gw.GatewayCommandExecRequest_environment'(
        'tr_encode_gw.GatewayCommandExecRequest.environment[x]'(Elem, TrUserData),
        Bin2,
        TrUserData
    ),
    'e_field_gw.GatewayCommandExecRequest_environment'(Rest, Bin3, TrUserData);
'e_field_gw.GatewayCommandExecRequest_environment'([], Bin, _TrUserData) ->
    Bin.

'e_field_ns.DeviceProfile_factory_preset_freqs'(Elems, Bin, TrUserData) when Elems =/= [] ->
    SubBin = 'e_pfield_ns.DeviceProfile_factory_preset_freqs'(Elems, <<>>, TrUserData),
    Bin2 = <<Bin/binary, 122>>,
    Bin3 = e_varint(byte_size(SubBin), Bin2),
    <<Bin3/binary, SubBin/binary>>;
'e_field_ns.DeviceProfile_factory_preset_freqs'([], Bin, _TrUserData) ->
    Bin.

'e_pfield_ns.DeviceProfile_factory_preset_freqs'([Value | Rest], Bin, TrUserData) ->
    Bin2 = e_varint(id(Value, TrUserData), Bin, TrUserData),
    'e_pfield_ns.DeviceProfile_factory_preset_freqs'(Rest, Bin2, TrUserData);
'e_pfield_ns.DeviceProfile_factory_preset_freqs'([], Bin, _TrUserData) ->
    Bin.

'encode_msg_map<string,string>'(#'map<string,string>'{key = F1, value = F2}, Bin, TrUserData) ->
    B1 = begin
        TrF1 = id(F1, TrUserData),
        e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
    end,
    begin
        TrF2 = id(F2, TrUserData),
        e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
    end.

'e_enum_ns.AggregationInterval'('SECOND', Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_ns.AggregationInterval'('MINUTE', Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_ns.AggregationInterval'('HOUR', Bin, _TrUserData) -> <<Bin/binary, 2>>;
'e_enum_ns.AggregationInterval'('DAY', Bin, _TrUserData) -> <<Bin/binary, 3>>;
'e_enum_ns.AggregationInterval'('WEEK', Bin, _TrUserData) -> <<Bin/binary, 4>>;
'e_enum_ns.AggregationInterval'('MONTH', Bin, _TrUserData) -> <<Bin/binary, 5>>;
'e_enum_ns.AggregationInterval'('QUARTER', Bin, _TrUserData) -> <<Bin/binary, 6>>;
'e_enum_ns.AggregationInterval'('YEAR', Bin, _TrUserData) -> <<Bin/binary, 7>>;
'e_enum_ns.AggregationInterval'(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_ns.MulticastGroupType'('CLASS_C', Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_ns.MulticastGroupType'('CLASS_B', Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_ns.MulticastGroupType'(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_common.Modulation'('LORA', Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_common.Modulation'('FSK', Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_common.Modulation'(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_common.Region'('EU868', Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_common.Region'('US915', Bin, _TrUserData) -> <<Bin/binary, 2>>;
'e_enum_common.Region'('CN779', Bin, _TrUserData) -> <<Bin/binary, 3>>;
'e_enum_common.Region'('EU433', Bin, _TrUserData) -> <<Bin/binary, 4>>;
'e_enum_common.Region'('AU915', Bin, _TrUserData) -> <<Bin/binary, 5>>;
'e_enum_common.Region'('CN470', Bin, _TrUserData) -> <<Bin/binary, 6>>;
'e_enum_common.Region'('AS923', Bin, _TrUserData) -> <<Bin/binary, 7>>;
'e_enum_common.Region'('KR920', Bin, _TrUserData) -> <<Bin/binary, 8>>;
'e_enum_common.Region'('IN865', Bin, _TrUserData) -> <<Bin/binary, 9>>;
'e_enum_common.Region'('RU864', Bin, _TrUserData) -> <<Bin/binary, 10>>;
'e_enum_common.Region'(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_common.MType'('JoinRequest', Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_common.MType'('JoinAccept', Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_common.MType'('UnconfirmedDataUp', Bin, _TrUserData) -> <<Bin/binary, 2>>;
'e_enum_common.MType'('UnconfirmedDataDown', Bin, _TrUserData) -> <<Bin/binary, 3>>;
'e_enum_common.MType'('ConfirmedDataUp', Bin, _TrUserData) -> <<Bin/binary, 4>>;
'e_enum_common.MType'('ConfirmedDataDown', Bin, _TrUserData) -> <<Bin/binary, 5>>;
'e_enum_common.MType'('RejoinRequest', Bin, _TrUserData) -> <<Bin/binary, 6>>;
'e_enum_common.MType'('Proprietary', Bin, _TrUserData) -> <<Bin/binary, 7>>;
'e_enum_common.MType'(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_common.LocationSource'('UNKNOWN', Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_common.LocationSource'('GPS', Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_common.LocationSource'('CONFIG', Bin, _TrUserData) -> <<Bin/binary, 2>>;
'e_enum_common.LocationSource'('GEO_RESOLVER_TDOA', Bin, _TrUserData) -> <<Bin/binary, 3>>;
'e_enum_common.LocationSource'('GEO_RESOLVER_RSSI', Bin, _TrUserData) -> <<Bin/binary, 4>>;
'e_enum_common.LocationSource'('GEO_RESOLVER_GNSS', Bin, _TrUserData) -> <<Bin/binary, 5>>;
'e_enum_common.LocationSource'('GEO_RESOLVER_WIFI', Bin, _TrUserData) -> <<Bin/binary, 6>>;
'e_enum_common.LocationSource'(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_gw.DownlinkTiming'('IMMEDIATELY', Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_gw.DownlinkTiming'('DELAY', Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_gw.DownlinkTiming'('GPS_EPOCH', Bin, _TrUserData) -> <<Bin/binary, 2>>;
'e_enum_gw.DownlinkTiming'(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_gw.FineTimestampType'('NONE', Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_gw.FineTimestampType'('ENCRYPTED', Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_gw.FineTimestampType'('PLAIN', Bin, _TrUserData) -> <<Bin/binary, 2>>;
'e_enum_gw.FineTimestampType'(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_gw.CRCStatus'('NO_CRC', Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_gw.CRCStatus'('BAD_CRC', Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_gw.CRCStatus'('CRC_OK', Bin, _TrUserData) -> <<Bin/binary, 2>>;
'e_enum_gw.CRCStatus'(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_gw.TxAckStatus'('IGNORED', Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_gw.TxAckStatus'('OK', Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_gw.TxAckStatus'('TOO_LATE', Bin, _TrUserData) -> <<Bin/binary, 2>>;
'e_enum_gw.TxAckStatus'('TOO_EARLY', Bin, _TrUserData) -> <<Bin/binary, 3>>;
'e_enum_gw.TxAckStatus'('COLLISION_PACKET', Bin, _TrUserData) -> <<Bin/binary, 4>>;
'e_enum_gw.TxAckStatus'('COLLISION_BEACON', Bin, _TrUserData) -> <<Bin/binary, 5>>;
'e_enum_gw.TxAckStatus'('TX_FREQ', Bin, _TrUserData) -> <<Bin/binary, 6>>;
'e_enum_gw.TxAckStatus'('TX_POWER', Bin, _TrUserData) -> <<Bin/binary, 7>>;
'e_enum_gw.TxAckStatus'('GPS_UNLOCKED', Bin, _TrUserData) -> <<Bin/binary, 8>>;
'e_enum_gw.TxAckStatus'('QUEUE_FULL', Bin, _TrUserData) -> <<Bin/binary, 9>>;
'e_enum_gw.TxAckStatus'('INTERNAL_ERROR', Bin, _TrUserData) -> <<Bin/binary, 10>>;
'e_enum_gw.TxAckStatus'(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_gw.ConnState.State'('OFFLINE', Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_gw.ConnState.State'('ONLINE', Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_gw.ConnState.State'(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_ns.RatePolicy'('DROP', Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_ns.RatePolicy'('MARK', Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_ns.RatePolicy'(V, Bin, _TrUserData) -> e_varint(V, Bin).

-compile({nowarn_unused_function, e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function, e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function, e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function, e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function, e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function, e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function, e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function, e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function, e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function, e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function, e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function, e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function, e_unknown_elems/2}).
e_unknown_elems([Elem | Rest], Bin) ->
    BinR =
        case Elem of
            {varint, FNum, N} ->
                BinF = e_varint(FNum bsl 3, Bin),
                e_varint(N, BinF);
            {length_delimited, FNum, Data} ->
                BinF = e_varint(FNum bsl 3 bor 2, Bin),
                BinL = e_varint(byte_size(Data), BinF),
                <<BinL/binary, Data/binary>>;
            {group, FNum, GroupFields} ->
                Bin1 = e_varint(FNum bsl 3 bor 3, Bin),
                Bin2 = e_unknown_elems(GroupFields, Bin1),
                e_varint(FNum bsl 3 bor 4, Bin2);
            {fixed32, FNum, V} ->
                BinF = e_varint(FNum bsl 3 bor 5, Bin),
                <<BinF/binary, V:32/little>>;
            {fixed64, FNum, V} ->
                BinF = e_varint(FNum bsl 3 bor 1, Bin),
                <<BinF/binary, V:64/little>>
        end,
    e_unknown_elems(Rest, BinR);
e_unknown_elems([], Bin) ->
    Bin.

-compile({nowarn_unused_function, e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function, e_varint/2}).
e_varint(N, Bin) when N =< 127 ->
    <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) -> not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) ->
    true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
        true -> true;
        false -> string_has_chars(T)
    end;
string_has_chars(B) when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) ->
    true;
string_has_chars(<<>>) ->
    false;
string_has_chars([]) ->
    false.

decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try
        decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        Class:Reason:StackTrace ->
            error({gpb_error, {decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try
        decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        Class:Reason ->
            StackTrace = erlang:get_stacktrace(),
            error({gpb_error, {decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('ns.CreateServiceProfileRequest', Bin, TrUserData) ->
    id('decode_msg_ns.CreateServiceProfileRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.CreateServiceProfileResponse', Bin, TrUserData) ->
    id('decode_msg_ns.CreateServiceProfileResponse'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.GetServiceProfileRequest', Bin, TrUserData) ->
    id('decode_msg_ns.GetServiceProfileRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.GetServiceProfileResponse', Bin, TrUserData) ->
    id('decode_msg_ns.GetServiceProfileResponse'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.UpdateServiceProfileRequest', Bin, TrUserData) ->
    id('decode_msg_ns.UpdateServiceProfileRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.DeleteServiceProfileRequest', Bin, TrUserData) ->
    id('decode_msg_ns.DeleteServiceProfileRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.CreateRoutingProfileRequest', Bin, TrUserData) ->
    id('decode_msg_ns.CreateRoutingProfileRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.CreateRoutingProfileResponse', Bin, TrUserData) ->
    id('decode_msg_ns.CreateRoutingProfileResponse'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.GetRoutingProfileRequest', Bin, TrUserData) ->
    id('decode_msg_ns.GetRoutingProfileRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.GetRoutingProfileResponse', Bin, TrUserData) ->
    id('decode_msg_ns.GetRoutingProfileResponse'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.UpdateRoutingProfileRequest', Bin, TrUserData) ->
    id('decode_msg_ns.UpdateRoutingProfileRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.DeleteRoutingProfileRequest', Bin, TrUserData) ->
    id('decode_msg_ns.DeleteRoutingProfileRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.CreateDeviceProfileRequest', Bin, TrUserData) ->
    id('decode_msg_ns.CreateDeviceProfileRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.CreateDeviceProfileResponse', Bin, TrUserData) ->
    id('decode_msg_ns.CreateDeviceProfileResponse'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.GetDeviceProfileRequest', Bin, TrUserData) ->
    id('decode_msg_ns.GetDeviceProfileRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.GetDeviceProfileResponse', Bin, TrUserData) ->
    id('decode_msg_ns.GetDeviceProfileResponse'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.UpdateDeviceProfileRequest', Bin, TrUserData) ->
    id('decode_msg_ns.UpdateDeviceProfileRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.DeleteDeviceProfileRequest', Bin, TrUserData) ->
    id('decode_msg_ns.DeleteDeviceProfileRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.Device', Bin, TrUserData) ->
    id('decode_msg_ns.Device'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.CreateDeviceRequest', Bin, TrUserData) ->
    id('decode_msg_ns.CreateDeviceRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.GetDeviceRequest', Bin, TrUserData) ->
    id('decode_msg_ns.GetDeviceRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.GetDeviceResponse', Bin, TrUserData) ->
    id('decode_msg_ns.GetDeviceResponse'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.UpdateDeviceRequest', Bin, TrUserData) ->
    id('decode_msg_ns.UpdateDeviceRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.DeleteDeviceRequest', Bin, TrUserData) ->
    id('decode_msg_ns.DeleteDeviceRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.DeviceActivation', Bin, TrUserData) ->
    id('decode_msg_ns.DeviceActivation'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.ActivateDeviceRequest', Bin, TrUserData) ->
    id('decode_msg_ns.ActivateDeviceRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.DeactivateDeviceRequest', Bin, TrUserData) ->
    id('decode_msg_ns.DeactivateDeviceRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.GetDeviceActivationRequest', Bin, TrUserData) ->
    id('decode_msg_ns.GetDeviceActivationRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.GetDeviceActivationResponse', Bin, TrUserData) ->
    id('decode_msg_ns.GetDeviceActivationResponse'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.GetRandomDevAddrResponse', Bin, TrUserData) ->
    id('decode_msg_ns.GetRandomDevAddrResponse'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.CreateMACCommandQueueItemRequest', Bin, TrUserData) ->
    id('decode_msg_ns.CreateMACCommandQueueItemRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.SendProprietaryPayloadRequest', Bin, TrUserData) ->
    id('decode_msg_ns.SendProprietaryPayloadRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.Gateway', Bin, TrUserData) ->
    id('decode_msg_ns.Gateway'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.GatewayBoard', Bin, TrUserData) ->
    id('decode_msg_ns.GatewayBoard'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.CreateGatewayRequest', Bin, TrUserData) ->
    id('decode_msg_ns.CreateGatewayRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.GetGatewayRequest', Bin, TrUserData) ->
    id('decode_msg_ns.GetGatewayRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.GetGatewayResponse', Bin, TrUserData) ->
    id('decode_msg_ns.GetGatewayResponse'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.UpdateGatewayRequest', Bin, TrUserData) ->
    id('decode_msg_ns.UpdateGatewayRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.DeleteGatewayRequest', Bin, TrUserData) ->
    id('decode_msg_ns.DeleteGatewayRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.GenerateGatewayClientCertificateRequest', Bin, TrUserData) ->
    id('decode_msg_ns.GenerateGatewayClientCertificateRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.GenerateGatewayClientCertificateResponse', Bin, TrUserData) ->
    id('decode_msg_ns.GenerateGatewayClientCertificateResponse'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.GatewayStats', Bin, TrUserData) ->
    id('decode_msg_ns.GatewayStats'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.GetGatewayStatsRequest', Bin, TrUserData) ->
    id('decode_msg_ns.GetGatewayStatsRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.GetGatewayStatsResponse', Bin, TrUserData) ->
    id('decode_msg_ns.GetGatewayStatsResponse'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.DeviceQueueItem', Bin, TrUserData) ->
    id('decode_msg_ns.DeviceQueueItem'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.CreateDeviceQueueItemRequest', Bin, TrUserData) ->
    id('decode_msg_ns.CreateDeviceQueueItemRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.FlushDeviceQueueForDevEUIRequest', Bin, TrUserData) ->
    id('decode_msg_ns.FlushDeviceQueueForDevEUIRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.GetDeviceQueueItemsForDevEUIRequest', Bin, TrUserData) ->
    id('decode_msg_ns.GetDeviceQueueItemsForDevEUIRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.GetDeviceQueueItemsForDevEUIResponse', Bin, TrUserData) ->
    id('decode_msg_ns.GetDeviceQueueItemsForDevEUIResponse'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.GetNextDownlinkFCntForDevEUIRequest', Bin, TrUserData) ->
    id('decode_msg_ns.GetNextDownlinkFCntForDevEUIRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.GetNextDownlinkFCntForDevEUIResponse', Bin, TrUserData) ->
    id('decode_msg_ns.GetNextDownlinkFCntForDevEUIResponse'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.UplinkFrameLog', Bin, TrUserData) ->
    id('decode_msg_ns.UplinkFrameLog'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.DownlinkFrameLog', Bin, TrUserData) ->
    id('decode_msg_ns.DownlinkFrameLog'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.StreamFrameLogsForGatewayRequest', Bin, TrUserData) ->
    id('decode_msg_ns.StreamFrameLogsForGatewayRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.StreamFrameLogsForGatewayResponse', Bin, TrUserData) ->
    id('decode_msg_ns.StreamFrameLogsForGatewayResponse'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.StreamFrameLogsForDeviceRequest', Bin, TrUserData) ->
    id('decode_msg_ns.StreamFrameLogsForDeviceRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.StreamFrameLogsForDeviceResponse', Bin, TrUserData) ->
    id('decode_msg_ns.StreamFrameLogsForDeviceResponse'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.GetVersionResponse', Bin, TrUserData) ->
    id('decode_msg_ns.GetVersionResponse'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.GatewayProfile', Bin, TrUserData) ->
    id('decode_msg_ns.GatewayProfile'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.GatewayProfileExtraChannel', Bin, TrUserData) ->
    id('decode_msg_ns.GatewayProfileExtraChannel'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.CreateGatewayProfileRequest', Bin, TrUserData) ->
    id('decode_msg_ns.CreateGatewayProfileRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.CreateGatewayProfileResponse', Bin, TrUserData) ->
    id('decode_msg_ns.CreateGatewayProfileResponse'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.GetGatewayProfileRequest', Bin, TrUserData) ->
    id('decode_msg_ns.GetGatewayProfileRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.GetGatewayProfileResponse', Bin, TrUserData) ->
    id('decode_msg_ns.GetGatewayProfileResponse'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.UpdateGatewayProfileRequest', Bin, TrUserData) ->
    id('decode_msg_ns.UpdateGatewayProfileRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.DeleteGatewayProfileRequest', Bin, TrUserData) ->
    id('decode_msg_ns.DeleteGatewayProfileRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.MulticastGroup', Bin, TrUserData) ->
    id('decode_msg_ns.MulticastGroup'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.CreateMulticastGroupRequest', Bin, TrUserData) ->
    id('decode_msg_ns.CreateMulticastGroupRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.CreateMulticastGroupResponse', Bin, TrUserData) ->
    id('decode_msg_ns.CreateMulticastGroupResponse'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.GetMulticastGroupRequest', Bin, TrUserData) ->
    id('decode_msg_ns.GetMulticastGroupRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.GetMulticastGroupResponse', Bin, TrUserData) ->
    id('decode_msg_ns.GetMulticastGroupResponse'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.UpdateMulticastGroupRequest', Bin, TrUserData) ->
    id('decode_msg_ns.UpdateMulticastGroupRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.DeleteMulticastGroupRequest', Bin, TrUserData) ->
    id('decode_msg_ns.DeleteMulticastGroupRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.AddDeviceToMulticastGroupRequest', Bin, TrUserData) ->
    id('decode_msg_ns.AddDeviceToMulticastGroupRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.RemoveDeviceFromMulticastGroupRequest', Bin, TrUserData) ->
    id('decode_msg_ns.RemoveDeviceFromMulticastGroupRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.MulticastQueueItem', Bin, TrUserData) ->
    id('decode_msg_ns.MulticastQueueItem'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.EnqueueMulticastQueueItemRequest', Bin, TrUserData) ->
    id('decode_msg_ns.EnqueueMulticastQueueItemRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.FlushMulticastQueueForMulticastGroupRequest', Bin, TrUserData) ->
    id('decode_msg_ns.FlushMulticastQueueForMulticastGroupRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.GetMulticastQueueItemsForMulticastGroupRequest', Bin, TrUserData) ->
    id('decode_msg_ns.GetMulticastQueueItemsForMulticastGroupRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.GetMulticastQueueItemsForMulticastGroupResponse', Bin, TrUserData) ->
    id(
        'decode_msg_ns.GetMulticastQueueItemsForMulticastGroupResponse'(Bin, TrUserData),
        TrUserData
    );
decode_msg_2_doit('ns.GetADRAlgorithmsResponse', Bin, TrUserData) ->
    id('decode_msg_ns.GetADRAlgorithmsResponse'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.ADRAlgorithm', Bin, TrUserData) ->
    id('decode_msg_ns.ADRAlgorithm'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('google.protobuf.Timestamp', Bin, TrUserData) ->
    id('decode_msg_google.protobuf.Timestamp'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('google.protobuf.Duration', Bin, TrUserData) ->
    id('decode_msg_google.protobuf.Duration'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('google.protobuf.Empty', Bin, TrUserData) ->
    id('decode_msg_google.protobuf.Empty'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('common.KeyEnvelope', Bin, TrUserData) ->
    id('decode_msg_common.KeyEnvelope'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('common.Location', Bin, TrUserData) ->
    id('decode_msg_common.Location'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.UplinkTXInfo', Bin, TrUserData) ->
    id('decode_msg_gw.UplinkTXInfo'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.LoRaModulationInfo', Bin, TrUserData) ->
    id('decode_msg_gw.LoRaModulationInfo'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.FSKModulationInfo', Bin, TrUserData) ->
    id('decode_msg_gw.FSKModulationInfo'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.EncryptedFineTimestamp', Bin, TrUserData) ->
    id('decode_msg_gw.EncryptedFineTimestamp'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.PlainFineTimestamp', Bin, TrUserData) ->
    id('decode_msg_gw.PlainFineTimestamp'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.GatewayStats', Bin, TrUserData) ->
    id('decode_msg_gw.GatewayStats'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.UplinkRXInfo', Bin, TrUserData) ->
    id('decode_msg_gw.UplinkRXInfo'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.DownlinkTXInfo', Bin, TrUserData) ->
    id('decode_msg_gw.DownlinkTXInfo'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.ImmediatelyTimingInfo', Bin, TrUserData) ->
    id('decode_msg_gw.ImmediatelyTimingInfo'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.DelayTimingInfo', Bin, TrUserData) ->
    id('decode_msg_gw.DelayTimingInfo'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.GPSEpochTimingInfo', Bin, TrUserData) ->
    id('decode_msg_gw.GPSEpochTimingInfo'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.UplinkFrame', Bin, TrUserData) ->
    id('decode_msg_gw.UplinkFrame'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.UplinkFrameSet', Bin, TrUserData) ->
    id('decode_msg_gw.UplinkFrameSet'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.DownlinkFrame', Bin, TrUserData) ->
    id('decode_msg_gw.DownlinkFrame'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.DownlinkFrameItem', Bin, TrUserData) ->
    id('decode_msg_gw.DownlinkFrameItem'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.DownlinkTXAck', Bin, TrUserData) ->
    id('decode_msg_gw.DownlinkTXAck'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.DownlinkTXAckItem', Bin, TrUserData) ->
    id('decode_msg_gw.DownlinkTXAckItem'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.GatewayConfiguration', Bin, TrUserData) ->
    id('decode_msg_gw.GatewayConfiguration'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.ChannelConfiguration', Bin, TrUserData) ->
    id('decode_msg_gw.ChannelConfiguration'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.LoRaModulationConfig', Bin, TrUserData) ->
    id('decode_msg_gw.LoRaModulationConfig'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.FSKModulationConfig', Bin, TrUserData) ->
    id('decode_msg_gw.FSKModulationConfig'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.GatewayCommandExecRequest', Bin, TrUserData) ->
    id('decode_msg_gw.GatewayCommandExecRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.GatewayCommandExecResponse', Bin, TrUserData) ->
    id('decode_msg_gw.GatewayCommandExecResponse'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.RawPacketForwarderEvent', Bin, TrUserData) ->
    id('decode_msg_gw.RawPacketForwarderEvent'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.RawPacketForwarderCommand', Bin, TrUserData) ->
    id('decode_msg_gw.RawPacketForwarderCommand'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.ConnState', Bin, TrUserData) ->
    id('decode_msg_gw.ConnState'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.ServiceProfile', Bin, TrUserData) ->
    id('decode_msg_ns.ServiceProfile'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.DeviceProfile', Bin, TrUserData) ->
    id('decode_msg_ns.DeviceProfile'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ns.RoutingProfile', Bin, TrUserData) ->
    id('decode_msg_ns.RoutingProfile'(Bin, TrUserData), TrUserData).

'decode_msg_ns.CreateServiceProfileRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.CreateServiceProfileRequest'(
        Bin,
        0,
        0,
        0,
        id(undefined, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.CreateServiceProfileRequest'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'd_field_ns.CreateServiceProfileRequest_service_profile'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.CreateServiceProfileRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.CreateServiceProfileRequest'{service_profile = F@_1};
'dfp_read_field_def_ns.CreateServiceProfileRequest'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.CreateServiceProfileRequest'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.CreateServiceProfileRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.CreateServiceProfileRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'dg_read_field_def_ns.CreateServiceProfileRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.CreateServiceProfileRequest_service_profile'(
                Rest,
                0,
                0,
                0,
                F@_1,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.CreateServiceProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.CreateServiceProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.CreateServiceProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.CreateServiceProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.CreateServiceProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.CreateServiceProfileRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.CreateServiceProfileRequest'{service_profile = F@_1}.

'd_field_ns.CreateServiceProfileRequest_service_profile'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.CreateServiceProfileRequest_service_profile'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'd_field_ns.CreateServiceProfileRequest_service_profile'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_ns.ServiceProfile'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.CreateServiceProfileRequest'(
        RestF,
        0,
        0,
        F,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_ns.ServiceProfile'(Prev, NewFValue, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_ns.CreateServiceProfileRequest'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'skip_varint_ns.CreateServiceProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.CreateServiceProfileRequest'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_ns.CreateServiceProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.CreateServiceProfileRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.CreateServiceProfileRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.CreateServiceProfileRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.CreateServiceProfileRequest'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.CreateServiceProfileRequest'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.CreateServiceProfileRequest'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_ns.CreateServiceProfileRequest'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.CreateServiceProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.CreateServiceProfileRequest'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.CreateServiceProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.CreateServiceProfileResponse'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.CreateServiceProfileResponse'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.CreateServiceProfileResponse'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'd_field_ns.CreateServiceProfileResponse_id'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.CreateServiceProfileResponse'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.CreateServiceProfileResponse'{id = F@_1};
'dfp_read_field_def_ns.CreateServiceProfileResponse'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.CreateServiceProfileResponse'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.CreateServiceProfileResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.CreateServiceProfileResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'dg_read_field_def_ns.CreateServiceProfileResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.CreateServiceProfileResponse_id'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.CreateServiceProfileResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.CreateServiceProfileResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.CreateServiceProfileResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.CreateServiceProfileResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.CreateServiceProfileResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.CreateServiceProfileResponse'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.CreateServiceProfileResponse'{id = F@_1}.

'd_field_ns.CreateServiceProfileResponse_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.CreateServiceProfileResponse_id'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'd_field_ns.CreateServiceProfileResponse_id'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.CreateServiceProfileResponse'(RestF, 0, 0, F, NewFValue, TrUserData).

'skip_varint_ns.CreateServiceProfileResponse'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'skip_varint_ns.CreateServiceProfileResponse'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.CreateServiceProfileResponse'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_ns.CreateServiceProfileResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.CreateServiceProfileResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.CreateServiceProfileResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.CreateServiceProfileResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.CreateServiceProfileResponse'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.CreateServiceProfileResponse'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.CreateServiceProfileResponse'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_ns.CreateServiceProfileResponse'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.CreateServiceProfileResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.CreateServiceProfileResponse'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.CreateServiceProfileResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.GetServiceProfileRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.GetServiceProfileRequest'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.GetServiceProfileRequest'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'd_field_ns.GetServiceProfileRequest_id'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.GetServiceProfileRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.GetServiceProfileRequest'{id = F@_1};
'dfp_read_field_def_ns.GetServiceProfileRequest'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.GetServiceProfileRequest'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.GetServiceProfileRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.GetServiceProfileRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'dg_read_field_def_ns.GetServiceProfileRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.GetServiceProfileRequest_id'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.GetServiceProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.GetServiceProfileRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 ->
                    'skip_length_delimited_ns.GetServiceProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.GetServiceProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.GetServiceProfileRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
'dg_read_field_def_ns.GetServiceProfileRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.GetServiceProfileRequest'{id = F@_1}.

'd_field_ns.GetServiceProfileRequest_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.GetServiceProfileRequest_id'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'd_field_ns.GetServiceProfileRequest_id'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GetServiceProfileRequest'(RestF, 0, 0, F, NewFValue, TrUserData).

'skip_varint_ns.GetServiceProfileRequest'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'skip_varint_ns.GetServiceProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.GetServiceProfileRequest'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.GetServiceProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.GetServiceProfileRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.GetServiceProfileRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.GetServiceProfileRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.GetServiceProfileRequest'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.GetServiceProfileRequest'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.GetServiceProfileRequest'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_ns.GetServiceProfileRequest'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.GetServiceProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.GetServiceProfileRequest'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.GetServiceProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.GetServiceProfileResponse'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.GetServiceProfileResponse'(
        Bin,
        0,
        0,
        0,
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.GetServiceProfileResponse'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_ns.GetServiceProfileResponse_service_profile'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'dfp_read_field_def_ns.GetServiceProfileResponse'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_ns.GetServiceProfileResponse_created_at'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'dfp_read_field_def_ns.GetServiceProfileResponse'(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_ns.GetServiceProfileResponse_updated_at'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'dfp_read_field_def_ns.GetServiceProfileResponse'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) ->
    #'ns.GetServiceProfileResponse'{service_profile = F@_1, created_at = F@_2, updated_at = F@_3};
'dfp_read_field_def_ns.GetServiceProfileResponse'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'dg_read_field_def_ns.GetServiceProfileResponse'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

'dg_read_field_def_ns.GetServiceProfileResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.GetServiceProfileResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'dg_read_field_def_ns.GetServiceProfileResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.GetServiceProfileResponse_service_profile'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        18 ->
            'd_field_ns.GetServiceProfileResponse_created_at'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        26 ->
            'd_field_ns.GetServiceProfileResponse_updated_at'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.GetServiceProfileResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.GetServiceProfileResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.GetServiceProfileResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.GetServiceProfileResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.GetServiceProfileResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.GetServiceProfileResponse'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) ->
    #'ns.GetServiceProfileResponse'{service_profile = F@_1, created_at = F@_2, updated_at = F@_3}.

'd_field_ns.GetServiceProfileResponse_service_profile'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_ns.GetServiceProfileResponse_service_profile'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_ns.GetServiceProfileResponse_service_profile'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    Prev,
    F@_2,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_ns.ServiceProfile'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GetServiceProfileResponse'(
        RestF,
        0,
        0,
        F,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_ns.ServiceProfile'(Prev, NewFValue, TrUserData)
        end,
        F@_2,
        F@_3,
        TrUserData
    ).

'd_field_ns.GetServiceProfileResponse_created_at'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_ns.GetServiceProfileResponse_created_at'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_ns.GetServiceProfileResponse_created_at'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    Prev,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Timestamp'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GetServiceProfileResponse'(
        RestF,
        0,
        0,
        F,
        F@_1,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Timestamp'(Prev, NewFValue, TrUserData)
        end,
        F@_3,
        TrUserData
    ).

'd_field_ns.GetServiceProfileResponse_updated_at'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_ns.GetServiceProfileResponse_updated_at'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_ns.GetServiceProfileResponse_updated_at'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Timestamp'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GetServiceProfileResponse'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Timestamp'(Prev, NewFValue, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_ns.GetServiceProfileResponse'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'skip_varint_ns.GetServiceProfileResponse'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'skip_varint_ns.GetServiceProfileResponse'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'dfp_read_field_def_ns.GetServiceProfileResponse'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

'skip_length_delimited_ns.GetServiceProfileResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.GetServiceProfileResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'skip_length_delimited_ns.GetServiceProfileResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.GetServiceProfileResponse'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

'skip_group_ns.GetServiceProfileResponse'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.GetServiceProfileResponse'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

'skip_32_ns.GetServiceProfileResponse'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'dfp_read_field_def_ns.GetServiceProfileResponse'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

'skip_64_ns.GetServiceProfileResponse'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'dfp_read_field_def_ns.GetServiceProfileResponse'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

'decode_msg_ns.UpdateServiceProfileRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.UpdateServiceProfileRequest'(
        Bin,
        0,
        0,
        0,
        id(undefined, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.UpdateServiceProfileRequest'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'd_field_ns.UpdateServiceProfileRequest_service_profile'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.UpdateServiceProfileRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.UpdateServiceProfileRequest'{service_profile = F@_1};
'dfp_read_field_def_ns.UpdateServiceProfileRequest'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.UpdateServiceProfileRequest'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.UpdateServiceProfileRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.UpdateServiceProfileRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'dg_read_field_def_ns.UpdateServiceProfileRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.UpdateServiceProfileRequest_service_profile'(
                Rest,
                0,
                0,
                0,
                F@_1,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.UpdateServiceProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.UpdateServiceProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.UpdateServiceProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.UpdateServiceProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.UpdateServiceProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.UpdateServiceProfileRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.UpdateServiceProfileRequest'{service_profile = F@_1}.

'd_field_ns.UpdateServiceProfileRequest_service_profile'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.UpdateServiceProfileRequest_service_profile'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'd_field_ns.UpdateServiceProfileRequest_service_profile'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_ns.ServiceProfile'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.UpdateServiceProfileRequest'(
        RestF,
        0,
        0,
        F,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_ns.ServiceProfile'(Prev, NewFValue, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_ns.UpdateServiceProfileRequest'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'skip_varint_ns.UpdateServiceProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.UpdateServiceProfileRequest'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_ns.UpdateServiceProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.UpdateServiceProfileRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.UpdateServiceProfileRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.UpdateServiceProfileRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.UpdateServiceProfileRequest'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.UpdateServiceProfileRequest'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.UpdateServiceProfileRequest'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_ns.UpdateServiceProfileRequest'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.UpdateServiceProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.UpdateServiceProfileRequest'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.UpdateServiceProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.DeleteServiceProfileRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.DeleteServiceProfileRequest'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.DeleteServiceProfileRequest'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'd_field_ns.DeleteServiceProfileRequest_id'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.DeleteServiceProfileRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.DeleteServiceProfileRequest'{id = F@_1};
'dfp_read_field_def_ns.DeleteServiceProfileRequest'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.DeleteServiceProfileRequest'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.DeleteServiceProfileRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.DeleteServiceProfileRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'dg_read_field_def_ns.DeleteServiceProfileRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.DeleteServiceProfileRequest_id'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.DeleteServiceProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.DeleteServiceProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.DeleteServiceProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.DeleteServiceProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.DeleteServiceProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.DeleteServiceProfileRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.DeleteServiceProfileRequest'{id = F@_1}.

'd_field_ns.DeleteServiceProfileRequest_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.DeleteServiceProfileRequest_id'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'd_field_ns.DeleteServiceProfileRequest_id'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.DeleteServiceProfileRequest'(RestF, 0, 0, F, NewFValue, TrUserData).

'skip_varint_ns.DeleteServiceProfileRequest'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'skip_varint_ns.DeleteServiceProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.DeleteServiceProfileRequest'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_ns.DeleteServiceProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.DeleteServiceProfileRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.DeleteServiceProfileRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.DeleteServiceProfileRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.DeleteServiceProfileRequest'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.DeleteServiceProfileRequest'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.DeleteServiceProfileRequest'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_ns.DeleteServiceProfileRequest'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.DeleteServiceProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.DeleteServiceProfileRequest'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.DeleteServiceProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.CreateRoutingProfileRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.CreateRoutingProfileRequest'(
        Bin,
        0,
        0,
        0,
        id(undefined, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.CreateRoutingProfileRequest'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'd_field_ns.CreateRoutingProfileRequest_routing_profile'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.CreateRoutingProfileRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.CreateRoutingProfileRequest'{routing_profile = F@_1};
'dfp_read_field_def_ns.CreateRoutingProfileRequest'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.CreateRoutingProfileRequest'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.CreateRoutingProfileRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.CreateRoutingProfileRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'dg_read_field_def_ns.CreateRoutingProfileRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.CreateRoutingProfileRequest_routing_profile'(
                Rest,
                0,
                0,
                0,
                F@_1,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.CreateRoutingProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.CreateRoutingProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.CreateRoutingProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.CreateRoutingProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.CreateRoutingProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.CreateRoutingProfileRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.CreateRoutingProfileRequest'{routing_profile = F@_1}.

'd_field_ns.CreateRoutingProfileRequest_routing_profile'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.CreateRoutingProfileRequest_routing_profile'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'd_field_ns.CreateRoutingProfileRequest_routing_profile'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_ns.RoutingProfile'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.CreateRoutingProfileRequest'(
        RestF,
        0,
        0,
        F,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_ns.RoutingProfile'(Prev, NewFValue, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_ns.CreateRoutingProfileRequest'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'skip_varint_ns.CreateRoutingProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.CreateRoutingProfileRequest'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_ns.CreateRoutingProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.CreateRoutingProfileRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.CreateRoutingProfileRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.CreateRoutingProfileRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.CreateRoutingProfileRequest'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.CreateRoutingProfileRequest'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.CreateRoutingProfileRequest'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_ns.CreateRoutingProfileRequest'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.CreateRoutingProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.CreateRoutingProfileRequest'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.CreateRoutingProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.CreateRoutingProfileResponse'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.CreateRoutingProfileResponse'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.CreateRoutingProfileResponse'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'd_field_ns.CreateRoutingProfileResponse_id'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.CreateRoutingProfileResponse'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.CreateRoutingProfileResponse'{id = F@_1};
'dfp_read_field_def_ns.CreateRoutingProfileResponse'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.CreateRoutingProfileResponse'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.CreateRoutingProfileResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.CreateRoutingProfileResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'dg_read_field_def_ns.CreateRoutingProfileResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.CreateRoutingProfileResponse_id'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.CreateRoutingProfileResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.CreateRoutingProfileResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.CreateRoutingProfileResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.CreateRoutingProfileResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.CreateRoutingProfileResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.CreateRoutingProfileResponse'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.CreateRoutingProfileResponse'{id = F@_1}.

'd_field_ns.CreateRoutingProfileResponse_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.CreateRoutingProfileResponse_id'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'd_field_ns.CreateRoutingProfileResponse_id'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.CreateRoutingProfileResponse'(RestF, 0, 0, F, NewFValue, TrUserData).

'skip_varint_ns.CreateRoutingProfileResponse'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'skip_varint_ns.CreateRoutingProfileResponse'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.CreateRoutingProfileResponse'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_ns.CreateRoutingProfileResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.CreateRoutingProfileResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.CreateRoutingProfileResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.CreateRoutingProfileResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.CreateRoutingProfileResponse'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.CreateRoutingProfileResponse'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.CreateRoutingProfileResponse'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_ns.CreateRoutingProfileResponse'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.CreateRoutingProfileResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.CreateRoutingProfileResponse'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.CreateRoutingProfileResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.GetRoutingProfileRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.GetRoutingProfileRequest'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.GetRoutingProfileRequest'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'd_field_ns.GetRoutingProfileRequest_id'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.GetRoutingProfileRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.GetRoutingProfileRequest'{id = F@_1};
'dfp_read_field_def_ns.GetRoutingProfileRequest'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.GetRoutingProfileRequest'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.GetRoutingProfileRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.GetRoutingProfileRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'dg_read_field_def_ns.GetRoutingProfileRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.GetRoutingProfileRequest_id'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.GetRoutingProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.GetRoutingProfileRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 ->
                    'skip_length_delimited_ns.GetRoutingProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.GetRoutingProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.GetRoutingProfileRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
'dg_read_field_def_ns.GetRoutingProfileRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.GetRoutingProfileRequest'{id = F@_1}.

'd_field_ns.GetRoutingProfileRequest_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.GetRoutingProfileRequest_id'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'd_field_ns.GetRoutingProfileRequest_id'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GetRoutingProfileRequest'(RestF, 0, 0, F, NewFValue, TrUserData).

'skip_varint_ns.GetRoutingProfileRequest'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'skip_varint_ns.GetRoutingProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.GetRoutingProfileRequest'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.GetRoutingProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.GetRoutingProfileRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.GetRoutingProfileRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.GetRoutingProfileRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.GetRoutingProfileRequest'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.GetRoutingProfileRequest'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.GetRoutingProfileRequest'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_ns.GetRoutingProfileRequest'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.GetRoutingProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.GetRoutingProfileRequest'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.GetRoutingProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.GetRoutingProfileResponse'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.GetRoutingProfileResponse'(
        Bin,
        0,
        0,
        0,
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.GetRoutingProfileResponse'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_ns.GetRoutingProfileResponse_routing_profile'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'dfp_read_field_def_ns.GetRoutingProfileResponse'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_ns.GetRoutingProfileResponse_created_at'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'dfp_read_field_def_ns.GetRoutingProfileResponse'(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_ns.GetRoutingProfileResponse_updated_at'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'dfp_read_field_def_ns.GetRoutingProfileResponse'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) ->
    #'ns.GetRoutingProfileResponse'{routing_profile = F@_1, created_at = F@_2, updated_at = F@_3};
'dfp_read_field_def_ns.GetRoutingProfileResponse'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'dg_read_field_def_ns.GetRoutingProfileResponse'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

'dg_read_field_def_ns.GetRoutingProfileResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.GetRoutingProfileResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'dg_read_field_def_ns.GetRoutingProfileResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.GetRoutingProfileResponse_routing_profile'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        18 ->
            'd_field_ns.GetRoutingProfileResponse_created_at'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        26 ->
            'd_field_ns.GetRoutingProfileResponse_updated_at'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.GetRoutingProfileResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.GetRoutingProfileResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.GetRoutingProfileResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.GetRoutingProfileResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.GetRoutingProfileResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.GetRoutingProfileResponse'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) ->
    #'ns.GetRoutingProfileResponse'{routing_profile = F@_1, created_at = F@_2, updated_at = F@_3}.

'd_field_ns.GetRoutingProfileResponse_routing_profile'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_ns.GetRoutingProfileResponse_routing_profile'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_ns.GetRoutingProfileResponse_routing_profile'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    Prev,
    F@_2,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_ns.RoutingProfile'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GetRoutingProfileResponse'(
        RestF,
        0,
        0,
        F,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_ns.RoutingProfile'(Prev, NewFValue, TrUserData)
        end,
        F@_2,
        F@_3,
        TrUserData
    ).

'd_field_ns.GetRoutingProfileResponse_created_at'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_ns.GetRoutingProfileResponse_created_at'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_ns.GetRoutingProfileResponse_created_at'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    Prev,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Timestamp'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GetRoutingProfileResponse'(
        RestF,
        0,
        0,
        F,
        F@_1,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Timestamp'(Prev, NewFValue, TrUserData)
        end,
        F@_3,
        TrUserData
    ).

'd_field_ns.GetRoutingProfileResponse_updated_at'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_ns.GetRoutingProfileResponse_updated_at'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_ns.GetRoutingProfileResponse_updated_at'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Timestamp'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GetRoutingProfileResponse'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Timestamp'(Prev, NewFValue, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_ns.GetRoutingProfileResponse'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'skip_varint_ns.GetRoutingProfileResponse'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'skip_varint_ns.GetRoutingProfileResponse'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'dfp_read_field_def_ns.GetRoutingProfileResponse'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

'skip_length_delimited_ns.GetRoutingProfileResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.GetRoutingProfileResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'skip_length_delimited_ns.GetRoutingProfileResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.GetRoutingProfileResponse'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

'skip_group_ns.GetRoutingProfileResponse'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.GetRoutingProfileResponse'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

'skip_32_ns.GetRoutingProfileResponse'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'dfp_read_field_def_ns.GetRoutingProfileResponse'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

'skip_64_ns.GetRoutingProfileResponse'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'dfp_read_field_def_ns.GetRoutingProfileResponse'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

'decode_msg_ns.UpdateRoutingProfileRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.UpdateRoutingProfileRequest'(
        Bin,
        0,
        0,
        0,
        id(undefined, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.UpdateRoutingProfileRequest'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'd_field_ns.UpdateRoutingProfileRequest_routing_profile'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.UpdateRoutingProfileRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.UpdateRoutingProfileRequest'{routing_profile = F@_1};
'dfp_read_field_def_ns.UpdateRoutingProfileRequest'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.UpdateRoutingProfileRequest'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.UpdateRoutingProfileRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.UpdateRoutingProfileRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'dg_read_field_def_ns.UpdateRoutingProfileRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.UpdateRoutingProfileRequest_routing_profile'(
                Rest,
                0,
                0,
                0,
                F@_1,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.UpdateRoutingProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.UpdateRoutingProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.UpdateRoutingProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.UpdateRoutingProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.UpdateRoutingProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.UpdateRoutingProfileRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.UpdateRoutingProfileRequest'{routing_profile = F@_1}.

'd_field_ns.UpdateRoutingProfileRequest_routing_profile'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.UpdateRoutingProfileRequest_routing_profile'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'd_field_ns.UpdateRoutingProfileRequest_routing_profile'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_ns.RoutingProfile'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.UpdateRoutingProfileRequest'(
        RestF,
        0,
        0,
        F,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_ns.RoutingProfile'(Prev, NewFValue, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_ns.UpdateRoutingProfileRequest'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'skip_varint_ns.UpdateRoutingProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.UpdateRoutingProfileRequest'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_ns.UpdateRoutingProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.UpdateRoutingProfileRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.UpdateRoutingProfileRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.UpdateRoutingProfileRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.UpdateRoutingProfileRequest'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.UpdateRoutingProfileRequest'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.UpdateRoutingProfileRequest'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_ns.UpdateRoutingProfileRequest'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.UpdateRoutingProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.UpdateRoutingProfileRequest'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.UpdateRoutingProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.DeleteRoutingProfileRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.DeleteRoutingProfileRequest'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.DeleteRoutingProfileRequest'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'd_field_ns.DeleteRoutingProfileRequest_id'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.DeleteRoutingProfileRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.DeleteRoutingProfileRequest'{id = F@_1};
'dfp_read_field_def_ns.DeleteRoutingProfileRequest'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.DeleteRoutingProfileRequest'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.DeleteRoutingProfileRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.DeleteRoutingProfileRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'dg_read_field_def_ns.DeleteRoutingProfileRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.DeleteRoutingProfileRequest_id'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.DeleteRoutingProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.DeleteRoutingProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.DeleteRoutingProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.DeleteRoutingProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.DeleteRoutingProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.DeleteRoutingProfileRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.DeleteRoutingProfileRequest'{id = F@_1}.

'd_field_ns.DeleteRoutingProfileRequest_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.DeleteRoutingProfileRequest_id'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'd_field_ns.DeleteRoutingProfileRequest_id'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.DeleteRoutingProfileRequest'(RestF, 0, 0, F, NewFValue, TrUserData).

'skip_varint_ns.DeleteRoutingProfileRequest'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'skip_varint_ns.DeleteRoutingProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.DeleteRoutingProfileRequest'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_ns.DeleteRoutingProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.DeleteRoutingProfileRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.DeleteRoutingProfileRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.DeleteRoutingProfileRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.DeleteRoutingProfileRequest'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.DeleteRoutingProfileRequest'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.DeleteRoutingProfileRequest'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_ns.DeleteRoutingProfileRequest'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.DeleteRoutingProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.DeleteRoutingProfileRequest'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.DeleteRoutingProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.CreateDeviceProfileRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.CreateDeviceProfileRequest'(
        Bin,
        0,
        0,
        0,
        id(undefined, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.CreateDeviceProfileRequest'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'd_field_ns.CreateDeviceProfileRequest_device_profile'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.CreateDeviceProfileRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.CreateDeviceProfileRequest'{device_profile = F@_1};
'dfp_read_field_def_ns.CreateDeviceProfileRequest'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.CreateDeviceProfileRequest'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.CreateDeviceProfileRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.CreateDeviceProfileRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'dg_read_field_def_ns.CreateDeviceProfileRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.CreateDeviceProfileRequest_device_profile'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.CreateDeviceProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.CreateDeviceProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.CreateDeviceProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.CreateDeviceProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.CreateDeviceProfileRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
'dg_read_field_def_ns.CreateDeviceProfileRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.CreateDeviceProfileRequest'{device_profile = F@_1}.

'd_field_ns.CreateDeviceProfileRequest_device_profile'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.CreateDeviceProfileRequest_device_profile'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'd_field_ns.CreateDeviceProfileRequest_device_profile'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_ns.DeviceProfile'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.CreateDeviceProfileRequest'(
        RestF,
        0,
        0,
        F,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_ns.DeviceProfile'(Prev, NewFValue, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_ns.CreateDeviceProfileRequest'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'skip_varint_ns.CreateDeviceProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.CreateDeviceProfileRequest'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.CreateDeviceProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.CreateDeviceProfileRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.CreateDeviceProfileRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.CreateDeviceProfileRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.CreateDeviceProfileRequest'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.CreateDeviceProfileRequest'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.CreateDeviceProfileRequest'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_ns.CreateDeviceProfileRequest'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.CreateDeviceProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.CreateDeviceProfileRequest'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.CreateDeviceProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.CreateDeviceProfileResponse'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.CreateDeviceProfileResponse'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.CreateDeviceProfileResponse'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'd_field_ns.CreateDeviceProfileResponse_id'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.CreateDeviceProfileResponse'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.CreateDeviceProfileResponse'{id = F@_1};
'dfp_read_field_def_ns.CreateDeviceProfileResponse'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.CreateDeviceProfileResponse'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.CreateDeviceProfileResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.CreateDeviceProfileResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'dg_read_field_def_ns.CreateDeviceProfileResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.CreateDeviceProfileResponse_id'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.CreateDeviceProfileResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.CreateDeviceProfileResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.CreateDeviceProfileResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.CreateDeviceProfileResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.CreateDeviceProfileResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.CreateDeviceProfileResponse'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.CreateDeviceProfileResponse'{id = F@_1}.

'd_field_ns.CreateDeviceProfileResponse_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.CreateDeviceProfileResponse_id'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'd_field_ns.CreateDeviceProfileResponse_id'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.CreateDeviceProfileResponse'(RestF, 0, 0, F, NewFValue, TrUserData).

'skip_varint_ns.CreateDeviceProfileResponse'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'skip_varint_ns.CreateDeviceProfileResponse'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.CreateDeviceProfileResponse'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_ns.CreateDeviceProfileResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.CreateDeviceProfileResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.CreateDeviceProfileResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.CreateDeviceProfileResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.CreateDeviceProfileResponse'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.CreateDeviceProfileResponse'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.CreateDeviceProfileResponse'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_ns.CreateDeviceProfileResponse'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.CreateDeviceProfileResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.CreateDeviceProfileResponse'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.CreateDeviceProfileResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.GetDeviceProfileRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.GetDeviceProfileRequest'(Bin, 0, 0, 0, id(<<>>, TrUserData), TrUserData).

'dfp_read_field_def_ns.GetDeviceProfileRequest'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'd_field_ns.GetDeviceProfileRequest_id'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.GetDeviceProfileRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.GetDeviceProfileRequest'{id = F@_1};
'dfp_read_field_def_ns.GetDeviceProfileRequest'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.GetDeviceProfileRequest'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.GetDeviceProfileRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.GetDeviceProfileRequest'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'dg_read_field_def_ns.GetDeviceProfileRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.GetDeviceProfileRequest_id'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.GetDeviceProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.GetDeviceProfileRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 ->
                    'skip_length_delimited_ns.GetDeviceProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.GetDeviceProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.GetDeviceProfileRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
'dg_read_field_def_ns.GetDeviceProfileRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.GetDeviceProfileRequest'{id = F@_1}.

'd_field_ns.GetDeviceProfileRequest_id'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when
    N < 57
->
    'd_field_ns.GetDeviceProfileRequest_id'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'd_field_ns.GetDeviceProfileRequest_id'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GetDeviceProfileRequest'(RestF, 0, 0, F, NewFValue, TrUserData).

'skip_varint_ns.GetDeviceProfileRequest'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'skip_varint_ns.GetDeviceProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.GetDeviceProfileRequest'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.GetDeviceProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.GetDeviceProfileRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.GetDeviceProfileRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.GetDeviceProfileRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.GetDeviceProfileRequest'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.GetDeviceProfileRequest'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.GetDeviceProfileRequest'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_ns.GetDeviceProfileRequest'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.GetDeviceProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.GetDeviceProfileRequest'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.GetDeviceProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.GetDeviceProfileResponse'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.GetDeviceProfileResponse'(
        Bin,
        0,
        0,
        0,
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.GetDeviceProfileResponse'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_ns.GetDeviceProfileResponse_device_profile'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'dfp_read_field_def_ns.GetDeviceProfileResponse'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_ns.GetDeviceProfileResponse_created_at'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_ns.GetDeviceProfileResponse'(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_ns.GetDeviceProfileResponse_updated_at'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_ns.GetDeviceProfileResponse'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) ->
    #'ns.GetDeviceProfileResponse'{device_profile = F@_1, created_at = F@_2, updated_at = F@_3};
'dfp_read_field_def_ns.GetDeviceProfileResponse'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'dg_read_field_def_ns.GetDeviceProfileResponse'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'dg_read_field_def_ns.GetDeviceProfileResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.GetDeviceProfileResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'dg_read_field_def_ns.GetDeviceProfileResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.GetDeviceProfileResponse_device_profile'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        18 ->
            'd_field_ns.GetDeviceProfileResponse_created_at'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        26 ->
            'd_field_ns.GetDeviceProfileResponse_updated_at'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.GetDeviceProfileResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.GetDeviceProfileResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.GetDeviceProfileResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.GetDeviceProfileResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.GetDeviceProfileResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.GetDeviceProfileResponse'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) ->
    #'ns.GetDeviceProfileResponse'{device_profile = F@_1, created_at = F@_2, updated_at = F@_3}.

'd_field_ns.GetDeviceProfileResponse_device_profile'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_ns.GetDeviceProfileResponse_device_profile'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_ns.GetDeviceProfileResponse_device_profile'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    Prev,
    F@_2,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_ns.DeviceProfile'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GetDeviceProfileResponse'(
        RestF,
        0,
        0,
        F,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_ns.DeviceProfile'(Prev, NewFValue, TrUserData)
        end,
        F@_2,
        F@_3,
        TrUserData
    ).

'd_field_ns.GetDeviceProfileResponse_created_at'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_ns.GetDeviceProfileResponse_created_at'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_ns.GetDeviceProfileResponse_created_at'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    Prev,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Timestamp'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GetDeviceProfileResponse'(
        RestF,
        0,
        0,
        F,
        F@_1,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Timestamp'(Prev, NewFValue, TrUserData)
        end,
        F@_3,
        TrUserData
    ).

'd_field_ns.GetDeviceProfileResponse_updated_at'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_ns.GetDeviceProfileResponse_updated_at'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_ns.GetDeviceProfileResponse_updated_at'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Timestamp'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GetDeviceProfileResponse'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Timestamp'(Prev, NewFValue, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_ns.GetDeviceProfileResponse'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'skip_varint_ns.GetDeviceProfileResponse'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'skip_varint_ns.GetDeviceProfileResponse'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'dfp_read_field_def_ns.GetDeviceProfileResponse'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'skip_length_delimited_ns.GetDeviceProfileResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.GetDeviceProfileResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'skip_length_delimited_ns.GetDeviceProfileResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.GetDeviceProfileResponse'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

'skip_group_ns.GetDeviceProfileResponse'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.GetDeviceProfileResponse'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

'skip_32_ns.GetDeviceProfileResponse'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'dfp_read_field_def_ns.GetDeviceProfileResponse'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'skip_64_ns.GetDeviceProfileResponse'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'dfp_read_field_def_ns.GetDeviceProfileResponse'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'decode_msg_ns.UpdateDeviceProfileRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.UpdateDeviceProfileRequest'(
        Bin,
        0,
        0,
        0,
        id(undefined, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.UpdateDeviceProfileRequest'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'd_field_ns.UpdateDeviceProfileRequest_device_profile'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.UpdateDeviceProfileRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.UpdateDeviceProfileRequest'{device_profile = F@_1};
'dfp_read_field_def_ns.UpdateDeviceProfileRequest'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.UpdateDeviceProfileRequest'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.UpdateDeviceProfileRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.UpdateDeviceProfileRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'dg_read_field_def_ns.UpdateDeviceProfileRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.UpdateDeviceProfileRequest_device_profile'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.UpdateDeviceProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.UpdateDeviceProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.UpdateDeviceProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.UpdateDeviceProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.UpdateDeviceProfileRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
'dg_read_field_def_ns.UpdateDeviceProfileRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.UpdateDeviceProfileRequest'{device_profile = F@_1}.

'd_field_ns.UpdateDeviceProfileRequest_device_profile'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.UpdateDeviceProfileRequest_device_profile'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'd_field_ns.UpdateDeviceProfileRequest_device_profile'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_ns.DeviceProfile'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.UpdateDeviceProfileRequest'(
        RestF,
        0,
        0,
        F,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_ns.DeviceProfile'(Prev, NewFValue, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_ns.UpdateDeviceProfileRequest'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'skip_varint_ns.UpdateDeviceProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.UpdateDeviceProfileRequest'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.UpdateDeviceProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.UpdateDeviceProfileRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.UpdateDeviceProfileRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.UpdateDeviceProfileRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.UpdateDeviceProfileRequest'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.UpdateDeviceProfileRequest'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.UpdateDeviceProfileRequest'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_ns.UpdateDeviceProfileRequest'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.UpdateDeviceProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.UpdateDeviceProfileRequest'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.UpdateDeviceProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.DeleteDeviceProfileRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.DeleteDeviceProfileRequest'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.DeleteDeviceProfileRequest'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'd_field_ns.DeleteDeviceProfileRequest_id'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.DeleteDeviceProfileRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.DeleteDeviceProfileRequest'{id = F@_1};
'dfp_read_field_def_ns.DeleteDeviceProfileRequest'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.DeleteDeviceProfileRequest'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.DeleteDeviceProfileRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.DeleteDeviceProfileRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'dg_read_field_def_ns.DeleteDeviceProfileRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.DeleteDeviceProfileRequest_id'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.DeleteDeviceProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.DeleteDeviceProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.DeleteDeviceProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.DeleteDeviceProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.DeleteDeviceProfileRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
'dg_read_field_def_ns.DeleteDeviceProfileRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.DeleteDeviceProfileRequest'{id = F@_1}.

'd_field_ns.DeleteDeviceProfileRequest_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.DeleteDeviceProfileRequest_id'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'd_field_ns.DeleteDeviceProfileRequest_id'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.DeleteDeviceProfileRequest'(RestF, 0, 0, F, NewFValue, TrUserData).

'skip_varint_ns.DeleteDeviceProfileRequest'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'skip_varint_ns.DeleteDeviceProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.DeleteDeviceProfileRequest'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.DeleteDeviceProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.DeleteDeviceProfileRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.DeleteDeviceProfileRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.DeleteDeviceProfileRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.DeleteDeviceProfileRequest'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.DeleteDeviceProfileRequest'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.DeleteDeviceProfileRequest'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_ns.DeleteDeviceProfileRequest'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.DeleteDeviceProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.DeleteDeviceProfileRequest'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.DeleteDeviceProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.Device'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.Device'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        id(false, TrUserData),
        id(0.0, TrUserData),
        id(false, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.Device'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    'd_field_ns.Device_dev_eui'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
'dfp_read_field_def_ns.Device'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    'd_field_ns.Device_device_profile_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
'dfp_read_field_def_ns.Device'(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    'd_field_ns.Device_service_profile_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
'dfp_read_field_def_ns.Device'(
    <<34, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    'd_field_ns.Device_routing_profile_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
'dfp_read_field_def_ns.Device'(
    <<40, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    'd_field_ns.Device_skip_f_cnt_check'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
'dfp_read_field_def_ns.Device'(
    <<49, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    'd_field_ns.Device_reference_altitude'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
'dfp_read_field_def_ns.Device'(
    <<56, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    'd_field_ns.Device_is_disabled'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
'dfp_read_field_def_ns.Device'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _) ->
    #'ns.Device'{
        dev_eui = F@_1,
        device_profile_id = F@_2,
        service_profile_id = F@_3,
        routing_profile_id = F@_4,
        skip_f_cnt_check = F@_5,
        reference_altitude = F@_6,
        is_disabled = F@_7
    };
'dfp_read_field_def_ns.Device'(
    Other,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    'dg_read_field_def_ns.Device'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

'dg_read_field_def_ns.Device'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.Device'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
'dg_read_field_def_ns.Device'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.Device_dev_eui'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                TrUserData
            );
        18 ->
            'd_field_ns.Device_device_profile_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                TrUserData
            );
        26 ->
            'd_field_ns.Device_service_profile_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                TrUserData
            );
        34 ->
            'd_field_ns.Device_routing_profile_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                TrUserData
            );
        40 ->
            'd_field_ns.Device_skip_f_cnt_check'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                TrUserData
            );
        49 ->
            'd_field_ns.Device_reference_altitude'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                TrUserData
            );
        56 ->
            'd_field_ns.Device_is_disabled'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.Device'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.Device'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.Device'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.Device'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.Device'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.Device'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _) ->
    #'ns.Device'{
        dev_eui = F@_1,
        device_profile_id = F@_2,
        service_profile_id = F@_3,
        routing_profile_id = F@_4,
        skip_f_cnt_check = F@_5,
        reference_altitude = F@_6,
        is_disabled = F@_7
    }.

'd_field_ns.Device_dev_eui'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) when N < 57 ->
    'd_field_ns.Device_dev_eui'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
'd_field_ns.Device_dev_eui'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.Device'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

'd_field_ns.Device_device_profile_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) when N < 57 ->
    'd_field_ns.Device_device_profile_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
'd_field_ns.Device_device_profile_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.Device'(
        RestF,
        0,
        0,
        F,
        F@_1,
        NewFValue,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

'd_field_ns.Device_service_profile_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) when N < 57 ->
    'd_field_ns.Device_service_profile_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
'd_field_ns.Device_service_profile_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    _,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.Device'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        NewFValue,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

'd_field_ns.Device_routing_profile_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) when N < 57 ->
    'd_field_ns.Device_routing_profile_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
'd_field_ns.Device_routing_profile_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    _,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.Device'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        NewFValue,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

'd_field_ns.Device_skip_f_cnt_check'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) when N < 57 ->
    'd_field_ns.Device_skip_f_cnt_check'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
'd_field_ns.Device_skip_f_cnt_check'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _,
    F@_6,
    F@_7,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_ns.Device'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        NewFValue,
        F@_6,
        F@_7,
        TrUserData
    ).

'd_field_ns.Device_reference_altitude'(
    <<0:48, 240, 127, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    _,
    F@_7,
    TrUserData
) ->
    'dfp_read_field_def_ns.Device'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        id(infinity, TrUserData),
        F@_7,
        TrUserData
    );
'd_field_ns.Device_reference_altitude'(
    <<0:48, 240, 255, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    _,
    F@_7,
    TrUserData
) ->
    'dfp_read_field_def_ns.Device'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        id('-infinity', TrUserData),
        F@_7,
        TrUserData
    );
'd_field_ns.Device_reference_altitude'(
    <<_:48, 15:4, _:4, _:1, 127:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    _,
    F@_7,
    TrUserData
) ->
    'dfp_read_field_def_ns.Device'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        id(nan, TrUserData),
        F@_7,
        TrUserData
    );
'd_field_ns.Device_reference_altitude'(
    <<Value:64/little-float, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    _,
    F@_7,
    TrUserData
) ->
    'dfp_read_field_def_ns.Device'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        id(Value, TrUserData),
        F@_7,
        TrUserData
    ).

'd_field_ns.Device_is_disabled'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) when N < 57 ->
    'd_field_ns.Device_is_disabled'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
'd_field_ns.Device_is_disabled'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_ns.Device'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        NewFValue,
        TrUserData
    ).

'skip_varint_ns.Device'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    'skip_varint_ns.Device'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'skip_varint_ns.Device'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    'dfp_read_field_def_ns.Device'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

'skip_length_delimited_ns.Device'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.Device'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
'skip_length_delimited_ns.Device'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.Device'(
        Rest2,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

'skip_group_ns.Device'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.Device'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

'skip_32_ns.Device'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    'dfp_read_field_def_ns.Device'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

'skip_64_ns.Device'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    'dfp_read_field_def_ns.Device'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

'decode_msg_ns.CreateDeviceRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.CreateDeviceRequest'(
        Bin,
        0,
        0,
        0,
        id(undefined, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.CreateDeviceRequest'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'd_field_ns.CreateDeviceRequest_device'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.CreateDeviceRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.CreateDeviceRequest'{device = F@_1};
'dfp_read_field_def_ns.CreateDeviceRequest'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.CreateDeviceRequest'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.CreateDeviceRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.CreateDeviceRequest'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'dg_read_field_def_ns.CreateDeviceRequest'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.CreateDeviceRequest_device'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.CreateDeviceRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 ->
                    'skip_64_ns.CreateDeviceRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 ->
                    'skip_length_delimited_ns.CreateDeviceRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.CreateDeviceRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 ->
                    'skip_32_ns.CreateDeviceRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
'dg_read_field_def_ns.CreateDeviceRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.CreateDeviceRequest'{device = F@_1}.

'd_field_ns.CreateDeviceRequest_device'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when
    N < 57
->
    'd_field_ns.CreateDeviceRequest_device'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'd_field_ns.CreateDeviceRequest_device'(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_ns.Device'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.CreateDeviceRequest'(
        RestF,
        0,
        0,
        F,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_ns.Device'(Prev, NewFValue, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_ns.CreateDeviceRequest'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'skip_varint_ns.CreateDeviceRequest'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.CreateDeviceRequest'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.CreateDeviceRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.CreateDeviceRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.CreateDeviceRequest'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'skip_length_delimited_ns.CreateDeviceRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.CreateDeviceRequest'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.CreateDeviceRequest'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.CreateDeviceRequest'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_ns.CreateDeviceRequest'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.CreateDeviceRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.CreateDeviceRequest'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.CreateDeviceRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.GetDeviceRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.GetDeviceRequest'(Bin, 0, 0, 0, id(<<>>, TrUserData), TrUserData).

'dfp_read_field_def_ns.GetDeviceRequest'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'd_field_ns.GetDeviceRequest_dev_eui'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.GetDeviceRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.GetDeviceRequest'{dev_eui = F@_1};
'dfp_read_field_def_ns.GetDeviceRequest'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.GetDeviceRequest'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.GetDeviceRequest'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when
    N < 32 - 7
->
    'dg_read_field_def_ns.GetDeviceRequest'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'dg_read_field_def_ns.GetDeviceRequest'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.GetDeviceRequest_dev_eui'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.GetDeviceRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 ->
                    'skip_64_ns.GetDeviceRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 ->
                    'skip_length_delimited_ns.GetDeviceRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.GetDeviceRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 ->
                    'skip_32_ns.GetDeviceRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
'dg_read_field_def_ns.GetDeviceRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.GetDeviceRequest'{dev_eui = F@_1}.

'd_field_ns.GetDeviceRequest_dev_eui'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when
    N < 57
->
    'd_field_ns.GetDeviceRequest_dev_eui'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'd_field_ns.GetDeviceRequest_dev_eui'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GetDeviceRequest'(RestF, 0, 0, F, NewFValue, TrUserData).

'skip_varint_ns.GetDeviceRequest'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'skip_varint_ns.GetDeviceRequest'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.GetDeviceRequest'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.GetDeviceRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.GetDeviceRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.GetDeviceRequest'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'skip_length_delimited_ns.GetDeviceRequest'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.GetDeviceRequest'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.GetDeviceRequest'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.GetDeviceRequest'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_ns.GetDeviceRequest'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.GetDeviceRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.GetDeviceRequest'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.GetDeviceRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.GetDeviceResponse'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.GetDeviceResponse'(
        Bin,
        0,
        0,
        0,
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.GetDeviceResponse'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_ns.GetDeviceResponse_device'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_ns.GetDeviceResponse'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_ns.GetDeviceResponse_created_at'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_ns.GetDeviceResponse'(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_ns.GetDeviceResponse_updated_at'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_ns.GetDeviceResponse'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) ->
    #'ns.GetDeviceResponse'{device = F@_1, created_at = F@_2, updated_at = F@_3};
'dfp_read_field_def_ns.GetDeviceResponse'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'dg_read_field_def_ns.GetDeviceResponse'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'dg_read_field_def_ns.GetDeviceResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.GetDeviceResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'dg_read_field_def_ns.GetDeviceResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.GetDeviceResponse_device'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 ->
            'd_field_ns.GetDeviceResponse_created_at'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 ->
            'd_field_ns.GetDeviceResponse_updated_at'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.GetDeviceResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.GetDeviceResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.GetDeviceResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.GetDeviceResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.GetDeviceResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.GetDeviceResponse'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) ->
    #'ns.GetDeviceResponse'{device = F@_1, created_at = F@_2, updated_at = F@_3}.

'd_field_ns.GetDeviceResponse_device'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_ns.GetDeviceResponse_device'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_ns.GetDeviceResponse_device'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    Prev,
    F@_2,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_ns.Device'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GetDeviceResponse'(
        RestF,
        0,
        0,
        F,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_ns.Device'(Prev, NewFValue, TrUserData)
        end,
        F@_2,
        F@_3,
        TrUserData
    ).

'd_field_ns.GetDeviceResponse_created_at'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_ns.GetDeviceResponse_created_at'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_ns.GetDeviceResponse_created_at'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    Prev,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Timestamp'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GetDeviceResponse'(
        RestF,
        0,
        0,
        F,
        F@_1,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Timestamp'(Prev, NewFValue, TrUserData)
        end,
        F@_3,
        TrUserData
    ).

'd_field_ns.GetDeviceResponse_updated_at'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_ns.GetDeviceResponse_updated_at'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_ns.GetDeviceResponse_updated_at'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Timestamp'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GetDeviceResponse'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Timestamp'(Prev, NewFValue, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_ns.GetDeviceResponse'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'skip_varint_ns.GetDeviceResponse'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'skip_varint_ns.GetDeviceResponse'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'dfp_read_field_def_ns.GetDeviceResponse'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'skip_length_delimited_ns.GetDeviceResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.GetDeviceResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'skip_length_delimited_ns.GetDeviceResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.GetDeviceResponse'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

'skip_group_ns.GetDeviceResponse'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.GetDeviceResponse'(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

'skip_32_ns.GetDeviceResponse'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_ns.GetDeviceResponse'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'skip_64_ns.GetDeviceResponse'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_ns.GetDeviceResponse'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'decode_msg_ns.UpdateDeviceRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.UpdateDeviceRequest'(
        Bin,
        0,
        0,
        0,
        id(undefined, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.UpdateDeviceRequest'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'd_field_ns.UpdateDeviceRequest_device'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.UpdateDeviceRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.UpdateDeviceRequest'{device = F@_1};
'dfp_read_field_def_ns.UpdateDeviceRequest'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.UpdateDeviceRequest'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.UpdateDeviceRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.UpdateDeviceRequest'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'dg_read_field_def_ns.UpdateDeviceRequest'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.UpdateDeviceRequest_device'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.UpdateDeviceRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 ->
                    'skip_64_ns.UpdateDeviceRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 ->
                    'skip_length_delimited_ns.UpdateDeviceRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.UpdateDeviceRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 ->
                    'skip_32_ns.UpdateDeviceRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
'dg_read_field_def_ns.UpdateDeviceRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.UpdateDeviceRequest'{device = F@_1}.

'd_field_ns.UpdateDeviceRequest_device'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when
    N < 57
->
    'd_field_ns.UpdateDeviceRequest_device'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'd_field_ns.UpdateDeviceRequest_device'(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_ns.Device'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.UpdateDeviceRequest'(
        RestF,
        0,
        0,
        F,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_ns.Device'(Prev, NewFValue, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_ns.UpdateDeviceRequest'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'skip_varint_ns.UpdateDeviceRequest'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.UpdateDeviceRequest'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.UpdateDeviceRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.UpdateDeviceRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.UpdateDeviceRequest'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'skip_length_delimited_ns.UpdateDeviceRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.UpdateDeviceRequest'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.UpdateDeviceRequest'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.UpdateDeviceRequest'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_ns.UpdateDeviceRequest'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.UpdateDeviceRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.UpdateDeviceRequest'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.UpdateDeviceRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.DeleteDeviceRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.DeleteDeviceRequest'(Bin, 0, 0, 0, id(<<>>, TrUserData), TrUserData).

'dfp_read_field_def_ns.DeleteDeviceRequest'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'd_field_ns.DeleteDeviceRequest_dev_eui'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.DeleteDeviceRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.DeleteDeviceRequest'{dev_eui = F@_1};
'dfp_read_field_def_ns.DeleteDeviceRequest'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.DeleteDeviceRequest'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.DeleteDeviceRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.DeleteDeviceRequest'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'dg_read_field_def_ns.DeleteDeviceRequest'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.DeleteDeviceRequest_dev_eui'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.DeleteDeviceRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 ->
                    'skip_64_ns.DeleteDeviceRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 ->
                    'skip_length_delimited_ns.DeleteDeviceRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.DeleteDeviceRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 ->
                    'skip_32_ns.DeleteDeviceRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
'dg_read_field_def_ns.DeleteDeviceRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.DeleteDeviceRequest'{dev_eui = F@_1}.

'd_field_ns.DeleteDeviceRequest_dev_eui'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.DeleteDeviceRequest_dev_eui'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'd_field_ns.DeleteDeviceRequest_dev_eui'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.DeleteDeviceRequest'(RestF, 0, 0, F, NewFValue, TrUserData).

'skip_varint_ns.DeleteDeviceRequest'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'skip_varint_ns.DeleteDeviceRequest'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.DeleteDeviceRequest'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.DeleteDeviceRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.DeleteDeviceRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.DeleteDeviceRequest'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'skip_length_delimited_ns.DeleteDeviceRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.DeleteDeviceRequest'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.DeleteDeviceRequest'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.DeleteDeviceRequest'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_ns.DeleteDeviceRequest'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.DeleteDeviceRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.DeleteDeviceRequest'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.DeleteDeviceRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.DeviceActivation'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.DeviceActivation'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        id(false, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.DeviceActivation'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    TrUserData
) ->
    'd_field_ns.DeviceActivation_dev_eui'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        TrUserData
    );
'dfp_read_field_def_ns.DeviceActivation'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    TrUserData
) ->
    'd_field_ns.DeviceActivation_dev_addr'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        TrUserData
    );
'dfp_read_field_def_ns.DeviceActivation'(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    TrUserData
) ->
    'd_field_ns.DeviceActivation_s_nwk_s_int_key'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        TrUserData
    );
'dfp_read_field_def_ns.DeviceActivation'(
    <<34, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    TrUserData
) ->
    'd_field_ns.DeviceActivation_f_nwk_s_int_key'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        TrUserData
    );
'dfp_read_field_def_ns.DeviceActivation'(
    <<42, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    TrUserData
) ->
    'd_field_ns.DeviceActivation_nwk_s_enc_key'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        TrUserData
    );
'dfp_read_field_def_ns.DeviceActivation'(
    <<48, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    TrUserData
) ->
    'd_field_ns.DeviceActivation_f_cnt_up'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        TrUserData
    );
'dfp_read_field_def_ns.DeviceActivation'(
    <<56, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    TrUserData
) ->
    'd_field_ns.DeviceActivation_n_f_cnt_down'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        TrUserData
    );
'dfp_read_field_def_ns.DeviceActivation'(
    <<64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    TrUserData
) ->
    'd_field_ns.DeviceActivation_a_f_cnt_down'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        TrUserData
    );
'dfp_read_field_def_ns.DeviceActivation'(
    <<72, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    TrUserData
) ->
    'd_field_ns.DeviceActivation_skip_f_cnt_check'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        TrUserData
    );
'dfp_read_field_def_ns.DeviceActivation'(
    <<>>,
    0,
    0,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    _
) ->
    #'ns.DeviceActivation'{
        dev_eui = F@_1,
        dev_addr = F@_2,
        s_nwk_s_int_key = F@_3,
        f_nwk_s_int_key = F@_4,
        nwk_s_enc_key = F@_5,
        f_cnt_up = F@_6,
        n_f_cnt_down = F@_7,
        a_f_cnt_down = F@_8,
        skip_f_cnt_check = F@_9
    };
'dfp_read_field_def_ns.DeviceActivation'(
    Other,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    TrUserData
) ->
    'dg_read_field_def_ns.DeviceActivation'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        TrUserData
    ).

'dg_read_field_def_ns.DeviceActivation'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.DeviceActivation'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        TrUserData
    );
'dg_read_field_def_ns.DeviceActivation'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.DeviceActivation_dev_eui'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                TrUserData
            );
        18 ->
            'd_field_ns.DeviceActivation_dev_addr'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                TrUserData
            );
        26 ->
            'd_field_ns.DeviceActivation_s_nwk_s_int_key'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                TrUserData
            );
        34 ->
            'd_field_ns.DeviceActivation_f_nwk_s_int_key'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                TrUserData
            );
        42 ->
            'd_field_ns.DeviceActivation_nwk_s_enc_key'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                TrUserData
            );
        48 ->
            'd_field_ns.DeviceActivation_f_cnt_up'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                TrUserData
            );
        56 ->
            'd_field_ns.DeviceActivation_n_f_cnt_down'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                TrUserData
            );
        64 ->
            'd_field_ns.DeviceActivation_a_f_cnt_down'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                TrUserData
            );
        72 ->
            'd_field_ns.DeviceActivation_skip_f_cnt_check'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.DeviceActivation'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.DeviceActivation'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.DeviceActivation'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.DeviceActivation'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.DeviceActivation'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.DeviceActivation'(
    <<>>,
    0,
    0,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    _
) ->
    #'ns.DeviceActivation'{
        dev_eui = F@_1,
        dev_addr = F@_2,
        s_nwk_s_int_key = F@_3,
        f_nwk_s_int_key = F@_4,
        nwk_s_enc_key = F@_5,
        f_cnt_up = F@_6,
        n_f_cnt_down = F@_7,
        a_f_cnt_down = F@_8,
        skip_f_cnt_check = F@_9
    }.

'd_field_ns.DeviceActivation_dev_eui'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    TrUserData
) when N < 57 ->
    'd_field_ns.DeviceActivation_dev_eui'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        TrUserData
    );
'd_field_ns.DeviceActivation_dev_eui'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.DeviceActivation'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        TrUserData
    ).

'd_field_ns.DeviceActivation_dev_addr'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    TrUserData
) when N < 57 ->
    'd_field_ns.DeviceActivation_dev_addr'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        TrUserData
    );
'd_field_ns.DeviceActivation_dev_addr'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.DeviceActivation'(
        RestF,
        0,
        0,
        F,
        F@_1,
        NewFValue,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        TrUserData
    ).

'd_field_ns.DeviceActivation_s_nwk_s_int_key'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    TrUserData
) when N < 57 ->
    'd_field_ns.DeviceActivation_s_nwk_s_int_key'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        TrUserData
    );
'd_field_ns.DeviceActivation_s_nwk_s_int_key'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    _,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.DeviceActivation'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        NewFValue,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        TrUserData
    ).

'd_field_ns.DeviceActivation_f_nwk_s_int_key'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    TrUserData
) when N < 57 ->
    'd_field_ns.DeviceActivation_f_nwk_s_int_key'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        TrUserData
    );
'd_field_ns.DeviceActivation_f_nwk_s_int_key'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    _,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.DeviceActivation'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        NewFValue,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        TrUserData
    ).

'd_field_ns.DeviceActivation_nwk_s_enc_key'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    TrUserData
) when N < 57 ->
    'd_field_ns.DeviceActivation_nwk_s_enc_key'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        TrUserData
    );
'd_field_ns.DeviceActivation_nwk_s_enc_key'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.DeviceActivation'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        NewFValue,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        TrUserData
    ).

'd_field_ns.DeviceActivation_f_cnt_up'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    TrUserData
) when N < 57 ->
    'd_field_ns.DeviceActivation_f_cnt_up'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        TrUserData
    );
'd_field_ns.DeviceActivation_f_cnt_up'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    _,
    F@_7,
    F@_8,
    F@_9,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_ns.DeviceActivation'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        NewFValue,
        F@_7,
        F@_8,
        F@_9,
        TrUserData
    ).

'd_field_ns.DeviceActivation_n_f_cnt_down'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    TrUserData
) when N < 57 ->
    'd_field_ns.DeviceActivation_n_f_cnt_down'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        TrUserData
    );
'd_field_ns.DeviceActivation_n_f_cnt_down'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    _,
    F@_8,
    F@_9,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_ns.DeviceActivation'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        NewFValue,
        F@_8,
        F@_9,
        TrUserData
    ).

'd_field_ns.DeviceActivation_a_f_cnt_down'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    TrUserData
) when N < 57 ->
    'd_field_ns.DeviceActivation_a_f_cnt_down'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        TrUserData
    );
'd_field_ns.DeviceActivation_a_f_cnt_down'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    _,
    F@_9,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_ns.DeviceActivation'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        NewFValue,
        F@_9,
        TrUserData
    ).

'd_field_ns.DeviceActivation_skip_f_cnt_check'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    TrUserData
) when N < 57 ->
    'd_field_ns.DeviceActivation_skip_f_cnt_check'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        TrUserData
    );
'd_field_ns.DeviceActivation_skip_f_cnt_check'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_ns.DeviceActivation'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        NewFValue,
        TrUserData
    ).

'skip_varint_ns.DeviceActivation'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    TrUserData
) ->
    'skip_varint_ns.DeviceActivation'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        TrUserData
    );
'skip_varint_ns.DeviceActivation'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    TrUserData
) ->
    'dfp_read_field_def_ns.DeviceActivation'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        TrUserData
    ).

'skip_length_delimited_ns.DeviceActivation'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.DeviceActivation'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        TrUserData
    );
'skip_length_delimited_ns.DeviceActivation'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.DeviceActivation'(
        Rest2,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        TrUserData
    ).

'skip_group_ns.DeviceActivation'(
    Bin,
    _,
    Z2,
    FNum,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.DeviceActivation'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        TrUserData
    ).

'skip_32_ns.DeviceActivation'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    TrUserData
) ->
    'dfp_read_field_def_ns.DeviceActivation'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        TrUserData
    ).

'skip_64_ns.DeviceActivation'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    TrUserData
) ->
    'dfp_read_field_def_ns.DeviceActivation'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        TrUserData
    ).

'decode_msg_ns.ActivateDeviceRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.ActivateDeviceRequest'(
        Bin,
        0,
        0,
        0,
        id(undefined, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.ActivateDeviceRequest'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'd_field_ns.ActivateDeviceRequest_device_activation'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.ActivateDeviceRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.ActivateDeviceRequest'{device_activation = F@_1};
'dfp_read_field_def_ns.ActivateDeviceRequest'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.ActivateDeviceRequest'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.ActivateDeviceRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.ActivateDeviceRequest'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'dg_read_field_def_ns.ActivateDeviceRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.ActivateDeviceRequest_device_activation'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.ActivateDeviceRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 ->
                    'skip_64_ns.ActivateDeviceRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 ->
                    'skip_length_delimited_ns.ActivateDeviceRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.ActivateDeviceRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 ->
                    'skip_32_ns.ActivateDeviceRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
'dg_read_field_def_ns.ActivateDeviceRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.ActivateDeviceRequest'{device_activation = F@_1}.

'd_field_ns.ActivateDeviceRequest_device_activation'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.ActivateDeviceRequest_device_activation'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'd_field_ns.ActivateDeviceRequest_device_activation'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_ns.DeviceActivation'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.ActivateDeviceRequest'(
        RestF,
        0,
        0,
        F,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_ns.DeviceActivation'(Prev, NewFValue, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_ns.ActivateDeviceRequest'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'skip_varint_ns.ActivateDeviceRequest'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.ActivateDeviceRequest'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.ActivateDeviceRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.ActivateDeviceRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.ActivateDeviceRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.ActivateDeviceRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.ActivateDeviceRequest'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.ActivateDeviceRequest'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.ActivateDeviceRequest'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_ns.ActivateDeviceRequest'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.ActivateDeviceRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.ActivateDeviceRequest'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.ActivateDeviceRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.DeactivateDeviceRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.DeactivateDeviceRequest'(Bin, 0, 0, 0, id(<<>>, TrUserData), TrUserData).

'dfp_read_field_def_ns.DeactivateDeviceRequest'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'd_field_ns.DeactivateDeviceRequest_dev_eui'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.DeactivateDeviceRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.DeactivateDeviceRequest'{dev_eui = F@_1};
'dfp_read_field_def_ns.DeactivateDeviceRequest'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.DeactivateDeviceRequest'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.DeactivateDeviceRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.DeactivateDeviceRequest'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'dg_read_field_def_ns.DeactivateDeviceRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.DeactivateDeviceRequest_dev_eui'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.DeactivateDeviceRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.DeactivateDeviceRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 ->
                    'skip_length_delimited_ns.DeactivateDeviceRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.DeactivateDeviceRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.DeactivateDeviceRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
'dg_read_field_def_ns.DeactivateDeviceRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.DeactivateDeviceRequest'{dev_eui = F@_1}.

'd_field_ns.DeactivateDeviceRequest_dev_eui'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.DeactivateDeviceRequest_dev_eui'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'd_field_ns.DeactivateDeviceRequest_dev_eui'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.DeactivateDeviceRequest'(RestF, 0, 0, F, NewFValue, TrUserData).

'skip_varint_ns.DeactivateDeviceRequest'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'skip_varint_ns.DeactivateDeviceRequest'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.DeactivateDeviceRequest'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.DeactivateDeviceRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.DeactivateDeviceRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.DeactivateDeviceRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.DeactivateDeviceRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.DeactivateDeviceRequest'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.DeactivateDeviceRequest'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.DeactivateDeviceRequest'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_ns.DeactivateDeviceRequest'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.DeactivateDeviceRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.DeactivateDeviceRequest'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.DeactivateDeviceRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.GetDeviceActivationRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.GetDeviceActivationRequest'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.GetDeviceActivationRequest'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'd_field_ns.GetDeviceActivationRequest_dev_eui'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.GetDeviceActivationRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.GetDeviceActivationRequest'{dev_eui = F@_1};
'dfp_read_field_def_ns.GetDeviceActivationRequest'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.GetDeviceActivationRequest'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.GetDeviceActivationRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.GetDeviceActivationRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'dg_read_field_def_ns.GetDeviceActivationRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.GetDeviceActivationRequest_dev_eui'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.GetDeviceActivationRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.GetDeviceActivationRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.GetDeviceActivationRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.GetDeviceActivationRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.GetDeviceActivationRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
'dg_read_field_def_ns.GetDeviceActivationRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.GetDeviceActivationRequest'{dev_eui = F@_1}.

'd_field_ns.GetDeviceActivationRequest_dev_eui'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.GetDeviceActivationRequest_dev_eui'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'd_field_ns.GetDeviceActivationRequest_dev_eui'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GetDeviceActivationRequest'(RestF, 0, 0, F, NewFValue, TrUserData).

'skip_varint_ns.GetDeviceActivationRequest'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'skip_varint_ns.GetDeviceActivationRequest'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.GetDeviceActivationRequest'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.GetDeviceActivationRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.GetDeviceActivationRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.GetDeviceActivationRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.GetDeviceActivationRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.GetDeviceActivationRequest'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.GetDeviceActivationRequest'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.GetDeviceActivationRequest'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_ns.GetDeviceActivationRequest'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.GetDeviceActivationRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.GetDeviceActivationRequest'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.GetDeviceActivationRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.GetDeviceActivationResponse'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.GetDeviceActivationResponse'(
        Bin,
        0,
        0,
        0,
        id(undefined, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.GetDeviceActivationResponse'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'd_field_ns.GetDeviceActivationResponse_device_activation'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.GetDeviceActivationResponse'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.GetDeviceActivationResponse'{device_activation = F@_1};
'dfp_read_field_def_ns.GetDeviceActivationResponse'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.GetDeviceActivationResponse'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.GetDeviceActivationResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.GetDeviceActivationResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'dg_read_field_def_ns.GetDeviceActivationResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.GetDeviceActivationResponse_device_activation'(
                Rest,
                0,
                0,
                0,
                F@_1,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.GetDeviceActivationResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.GetDeviceActivationResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.GetDeviceActivationResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.GetDeviceActivationResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.GetDeviceActivationResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.GetDeviceActivationResponse'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.GetDeviceActivationResponse'{device_activation = F@_1}.

'd_field_ns.GetDeviceActivationResponse_device_activation'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.GetDeviceActivationResponse_device_activation'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'd_field_ns.GetDeviceActivationResponse_device_activation'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_ns.DeviceActivation'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GetDeviceActivationResponse'(
        RestF,
        0,
        0,
        F,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_ns.DeviceActivation'(Prev, NewFValue, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_ns.GetDeviceActivationResponse'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'skip_varint_ns.GetDeviceActivationResponse'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.GetDeviceActivationResponse'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_ns.GetDeviceActivationResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.GetDeviceActivationResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.GetDeviceActivationResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.GetDeviceActivationResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.GetDeviceActivationResponse'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.GetDeviceActivationResponse'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.GetDeviceActivationResponse'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_ns.GetDeviceActivationResponse'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.GetDeviceActivationResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.GetDeviceActivationResponse'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.GetDeviceActivationResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.GetRandomDevAddrResponse'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.GetRandomDevAddrResponse'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.GetRandomDevAddrResponse'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'd_field_ns.GetRandomDevAddrResponse_dev_addr'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.GetRandomDevAddrResponse'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.GetRandomDevAddrResponse'{dev_addr = F@_1};
'dfp_read_field_def_ns.GetRandomDevAddrResponse'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.GetRandomDevAddrResponse'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.GetRandomDevAddrResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.GetRandomDevAddrResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'dg_read_field_def_ns.GetRandomDevAddrResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.GetRandomDevAddrResponse_dev_addr'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.GetRandomDevAddrResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.GetRandomDevAddrResponse'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 ->
                    'skip_length_delimited_ns.GetRandomDevAddrResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.GetRandomDevAddrResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.GetRandomDevAddrResponse'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
'dg_read_field_def_ns.GetRandomDevAddrResponse'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.GetRandomDevAddrResponse'{dev_addr = F@_1}.

'd_field_ns.GetRandomDevAddrResponse_dev_addr'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.GetRandomDevAddrResponse_dev_addr'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'd_field_ns.GetRandomDevAddrResponse_dev_addr'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GetRandomDevAddrResponse'(RestF, 0, 0, F, NewFValue, TrUserData).

'skip_varint_ns.GetRandomDevAddrResponse'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'skip_varint_ns.GetRandomDevAddrResponse'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.GetRandomDevAddrResponse'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.GetRandomDevAddrResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.GetRandomDevAddrResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.GetRandomDevAddrResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.GetRandomDevAddrResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.GetRandomDevAddrResponse'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.GetRandomDevAddrResponse'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.GetRandomDevAddrResponse'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_ns.GetRandomDevAddrResponse'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.GetRandomDevAddrResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.GetRandomDevAddrResponse'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.GetRandomDevAddrResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.CreateMACCommandQueueItemRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.CreateMACCommandQueueItemRequest'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id(0, TrUserData),
        id([], TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.CreateMACCommandQueueItemRequest'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_ns.CreateMACCommandQueueItemRequest_dev_eui'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'dfp_read_field_def_ns.CreateMACCommandQueueItemRequest'(
    <<32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_ns.CreateMACCommandQueueItemRequest_cid'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'dfp_read_field_def_ns.CreateMACCommandQueueItemRequest'(
    <<42, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_ns.CreateMACCommandQueueItemRequest_commands'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'dfp_read_field_def_ns.CreateMACCommandQueueItemRequest'(<<>>, 0, 0, _, F@_1, F@_2, R1, TrUserData) ->
    #'ns.CreateMACCommandQueueItemRequest'{
        dev_eui = F@_1,
        cid = F@_2,
        commands = lists_reverse(R1, TrUserData)
    };
'dfp_read_field_def_ns.CreateMACCommandQueueItemRequest'(
    Other,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'dg_read_field_def_ns.CreateMACCommandQueueItemRequest'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

'dg_read_field_def_ns.CreateMACCommandQueueItemRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.CreateMACCommandQueueItemRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'dg_read_field_def_ns.CreateMACCommandQueueItemRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.CreateMACCommandQueueItemRequest_dev_eui'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        32 ->
            'd_field_ns.CreateMACCommandQueueItemRequest_cid'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        42 ->
            'd_field_ns.CreateMACCommandQueueItemRequest_commands'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.CreateMACCommandQueueItemRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.CreateMACCommandQueueItemRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.CreateMACCommandQueueItemRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.CreateMACCommandQueueItemRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.CreateMACCommandQueueItemRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.CreateMACCommandQueueItemRequest'(<<>>, 0, 0, _, F@_1, F@_2, R1, TrUserData) ->
    #'ns.CreateMACCommandQueueItemRequest'{
        dev_eui = F@_1,
        cid = F@_2,
        commands = lists_reverse(R1, TrUserData)
    }.

'd_field_ns.CreateMACCommandQueueItemRequest_dev_eui'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_ns.CreateMACCommandQueueItemRequest_dev_eui'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_ns.CreateMACCommandQueueItemRequest_dev_eui'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.CreateMACCommandQueueItemRequest'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        F@_3,
        TrUserData
    ).

'd_field_ns.CreateMACCommandQueueItemRequest_cid'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_ns.CreateMACCommandQueueItemRequest_cid'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_ns.CreateMACCommandQueueItemRequest_cid'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_ns.CreateMACCommandQueueItemRequest'(
        RestF,
        0,
        0,
        F,
        F@_1,
        NewFValue,
        F@_3,
        TrUserData
    ).

'd_field_ns.CreateMACCommandQueueItemRequest_commands'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_ns.CreateMACCommandQueueItemRequest_commands'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_ns.CreateMACCommandQueueItemRequest_commands'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.CreateMACCommandQueueItemRequest'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        cons(NewFValue, Prev, TrUserData),
        TrUserData
    ).

'skip_varint_ns.CreateMACCommandQueueItemRequest'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'skip_varint_ns.CreateMACCommandQueueItemRequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'skip_varint_ns.CreateMACCommandQueueItemRequest'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'dfp_read_field_def_ns.CreateMACCommandQueueItemRequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

'skip_length_delimited_ns.CreateMACCommandQueueItemRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.CreateMACCommandQueueItemRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'skip_length_delimited_ns.CreateMACCommandQueueItemRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.CreateMACCommandQueueItemRequest'(
        Rest2,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

'skip_group_ns.CreateMACCommandQueueItemRequest'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.CreateMACCommandQueueItemRequest'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

'skip_32_ns.CreateMACCommandQueueItemRequest'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'dfp_read_field_def_ns.CreateMACCommandQueueItemRequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

'skip_64_ns.CreateMACCommandQueueItemRequest'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'dfp_read_field_def_ns.CreateMACCommandQueueItemRequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

'decode_msg_ns.SendProprietaryPayloadRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.SendProprietaryPayloadRequest'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        id([], TrUserData),
        id(false, TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.SendProprietaryPayloadRequest'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'd_field_ns.SendProprietaryPayloadRequest_mac_payload'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'dfp_read_field_def_ns.SendProprietaryPayloadRequest'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'd_field_ns.SendProprietaryPayloadRequest_mic'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'dfp_read_field_def_ns.SendProprietaryPayloadRequest'(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'd_field_ns.SendProprietaryPayloadRequest_gateway_macs'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'dfp_read_field_def_ns.SendProprietaryPayloadRequest'(
    <<32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'd_field_ns.SendProprietaryPayloadRequest_polarization_inversion'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'dfp_read_field_def_ns.SendProprietaryPayloadRequest'(
    <<40, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'd_field_ns.SendProprietaryPayloadRequest_frequency'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'dfp_read_field_def_ns.SendProprietaryPayloadRequest'(
    <<48, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'd_field_ns.SendProprietaryPayloadRequest_dr'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'dfp_read_field_def_ns.SendProprietaryPayloadRequest'(
    <<>>,
    0,
    0,
    _,
    F@_1,
    F@_2,
    R1,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    #'ns.SendProprietaryPayloadRequest'{
        mac_payload = F@_1,
        mic = F@_2,
        gateway_macs = lists_reverse(R1, TrUserData),
        polarization_inversion = F@_4,
        frequency = F@_5,
        dr = F@_6
    };
'dfp_read_field_def_ns.SendProprietaryPayloadRequest'(
    Other,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'dg_read_field_def_ns.SendProprietaryPayloadRequest'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'dg_read_field_def_ns.SendProprietaryPayloadRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.SendProprietaryPayloadRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'dg_read_field_def_ns.SendProprietaryPayloadRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.SendProprietaryPayloadRequest_mac_payload'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                TrUserData
            );
        18 ->
            'd_field_ns.SendProprietaryPayloadRequest_mic'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                TrUserData
            );
        26 ->
            'd_field_ns.SendProprietaryPayloadRequest_gateway_macs'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                TrUserData
            );
        32 ->
            'd_field_ns.SendProprietaryPayloadRequest_polarization_inversion'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                TrUserData
            );
        40 ->
            'd_field_ns.SendProprietaryPayloadRequest_frequency'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                TrUserData
            );
        48 ->
            'd_field_ns.SendProprietaryPayloadRequest_dr'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.SendProprietaryPayloadRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.SendProprietaryPayloadRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.SendProprietaryPayloadRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.SendProprietaryPayloadRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.SendProprietaryPayloadRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.SendProprietaryPayloadRequest'(
    <<>>,
    0,
    0,
    _,
    F@_1,
    F@_2,
    R1,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    #'ns.SendProprietaryPayloadRequest'{
        mac_payload = F@_1,
        mic = F@_2,
        gateway_macs = lists_reverse(R1, TrUserData),
        polarization_inversion = F@_4,
        frequency = F@_5,
        dr = F@_6
    }.

'd_field_ns.SendProprietaryPayloadRequest_mac_payload'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 57 ->
    'd_field_ns.SendProprietaryPayloadRequest_mac_payload'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'd_field_ns.SendProprietaryPayloadRequest_mac_payload'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.SendProprietaryPayloadRequest'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'd_field_ns.SendProprietaryPayloadRequest_mic'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 57 ->
    'd_field_ns.SendProprietaryPayloadRequest_mic'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'd_field_ns.SendProprietaryPayloadRequest_mic'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.SendProprietaryPayloadRequest'(
        RestF,
        0,
        0,
        F,
        F@_1,
        NewFValue,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'd_field_ns.SendProprietaryPayloadRequest_gateway_macs'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 57 ->
    'd_field_ns.SendProprietaryPayloadRequest_gateway_macs'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'd_field_ns.SendProprietaryPayloadRequest_gateway_macs'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    Prev,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.SendProprietaryPayloadRequest'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        cons(NewFValue, Prev, TrUserData),
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'd_field_ns.SendProprietaryPayloadRequest_polarization_inversion'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 57 ->
    'd_field_ns.SendProprietaryPayloadRequest_polarization_inversion'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'd_field_ns.SendProprietaryPayloadRequest_polarization_inversion'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    _,
    F@_5,
    F@_6,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_ns.SendProprietaryPayloadRequest'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        NewFValue,
        F@_5,
        F@_6,
        TrUserData
    ).

'd_field_ns.SendProprietaryPayloadRequest_frequency'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 57 ->
    'd_field_ns.SendProprietaryPayloadRequest_frequency'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'd_field_ns.SendProprietaryPayloadRequest_frequency'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _,
    F@_6,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_ns.SendProprietaryPayloadRequest'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        NewFValue,
        F@_6,
        TrUserData
    ).

'd_field_ns.SendProprietaryPayloadRequest_dr'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 57 ->
    'd_field_ns.SendProprietaryPayloadRequest_dr'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'd_field_ns.SendProprietaryPayloadRequest_dr'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_ns.SendProprietaryPayloadRequest'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        NewFValue,
        TrUserData
    ).

'skip_varint_ns.SendProprietaryPayloadRequest'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'skip_varint_ns.SendProprietaryPayloadRequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'skip_varint_ns.SendProprietaryPayloadRequest'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'dfp_read_field_def_ns.SendProprietaryPayloadRequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'skip_length_delimited_ns.SendProprietaryPayloadRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.SendProprietaryPayloadRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'skip_length_delimited_ns.SendProprietaryPayloadRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.SendProprietaryPayloadRequest'(
        Rest2,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'skip_group_ns.SendProprietaryPayloadRequest'(
    Bin,
    _,
    Z2,
    FNum,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.SendProprietaryPayloadRequest'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'skip_32_ns.SendProprietaryPayloadRequest'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'dfp_read_field_def_ns.SendProprietaryPayloadRequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'skip_64_ns.SendProprietaryPayloadRequest'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'dfp_read_field_def_ns.SendProprietaryPayloadRequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'decode_msg_ns.Gateway'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.Gateway'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id(undefined, TrUserData),
        id(<<>>, TrUserData),
        id([], TrUserData),
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.Gateway'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'd_field_ns.Gateway_id'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
'dfp_read_field_def_ns.Gateway'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'd_field_ns.Gateway_location'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
'dfp_read_field_def_ns.Gateway'(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'd_field_ns.Gateway_gateway_profile_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'dfp_read_field_def_ns.Gateway'(
    <<34, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'd_field_ns.Gateway_boards'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
'dfp_read_field_def_ns.Gateway'(
    <<42, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'd_field_ns.Gateway_routing_profile_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'dfp_read_field_def_ns.Gateway'(
    <<50, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'd_field_ns.Gateway_service_profile_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'dfp_read_field_def_ns.Gateway'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, R1, F@_5, F@_6, TrUserData) ->
    #'ns.Gateway'{
        id = F@_1,
        location = F@_2,
        gateway_profile_id = F@_3,
        boards = lists_reverse(R1, TrUserData),
        routing_profile_id = F@_5,
        service_profile_id = F@_6
    };
'dfp_read_field_def_ns.Gateway'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    'dg_read_field_def_ns.Gateway'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'dg_read_field_def_ns.Gateway'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.Gateway'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'dg_read_field_def_ns.Gateway'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.Gateway_id'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        18 ->
            'd_field_ns.Gateway_location'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                TrUserData
            );
        26 ->
            'd_field_ns.Gateway_gateway_profile_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                TrUserData
            );
        34 ->
            'd_field_ns.Gateway_boards'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                TrUserData
            );
        42 ->
            'd_field_ns.Gateway_routing_profile_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                TrUserData
            );
        50 ->
            'd_field_ns.Gateway_service_profile_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.Gateway'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.Gateway'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.Gateway'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.Gateway'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.Gateway'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.Gateway'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, R1, F@_5, F@_6, TrUserData) ->
    #'ns.Gateway'{
        id = F@_1,
        location = F@_2,
        gateway_profile_id = F@_3,
        boards = lists_reverse(R1, TrUserData),
        routing_profile_id = F@_5,
        service_profile_id = F@_6
    }.

'd_field_ns.Gateway_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 57 ->
    'd_field_ns.Gateway_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'd_field_ns.Gateway_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.Gateway'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'd_field_ns.Gateway_location'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 57 ->
    'd_field_ns.Gateway_location'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'd_field_ns.Gateway_location'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    Prev,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_common.Location'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.Gateway'(
        RestF,
        0,
        0,
        F,
        F@_1,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_common.Location'(Prev, NewFValue, TrUserData)
        end,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'd_field_ns.Gateway_gateway_profile_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 57 ->
    'd_field_ns.Gateway_gateway_profile_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'd_field_ns.Gateway_gateway_profile_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    _,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.Gateway'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        NewFValue,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'd_field_ns.Gateway_boards'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 57 ->
    'd_field_ns.Gateway_boards'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'd_field_ns.Gateway_boards'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    Prev,
    F@_5,
    F@_6,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_ns.GatewayBoard'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.Gateway'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        cons(NewFValue, Prev, TrUserData),
        F@_5,
        F@_6,
        TrUserData
    ).

'd_field_ns.Gateway_routing_profile_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 57 ->
    'd_field_ns.Gateway_routing_profile_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'd_field_ns.Gateway_routing_profile_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _,
    F@_6,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.Gateway'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        NewFValue,
        F@_6,
        TrUserData
    ).

'd_field_ns.Gateway_service_profile_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 57 ->
    'd_field_ns.Gateway_service_profile_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'd_field_ns.Gateway_service_profile_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.Gateway'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        NewFValue,
        TrUserData
    ).

'skip_varint_ns.Gateway'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'skip_varint_ns.Gateway'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
'skip_varint_ns.Gateway'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'dfp_read_field_def_ns.Gateway'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'skip_length_delimited_ns.Gateway'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.Gateway'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'skip_length_delimited_ns.Gateway'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.Gateway'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

'skip_group_ns.Gateway'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.Gateway'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'skip_32_ns.Gateway'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'dfp_read_field_def_ns.Gateway'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'skip_64_ns.Gateway'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'dfp_read_field_def_ns.Gateway'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'decode_msg_ns.GatewayBoard'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.GatewayBoard'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.GatewayBoard'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'd_field_ns.GatewayBoard_fpga_id'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_ns.GatewayBoard'(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'd_field_ns.GatewayBoard_fine_timestamp_key'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_ns.GatewayBoard'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'ns.GatewayBoard'{fpga_id = F@_1, fine_timestamp_key = F@_2};
'dfp_read_field_def_ns.GatewayBoard'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_ns.GatewayBoard'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_ns.GatewayBoard'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.GatewayBoard'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'dg_read_field_def_ns.GatewayBoard'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.GatewayBoard_fpga_id'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 ->
            'd_field_ns.GatewayBoard_fine_timestamp_key'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.GatewayBoard'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 ->
                    'skip_64_ns.GatewayBoard'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 ->
                    'skip_length_delimited_ns.GatewayBoard'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.GatewayBoard'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 ->
                    'skip_32_ns.GatewayBoard'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_ns.GatewayBoard'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'ns.GatewayBoard'{fpga_id = F@_1, fine_timestamp_key = F@_2}.

'd_field_ns.GatewayBoard_fpga_id'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when
    N < 57
->
    'd_field_ns.GatewayBoard_fpga_id'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_ns.GatewayBoard_fpga_id'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GatewayBoard'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_ns.GatewayBoard_fine_timestamp_key'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_ns.GatewayBoard_fine_timestamp_key'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'd_field_ns.GatewayBoard_fine_timestamp_key'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GatewayBoard'(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

'skip_varint_ns.GatewayBoard'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'skip_varint_ns.GatewayBoard'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_ns.GatewayBoard'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ns.GatewayBoard'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_ns.GatewayBoard'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.GatewayBoard'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'skip_length_delimited_ns.GatewayBoard'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.GatewayBoard'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_ns.GatewayBoard'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.GatewayBoard'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_ns.GatewayBoard'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ns.GatewayBoard'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_ns.GatewayBoard'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ns.GatewayBoard'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'decode_msg_ns.CreateGatewayRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.CreateGatewayRequest'(
        Bin,
        0,
        0,
        0,
        id(undefined, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.CreateGatewayRequest'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'd_field_ns.CreateGatewayRequest_gateway'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.CreateGatewayRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.CreateGatewayRequest'{gateway = F@_1};
'dfp_read_field_def_ns.CreateGatewayRequest'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.CreateGatewayRequest'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.CreateGatewayRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.CreateGatewayRequest'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'dg_read_field_def_ns.CreateGatewayRequest'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.CreateGatewayRequest_gateway'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.CreateGatewayRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 ->
                    'skip_64_ns.CreateGatewayRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 ->
                    'skip_length_delimited_ns.CreateGatewayRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.CreateGatewayRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 ->
                    'skip_32_ns.CreateGatewayRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
'dg_read_field_def_ns.CreateGatewayRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.CreateGatewayRequest'{gateway = F@_1}.

'd_field_ns.CreateGatewayRequest_gateway'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.CreateGatewayRequest_gateway'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'd_field_ns.CreateGatewayRequest_gateway'(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_ns.Gateway'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.CreateGatewayRequest'(
        RestF,
        0,
        0,
        F,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_ns.Gateway'(Prev, NewFValue, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_ns.CreateGatewayRequest'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'skip_varint_ns.CreateGatewayRequest'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.CreateGatewayRequest'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.CreateGatewayRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.CreateGatewayRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.CreateGatewayRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.CreateGatewayRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.CreateGatewayRequest'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.CreateGatewayRequest'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.CreateGatewayRequest'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_ns.CreateGatewayRequest'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.CreateGatewayRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.CreateGatewayRequest'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.CreateGatewayRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.GetGatewayRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.GetGatewayRequest'(Bin, 0, 0, 0, id(<<>>, TrUserData), TrUserData).

'dfp_read_field_def_ns.GetGatewayRequest'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'd_field_ns.GetGatewayRequest_id'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.GetGatewayRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.GetGatewayRequest'{id = F@_1};
'dfp_read_field_def_ns.GetGatewayRequest'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.GetGatewayRequest'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.GetGatewayRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.GetGatewayRequest'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'dg_read_field_def_ns.GetGatewayRequest'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.GetGatewayRequest_id'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.GetGatewayRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 ->
                    'skip_64_ns.GetGatewayRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 ->
                    'skip_length_delimited_ns.GetGatewayRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.GetGatewayRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 ->
                    'skip_32_ns.GetGatewayRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
'dg_read_field_def_ns.GetGatewayRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.GetGatewayRequest'{id = F@_1}.

'd_field_ns.GetGatewayRequest_id'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when
    N < 57
->
    'd_field_ns.GetGatewayRequest_id'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'd_field_ns.GetGatewayRequest_id'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GetGatewayRequest'(RestF, 0, 0, F, NewFValue, TrUserData).

'skip_varint_ns.GetGatewayRequest'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'skip_varint_ns.GetGatewayRequest'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.GetGatewayRequest'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.GetGatewayRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.GetGatewayRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.GetGatewayRequest'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'skip_length_delimited_ns.GetGatewayRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.GetGatewayRequest'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.GetGatewayRequest'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.GetGatewayRequest'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_ns.GetGatewayRequest'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.GetGatewayRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.GetGatewayRequest'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.GetGatewayRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.GetGatewayResponse'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.GetGatewayResponse'(
        Bin,
        0,
        0,
        0,
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.GetGatewayResponse'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_ns.GetGatewayResponse_gateway'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_ns.GetGatewayResponse'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_ns.GetGatewayResponse_created_at'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_ns.GetGatewayResponse'(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_ns.GetGatewayResponse_updated_at'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_ns.GetGatewayResponse'(
    <<34, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_ns.GetGatewayResponse_first_seen_at'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_ns.GetGatewayResponse'(
    <<42, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_ns.GetGatewayResponse_last_seen_at'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_ns.GetGatewayResponse'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    #'ns.GetGatewayResponse'{
        gateway = F@_1,
        created_at = F@_2,
        updated_at = F@_3,
        first_seen_at = F@_4,
        last_seen_at = F@_5
    };
'dfp_read_field_def_ns.GetGatewayResponse'(
    Other,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dg_read_field_def_ns.GetGatewayResponse'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'dg_read_field_def_ns.GetGatewayResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.GetGatewayResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dg_read_field_def_ns.GetGatewayResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.GetGatewayResponse_gateway'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        18 ->
            'd_field_ns.GetGatewayResponse_created_at'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        26 ->
            'd_field_ns.GetGatewayResponse_updated_at'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        34 ->
            'd_field_ns.GetGatewayResponse_first_seen_at'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        42 ->
            'd_field_ns.GetGatewayResponse_last_seen_at'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.GetGatewayResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.GetGatewayResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.GetGatewayResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.GetGatewayResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.GetGatewayResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.GetGatewayResponse'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    #'ns.GetGatewayResponse'{
        gateway = F@_1,
        created_at = F@_2,
        updated_at = F@_3,
        first_seen_at = F@_4,
        last_seen_at = F@_5
    }.

'd_field_ns.GetGatewayResponse_gateway'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_ns.GetGatewayResponse_gateway'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_ns.GetGatewayResponse_gateway'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    Prev,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_ns.Gateway'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GetGatewayResponse'(
        RestF,
        0,
        0,
        F,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_ns.Gateway'(Prev, NewFValue, TrUserData)
        end,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'd_field_ns.GetGatewayResponse_created_at'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_ns.GetGatewayResponse_created_at'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_ns.GetGatewayResponse_created_at'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    Prev,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Timestamp'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GetGatewayResponse'(
        RestF,
        0,
        0,
        F,
        F@_1,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Timestamp'(Prev, NewFValue, TrUserData)
        end,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'd_field_ns.GetGatewayResponse_updated_at'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_ns.GetGatewayResponse_updated_at'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_ns.GetGatewayResponse_updated_at'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    Prev,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Timestamp'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GetGatewayResponse'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Timestamp'(Prev, NewFValue, TrUserData)
        end,
        F@_4,
        F@_5,
        TrUserData
    ).

'd_field_ns.GetGatewayResponse_first_seen_at'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_ns.GetGatewayResponse_first_seen_at'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_ns.GetGatewayResponse_first_seen_at'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    Prev,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Timestamp'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GetGatewayResponse'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Timestamp'(Prev, NewFValue, TrUserData)
        end,
        F@_5,
        TrUserData
    ).

'd_field_ns.GetGatewayResponse_last_seen_at'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_ns.GetGatewayResponse_last_seen_at'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_ns.GetGatewayResponse_last_seen_at'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Timestamp'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GetGatewayResponse'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Timestamp'(Prev, NewFValue, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_ns.GetGatewayResponse'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'skip_varint_ns.GetGatewayResponse'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'skip_varint_ns.GetGatewayResponse'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_ns.GetGatewayResponse'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'skip_length_delimited_ns.GetGatewayResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.GetGatewayResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'skip_length_delimited_ns.GetGatewayResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.GetGatewayResponse'(
        Rest2,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'skip_group_ns.GetGatewayResponse'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.GetGatewayResponse'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'skip_32_ns.GetGatewayResponse'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_ns.GetGatewayResponse'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'skip_64_ns.GetGatewayResponse'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_ns.GetGatewayResponse'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'decode_msg_ns.UpdateGatewayRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.UpdateGatewayRequest'(
        Bin,
        0,
        0,
        0,
        id(undefined, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.UpdateGatewayRequest'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'd_field_ns.UpdateGatewayRequest_gateway'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.UpdateGatewayRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.UpdateGatewayRequest'{gateway = F@_1};
'dfp_read_field_def_ns.UpdateGatewayRequest'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.UpdateGatewayRequest'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.UpdateGatewayRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.UpdateGatewayRequest'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'dg_read_field_def_ns.UpdateGatewayRequest'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.UpdateGatewayRequest_gateway'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.UpdateGatewayRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 ->
                    'skip_64_ns.UpdateGatewayRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 ->
                    'skip_length_delimited_ns.UpdateGatewayRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.UpdateGatewayRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 ->
                    'skip_32_ns.UpdateGatewayRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
'dg_read_field_def_ns.UpdateGatewayRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.UpdateGatewayRequest'{gateway = F@_1}.

'd_field_ns.UpdateGatewayRequest_gateway'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.UpdateGatewayRequest_gateway'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'd_field_ns.UpdateGatewayRequest_gateway'(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_ns.Gateway'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.UpdateGatewayRequest'(
        RestF,
        0,
        0,
        F,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_ns.Gateway'(Prev, NewFValue, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_ns.UpdateGatewayRequest'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'skip_varint_ns.UpdateGatewayRequest'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.UpdateGatewayRequest'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.UpdateGatewayRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.UpdateGatewayRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.UpdateGatewayRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.UpdateGatewayRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.UpdateGatewayRequest'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.UpdateGatewayRequest'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.UpdateGatewayRequest'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_ns.UpdateGatewayRequest'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.UpdateGatewayRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.UpdateGatewayRequest'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.UpdateGatewayRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.DeleteGatewayRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.DeleteGatewayRequest'(Bin, 0, 0, 0, id(<<>>, TrUserData), TrUserData).

'dfp_read_field_def_ns.DeleteGatewayRequest'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'd_field_ns.DeleteGatewayRequest_id'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.DeleteGatewayRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.DeleteGatewayRequest'{id = F@_1};
'dfp_read_field_def_ns.DeleteGatewayRequest'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.DeleteGatewayRequest'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.DeleteGatewayRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.DeleteGatewayRequest'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'dg_read_field_def_ns.DeleteGatewayRequest'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.DeleteGatewayRequest_id'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.DeleteGatewayRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 ->
                    'skip_64_ns.DeleteGatewayRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 ->
                    'skip_length_delimited_ns.DeleteGatewayRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.DeleteGatewayRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 ->
                    'skip_32_ns.DeleteGatewayRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
'dg_read_field_def_ns.DeleteGatewayRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.DeleteGatewayRequest'{id = F@_1}.

'd_field_ns.DeleteGatewayRequest_id'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when
    N < 57
->
    'd_field_ns.DeleteGatewayRequest_id'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'd_field_ns.DeleteGatewayRequest_id'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.DeleteGatewayRequest'(RestF, 0, 0, F, NewFValue, TrUserData).

'skip_varint_ns.DeleteGatewayRequest'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'skip_varint_ns.DeleteGatewayRequest'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.DeleteGatewayRequest'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.DeleteGatewayRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.DeleteGatewayRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.DeleteGatewayRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.DeleteGatewayRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.DeleteGatewayRequest'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.DeleteGatewayRequest'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.DeleteGatewayRequest'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_ns.DeleteGatewayRequest'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.DeleteGatewayRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.DeleteGatewayRequest'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.DeleteGatewayRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.GenerateGatewayClientCertificateRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.GenerateGatewayClientCertificateRequest'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.GenerateGatewayClientCertificateRequest'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'd_field_ns.GenerateGatewayClientCertificateRequest_id'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.GenerateGatewayClientCertificateRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.GenerateGatewayClientCertificateRequest'{id = F@_1};
'dfp_read_field_def_ns.GenerateGatewayClientCertificateRequest'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.GenerateGatewayClientCertificateRequest'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        TrUserData
    ).

'dg_read_field_def_ns.GenerateGatewayClientCertificateRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.GenerateGatewayClientCertificateRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'dg_read_field_def_ns.GenerateGatewayClientCertificateRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.GenerateGatewayClientCertificateRequest_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.GenerateGatewayClientCertificateRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.GenerateGatewayClientCertificateRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.GenerateGatewayClientCertificateRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.GenerateGatewayClientCertificateRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.GenerateGatewayClientCertificateRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.GenerateGatewayClientCertificateRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.GenerateGatewayClientCertificateRequest'{id = F@_1}.

'd_field_ns.GenerateGatewayClientCertificateRequest_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.GenerateGatewayClientCertificateRequest_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'd_field_ns.GenerateGatewayClientCertificateRequest_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GenerateGatewayClientCertificateRequest'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        TrUserData
    ).

'skip_varint_ns.GenerateGatewayClientCertificateRequest'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'skip_varint_ns.GenerateGatewayClientCertificateRequest'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.GenerateGatewayClientCertificateRequest'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_ns.GenerateGatewayClientCertificateRequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        TrUserData
    ).

'skip_length_delimited_ns.GenerateGatewayClientCertificateRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.GenerateGatewayClientCertificateRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.GenerateGatewayClientCertificateRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.GenerateGatewayClientCertificateRequest'(
        Rest2,
        0,
        0,
        F,
        F@_1,
        TrUserData
    ).

'skip_group_ns.GenerateGatewayClientCertificateRequest'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.GenerateGatewayClientCertificateRequest'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        TrUserData
    ).

'skip_32_ns.GenerateGatewayClientCertificateRequest'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_ns.GenerateGatewayClientCertificateRequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        TrUserData
    ).

'skip_64_ns.GenerateGatewayClientCertificateRequest'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_ns.GenerateGatewayClientCertificateRequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        TrUserData
    ).

'decode_msg_ns.GenerateGatewayClientCertificateResponse'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.GenerateGatewayClientCertificateResponse'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        id(undefined, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.GenerateGatewayClientCertificateResponse'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'd_field_ns.GenerateGatewayClientCertificateResponse_tls_cert'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'dfp_read_field_def_ns.GenerateGatewayClientCertificateResponse'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'd_field_ns.GenerateGatewayClientCertificateResponse_tls_key'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'dfp_read_field_def_ns.GenerateGatewayClientCertificateResponse'(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'd_field_ns.GenerateGatewayClientCertificateResponse_ca_cert'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'dfp_read_field_def_ns.GenerateGatewayClientCertificateResponse'(
    <<34, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'd_field_ns.GenerateGatewayClientCertificateResponse_expires_at'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'dfp_read_field_def_ns.GenerateGatewayClientCertificateResponse'(
    <<>>,
    0,
    0,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _
) ->
    #'ns.GenerateGatewayClientCertificateResponse'{
        tls_cert = F@_1,
        tls_key = F@_2,
        ca_cert = F@_3,
        expires_at = F@_4
    };
'dfp_read_field_def_ns.GenerateGatewayClientCertificateResponse'(
    Other,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'dg_read_field_def_ns.GenerateGatewayClientCertificateResponse'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

'dg_read_field_def_ns.GenerateGatewayClientCertificateResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.GenerateGatewayClientCertificateResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'dg_read_field_def_ns.GenerateGatewayClientCertificateResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.GenerateGatewayClientCertificateResponse_tls_cert'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        18 ->
            'd_field_ns.GenerateGatewayClientCertificateResponse_tls_key'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        26 ->
            'd_field_ns.GenerateGatewayClientCertificateResponse_ca_cert'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        34 ->
            'd_field_ns.GenerateGatewayClientCertificateResponse_expires_at'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.GenerateGatewayClientCertificateResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.GenerateGatewayClientCertificateResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.GenerateGatewayClientCertificateResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.GenerateGatewayClientCertificateResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.GenerateGatewayClientCertificateResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.GenerateGatewayClientCertificateResponse'(
    <<>>,
    0,
    0,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _
) ->
    #'ns.GenerateGatewayClientCertificateResponse'{
        tls_cert = F@_1,
        tls_key = F@_2,
        ca_cert = F@_3,
        expires_at = F@_4
    }.

'd_field_ns.GenerateGatewayClientCertificateResponse_tls_cert'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    'd_field_ns.GenerateGatewayClientCertificateResponse_tls_cert'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'd_field_ns.GenerateGatewayClientCertificateResponse_tls_cert'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GenerateGatewayClientCertificateResponse'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

'd_field_ns.GenerateGatewayClientCertificateResponse_tls_key'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    'd_field_ns.GenerateGatewayClientCertificateResponse_tls_key'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'd_field_ns.GenerateGatewayClientCertificateResponse_tls_key'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    F@_3,
    F@_4,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GenerateGatewayClientCertificateResponse'(
        RestF,
        0,
        0,
        F,
        F@_1,
        NewFValue,
        F@_3,
        F@_4,
        TrUserData
    ).

'd_field_ns.GenerateGatewayClientCertificateResponse_ca_cert'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    'd_field_ns.GenerateGatewayClientCertificateResponse_ca_cert'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'd_field_ns.GenerateGatewayClientCertificateResponse_ca_cert'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    _,
    F@_4,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GenerateGatewayClientCertificateResponse'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        NewFValue,
        F@_4,
        TrUserData
    ).

'd_field_ns.GenerateGatewayClientCertificateResponse_expires_at'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    'd_field_ns.GenerateGatewayClientCertificateResponse_expires_at'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'd_field_ns.GenerateGatewayClientCertificateResponse_expires_at'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Timestamp'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GenerateGatewayClientCertificateResponse'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Timestamp'(Prev, NewFValue, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_ns.GenerateGatewayClientCertificateResponse'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'skip_varint_ns.GenerateGatewayClientCertificateResponse'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'skip_varint_ns.GenerateGatewayClientCertificateResponse'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'dfp_read_field_def_ns.GenerateGatewayClientCertificateResponse'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

'skip_length_delimited_ns.GenerateGatewayClientCertificateResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.GenerateGatewayClientCertificateResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'skip_length_delimited_ns.GenerateGatewayClientCertificateResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.GenerateGatewayClientCertificateResponse'(
        Rest2,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

'skip_group_ns.GenerateGatewayClientCertificateResponse'(
    Bin,
    _,
    Z2,
    FNum,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.GenerateGatewayClientCertificateResponse'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

'skip_32_ns.GenerateGatewayClientCertificateResponse'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'dfp_read_field_def_ns.GenerateGatewayClientCertificateResponse'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

'skip_64_ns.GenerateGatewayClientCertificateResponse'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'dfp_read_field_def_ns.GenerateGatewayClientCertificateResponse'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

'decode_msg_ns.GatewayStats'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.GatewayStats'(
        Bin,
        0,
        0,
        0,
        id(undefined, TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.GatewayStats'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_ns.GatewayStats_timestamp'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_ns.GatewayStats'(
    <<16, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_ns.GatewayStats_rx_packets_received'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_ns.GatewayStats'(
    <<24, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_ns.GatewayStats_rx_packets_received_ok'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_ns.GatewayStats'(
    <<32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_ns.GatewayStats_tx_packets_received'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_ns.GatewayStats'(
    <<40, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_ns.GatewayStats_tx_packets_emitted'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_ns.GatewayStats'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    #'ns.GatewayStats'{
        timestamp = F@_1,
        rx_packets_received = F@_2,
        rx_packets_received_ok = F@_3,
        tx_packets_received = F@_4,
        tx_packets_emitted = F@_5
    };
'dfp_read_field_def_ns.GatewayStats'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    'dg_read_field_def_ns.GatewayStats'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'dg_read_field_def_ns.GatewayStats'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.GatewayStats'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dg_read_field_def_ns.GatewayStats'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.GatewayStats_timestamp'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        16 ->
            'd_field_ns.GatewayStats_rx_packets_received'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        24 ->
            'd_field_ns.GatewayStats_rx_packets_received_ok'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        32 ->
            'd_field_ns.GatewayStats_tx_packets_received'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        40 ->
            'd_field_ns.GatewayStats_tx_packets_emitted'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.GatewayStats'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.GatewayStats'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.GatewayStats'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.GatewayStats'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.GatewayStats'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.GatewayStats'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    #'ns.GatewayStats'{
        timestamp = F@_1,
        rx_packets_received = F@_2,
        rx_packets_received_ok = F@_3,
        tx_packets_received = F@_4,
        tx_packets_emitted = F@_5
    }.

'd_field_ns.GatewayStats_timestamp'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_ns.GatewayStats_timestamp'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_ns.GatewayStats_timestamp'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    Prev,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Timestamp'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GatewayStats'(
        RestF,
        0,
        0,
        F,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Timestamp'(Prev, NewFValue, TrUserData)
        end,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'd_field_ns.GatewayStats_rx_packets_received'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_ns.GatewayStats_rx_packets_received'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_ns.GatewayStats_rx_packets_received'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} =
        {begin
                <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>,
                id(Res, TrUserData)
            end,
            Rest},
    'dfp_read_field_def_ns.GatewayStats'(
        RestF,
        0,
        0,
        F,
        F@_1,
        NewFValue,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'd_field_ns.GatewayStats_rx_packets_received_ok'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_ns.GatewayStats_rx_packets_received_ok'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_ns.GatewayStats_rx_packets_received_ok'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    _,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} =
        {begin
                <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>,
                id(Res, TrUserData)
            end,
            Rest},
    'dfp_read_field_def_ns.GatewayStats'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        NewFValue,
        F@_4,
        F@_5,
        TrUserData
    ).

'd_field_ns.GatewayStats_tx_packets_received'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_ns.GatewayStats_tx_packets_received'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_ns.GatewayStats_tx_packets_received'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    _,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} =
        {begin
                <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>,
                id(Res, TrUserData)
            end,
            Rest},
    'dfp_read_field_def_ns.GatewayStats'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        NewFValue,
        F@_5,
        TrUserData
    ).

'd_field_ns.GatewayStats_tx_packets_emitted'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_ns.GatewayStats_tx_packets_emitted'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_ns.GatewayStats_tx_packets_emitted'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _,
    TrUserData
) ->
    {NewFValue, RestF} =
        {begin
                <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>,
                id(Res, TrUserData)
            end,
            Rest},
    'dfp_read_field_def_ns.GatewayStats'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        NewFValue,
        TrUserData
    ).

'skip_varint_ns.GatewayStats'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'skip_varint_ns.GatewayStats'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'skip_varint_ns.GatewayStats'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_ns.GatewayStats'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'skip_length_delimited_ns.GatewayStats'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.GatewayStats'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'skip_length_delimited_ns.GatewayStats'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.GatewayStats'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'skip_group_ns.GatewayStats'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.GatewayStats'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'skip_32_ns.GatewayStats'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_ns.GatewayStats'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'skip_64_ns.GatewayStats'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_ns.GatewayStats'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'decode_msg_ns.GetGatewayStatsRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.GetGatewayStatsRequest'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id('SECOND', TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.GetGatewayStatsRequest'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'd_field_ns.GetGatewayStatsRequest_gateway_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'dfp_read_field_def_ns.GetGatewayStatsRequest'(
    <<16, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'd_field_ns.GetGatewayStatsRequest_interval'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'dfp_read_field_def_ns.GetGatewayStatsRequest'(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'd_field_ns.GetGatewayStatsRequest_start_timestamp'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'dfp_read_field_def_ns.GetGatewayStatsRequest'(
    <<34, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'd_field_ns.GetGatewayStatsRequest_end_timestamp'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'dfp_read_field_def_ns.GetGatewayStatsRequest'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) ->
    #'ns.GetGatewayStatsRequest'{
        gateway_id = F@_1,
        interval = F@_2,
        start_timestamp = F@_3,
        end_timestamp = F@_4
    };
'dfp_read_field_def_ns.GetGatewayStatsRequest'(
    Other,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'dg_read_field_def_ns.GetGatewayStatsRequest'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

'dg_read_field_def_ns.GetGatewayStatsRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.GetGatewayStatsRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'dg_read_field_def_ns.GetGatewayStatsRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.GetGatewayStatsRequest_gateway_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        16 ->
            'd_field_ns.GetGatewayStatsRequest_interval'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        26 ->
            'd_field_ns.GetGatewayStatsRequest_start_timestamp'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        34 ->
            'd_field_ns.GetGatewayStatsRequest_end_timestamp'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.GetGatewayStatsRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.GetGatewayStatsRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.GetGatewayStatsRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.GetGatewayStatsRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.GetGatewayStatsRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.GetGatewayStatsRequest'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) ->
    #'ns.GetGatewayStatsRequest'{
        gateway_id = F@_1,
        interval = F@_2,
        start_timestamp = F@_3,
        end_timestamp = F@_4
    }.

'd_field_ns.GetGatewayStatsRequest_gateway_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    'd_field_ns.GetGatewayStatsRequest_gateway_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'd_field_ns.GetGatewayStatsRequest_gateway_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GetGatewayStatsRequest'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

'd_field_ns.GetGatewayStatsRequest_interval'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    'd_field_ns.GetGatewayStatsRequest_interval'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'd_field_ns.GetGatewayStatsRequest_interval'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    F@_3,
    F@_4,
    TrUserData
) ->
    {NewFValue, RestF} =
        {id(
                'd_enum_ns.AggregationInterval'(begin
                    <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>,
                    id(Res, TrUserData)
                end),
                TrUserData
            ),
            Rest},
    'dfp_read_field_def_ns.GetGatewayStatsRequest'(
        RestF,
        0,
        0,
        F,
        F@_1,
        NewFValue,
        F@_3,
        F@_4,
        TrUserData
    ).

'd_field_ns.GetGatewayStatsRequest_start_timestamp'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    'd_field_ns.GetGatewayStatsRequest_start_timestamp'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'd_field_ns.GetGatewayStatsRequest_start_timestamp'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    Prev,
    F@_4,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Timestamp'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GetGatewayStatsRequest'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Timestamp'(Prev, NewFValue, TrUserData)
        end,
        F@_4,
        TrUserData
    ).

'd_field_ns.GetGatewayStatsRequest_end_timestamp'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    'd_field_ns.GetGatewayStatsRequest_end_timestamp'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'd_field_ns.GetGatewayStatsRequest_end_timestamp'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Timestamp'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GetGatewayStatsRequest'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Timestamp'(Prev, NewFValue, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_ns.GetGatewayStatsRequest'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'skip_varint_ns.GetGatewayStatsRequest'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'skip_varint_ns.GetGatewayStatsRequest'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'dfp_read_field_def_ns.GetGatewayStatsRequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

'skip_length_delimited_ns.GetGatewayStatsRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.GetGatewayStatsRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'skip_length_delimited_ns.GetGatewayStatsRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.GetGatewayStatsRequest'(
        Rest2,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

'skip_group_ns.GetGatewayStatsRequest'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.GetGatewayStatsRequest'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

'skip_32_ns.GetGatewayStatsRequest'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'dfp_read_field_def_ns.GetGatewayStatsRequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

'skip_64_ns.GetGatewayStatsRequest'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'dfp_read_field_def_ns.GetGatewayStatsRequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

'decode_msg_ns.GetGatewayStatsResponse'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.GetGatewayStatsResponse'(Bin, 0, 0, 0, id([], TrUserData), TrUserData).

'dfp_read_field_def_ns.GetGatewayStatsResponse'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'd_field_ns.GetGatewayStatsResponse_result'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.GetGatewayStatsResponse'(<<>>, 0, 0, _, R1, TrUserData) ->
    #'ns.GetGatewayStatsResponse'{result = lists_reverse(R1, TrUserData)};
'dfp_read_field_def_ns.GetGatewayStatsResponse'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.GetGatewayStatsResponse'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.GetGatewayStatsResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.GetGatewayStatsResponse'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'dg_read_field_def_ns.GetGatewayStatsResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.GetGatewayStatsResponse_result'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.GetGatewayStatsResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.GetGatewayStatsResponse'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 ->
                    'skip_length_delimited_ns.GetGatewayStatsResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.GetGatewayStatsResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.GetGatewayStatsResponse'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
'dg_read_field_def_ns.GetGatewayStatsResponse'(<<>>, 0, 0, _, R1, TrUserData) ->
    #'ns.GetGatewayStatsResponse'{result = lists_reverse(R1, TrUserData)}.

'd_field_ns.GetGatewayStatsResponse_result'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.GetGatewayStatsResponse_result'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'd_field_ns.GetGatewayStatsResponse_result'(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_ns.GatewayStats'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GetGatewayStatsResponse'(
        RestF,
        0,
        0,
        F,
        cons(NewFValue, Prev, TrUserData),
        TrUserData
    ).

'skip_varint_ns.GetGatewayStatsResponse'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'skip_varint_ns.GetGatewayStatsResponse'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.GetGatewayStatsResponse'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.GetGatewayStatsResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.GetGatewayStatsResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.GetGatewayStatsResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.GetGatewayStatsResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.GetGatewayStatsResponse'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.GetGatewayStatsResponse'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.GetGatewayStatsResponse'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_ns.GetGatewayStatsResponse'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.GetGatewayStatsResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.GetGatewayStatsResponse'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.GetGatewayStatsResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.DeviceQueueItem'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.DeviceQueueItem'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        id(false, TrUserData),
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.DeviceQueueItem'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'd_field_ns.DeviceQueueItem_dev_eui'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'dfp_read_field_def_ns.DeviceQueueItem'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'd_field_ns.DeviceQueueItem_frm_payload'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'dfp_read_field_def_ns.DeviceQueueItem'(
    <<24, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'd_field_ns.DeviceQueueItem_f_cnt'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'dfp_read_field_def_ns.DeviceQueueItem'(
    <<32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'd_field_ns.DeviceQueueItem_f_port'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'dfp_read_field_def_ns.DeviceQueueItem'(
    <<40, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'd_field_ns.DeviceQueueItem_confirmed'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'dfp_read_field_def_ns.DeviceQueueItem'(
    <<50, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'd_field_ns.DeviceQueueItem_dev_addr'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'dfp_read_field_def_ns.DeviceQueueItem'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _) ->
    #'ns.DeviceQueueItem'{
        dev_eui = F@_1,
        frm_payload = F@_2,
        f_cnt = F@_3,
        f_port = F@_4,
        confirmed = F@_5,
        dev_addr = F@_6
    };
'dfp_read_field_def_ns.DeviceQueueItem'(
    Other,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'dg_read_field_def_ns.DeviceQueueItem'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'dg_read_field_def_ns.DeviceQueueItem'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.DeviceQueueItem'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'dg_read_field_def_ns.DeviceQueueItem'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.DeviceQueueItem_dev_eui'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                TrUserData
            );
        18 ->
            'd_field_ns.DeviceQueueItem_frm_payload'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                TrUserData
            );
        24 ->
            'd_field_ns.DeviceQueueItem_f_cnt'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                TrUserData
            );
        32 ->
            'd_field_ns.DeviceQueueItem_f_port'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                TrUserData
            );
        40 ->
            'd_field_ns.DeviceQueueItem_confirmed'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                TrUserData
            );
        50 ->
            'd_field_ns.DeviceQueueItem_dev_addr'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.DeviceQueueItem'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.DeviceQueueItem'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.DeviceQueueItem'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.DeviceQueueItem'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.DeviceQueueItem'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.DeviceQueueItem'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _) ->
    #'ns.DeviceQueueItem'{
        dev_eui = F@_1,
        frm_payload = F@_2,
        f_cnt = F@_3,
        f_port = F@_4,
        confirmed = F@_5,
        dev_addr = F@_6
    }.

'd_field_ns.DeviceQueueItem_dev_eui'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 57 ->
    'd_field_ns.DeviceQueueItem_dev_eui'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'd_field_ns.DeviceQueueItem_dev_eui'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.DeviceQueueItem'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'd_field_ns.DeviceQueueItem_frm_payload'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 57 ->
    'd_field_ns.DeviceQueueItem_frm_payload'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'd_field_ns.DeviceQueueItem_frm_payload'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.DeviceQueueItem'(
        RestF,
        0,
        0,
        F,
        F@_1,
        NewFValue,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'd_field_ns.DeviceQueueItem_f_cnt'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 57 ->
    'd_field_ns.DeviceQueueItem_f_cnt'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'd_field_ns.DeviceQueueItem_f_cnt'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    _,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_ns.DeviceQueueItem'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        NewFValue,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'd_field_ns.DeviceQueueItem_f_port'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 57 ->
    'd_field_ns.DeviceQueueItem_f_port'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'd_field_ns.DeviceQueueItem_f_port'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    _,
    F@_5,
    F@_6,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_ns.DeviceQueueItem'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        NewFValue,
        F@_5,
        F@_6,
        TrUserData
    ).

'd_field_ns.DeviceQueueItem_confirmed'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 57 ->
    'd_field_ns.DeviceQueueItem_confirmed'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'd_field_ns.DeviceQueueItem_confirmed'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _,
    F@_6,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_ns.DeviceQueueItem'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        NewFValue,
        F@_6,
        TrUserData
    ).

'd_field_ns.DeviceQueueItem_dev_addr'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 57 ->
    'd_field_ns.DeviceQueueItem_dev_addr'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'd_field_ns.DeviceQueueItem_dev_addr'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.DeviceQueueItem'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        NewFValue,
        TrUserData
    ).

'skip_varint_ns.DeviceQueueItem'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'skip_varint_ns.DeviceQueueItem'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'skip_varint_ns.DeviceQueueItem'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'dfp_read_field_def_ns.DeviceQueueItem'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'skip_length_delimited_ns.DeviceQueueItem'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.DeviceQueueItem'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'skip_length_delimited_ns.DeviceQueueItem'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.DeviceQueueItem'(
        Rest2,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'skip_group_ns.DeviceQueueItem'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.DeviceQueueItem'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'skip_32_ns.DeviceQueueItem'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'dfp_read_field_def_ns.DeviceQueueItem'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'skip_64_ns.DeviceQueueItem'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'dfp_read_field_def_ns.DeviceQueueItem'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'decode_msg_ns.CreateDeviceQueueItemRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.CreateDeviceQueueItemRequest'(
        Bin,
        0,
        0,
        0,
        id(undefined, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.CreateDeviceQueueItemRequest'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'd_field_ns.CreateDeviceQueueItemRequest_item'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.CreateDeviceQueueItemRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.CreateDeviceQueueItemRequest'{item = F@_1};
'dfp_read_field_def_ns.CreateDeviceQueueItemRequest'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.CreateDeviceQueueItemRequest'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.CreateDeviceQueueItemRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.CreateDeviceQueueItemRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'dg_read_field_def_ns.CreateDeviceQueueItemRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.CreateDeviceQueueItemRequest_item'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.CreateDeviceQueueItemRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.CreateDeviceQueueItemRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.CreateDeviceQueueItemRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.CreateDeviceQueueItemRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.CreateDeviceQueueItemRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.CreateDeviceQueueItemRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.CreateDeviceQueueItemRequest'{item = F@_1}.

'd_field_ns.CreateDeviceQueueItemRequest_item'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.CreateDeviceQueueItemRequest_item'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'd_field_ns.CreateDeviceQueueItemRequest_item'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_ns.DeviceQueueItem'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.CreateDeviceQueueItemRequest'(
        RestF,
        0,
        0,
        F,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_ns.DeviceQueueItem'(Prev, NewFValue, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_ns.CreateDeviceQueueItemRequest'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'skip_varint_ns.CreateDeviceQueueItemRequest'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.CreateDeviceQueueItemRequest'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_ns.CreateDeviceQueueItemRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.CreateDeviceQueueItemRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.CreateDeviceQueueItemRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.CreateDeviceQueueItemRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.CreateDeviceQueueItemRequest'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.CreateDeviceQueueItemRequest'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.CreateDeviceQueueItemRequest'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_ns.CreateDeviceQueueItemRequest'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.CreateDeviceQueueItemRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.CreateDeviceQueueItemRequest'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.CreateDeviceQueueItemRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.FlushDeviceQueueForDevEUIRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.FlushDeviceQueueForDevEUIRequest'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.FlushDeviceQueueForDevEUIRequest'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'd_field_ns.FlushDeviceQueueForDevEUIRequest_dev_eui'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.FlushDeviceQueueForDevEUIRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.FlushDeviceQueueForDevEUIRequest'{dev_eui = F@_1};
'dfp_read_field_def_ns.FlushDeviceQueueForDevEUIRequest'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.FlushDeviceQueueForDevEUIRequest'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.FlushDeviceQueueForDevEUIRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.FlushDeviceQueueForDevEUIRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'dg_read_field_def_ns.FlushDeviceQueueForDevEUIRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.FlushDeviceQueueForDevEUIRequest_dev_eui'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.FlushDeviceQueueForDevEUIRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.FlushDeviceQueueForDevEUIRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.FlushDeviceQueueForDevEUIRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.FlushDeviceQueueForDevEUIRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.FlushDeviceQueueForDevEUIRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.FlushDeviceQueueForDevEUIRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.FlushDeviceQueueForDevEUIRequest'{dev_eui = F@_1}.

'd_field_ns.FlushDeviceQueueForDevEUIRequest_dev_eui'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.FlushDeviceQueueForDevEUIRequest_dev_eui'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'd_field_ns.FlushDeviceQueueForDevEUIRequest_dev_eui'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.FlushDeviceQueueForDevEUIRequest'(RestF, 0, 0, F, NewFValue, TrUserData).

'skip_varint_ns.FlushDeviceQueueForDevEUIRequest'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'skip_varint_ns.FlushDeviceQueueForDevEUIRequest'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.FlushDeviceQueueForDevEUIRequest'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_ns.FlushDeviceQueueForDevEUIRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.FlushDeviceQueueForDevEUIRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.FlushDeviceQueueForDevEUIRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.FlushDeviceQueueForDevEUIRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.FlushDeviceQueueForDevEUIRequest'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.FlushDeviceQueueForDevEUIRequest'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.FlushDeviceQueueForDevEUIRequest'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_ns.FlushDeviceQueueForDevEUIRequest'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.FlushDeviceQueueForDevEUIRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.FlushDeviceQueueForDevEUIRequest'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.FlushDeviceQueueForDevEUIRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.GetDeviceQueueItemsForDevEUIRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.GetDeviceQueueItemsForDevEUIRequest'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id(false, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.GetDeviceQueueItemsForDevEUIRequest'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'd_field_ns.GetDeviceQueueItemsForDevEUIRequest_dev_eui'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'dfp_read_field_def_ns.GetDeviceQueueItemsForDevEUIRequest'(
    <<16, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'd_field_ns.GetDeviceQueueItemsForDevEUIRequest_count_only'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'dfp_read_field_def_ns.GetDeviceQueueItemsForDevEUIRequest'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'ns.GetDeviceQueueItemsForDevEUIRequest'{dev_eui = F@_1, count_only = F@_2};
'dfp_read_field_def_ns.GetDeviceQueueItemsForDevEUIRequest'(
    Other,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'dg_read_field_def_ns.GetDeviceQueueItemsForDevEUIRequest'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        TrUserData
    ).

'dg_read_field_def_ns.GetDeviceQueueItemsForDevEUIRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.GetDeviceQueueItemsForDevEUIRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'dg_read_field_def_ns.GetDeviceQueueItemsForDevEUIRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.GetDeviceQueueItemsForDevEUIRequest_dev_eui'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                TrUserData
            );
        16 ->
            'd_field_ns.GetDeviceQueueItemsForDevEUIRequest_count_only'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.GetDeviceQueueItemsForDevEUIRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.GetDeviceQueueItemsForDevEUIRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.GetDeviceQueueItemsForDevEUIRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.GetDeviceQueueItemsForDevEUIRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.GetDeviceQueueItemsForDevEUIRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.GetDeviceQueueItemsForDevEUIRequest'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'ns.GetDeviceQueueItemsForDevEUIRequest'{dev_eui = F@_1, count_only = F@_2}.

'd_field_ns.GetDeviceQueueItemsForDevEUIRequest_dev_eui'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_ns.GetDeviceQueueItemsForDevEUIRequest_dev_eui'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'd_field_ns.GetDeviceQueueItemsForDevEUIRequest_dev_eui'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GetDeviceQueueItemsForDevEUIRequest'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        TrUserData
    ).

'd_field_ns.GetDeviceQueueItemsForDevEUIRequest_count_only'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_ns.GetDeviceQueueItemsForDevEUIRequest_count_only'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'd_field_ns.GetDeviceQueueItemsForDevEUIRequest_count_only'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_ns.GetDeviceQueueItemsForDevEUIRequest'(
        RestF,
        0,
        0,
        F,
        F@_1,
        NewFValue,
        TrUserData
    ).

'skip_varint_ns.GetDeviceQueueItemsForDevEUIRequest'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'skip_varint_ns.GetDeviceQueueItemsForDevEUIRequest'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_ns.GetDeviceQueueItemsForDevEUIRequest'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'dfp_read_field_def_ns.GetDeviceQueueItemsForDevEUIRequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        TrUserData
    ).

'skip_length_delimited_ns.GetDeviceQueueItemsForDevEUIRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.GetDeviceQueueItemsForDevEUIRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'skip_length_delimited_ns.GetDeviceQueueItemsForDevEUIRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.GetDeviceQueueItemsForDevEUIRequest'(
        Rest2,
        0,
        0,
        F,
        F@_1,
        F@_2,
        TrUserData
    ).

'skip_group_ns.GetDeviceQueueItemsForDevEUIRequest'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.GetDeviceQueueItemsForDevEUIRequest'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        TrUserData
    ).

'skip_32_ns.GetDeviceQueueItemsForDevEUIRequest'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'dfp_read_field_def_ns.GetDeviceQueueItemsForDevEUIRequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        TrUserData
    ).

'skip_64_ns.GetDeviceQueueItemsForDevEUIRequest'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'dfp_read_field_def_ns.GetDeviceQueueItemsForDevEUIRequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        TrUserData
    ).

'decode_msg_ns.GetDeviceQueueItemsForDevEUIResponse'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.GetDeviceQueueItemsForDevEUIResponse'(
        Bin,
        0,
        0,
        0,
        id([], TrUserData),
        id(0, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.GetDeviceQueueItemsForDevEUIResponse'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'd_field_ns.GetDeviceQueueItemsForDevEUIResponse_items'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'dfp_read_field_def_ns.GetDeviceQueueItemsForDevEUIResponse'(
    <<16, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'd_field_ns.GetDeviceQueueItemsForDevEUIResponse_total_count'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'dfp_read_field_def_ns.GetDeviceQueueItemsForDevEUIResponse'(<<>>, 0, 0, _, R1, F@_2, TrUserData) ->
    #'ns.GetDeviceQueueItemsForDevEUIResponse'{
        items = lists_reverse(R1, TrUserData),
        total_count = F@_2
    };
'dfp_read_field_def_ns.GetDeviceQueueItemsForDevEUIResponse'(
    Other,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'dg_read_field_def_ns.GetDeviceQueueItemsForDevEUIResponse'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        TrUserData
    ).

'dg_read_field_def_ns.GetDeviceQueueItemsForDevEUIResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.GetDeviceQueueItemsForDevEUIResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'dg_read_field_def_ns.GetDeviceQueueItemsForDevEUIResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.GetDeviceQueueItemsForDevEUIResponse_items'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                TrUserData
            );
        16 ->
            'd_field_ns.GetDeviceQueueItemsForDevEUIResponse_total_count'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.GetDeviceQueueItemsForDevEUIResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.GetDeviceQueueItemsForDevEUIResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.GetDeviceQueueItemsForDevEUIResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.GetDeviceQueueItemsForDevEUIResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.GetDeviceQueueItemsForDevEUIResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.GetDeviceQueueItemsForDevEUIResponse'(<<>>, 0, 0, _, R1, F@_2, TrUserData) ->
    #'ns.GetDeviceQueueItemsForDevEUIResponse'{
        items = lists_reverse(R1, TrUserData),
        total_count = F@_2
    }.

'd_field_ns.GetDeviceQueueItemsForDevEUIResponse_items'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_ns.GetDeviceQueueItemsForDevEUIResponse_items'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'd_field_ns.GetDeviceQueueItemsForDevEUIResponse_items'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    Prev,
    F@_2,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_ns.DeviceQueueItem'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GetDeviceQueueItemsForDevEUIResponse'(
        RestF,
        0,
        0,
        F,
        cons(NewFValue, Prev, TrUserData),
        F@_2,
        TrUserData
    ).

'd_field_ns.GetDeviceQueueItemsForDevEUIResponse_total_count'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_ns.GetDeviceQueueItemsForDevEUIResponse_total_count'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'd_field_ns.GetDeviceQueueItemsForDevEUIResponse_total_count'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_ns.GetDeviceQueueItemsForDevEUIResponse'(
        RestF,
        0,
        0,
        F,
        F@_1,
        NewFValue,
        TrUserData
    ).

'skip_varint_ns.GetDeviceQueueItemsForDevEUIResponse'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'skip_varint_ns.GetDeviceQueueItemsForDevEUIResponse'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_ns.GetDeviceQueueItemsForDevEUIResponse'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'dfp_read_field_def_ns.GetDeviceQueueItemsForDevEUIResponse'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        TrUserData
    ).

'skip_length_delimited_ns.GetDeviceQueueItemsForDevEUIResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.GetDeviceQueueItemsForDevEUIResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'skip_length_delimited_ns.GetDeviceQueueItemsForDevEUIResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.GetDeviceQueueItemsForDevEUIResponse'(
        Rest2,
        0,
        0,
        F,
        F@_1,
        F@_2,
        TrUserData
    ).

'skip_group_ns.GetDeviceQueueItemsForDevEUIResponse'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.GetDeviceQueueItemsForDevEUIResponse'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        TrUserData
    ).

'skip_32_ns.GetDeviceQueueItemsForDevEUIResponse'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'dfp_read_field_def_ns.GetDeviceQueueItemsForDevEUIResponse'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        TrUserData
    ).

'skip_64_ns.GetDeviceQueueItemsForDevEUIResponse'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'dfp_read_field_def_ns.GetDeviceQueueItemsForDevEUIResponse'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        TrUserData
    ).

'decode_msg_ns.GetNextDownlinkFCntForDevEUIRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.GetNextDownlinkFCntForDevEUIRequest'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.GetNextDownlinkFCntForDevEUIRequest'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'd_field_ns.GetNextDownlinkFCntForDevEUIRequest_dev_eui'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.GetNextDownlinkFCntForDevEUIRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.GetNextDownlinkFCntForDevEUIRequest'{dev_eui = F@_1};
'dfp_read_field_def_ns.GetNextDownlinkFCntForDevEUIRequest'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.GetNextDownlinkFCntForDevEUIRequest'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.GetNextDownlinkFCntForDevEUIRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.GetNextDownlinkFCntForDevEUIRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'dg_read_field_def_ns.GetNextDownlinkFCntForDevEUIRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.GetNextDownlinkFCntForDevEUIRequest_dev_eui'(
                Rest,
                0,
                0,
                0,
                F@_1,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.GetNextDownlinkFCntForDevEUIRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.GetNextDownlinkFCntForDevEUIRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.GetNextDownlinkFCntForDevEUIRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.GetNextDownlinkFCntForDevEUIRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.GetNextDownlinkFCntForDevEUIRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.GetNextDownlinkFCntForDevEUIRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.GetNextDownlinkFCntForDevEUIRequest'{dev_eui = F@_1}.

'd_field_ns.GetNextDownlinkFCntForDevEUIRequest_dev_eui'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.GetNextDownlinkFCntForDevEUIRequest_dev_eui'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'd_field_ns.GetNextDownlinkFCntForDevEUIRequest_dev_eui'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GetNextDownlinkFCntForDevEUIRequest'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        TrUserData
    ).

'skip_varint_ns.GetNextDownlinkFCntForDevEUIRequest'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'skip_varint_ns.GetNextDownlinkFCntForDevEUIRequest'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.GetNextDownlinkFCntForDevEUIRequest'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_ns.GetNextDownlinkFCntForDevEUIRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.GetNextDownlinkFCntForDevEUIRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.GetNextDownlinkFCntForDevEUIRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.GetNextDownlinkFCntForDevEUIRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.GetNextDownlinkFCntForDevEUIRequest'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.GetNextDownlinkFCntForDevEUIRequest'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.GetNextDownlinkFCntForDevEUIRequest'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        TrUserData
    ).

'skip_32_ns.GetNextDownlinkFCntForDevEUIRequest'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_ns.GetNextDownlinkFCntForDevEUIRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.GetNextDownlinkFCntForDevEUIRequest'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_ns.GetNextDownlinkFCntForDevEUIRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.GetNextDownlinkFCntForDevEUIResponse'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.GetNextDownlinkFCntForDevEUIResponse'(
        Bin,
        0,
        0,
        0,
        id(0, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.GetNextDownlinkFCntForDevEUIResponse'(
    <<8, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'd_field_ns.GetNextDownlinkFCntForDevEUIResponse_f_cnt'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.GetNextDownlinkFCntForDevEUIResponse'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.GetNextDownlinkFCntForDevEUIResponse'{f_cnt = F@_1};
'dfp_read_field_def_ns.GetNextDownlinkFCntForDevEUIResponse'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.GetNextDownlinkFCntForDevEUIResponse'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.GetNextDownlinkFCntForDevEUIResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.GetNextDownlinkFCntForDevEUIResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'dg_read_field_def_ns.GetNextDownlinkFCntForDevEUIResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            'd_field_ns.GetNextDownlinkFCntForDevEUIResponse_f_cnt'(
                Rest,
                0,
                0,
                0,
                F@_1,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.GetNextDownlinkFCntForDevEUIResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.GetNextDownlinkFCntForDevEUIResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.GetNextDownlinkFCntForDevEUIResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.GetNextDownlinkFCntForDevEUIResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.GetNextDownlinkFCntForDevEUIResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.GetNextDownlinkFCntForDevEUIResponse'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.GetNextDownlinkFCntForDevEUIResponse'{f_cnt = F@_1}.

'd_field_ns.GetNextDownlinkFCntForDevEUIResponse_f_cnt'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.GetNextDownlinkFCntForDevEUIResponse_f_cnt'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'd_field_ns.GetNextDownlinkFCntForDevEUIResponse_f_cnt'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_ns.GetNextDownlinkFCntForDevEUIResponse'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        TrUserData
    ).

'skip_varint_ns.GetNextDownlinkFCntForDevEUIResponse'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'skip_varint_ns.GetNextDownlinkFCntForDevEUIResponse'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.GetNextDownlinkFCntForDevEUIResponse'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_ns.GetNextDownlinkFCntForDevEUIResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.GetNextDownlinkFCntForDevEUIResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.GetNextDownlinkFCntForDevEUIResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.GetNextDownlinkFCntForDevEUIResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.GetNextDownlinkFCntForDevEUIResponse'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.GetNextDownlinkFCntForDevEUIResponse'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.GetNextDownlinkFCntForDevEUIResponse'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        TrUserData
    ).

'skip_32_ns.GetNextDownlinkFCntForDevEUIResponse'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_ns.GetNextDownlinkFCntForDevEUIResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.GetNextDownlinkFCntForDevEUIResponse'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_ns.GetNextDownlinkFCntForDevEUIResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.UplinkFrameLog'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.UplinkFrameLog'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id(undefined, TrUserData),
        id([], TrUserData),
        id('JoinRequest', TrUserData),
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.UplinkFrameLog'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'd_field_ns.UplinkFrameLog_phy_payload'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'dfp_read_field_def_ns.UplinkFrameLog'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'd_field_ns.UplinkFrameLog_tx_info'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'dfp_read_field_def_ns.UplinkFrameLog'(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'd_field_ns.UplinkFrameLog_rx_info'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'dfp_read_field_def_ns.UplinkFrameLog'(
    <<32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'd_field_ns.UplinkFrameLog_m_type'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'dfp_read_field_def_ns.UplinkFrameLog'(
    <<42, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'd_field_ns.UplinkFrameLog_dev_addr'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'dfp_read_field_def_ns.UplinkFrameLog'(
    <<50, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'd_field_ns.UplinkFrameLog_dev_eui'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'dfp_read_field_def_ns.UplinkFrameLog'(<<>>, 0, 0, _, F@_1, F@_2, R1, F@_4, F@_5, F@_6, TrUserData) ->
    #'ns.UplinkFrameLog'{
        phy_payload = F@_1,
        tx_info = F@_2,
        rx_info = lists_reverse(R1, TrUserData),
        m_type = F@_4,
        dev_addr = F@_5,
        dev_eui = F@_6
    };
'dfp_read_field_def_ns.UplinkFrameLog'(
    Other,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'dg_read_field_def_ns.UplinkFrameLog'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'dg_read_field_def_ns.UplinkFrameLog'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.UplinkFrameLog'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'dg_read_field_def_ns.UplinkFrameLog'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.UplinkFrameLog_phy_payload'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                TrUserData
            );
        18 ->
            'd_field_ns.UplinkFrameLog_tx_info'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                TrUserData
            );
        26 ->
            'd_field_ns.UplinkFrameLog_rx_info'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                TrUserData
            );
        32 ->
            'd_field_ns.UplinkFrameLog_m_type'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                TrUserData
            );
        42 ->
            'd_field_ns.UplinkFrameLog_dev_addr'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                TrUserData
            );
        50 ->
            'd_field_ns.UplinkFrameLog_dev_eui'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.UplinkFrameLog'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.UplinkFrameLog'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.UplinkFrameLog'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.UplinkFrameLog'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.UplinkFrameLog'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.UplinkFrameLog'(<<>>, 0, 0, _, F@_1, F@_2, R1, F@_4, F@_5, F@_6, TrUserData) ->
    #'ns.UplinkFrameLog'{
        phy_payload = F@_1,
        tx_info = F@_2,
        rx_info = lists_reverse(R1, TrUserData),
        m_type = F@_4,
        dev_addr = F@_5,
        dev_eui = F@_6
    }.

'd_field_ns.UplinkFrameLog_phy_payload'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 57 ->
    'd_field_ns.UplinkFrameLog_phy_payload'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'd_field_ns.UplinkFrameLog_phy_payload'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.UplinkFrameLog'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'd_field_ns.UplinkFrameLog_tx_info'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 57 ->
    'd_field_ns.UplinkFrameLog_tx_info'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'd_field_ns.UplinkFrameLog_tx_info'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    Prev,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_gw.UplinkTXInfo'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.UplinkFrameLog'(
        RestF,
        0,
        0,
        F,
        F@_1,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_gw.UplinkTXInfo'(Prev, NewFValue, TrUserData)
        end,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'd_field_ns.UplinkFrameLog_rx_info'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 57 ->
    'd_field_ns.UplinkFrameLog_rx_info'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'd_field_ns.UplinkFrameLog_rx_info'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    Prev,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_gw.UplinkRXInfo'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.UplinkFrameLog'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        cons(NewFValue, Prev, TrUserData),
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'd_field_ns.UplinkFrameLog_m_type'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 57 ->
    'd_field_ns.UplinkFrameLog_m_type'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'd_field_ns.UplinkFrameLog_m_type'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    _,
    F@_5,
    F@_6,
    TrUserData
) ->
    {NewFValue, RestF} =
        {id(
                'd_enum_common.MType'(begin
                    <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>,
                    id(Res, TrUserData)
                end),
                TrUserData
            ),
            Rest},
    'dfp_read_field_def_ns.UplinkFrameLog'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        NewFValue,
        F@_5,
        F@_6,
        TrUserData
    ).

'd_field_ns.UplinkFrameLog_dev_addr'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 57 ->
    'd_field_ns.UplinkFrameLog_dev_addr'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'd_field_ns.UplinkFrameLog_dev_addr'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _,
    F@_6,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.UplinkFrameLog'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        NewFValue,
        F@_6,
        TrUserData
    ).

'd_field_ns.UplinkFrameLog_dev_eui'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 57 ->
    'd_field_ns.UplinkFrameLog_dev_eui'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'd_field_ns.UplinkFrameLog_dev_eui'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.UplinkFrameLog'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        NewFValue,
        TrUserData
    ).

'skip_varint_ns.UplinkFrameLog'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'skip_varint_ns.UplinkFrameLog'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'skip_varint_ns.UplinkFrameLog'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'dfp_read_field_def_ns.UplinkFrameLog'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'skip_length_delimited_ns.UplinkFrameLog'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.UplinkFrameLog'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'skip_length_delimited_ns.UplinkFrameLog'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.UplinkFrameLog'(
        Rest2,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'skip_group_ns.UplinkFrameLog'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.UplinkFrameLog'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'skip_32_ns.UplinkFrameLog'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'dfp_read_field_def_ns.UplinkFrameLog'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'skip_64_ns.UplinkFrameLog'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'dfp_read_field_def_ns.UplinkFrameLog'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'decode_msg_ns.DownlinkFrameLog'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.DownlinkFrameLog'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id(undefined, TrUserData),
        id(0, TrUserData),
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        id('JoinRequest', TrUserData),
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.DownlinkFrameLog'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    'd_field_ns.DownlinkFrameLog_phy_payload'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
'dfp_read_field_def_ns.DownlinkFrameLog'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    'd_field_ns.DownlinkFrameLog_tx_info'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
'dfp_read_field_def_ns.DownlinkFrameLog'(
    <<24, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    'd_field_ns.DownlinkFrameLog_token'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
'dfp_read_field_def_ns.DownlinkFrameLog'(
    <<34, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    'd_field_ns.DownlinkFrameLog_downlink_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
'dfp_read_field_def_ns.DownlinkFrameLog'(
    <<42, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    'd_field_ns.DownlinkFrameLog_gateway_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
'dfp_read_field_def_ns.DownlinkFrameLog'(
    <<48, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    'd_field_ns.DownlinkFrameLog_m_type'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
'dfp_read_field_def_ns.DownlinkFrameLog'(
    <<58, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    'd_field_ns.DownlinkFrameLog_dev_addr'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
'dfp_read_field_def_ns.DownlinkFrameLog'(
    <<66, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    'd_field_ns.DownlinkFrameLog_dev_eui'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
'dfp_read_field_def_ns.DownlinkFrameLog'(
    <<>>,
    0,
    0,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    _
) ->
    #'ns.DownlinkFrameLog'{
        phy_payload = F@_1,
        tx_info = F@_2,
        token = F@_3,
        downlink_id = F@_4,
        gateway_id = F@_5,
        m_type = F@_6,
        dev_addr = F@_7,
        dev_eui = F@_8
    };
'dfp_read_field_def_ns.DownlinkFrameLog'(
    Other,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    'dg_read_field_def_ns.DownlinkFrameLog'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    ).

'dg_read_field_def_ns.DownlinkFrameLog'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.DownlinkFrameLog'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
'dg_read_field_def_ns.DownlinkFrameLog'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.DownlinkFrameLog_phy_payload'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                TrUserData
            );
        18 ->
            'd_field_ns.DownlinkFrameLog_tx_info'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                TrUserData
            );
        24 ->
            'd_field_ns.DownlinkFrameLog_token'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                TrUserData
            );
        34 ->
            'd_field_ns.DownlinkFrameLog_downlink_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                TrUserData
            );
        42 ->
            'd_field_ns.DownlinkFrameLog_gateway_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                TrUserData
            );
        48 ->
            'd_field_ns.DownlinkFrameLog_m_type'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                TrUserData
            );
        58 ->
            'd_field_ns.DownlinkFrameLog_dev_addr'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                TrUserData
            );
        66 ->
            'd_field_ns.DownlinkFrameLog_dev_eui'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.DownlinkFrameLog'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.DownlinkFrameLog'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.DownlinkFrameLog'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.DownlinkFrameLog'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.DownlinkFrameLog'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.DownlinkFrameLog'(
    <<>>,
    0,
    0,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    _
) ->
    #'ns.DownlinkFrameLog'{
        phy_payload = F@_1,
        tx_info = F@_2,
        token = F@_3,
        downlink_id = F@_4,
        gateway_id = F@_5,
        m_type = F@_6,
        dev_addr = F@_7,
        dev_eui = F@_8
    }.

'd_field_ns.DownlinkFrameLog_phy_payload'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) when N < 57 ->
    'd_field_ns.DownlinkFrameLog_phy_payload'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
'd_field_ns.DownlinkFrameLog_phy_payload'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.DownlinkFrameLog'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    ).

'd_field_ns.DownlinkFrameLog_tx_info'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) when N < 57 ->
    'd_field_ns.DownlinkFrameLog_tx_info'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
'd_field_ns.DownlinkFrameLog_tx_info'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    Prev,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_gw.DownlinkTXInfo'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.DownlinkFrameLog'(
        RestF,
        0,
        0,
        F,
        F@_1,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_gw.DownlinkTXInfo'(Prev, NewFValue, TrUserData)
        end,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    ).

'd_field_ns.DownlinkFrameLog_token'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) when N < 57 ->
    'd_field_ns.DownlinkFrameLog_token'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
'd_field_ns.DownlinkFrameLog_token'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    _,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_ns.DownlinkFrameLog'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        NewFValue,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    ).

'd_field_ns.DownlinkFrameLog_downlink_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) when N < 57 ->
    'd_field_ns.DownlinkFrameLog_downlink_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
'd_field_ns.DownlinkFrameLog_downlink_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    _,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.DownlinkFrameLog'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        NewFValue,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    ).

'd_field_ns.DownlinkFrameLog_gateway_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) when N < 57 ->
    'd_field_ns.DownlinkFrameLog_gateway_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
'd_field_ns.DownlinkFrameLog_gateway_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.DownlinkFrameLog'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        NewFValue,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    ).

'd_field_ns.DownlinkFrameLog_m_type'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) when N < 57 ->
    'd_field_ns.DownlinkFrameLog_m_type'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
'd_field_ns.DownlinkFrameLog_m_type'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    _,
    F@_7,
    F@_8,
    TrUserData
) ->
    {NewFValue, RestF} =
        {id(
                'd_enum_common.MType'(begin
                    <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>,
                    id(Res, TrUserData)
                end),
                TrUserData
            ),
            Rest},
    'dfp_read_field_def_ns.DownlinkFrameLog'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        NewFValue,
        F@_7,
        F@_8,
        TrUserData
    ).

'd_field_ns.DownlinkFrameLog_dev_addr'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) when N < 57 ->
    'd_field_ns.DownlinkFrameLog_dev_addr'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
'd_field_ns.DownlinkFrameLog_dev_addr'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    _,
    F@_8,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.DownlinkFrameLog'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        NewFValue,
        F@_8,
        TrUserData
    ).

'd_field_ns.DownlinkFrameLog_dev_eui'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) when N < 57 ->
    'd_field_ns.DownlinkFrameLog_dev_eui'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
'd_field_ns.DownlinkFrameLog_dev_eui'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.DownlinkFrameLog'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        NewFValue,
        TrUserData
    ).

'skip_varint_ns.DownlinkFrameLog'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    'skip_varint_ns.DownlinkFrameLog'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
'skip_varint_ns.DownlinkFrameLog'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    'dfp_read_field_def_ns.DownlinkFrameLog'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    ).

'skip_length_delimited_ns.DownlinkFrameLog'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.DownlinkFrameLog'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
'skip_length_delimited_ns.DownlinkFrameLog'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.DownlinkFrameLog'(
        Rest2,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    ).

'skip_group_ns.DownlinkFrameLog'(
    Bin,
    _,
    Z2,
    FNum,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.DownlinkFrameLog'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    ).

'skip_32_ns.DownlinkFrameLog'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    'dfp_read_field_def_ns.DownlinkFrameLog'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    ).

'skip_64_ns.DownlinkFrameLog'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    'dfp_read_field_def_ns.DownlinkFrameLog'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    ).

'decode_msg_ns.StreamFrameLogsForGatewayRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.StreamFrameLogsForGatewayRequest'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.StreamFrameLogsForGatewayRequest'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'd_field_ns.StreamFrameLogsForGatewayRequest_gateway_id'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.StreamFrameLogsForGatewayRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.StreamFrameLogsForGatewayRequest'{gateway_id = F@_1};
'dfp_read_field_def_ns.StreamFrameLogsForGatewayRequest'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.StreamFrameLogsForGatewayRequest'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.StreamFrameLogsForGatewayRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.StreamFrameLogsForGatewayRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'dg_read_field_def_ns.StreamFrameLogsForGatewayRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.StreamFrameLogsForGatewayRequest_gateway_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.StreamFrameLogsForGatewayRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.StreamFrameLogsForGatewayRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.StreamFrameLogsForGatewayRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.StreamFrameLogsForGatewayRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.StreamFrameLogsForGatewayRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.StreamFrameLogsForGatewayRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.StreamFrameLogsForGatewayRequest'{gateway_id = F@_1}.

'd_field_ns.StreamFrameLogsForGatewayRequest_gateway_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.StreamFrameLogsForGatewayRequest_gateway_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'd_field_ns.StreamFrameLogsForGatewayRequest_gateway_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.StreamFrameLogsForGatewayRequest'(RestF, 0, 0, F, NewFValue, TrUserData).

'skip_varint_ns.StreamFrameLogsForGatewayRequest'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'skip_varint_ns.StreamFrameLogsForGatewayRequest'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.StreamFrameLogsForGatewayRequest'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_ns.StreamFrameLogsForGatewayRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.StreamFrameLogsForGatewayRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.StreamFrameLogsForGatewayRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.StreamFrameLogsForGatewayRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.StreamFrameLogsForGatewayRequest'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.StreamFrameLogsForGatewayRequest'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.StreamFrameLogsForGatewayRequest'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_ns.StreamFrameLogsForGatewayRequest'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.StreamFrameLogsForGatewayRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.StreamFrameLogsForGatewayRequest'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.StreamFrameLogsForGatewayRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.StreamFrameLogsForGatewayResponse'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.StreamFrameLogsForGatewayResponse'(
        Bin,
        0,
        0,
        0,
        id(undefined, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.StreamFrameLogsForGatewayResponse'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'd_field_ns.StreamFrameLogsForGatewayResponse_uplink_frame_set'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        TrUserData
    );
'dfp_read_field_def_ns.StreamFrameLogsForGatewayResponse'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'd_field_ns.StreamFrameLogsForGatewayResponse_downlink_frame'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        TrUserData
    );
'dfp_read_field_def_ns.StreamFrameLogsForGatewayResponse'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.StreamFrameLogsForGatewayResponse'{frame = F@_1};
'dfp_read_field_def_ns.StreamFrameLogsForGatewayResponse'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.StreamFrameLogsForGatewayResponse'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.StreamFrameLogsForGatewayResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.StreamFrameLogsForGatewayResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'dg_read_field_def_ns.StreamFrameLogsForGatewayResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.StreamFrameLogsForGatewayResponse_uplink_frame_set'(
                Rest,
                0,
                0,
                0,
                F@_1,
                TrUserData
            );
        18 ->
            'd_field_ns.StreamFrameLogsForGatewayResponse_downlink_frame'(
                Rest,
                0,
                0,
                0,
                F@_1,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.StreamFrameLogsForGatewayResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.StreamFrameLogsForGatewayResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.StreamFrameLogsForGatewayResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.StreamFrameLogsForGatewayResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.StreamFrameLogsForGatewayResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.StreamFrameLogsForGatewayResponse'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.StreamFrameLogsForGatewayResponse'{frame = F@_1}.

'd_field_ns.StreamFrameLogsForGatewayResponse_uplink_frame_set'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.StreamFrameLogsForGatewayResponse_uplink_frame_set'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'd_field_ns.StreamFrameLogsForGatewayResponse_uplink_frame_set'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_ns.UplinkFrameLog'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.StreamFrameLogsForGatewayResponse'(
        RestF,
        0,
        0,
        F,
        case Prev of
            undefined ->
                id({uplink_frame_set, NewFValue}, TrUserData);
            {uplink_frame_set, MVPrev} ->
                id(
                    {uplink_frame_set,
                        'merge_msg_ns.UplinkFrameLog'(MVPrev, NewFValue, TrUserData)},
                    TrUserData
                );
            _ ->
                id({uplink_frame_set, NewFValue}, TrUserData)
        end,
        TrUserData
    ).

'd_field_ns.StreamFrameLogsForGatewayResponse_downlink_frame'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.StreamFrameLogsForGatewayResponse_downlink_frame'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'd_field_ns.StreamFrameLogsForGatewayResponse_downlink_frame'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_ns.DownlinkFrameLog'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.StreamFrameLogsForGatewayResponse'(
        RestF,
        0,
        0,
        F,
        case Prev of
            undefined ->
                id({downlink_frame, NewFValue}, TrUserData);
            {downlink_frame, MVPrev} ->
                id(
                    {downlink_frame,
                        'merge_msg_ns.DownlinkFrameLog'(MVPrev, NewFValue, TrUserData)},
                    TrUserData
                );
            _ ->
                id({downlink_frame, NewFValue}, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_ns.StreamFrameLogsForGatewayResponse'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'skip_varint_ns.StreamFrameLogsForGatewayResponse'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.StreamFrameLogsForGatewayResponse'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_ns.StreamFrameLogsForGatewayResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.StreamFrameLogsForGatewayResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.StreamFrameLogsForGatewayResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.StreamFrameLogsForGatewayResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.StreamFrameLogsForGatewayResponse'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.StreamFrameLogsForGatewayResponse'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.StreamFrameLogsForGatewayResponse'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_ns.StreamFrameLogsForGatewayResponse'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.StreamFrameLogsForGatewayResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.StreamFrameLogsForGatewayResponse'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.StreamFrameLogsForGatewayResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.StreamFrameLogsForDeviceRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.StreamFrameLogsForDeviceRequest'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.StreamFrameLogsForDeviceRequest'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'd_field_ns.StreamFrameLogsForDeviceRequest_dev_eui'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.StreamFrameLogsForDeviceRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.StreamFrameLogsForDeviceRequest'{dev_eui = F@_1};
'dfp_read_field_def_ns.StreamFrameLogsForDeviceRequest'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.StreamFrameLogsForDeviceRequest'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.StreamFrameLogsForDeviceRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.StreamFrameLogsForDeviceRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'dg_read_field_def_ns.StreamFrameLogsForDeviceRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.StreamFrameLogsForDeviceRequest_dev_eui'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.StreamFrameLogsForDeviceRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.StreamFrameLogsForDeviceRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.StreamFrameLogsForDeviceRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.StreamFrameLogsForDeviceRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.StreamFrameLogsForDeviceRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.StreamFrameLogsForDeviceRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.StreamFrameLogsForDeviceRequest'{dev_eui = F@_1}.

'd_field_ns.StreamFrameLogsForDeviceRequest_dev_eui'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.StreamFrameLogsForDeviceRequest_dev_eui'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'd_field_ns.StreamFrameLogsForDeviceRequest_dev_eui'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.StreamFrameLogsForDeviceRequest'(RestF, 0, 0, F, NewFValue, TrUserData).

'skip_varint_ns.StreamFrameLogsForDeviceRequest'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'skip_varint_ns.StreamFrameLogsForDeviceRequest'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.StreamFrameLogsForDeviceRequest'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_ns.StreamFrameLogsForDeviceRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.StreamFrameLogsForDeviceRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.StreamFrameLogsForDeviceRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.StreamFrameLogsForDeviceRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.StreamFrameLogsForDeviceRequest'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.StreamFrameLogsForDeviceRequest'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.StreamFrameLogsForDeviceRequest'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_ns.StreamFrameLogsForDeviceRequest'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.StreamFrameLogsForDeviceRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.StreamFrameLogsForDeviceRequest'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.StreamFrameLogsForDeviceRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.StreamFrameLogsForDeviceResponse'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.StreamFrameLogsForDeviceResponse'(
        Bin,
        0,
        0,
        0,
        id(undefined, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.StreamFrameLogsForDeviceResponse'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'd_field_ns.StreamFrameLogsForDeviceResponse_uplink_frame_set'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        TrUserData
    );
'dfp_read_field_def_ns.StreamFrameLogsForDeviceResponse'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'd_field_ns.StreamFrameLogsForDeviceResponse_downlink_frame'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.StreamFrameLogsForDeviceResponse'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.StreamFrameLogsForDeviceResponse'{frame = F@_1};
'dfp_read_field_def_ns.StreamFrameLogsForDeviceResponse'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.StreamFrameLogsForDeviceResponse'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.StreamFrameLogsForDeviceResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.StreamFrameLogsForDeviceResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'dg_read_field_def_ns.StreamFrameLogsForDeviceResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.StreamFrameLogsForDeviceResponse_uplink_frame_set'(
                Rest,
                0,
                0,
                0,
                F@_1,
                TrUserData
            );
        18 ->
            'd_field_ns.StreamFrameLogsForDeviceResponse_downlink_frame'(
                Rest,
                0,
                0,
                0,
                F@_1,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.StreamFrameLogsForDeviceResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.StreamFrameLogsForDeviceResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.StreamFrameLogsForDeviceResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.StreamFrameLogsForDeviceResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.StreamFrameLogsForDeviceResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.StreamFrameLogsForDeviceResponse'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.StreamFrameLogsForDeviceResponse'{frame = F@_1}.

'd_field_ns.StreamFrameLogsForDeviceResponse_uplink_frame_set'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.StreamFrameLogsForDeviceResponse_uplink_frame_set'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'd_field_ns.StreamFrameLogsForDeviceResponse_uplink_frame_set'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_ns.UplinkFrameLog'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.StreamFrameLogsForDeviceResponse'(
        RestF,
        0,
        0,
        F,
        case Prev of
            undefined ->
                id({uplink_frame_set, NewFValue}, TrUserData);
            {uplink_frame_set, MVPrev} ->
                id(
                    {uplink_frame_set,
                        'merge_msg_ns.UplinkFrameLog'(MVPrev, NewFValue, TrUserData)},
                    TrUserData
                );
            _ ->
                id({uplink_frame_set, NewFValue}, TrUserData)
        end,
        TrUserData
    ).

'd_field_ns.StreamFrameLogsForDeviceResponse_downlink_frame'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.StreamFrameLogsForDeviceResponse_downlink_frame'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'd_field_ns.StreamFrameLogsForDeviceResponse_downlink_frame'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_ns.DownlinkFrameLog'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.StreamFrameLogsForDeviceResponse'(
        RestF,
        0,
        0,
        F,
        case Prev of
            undefined ->
                id({downlink_frame, NewFValue}, TrUserData);
            {downlink_frame, MVPrev} ->
                id(
                    {downlink_frame,
                        'merge_msg_ns.DownlinkFrameLog'(MVPrev, NewFValue, TrUserData)},
                    TrUserData
                );
            _ ->
                id({downlink_frame, NewFValue}, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_ns.StreamFrameLogsForDeviceResponse'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'skip_varint_ns.StreamFrameLogsForDeviceResponse'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.StreamFrameLogsForDeviceResponse'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_ns.StreamFrameLogsForDeviceResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.StreamFrameLogsForDeviceResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.StreamFrameLogsForDeviceResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.StreamFrameLogsForDeviceResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.StreamFrameLogsForDeviceResponse'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.StreamFrameLogsForDeviceResponse'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.StreamFrameLogsForDeviceResponse'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_ns.StreamFrameLogsForDeviceResponse'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.StreamFrameLogsForDeviceResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.StreamFrameLogsForDeviceResponse'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.StreamFrameLogsForDeviceResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.GetVersionResponse'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.GetVersionResponse'(
        Bin,
        0,
        0,
        0,
        id([], TrUserData),
        id('EU868', TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.GetVersionResponse'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'd_field_ns.GetVersionResponse_version'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_ns.GetVersionResponse'(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'd_field_ns.GetVersionResponse_region'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_ns.GetVersionResponse'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'ns.GetVersionResponse'{version = F@_1, region = F@_2};
'dfp_read_field_def_ns.GetVersionResponse'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_ns.GetVersionResponse'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_ns.GetVersionResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.GetVersionResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'dg_read_field_def_ns.GetVersionResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.GetVersionResponse_version'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        16 ->
            'd_field_ns.GetVersionResponse_region'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.GetVersionResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.GetVersionResponse'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 ->
                    'skip_length_delimited_ns.GetVersionResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.GetVersionResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.GetVersionResponse'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_ns.GetVersionResponse'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'ns.GetVersionResponse'{version = F@_1, region = F@_2}.

'd_field_ns.GetVersionResponse_version'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_ns.GetVersionResponse_version'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_ns.GetVersionResponse_version'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Utf8:Len/binary, Rest2/binary>> = Rest,
        {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GetVersionResponse'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_ns.GetVersionResponse_region'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_ns.GetVersionResponse_region'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_ns.GetVersionResponse_region'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} =
        {id(
                'd_enum_common.Region'(begin
                    <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>,
                    id(Res, TrUserData)
                end),
                TrUserData
            ),
            Rest},
    'dfp_read_field_def_ns.GetVersionResponse'(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

'skip_varint_ns.GetVersionResponse'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'skip_varint_ns.GetVersionResponse'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_ns.GetVersionResponse'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ns.GetVersionResponse'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_ns.GetVersionResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.GetVersionResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'skip_length_delimited_ns.GetVersionResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.GetVersionResponse'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_ns.GetVersionResponse'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.GetVersionResponse'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_ns.GetVersionResponse'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ns.GetVersionResponse'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_ns.GetVersionResponse'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ns.GetVersionResponse'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'decode_msg_ns.GatewayProfile'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.GatewayProfile'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id([], TrUserData),
        id([], TrUserData),
        id(undefined, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.GatewayProfile'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'd_field_ns.GatewayProfile_id'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'dfp_read_field_def_ns.GatewayProfile'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'd_pfield_ns.GatewayProfile_channels'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'dfp_read_field_def_ns.GatewayProfile'(
    <<16, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'd_field_ns.GatewayProfile_channels'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'dfp_read_field_def_ns.GatewayProfile'(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'd_field_ns.GatewayProfile_extra_channels'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'dfp_read_field_def_ns.GatewayProfile'(
    <<34, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'd_field_ns.GatewayProfile_stats_interval'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'dfp_read_field_def_ns.GatewayProfile'(<<>>, 0, 0, _, F@_1, R1, R2, F@_4, TrUserData) ->
    #'ns.GatewayProfile'{
        id = F@_1,
        channels = lists_reverse(R1, TrUserData),
        extra_channels = lists_reverse(R2, TrUserData),
        stats_interval = F@_4
    };
'dfp_read_field_def_ns.GatewayProfile'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    'dg_read_field_def_ns.GatewayProfile'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

'dg_read_field_def_ns.GatewayProfile'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.GatewayProfile'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'dg_read_field_def_ns.GatewayProfile'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.GatewayProfile_id'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        18 ->
            'd_pfield_ns.GatewayProfile_channels'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        16 ->
            'd_field_ns.GatewayProfile_channels'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        26 ->
            'd_field_ns.GatewayProfile_extra_channels'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        34 ->
            'd_field_ns.GatewayProfile_stats_interval'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.GatewayProfile'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.GatewayProfile'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.GatewayProfile'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.GatewayProfile'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.GatewayProfile'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.GatewayProfile'(<<>>, 0, 0, _, F@_1, R1, R2, F@_4, TrUserData) ->
    #'ns.GatewayProfile'{
        id = F@_1,
        channels = lists_reverse(R1, TrUserData),
        extra_channels = lists_reverse(R2, TrUserData),
        stats_interval = F@_4
    }.

'd_field_ns.GatewayProfile_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    'd_field_ns.GatewayProfile_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'd_field_ns.GatewayProfile_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GatewayProfile'(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, TrUserData).

'd_field_ns.GatewayProfile_channels'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    'd_field_ns.GatewayProfile_channels'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'd_field_ns.GatewayProfile_channels'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    Prev,
    F@_3,
    F@_4,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_ns.GatewayProfile'(
        RestF,
        0,
        0,
        F,
        F@_1,
        cons(NewFValue, Prev, TrUserData),
        F@_3,
        F@_4,
        TrUserData
    ).

'd_pfield_ns.GatewayProfile_channels'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    'd_pfield_ns.GatewayProfile_channels'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'd_pfield_ns.GatewayProfile_channels'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    E,
    F@_3,
    F@_4,
    TrUserData
) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = 'd_packed_field_ns.GatewayProfile_channels'(PackedBytes, 0, 0, F, E, TrUserData),
    'dfp_read_field_def_ns.GatewayProfile'(Rest2, 0, 0, F, F@_1, NewSeq, F@_3, F@_4, TrUserData).

'd_packed_field_ns.GatewayProfile_channels'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    AccSeq,
    TrUserData
) when N < 57 ->
    'd_packed_field_ns.GatewayProfile_channels'(Rest, N + 7, X bsl N + Acc, F, AccSeq, TrUserData);
'd_packed_field_ns.GatewayProfile_channels'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    AccSeq,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'd_packed_field_ns.GatewayProfile_channels'(RestF, 0, 0, F, [NewFValue | AccSeq], TrUserData);
'd_packed_field_ns.GatewayProfile_channels'(<<>>, 0, 0, _, AccSeq, _) ->
    AccSeq.

'd_field_ns.GatewayProfile_extra_channels'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    'd_field_ns.GatewayProfile_extra_channels'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'd_field_ns.GatewayProfile_extra_channels'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    Prev,
    F@_4,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_ns.GatewayProfileExtraChannel'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GatewayProfile'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        cons(NewFValue, Prev, TrUserData),
        F@_4,
        TrUserData
    ).

'd_field_ns.GatewayProfile_stats_interval'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    'd_field_ns.GatewayProfile_stats_interval'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'd_field_ns.GatewayProfile_stats_interval'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Duration'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GatewayProfile'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Duration'(Prev, NewFValue, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_ns.GatewayProfile'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'skip_varint_ns.GatewayProfile'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'skip_varint_ns.GatewayProfile'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'dfp_read_field_def_ns.GatewayProfile'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

'skip_length_delimited_ns.GatewayProfile'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.GatewayProfile'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'skip_length_delimited_ns.GatewayProfile'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.GatewayProfile'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

'skip_group_ns.GatewayProfile'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.GatewayProfile'(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData).

'skip_32_ns.GatewayProfile'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    'dfp_read_field_def_ns.GatewayProfile'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

'skip_64_ns.GatewayProfile'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    'dfp_read_field_def_ns.GatewayProfile'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

'decode_msg_ns.GatewayProfileExtraChannel'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.GatewayProfileExtraChannel'(
        Bin,
        0,
        0,
        0,
        id('LORA', TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        id([], TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.GatewayProfileExtraChannel'(
    <<8, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_ns.GatewayProfileExtraChannel_modulation'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_ns.GatewayProfileExtraChannel'(
    <<16, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_ns.GatewayProfileExtraChannel_frequency'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_ns.GatewayProfileExtraChannel'(
    <<24, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_ns.GatewayProfileExtraChannel_bandwidth'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_ns.GatewayProfileExtraChannel'(
    <<32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_ns.GatewayProfileExtraChannel_bitrate'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_ns.GatewayProfileExtraChannel'(
    <<42, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_pfield_ns.GatewayProfileExtraChannel_spreading_factors'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_ns.GatewayProfileExtraChannel'(
    <<40, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_ns.GatewayProfileExtraChannel_spreading_factors'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_ns.GatewayProfileExtraChannel'(
    <<>>,
    0,
    0,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    R1,
    TrUserData
) ->
    #'ns.GatewayProfileExtraChannel'{
        modulation = F@_1,
        frequency = F@_2,
        bandwidth = F@_3,
        bitrate = F@_4,
        spreading_factors = lists_reverse(R1, TrUserData)
    };
'dfp_read_field_def_ns.GatewayProfileExtraChannel'(
    Other,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dg_read_field_def_ns.GatewayProfileExtraChannel'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'dg_read_field_def_ns.GatewayProfileExtraChannel'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.GatewayProfileExtraChannel'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dg_read_field_def_ns.GatewayProfileExtraChannel'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            'd_field_ns.GatewayProfileExtraChannel_modulation'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        16 ->
            'd_field_ns.GatewayProfileExtraChannel_frequency'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        24 ->
            'd_field_ns.GatewayProfileExtraChannel_bandwidth'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        32 ->
            'd_field_ns.GatewayProfileExtraChannel_bitrate'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        42 ->
            'd_pfield_ns.GatewayProfileExtraChannel_spreading_factors'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        40 ->
            'd_field_ns.GatewayProfileExtraChannel_spreading_factors'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.GatewayProfileExtraChannel'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.GatewayProfileExtraChannel'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.GatewayProfileExtraChannel'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.GatewayProfileExtraChannel'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.GatewayProfileExtraChannel'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.GatewayProfileExtraChannel'(
    <<>>,
    0,
    0,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    R1,
    TrUserData
) ->
    #'ns.GatewayProfileExtraChannel'{
        modulation = F@_1,
        frequency = F@_2,
        bandwidth = F@_3,
        bitrate = F@_4,
        spreading_factors = lists_reverse(R1, TrUserData)
    }.

'd_field_ns.GatewayProfileExtraChannel_modulation'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_ns.GatewayProfileExtraChannel_modulation'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_ns.GatewayProfileExtraChannel_modulation'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} =
        {id(
                'd_enum_common.Modulation'(begin
                    <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>,
                    id(Res, TrUserData)
                end),
                TrUserData
            ),
            Rest},
    'dfp_read_field_def_ns.GatewayProfileExtraChannel'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'd_field_ns.GatewayProfileExtraChannel_frequency'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_ns.GatewayProfileExtraChannel_frequency'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_ns.GatewayProfileExtraChannel_frequency'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_ns.GatewayProfileExtraChannel'(
        RestF,
        0,
        0,
        F,
        F@_1,
        NewFValue,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'd_field_ns.GatewayProfileExtraChannel_bandwidth'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_ns.GatewayProfileExtraChannel_bandwidth'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_ns.GatewayProfileExtraChannel_bandwidth'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    _,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_ns.GatewayProfileExtraChannel'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        NewFValue,
        F@_4,
        F@_5,
        TrUserData
    ).

'd_field_ns.GatewayProfileExtraChannel_bitrate'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_ns.GatewayProfileExtraChannel_bitrate'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_ns.GatewayProfileExtraChannel_bitrate'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    _,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_ns.GatewayProfileExtraChannel'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        NewFValue,
        F@_5,
        TrUserData
    ).

'd_field_ns.GatewayProfileExtraChannel_spreading_factors'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_ns.GatewayProfileExtraChannel_spreading_factors'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_ns.GatewayProfileExtraChannel_spreading_factors'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_ns.GatewayProfileExtraChannel'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        cons(NewFValue, Prev, TrUserData),
        TrUserData
    ).

'd_pfield_ns.GatewayProfileExtraChannel_spreading_factors'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_pfield_ns.GatewayProfileExtraChannel_spreading_factors'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_pfield_ns.GatewayProfileExtraChannel_spreading_factors'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    E,
    TrUserData
) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = 'd_packed_field_ns.GatewayProfileExtraChannel_spreading_factors'(
        PackedBytes,
        0,
        0,
        F,
        E,
        TrUserData
    ),
    'dfp_read_field_def_ns.GatewayProfileExtraChannel'(
        Rest2,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        NewSeq,
        TrUserData
    ).

'd_packed_field_ns.GatewayProfileExtraChannel_spreading_factors'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    AccSeq,
    TrUserData
) when N < 57 ->
    'd_packed_field_ns.GatewayProfileExtraChannel_spreading_factors'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        AccSeq,
        TrUserData
    );
'd_packed_field_ns.GatewayProfileExtraChannel_spreading_factors'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    AccSeq,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'd_packed_field_ns.GatewayProfileExtraChannel_spreading_factors'(
        RestF,
        0,
        0,
        F,
        [NewFValue | AccSeq],
        TrUserData
    );
'd_packed_field_ns.GatewayProfileExtraChannel_spreading_factors'(<<>>, 0, 0, _, AccSeq, _) ->
    AccSeq.

'skip_varint_ns.GatewayProfileExtraChannel'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'skip_varint_ns.GatewayProfileExtraChannel'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'skip_varint_ns.GatewayProfileExtraChannel'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_ns.GatewayProfileExtraChannel'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'skip_length_delimited_ns.GatewayProfileExtraChannel'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.GatewayProfileExtraChannel'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'skip_length_delimited_ns.GatewayProfileExtraChannel'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.GatewayProfileExtraChannel'(
        Rest2,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'skip_group_ns.GatewayProfileExtraChannel'(
    Bin,
    _,
    Z2,
    FNum,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.GatewayProfileExtraChannel'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'skip_32_ns.GatewayProfileExtraChannel'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_ns.GatewayProfileExtraChannel'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'skip_64_ns.GatewayProfileExtraChannel'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_ns.GatewayProfileExtraChannel'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'decode_msg_ns.CreateGatewayProfileRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.CreateGatewayProfileRequest'(
        Bin,
        0,
        0,
        0,
        id(undefined, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.CreateGatewayProfileRequest'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'd_field_ns.CreateGatewayProfileRequest_gateway_profile'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.CreateGatewayProfileRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.CreateGatewayProfileRequest'{gateway_profile = F@_1};
'dfp_read_field_def_ns.CreateGatewayProfileRequest'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.CreateGatewayProfileRequest'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.CreateGatewayProfileRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.CreateGatewayProfileRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'dg_read_field_def_ns.CreateGatewayProfileRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.CreateGatewayProfileRequest_gateway_profile'(
                Rest,
                0,
                0,
                0,
                F@_1,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.CreateGatewayProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.CreateGatewayProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.CreateGatewayProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.CreateGatewayProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.CreateGatewayProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.CreateGatewayProfileRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.CreateGatewayProfileRequest'{gateway_profile = F@_1}.

'd_field_ns.CreateGatewayProfileRequest_gateway_profile'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.CreateGatewayProfileRequest_gateway_profile'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'd_field_ns.CreateGatewayProfileRequest_gateway_profile'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_ns.GatewayProfile'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.CreateGatewayProfileRequest'(
        RestF,
        0,
        0,
        F,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_ns.GatewayProfile'(Prev, NewFValue, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_ns.CreateGatewayProfileRequest'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'skip_varint_ns.CreateGatewayProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.CreateGatewayProfileRequest'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_ns.CreateGatewayProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.CreateGatewayProfileRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.CreateGatewayProfileRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.CreateGatewayProfileRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.CreateGatewayProfileRequest'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.CreateGatewayProfileRequest'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.CreateGatewayProfileRequest'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_ns.CreateGatewayProfileRequest'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.CreateGatewayProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.CreateGatewayProfileRequest'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.CreateGatewayProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.CreateGatewayProfileResponse'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.CreateGatewayProfileResponse'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.CreateGatewayProfileResponse'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'd_field_ns.CreateGatewayProfileResponse_id'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.CreateGatewayProfileResponse'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.CreateGatewayProfileResponse'{id = F@_1};
'dfp_read_field_def_ns.CreateGatewayProfileResponse'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.CreateGatewayProfileResponse'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.CreateGatewayProfileResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.CreateGatewayProfileResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'dg_read_field_def_ns.CreateGatewayProfileResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.CreateGatewayProfileResponse_id'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.CreateGatewayProfileResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.CreateGatewayProfileResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.CreateGatewayProfileResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.CreateGatewayProfileResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.CreateGatewayProfileResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.CreateGatewayProfileResponse'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.CreateGatewayProfileResponse'{id = F@_1}.

'd_field_ns.CreateGatewayProfileResponse_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.CreateGatewayProfileResponse_id'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'd_field_ns.CreateGatewayProfileResponse_id'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.CreateGatewayProfileResponse'(RestF, 0, 0, F, NewFValue, TrUserData).

'skip_varint_ns.CreateGatewayProfileResponse'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'skip_varint_ns.CreateGatewayProfileResponse'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.CreateGatewayProfileResponse'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_ns.CreateGatewayProfileResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.CreateGatewayProfileResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.CreateGatewayProfileResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.CreateGatewayProfileResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.CreateGatewayProfileResponse'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.CreateGatewayProfileResponse'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.CreateGatewayProfileResponse'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_ns.CreateGatewayProfileResponse'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.CreateGatewayProfileResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.CreateGatewayProfileResponse'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.CreateGatewayProfileResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.GetGatewayProfileRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.GetGatewayProfileRequest'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.GetGatewayProfileRequest'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'd_field_ns.GetGatewayProfileRequest_id'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.GetGatewayProfileRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.GetGatewayProfileRequest'{id = F@_1};
'dfp_read_field_def_ns.GetGatewayProfileRequest'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.GetGatewayProfileRequest'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.GetGatewayProfileRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.GetGatewayProfileRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'dg_read_field_def_ns.GetGatewayProfileRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.GetGatewayProfileRequest_id'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.GetGatewayProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.GetGatewayProfileRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 ->
                    'skip_length_delimited_ns.GetGatewayProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.GetGatewayProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.GetGatewayProfileRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
'dg_read_field_def_ns.GetGatewayProfileRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.GetGatewayProfileRequest'{id = F@_1}.

'd_field_ns.GetGatewayProfileRequest_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.GetGatewayProfileRequest_id'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'd_field_ns.GetGatewayProfileRequest_id'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GetGatewayProfileRequest'(RestF, 0, 0, F, NewFValue, TrUserData).

'skip_varint_ns.GetGatewayProfileRequest'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'skip_varint_ns.GetGatewayProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.GetGatewayProfileRequest'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.GetGatewayProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.GetGatewayProfileRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.GetGatewayProfileRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.GetGatewayProfileRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.GetGatewayProfileRequest'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.GetGatewayProfileRequest'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.GetGatewayProfileRequest'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_ns.GetGatewayProfileRequest'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.GetGatewayProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.GetGatewayProfileRequest'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.GetGatewayProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.GetGatewayProfileResponse'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.GetGatewayProfileResponse'(
        Bin,
        0,
        0,
        0,
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.GetGatewayProfileResponse'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_ns.GetGatewayProfileResponse_gateway_profile'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'dfp_read_field_def_ns.GetGatewayProfileResponse'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_ns.GetGatewayProfileResponse_created_at'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'dfp_read_field_def_ns.GetGatewayProfileResponse'(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_ns.GetGatewayProfileResponse_updated_at'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'dfp_read_field_def_ns.GetGatewayProfileResponse'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) ->
    #'ns.GetGatewayProfileResponse'{gateway_profile = F@_1, created_at = F@_2, updated_at = F@_3};
'dfp_read_field_def_ns.GetGatewayProfileResponse'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'dg_read_field_def_ns.GetGatewayProfileResponse'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

'dg_read_field_def_ns.GetGatewayProfileResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.GetGatewayProfileResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'dg_read_field_def_ns.GetGatewayProfileResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.GetGatewayProfileResponse_gateway_profile'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        18 ->
            'd_field_ns.GetGatewayProfileResponse_created_at'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        26 ->
            'd_field_ns.GetGatewayProfileResponse_updated_at'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.GetGatewayProfileResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.GetGatewayProfileResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.GetGatewayProfileResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.GetGatewayProfileResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.GetGatewayProfileResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.GetGatewayProfileResponse'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) ->
    #'ns.GetGatewayProfileResponse'{gateway_profile = F@_1, created_at = F@_2, updated_at = F@_3}.

'd_field_ns.GetGatewayProfileResponse_gateway_profile'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_ns.GetGatewayProfileResponse_gateway_profile'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_ns.GetGatewayProfileResponse_gateway_profile'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    Prev,
    F@_2,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_ns.GatewayProfile'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GetGatewayProfileResponse'(
        RestF,
        0,
        0,
        F,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_ns.GatewayProfile'(Prev, NewFValue, TrUserData)
        end,
        F@_2,
        F@_3,
        TrUserData
    ).

'd_field_ns.GetGatewayProfileResponse_created_at'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_ns.GetGatewayProfileResponse_created_at'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_ns.GetGatewayProfileResponse_created_at'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    Prev,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Timestamp'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GetGatewayProfileResponse'(
        RestF,
        0,
        0,
        F,
        F@_1,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Timestamp'(Prev, NewFValue, TrUserData)
        end,
        F@_3,
        TrUserData
    ).

'd_field_ns.GetGatewayProfileResponse_updated_at'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_ns.GetGatewayProfileResponse_updated_at'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_ns.GetGatewayProfileResponse_updated_at'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Timestamp'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GetGatewayProfileResponse'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Timestamp'(Prev, NewFValue, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_ns.GetGatewayProfileResponse'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'skip_varint_ns.GetGatewayProfileResponse'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'skip_varint_ns.GetGatewayProfileResponse'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'dfp_read_field_def_ns.GetGatewayProfileResponse'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

'skip_length_delimited_ns.GetGatewayProfileResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.GetGatewayProfileResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'skip_length_delimited_ns.GetGatewayProfileResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.GetGatewayProfileResponse'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

'skip_group_ns.GetGatewayProfileResponse'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.GetGatewayProfileResponse'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

'skip_32_ns.GetGatewayProfileResponse'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'dfp_read_field_def_ns.GetGatewayProfileResponse'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

'skip_64_ns.GetGatewayProfileResponse'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'dfp_read_field_def_ns.GetGatewayProfileResponse'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

'decode_msg_ns.UpdateGatewayProfileRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.UpdateGatewayProfileRequest'(
        Bin,
        0,
        0,
        0,
        id(undefined, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.UpdateGatewayProfileRequest'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'd_field_ns.UpdateGatewayProfileRequest_gateway_profile'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.UpdateGatewayProfileRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.UpdateGatewayProfileRequest'{gateway_profile = F@_1};
'dfp_read_field_def_ns.UpdateGatewayProfileRequest'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.UpdateGatewayProfileRequest'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.UpdateGatewayProfileRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.UpdateGatewayProfileRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'dg_read_field_def_ns.UpdateGatewayProfileRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.UpdateGatewayProfileRequest_gateway_profile'(
                Rest,
                0,
                0,
                0,
                F@_1,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.UpdateGatewayProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.UpdateGatewayProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.UpdateGatewayProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.UpdateGatewayProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.UpdateGatewayProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.UpdateGatewayProfileRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.UpdateGatewayProfileRequest'{gateway_profile = F@_1}.

'd_field_ns.UpdateGatewayProfileRequest_gateway_profile'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.UpdateGatewayProfileRequest_gateway_profile'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'd_field_ns.UpdateGatewayProfileRequest_gateway_profile'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_ns.GatewayProfile'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.UpdateGatewayProfileRequest'(
        RestF,
        0,
        0,
        F,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_ns.GatewayProfile'(Prev, NewFValue, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_ns.UpdateGatewayProfileRequest'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'skip_varint_ns.UpdateGatewayProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.UpdateGatewayProfileRequest'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_ns.UpdateGatewayProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.UpdateGatewayProfileRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.UpdateGatewayProfileRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.UpdateGatewayProfileRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.UpdateGatewayProfileRequest'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.UpdateGatewayProfileRequest'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.UpdateGatewayProfileRequest'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_ns.UpdateGatewayProfileRequest'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.UpdateGatewayProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.UpdateGatewayProfileRequest'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.UpdateGatewayProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.DeleteGatewayProfileRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.DeleteGatewayProfileRequest'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.DeleteGatewayProfileRequest'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'd_field_ns.DeleteGatewayProfileRequest_id'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.DeleteGatewayProfileRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.DeleteGatewayProfileRequest'{id = F@_1};
'dfp_read_field_def_ns.DeleteGatewayProfileRequest'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.DeleteGatewayProfileRequest'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.DeleteGatewayProfileRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.DeleteGatewayProfileRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'dg_read_field_def_ns.DeleteGatewayProfileRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.DeleteGatewayProfileRequest_id'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.DeleteGatewayProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.DeleteGatewayProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.DeleteGatewayProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.DeleteGatewayProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.DeleteGatewayProfileRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.DeleteGatewayProfileRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.DeleteGatewayProfileRequest'{id = F@_1}.

'd_field_ns.DeleteGatewayProfileRequest_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.DeleteGatewayProfileRequest_id'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'd_field_ns.DeleteGatewayProfileRequest_id'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.DeleteGatewayProfileRequest'(RestF, 0, 0, F, NewFValue, TrUserData).

'skip_varint_ns.DeleteGatewayProfileRequest'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'skip_varint_ns.DeleteGatewayProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.DeleteGatewayProfileRequest'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_ns.DeleteGatewayProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.DeleteGatewayProfileRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.DeleteGatewayProfileRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.DeleteGatewayProfileRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.DeleteGatewayProfileRequest'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.DeleteGatewayProfileRequest'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.DeleteGatewayProfileRequest'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_ns.DeleteGatewayProfileRequest'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.DeleteGatewayProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.DeleteGatewayProfileRequest'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.DeleteGatewayProfileRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.MulticastGroup'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.MulticastGroup'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        id(0, TrUserData),
        id('CLASS_C', TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.MulticastGroup'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'd_field_ns.MulticastGroup_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'dfp_read_field_def_ns.MulticastGroup'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'd_field_ns.MulticastGroup_mc_addr'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'dfp_read_field_def_ns.MulticastGroup'(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'd_field_ns.MulticastGroup_mc_nwk_s_key'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'dfp_read_field_def_ns.MulticastGroup'(
    <<32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'd_field_ns.MulticastGroup_f_cnt'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'dfp_read_field_def_ns.MulticastGroup'(
    <<40, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'd_field_ns.MulticastGroup_group_type'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'dfp_read_field_def_ns.MulticastGroup'(
    <<48, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'd_field_ns.MulticastGroup_dr'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'dfp_read_field_def_ns.MulticastGroup'(
    <<56, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'd_field_ns.MulticastGroup_frequency'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'dfp_read_field_def_ns.MulticastGroup'(
    <<64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'd_field_ns.MulticastGroup_ping_slot_period'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'dfp_read_field_def_ns.MulticastGroup'(
    <<74, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'd_field_ns.MulticastGroup_service_profile_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'dfp_read_field_def_ns.MulticastGroup'(
    <<82, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'd_field_ns.MulticastGroup_routing_profile_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'dfp_read_field_def_ns.MulticastGroup'(
    <<>>,
    0,
    0,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    _
) ->
    #'ns.MulticastGroup'{
        id = F@_1,
        mc_addr = F@_2,
        mc_nwk_s_key = F@_3,
        f_cnt = F@_4,
        group_type = F@_5,
        dr = F@_6,
        frequency = F@_7,
        ping_slot_period = F@_8,
        service_profile_id = F@_9,
        routing_profile_id = F@_10
    };
'dfp_read_field_def_ns.MulticastGroup'(
    Other,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'dg_read_field_def_ns.MulticastGroup'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

'dg_read_field_def_ns.MulticastGroup'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.MulticastGroup'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'dg_read_field_def_ns.MulticastGroup'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.MulticastGroup_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        18 ->
            'd_field_ns.MulticastGroup_mc_addr'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        26 ->
            'd_field_ns.MulticastGroup_mc_nwk_s_key'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        32 ->
            'd_field_ns.MulticastGroup_f_cnt'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        40 ->
            'd_field_ns.MulticastGroup_group_type'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        48 ->
            'd_field_ns.MulticastGroup_dr'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        56 ->
            'd_field_ns.MulticastGroup_frequency'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        64 ->
            'd_field_ns.MulticastGroup_ping_slot_period'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        74 ->
            'd_field_ns.MulticastGroup_service_profile_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        82 ->
            'd_field_ns.MulticastGroup_routing_profile_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.MulticastGroup'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.MulticastGroup'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.MulticastGroup'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.MulticastGroup'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.MulticastGroup'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.MulticastGroup'(
    <<>>,
    0,
    0,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    _
) ->
    #'ns.MulticastGroup'{
        id = F@_1,
        mc_addr = F@_2,
        mc_nwk_s_key = F@_3,
        f_cnt = F@_4,
        group_type = F@_5,
        dr = F@_6,
        frequency = F@_7,
        ping_slot_period = F@_8,
        service_profile_id = F@_9,
        routing_profile_id = F@_10
    }.

'd_field_ns.MulticastGroup_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'd_field_ns.MulticastGroup_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'd_field_ns.MulticastGroup_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.MulticastGroup'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

'd_field_ns.MulticastGroup_mc_addr'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'd_field_ns.MulticastGroup_mc_addr'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'd_field_ns.MulticastGroup_mc_addr'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.MulticastGroup'(
        RestF,
        0,
        0,
        F,
        F@_1,
        NewFValue,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

'd_field_ns.MulticastGroup_mc_nwk_s_key'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'd_field_ns.MulticastGroup_mc_nwk_s_key'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'd_field_ns.MulticastGroup_mc_nwk_s_key'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    _,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.MulticastGroup'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        NewFValue,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

'd_field_ns.MulticastGroup_f_cnt'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'd_field_ns.MulticastGroup_f_cnt'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'd_field_ns.MulticastGroup_f_cnt'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    _,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_ns.MulticastGroup'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        NewFValue,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

'd_field_ns.MulticastGroup_group_type'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'd_field_ns.MulticastGroup_group_type'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'd_field_ns.MulticastGroup_group_type'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} =
        {id(
                'd_enum_ns.MulticastGroupType'(begin
                    <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>,
                    id(Res, TrUserData)
                end),
                TrUserData
            ),
            Rest},
    'dfp_read_field_def_ns.MulticastGroup'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        NewFValue,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

'd_field_ns.MulticastGroup_dr'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'd_field_ns.MulticastGroup_dr'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'd_field_ns.MulticastGroup_dr'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    _,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_ns.MulticastGroup'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        NewFValue,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

'd_field_ns.MulticastGroup_frequency'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'd_field_ns.MulticastGroup_frequency'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'd_field_ns.MulticastGroup_frequency'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    _,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_ns.MulticastGroup'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        NewFValue,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

'd_field_ns.MulticastGroup_ping_slot_period'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'd_field_ns.MulticastGroup_ping_slot_period'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'd_field_ns.MulticastGroup_ping_slot_period'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    _,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_ns.MulticastGroup'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        NewFValue,
        F@_9,
        F@_10,
        TrUserData
    ).

'd_field_ns.MulticastGroup_service_profile_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'd_field_ns.MulticastGroup_service_profile_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'd_field_ns.MulticastGroup_service_profile_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    _,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.MulticastGroup'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        NewFValue,
        F@_10,
        TrUserData
    ).

'd_field_ns.MulticastGroup_routing_profile_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'd_field_ns.MulticastGroup_routing_profile_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'd_field_ns.MulticastGroup_routing_profile_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.MulticastGroup'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        NewFValue,
        TrUserData
    ).

'skip_varint_ns.MulticastGroup'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'skip_varint_ns.MulticastGroup'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'skip_varint_ns.MulticastGroup'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'dfp_read_field_def_ns.MulticastGroup'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

'skip_length_delimited_ns.MulticastGroup'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.MulticastGroup'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'skip_length_delimited_ns.MulticastGroup'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.MulticastGroup'(
        Rest2,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

'skip_group_ns.MulticastGroup'(
    Bin,
    _,
    Z2,
    FNum,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.MulticastGroup'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

'skip_32_ns.MulticastGroup'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'dfp_read_field_def_ns.MulticastGroup'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

'skip_64_ns.MulticastGroup'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'dfp_read_field_def_ns.MulticastGroup'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

'decode_msg_ns.CreateMulticastGroupRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.CreateMulticastGroupRequest'(
        Bin,
        0,
        0,
        0,
        id(undefined, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.CreateMulticastGroupRequest'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'd_field_ns.CreateMulticastGroupRequest_multicast_group'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.CreateMulticastGroupRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.CreateMulticastGroupRequest'{multicast_group = F@_1};
'dfp_read_field_def_ns.CreateMulticastGroupRequest'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.CreateMulticastGroupRequest'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.CreateMulticastGroupRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.CreateMulticastGroupRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'dg_read_field_def_ns.CreateMulticastGroupRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.CreateMulticastGroupRequest_multicast_group'(
                Rest,
                0,
                0,
                0,
                F@_1,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.CreateMulticastGroupRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.CreateMulticastGroupRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.CreateMulticastGroupRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.CreateMulticastGroupRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.CreateMulticastGroupRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.CreateMulticastGroupRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.CreateMulticastGroupRequest'{multicast_group = F@_1}.

'd_field_ns.CreateMulticastGroupRequest_multicast_group'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.CreateMulticastGroupRequest_multicast_group'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'd_field_ns.CreateMulticastGroupRequest_multicast_group'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_ns.MulticastGroup'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.CreateMulticastGroupRequest'(
        RestF,
        0,
        0,
        F,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_ns.MulticastGroup'(Prev, NewFValue, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_ns.CreateMulticastGroupRequest'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'skip_varint_ns.CreateMulticastGroupRequest'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.CreateMulticastGroupRequest'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_ns.CreateMulticastGroupRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.CreateMulticastGroupRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.CreateMulticastGroupRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.CreateMulticastGroupRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.CreateMulticastGroupRequest'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.CreateMulticastGroupRequest'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.CreateMulticastGroupRequest'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_ns.CreateMulticastGroupRequest'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.CreateMulticastGroupRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.CreateMulticastGroupRequest'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.CreateMulticastGroupRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.CreateMulticastGroupResponse'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.CreateMulticastGroupResponse'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.CreateMulticastGroupResponse'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'd_field_ns.CreateMulticastGroupResponse_id'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.CreateMulticastGroupResponse'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.CreateMulticastGroupResponse'{id = F@_1};
'dfp_read_field_def_ns.CreateMulticastGroupResponse'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.CreateMulticastGroupResponse'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.CreateMulticastGroupResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.CreateMulticastGroupResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'dg_read_field_def_ns.CreateMulticastGroupResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.CreateMulticastGroupResponse_id'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.CreateMulticastGroupResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.CreateMulticastGroupResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.CreateMulticastGroupResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.CreateMulticastGroupResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.CreateMulticastGroupResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.CreateMulticastGroupResponse'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.CreateMulticastGroupResponse'{id = F@_1}.

'd_field_ns.CreateMulticastGroupResponse_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.CreateMulticastGroupResponse_id'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'd_field_ns.CreateMulticastGroupResponse_id'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.CreateMulticastGroupResponse'(RestF, 0, 0, F, NewFValue, TrUserData).

'skip_varint_ns.CreateMulticastGroupResponse'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'skip_varint_ns.CreateMulticastGroupResponse'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.CreateMulticastGroupResponse'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_ns.CreateMulticastGroupResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.CreateMulticastGroupResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.CreateMulticastGroupResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.CreateMulticastGroupResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.CreateMulticastGroupResponse'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.CreateMulticastGroupResponse'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.CreateMulticastGroupResponse'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_ns.CreateMulticastGroupResponse'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.CreateMulticastGroupResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.CreateMulticastGroupResponse'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.CreateMulticastGroupResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.GetMulticastGroupRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.GetMulticastGroupRequest'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.GetMulticastGroupRequest'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'd_field_ns.GetMulticastGroupRequest_id'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.GetMulticastGroupRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.GetMulticastGroupRequest'{id = F@_1};
'dfp_read_field_def_ns.GetMulticastGroupRequest'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.GetMulticastGroupRequest'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.GetMulticastGroupRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.GetMulticastGroupRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'dg_read_field_def_ns.GetMulticastGroupRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.GetMulticastGroupRequest_id'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.GetMulticastGroupRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.GetMulticastGroupRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 ->
                    'skip_length_delimited_ns.GetMulticastGroupRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.GetMulticastGroupRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.GetMulticastGroupRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
'dg_read_field_def_ns.GetMulticastGroupRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.GetMulticastGroupRequest'{id = F@_1}.

'd_field_ns.GetMulticastGroupRequest_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.GetMulticastGroupRequest_id'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'd_field_ns.GetMulticastGroupRequest_id'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GetMulticastGroupRequest'(RestF, 0, 0, F, NewFValue, TrUserData).

'skip_varint_ns.GetMulticastGroupRequest'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'skip_varint_ns.GetMulticastGroupRequest'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.GetMulticastGroupRequest'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.GetMulticastGroupRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.GetMulticastGroupRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.GetMulticastGroupRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.GetMulticastGroupRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.GetMulticastGroupRequest'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.GetMulticastGroupRequest'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.GetMulticastGroupRequest'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_ns.GetMulticastGroupRequest'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.GetMulticastGroupRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.GetMulticastGroupRequest'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.GetMulticastGroupRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.GetMulticastGroupResponse'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.GetMulticastGroupResponse'(
        Bin,
        0,
        0,
        0,
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.GetMulticastGroupResponse'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_ns.GetMulticastGroupResponse_multicast_group'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'dfp_read_field_def_ns.GetMulticastGroupResponse'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_ns.GetMulticastGroupResponse_created_at'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'dfp_read_field_def_ns.GetMulticastGroupResponse'(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_ns.GetMulticastGroupResponse_updated_at'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'dfp_read_field_def_ns.GetMulticastGroupResponse'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) ->
    #'ns.GetMulticastGroupResponse'{multicast_group = F@_1, created_at = F@_2, updated_at = F@_3};
'dfp_read_field_def_ns.GetMulticastGroupResponse'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'dg_read_field_def_ns.GetMulticastGroupResponse'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

'dg_read_field_def_ns.GetMulticastGroupResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.GetMulticastGroupResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'dg_read_field_def_ns.GetMulticastGroupResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.GetMulticastGroupResponse_multicast_group'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        18 ->
            'd_field_ns.GetMulticastGroupResponse_created_at'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        26 ->
            'd_field_ns.GetMulticastGroupResponse_updated_at'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.GetMulticastGroupResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.GetMulticastGroupResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.GetMulticastGroupResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.GetMulticastGroupResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.GetMulticastGroupResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.GetMulticastGroupResponse'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) ->
    #'ns.GetMulticastGroupResponse'{multicast_group = F@_1, created_at = F@_2, updated_at = F@_3}.

'd_field_ns.GetMulticastGroupResponse_multicast_group'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_ns.GetMulticastGroupResponse_multicast_group'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_ns.GetMulticastGroupResponse_multicast_group'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    Prev,
    F@_2,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_ns.MulticastGroup'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GetMulticastGroupResponse'(
        RestF,
        0,
        0,
        F,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_ns.MulticastGroup'(Prev, NewFValue, TrUserData)
        end,
        F@_2,
        F@_3,
        TrUserData
    ).

'd_field_ns.GetMulticastGroupResponse_created_at'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_ns.GetMulticastGroupResponse_created_at'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_ns.GetMulticastGroupResponse_created_at'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    Prev,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Timestamp'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GetMulticastGroupResponse'(
        RestF,
        0,
        0,
        F,
        F@_1,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Timestamp'(Prev, NewFValue, TrUserData)
        end,
        F@_3,
        TrUserData
    ).

'd_field_ns.GetMulticastGroupResponse_updated_at'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_ns.GetMulticastGroupResponse_updated_at'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_ns.GetMulticastGroupResponse_updated_at'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Timestamp'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GetMulticastGroupResponse'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Timestamp'(Prev, NewFValue, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_ns.GetMulticastGroupResponse'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'skip_varint_ns.GetMulticastGroupResponse'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'skip_varint_ns.GetMulticastGroupResponse'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'dfp_read_field_def_ns.GetMulticastGroupResponse'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

'skip_length_delimited_ns.GetMulticastGroupResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.GetMulticastGroupResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'skip_length_delimited_ns.GetMulticastGroupResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.GetMulticastGroupResponse'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

'skip_group_ns.GetMulticastGroupResponse'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.GetMulticastGroupResponse'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

'skip_32_ns.GetMulticastGroupResponse'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'dfp_read_field_def_ns.GetMulticastGroupResponse'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

'skip_64_ns.GetMulticastGroupResponse'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'dfp_read_field_def_ns.GetMulticastGroupResponse'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

'decode_msg_ns.UpdateMulticastGroupRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.UpdateMulticastGroupRequest'(
        Bin,
        0,
        0,
        0,
        id(undefined, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.UpdateMulticastGroupRequest'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'd_field_ns.UpdateMulticastGroupRequest_multicast_group'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.UpdateMulticastGroupRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.UpdateMulticastGroupRequest'{multicast_group = F@_1};
'dfp_read_field_def_ns.UpdateMulticastGroupRequest'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.UpdateMulticastGroupRequest'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.UpdateMulticastGroupRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.UpdateMulticastGroupRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'dg_read_field_def_ns.UpdateMulticastGroupRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.UpdateMulticastGroupRequest_multicast_group'(
                Rest,
                0,
                0,
                0,
                F@_1,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.UpdateMulticastGroupRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.UpdateMulticastGroupRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.UpdateMulticastGroupRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.UpdateMulticastGroupRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.UpdateMulticastGroupRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.UpdateMulticastGroupRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.UpdateMulticastGroupRequest'{multicast_group = F@_1}.

'd_field_ns.UpdateMulticastGroupRequest_multicast_group'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.UpdateMulticastGroupRequest_multicast_group'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'd_field_ns.UpdateMulticastGroupRequest_multicast_group'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_ns.MulticastGroup'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.UpdateMulticastGroupRequest'(
        RestF,
        0,
        0,
        F,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_ns.MulticastGroup'(Prev, NewFValue, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_ns.UpdateMulticastGroupRequest'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'skip_varint_ns.UpdateMulticastGroupRequest'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.UpdateMulticastGroupRequest'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_ns.UpdateMulticastGroupRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.UpdateMulticastGroupRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.UpdateMulticastGroupRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.UpdateMulticastGroupRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.UpdateMulticastGroupRequest'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.UpdateMulticastGroupRequest'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.UpdateMulticastGroupRequest'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_ns.UpdateMulticastGroupRequest'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.UpdateMulticastGroupRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.UpdateMulticastGroupRequest'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.UpdateMulticastGroupRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.DeleteMulticastGroupRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.DeleteMulticastGroupRequest'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.DeleteMulticastGroupRequest'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'd_field_ns.DeleteMulticastGroupRequest_id'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.DeleteMulticastGroupRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.DeleteMulticastGroupRequest'{id = F@_1};
'dfp_read_field_def_ns.DeleteMulticastGroupRequest'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.DeleteMulticastGroupRequest'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.DeleteMulticastGroupRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.DeleteMulticastGroupRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'dg_read_field_def_ns.DeleteMulticastGroupRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.DeleteMulticastGroupRequest_id'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.DeleteMulticastGroupRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.DeleteMulticastGroupRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.DeleteMulticastGroupRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.DeleteMulticastGroupRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.DeleteMulticastGroupRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.DeleteMulticastGroupRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.DeleteMulticastGroupRequest'{id = F@_1}.

'd_field_ns.DeleteMulticastGroupRequest_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.DeleteMulticastGroupRequest_id'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'd_field_ns.DeleteMulticastGroupRequest_id'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.DeleteMulticastGroupRequest'(RestF, 0, 0, F, NewFValue, TrUserData).

'skip_varint_ns.DeleteMulticastGroupRequest'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'skip_varint_ns.DeleteMulticastGroupRequest'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.DeleteMulticastGroupRequest'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_ns.DeleteMulticastGroupRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.DeleteMulticastGroupRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.DeleteMulticastGroupRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.DeleteMulticastGroupRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.DeleteMulticastGroupRequest'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.DeleteMulticastGroupRequest'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.DeleteMulticastGroupRequest'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_ns.DeleteMulticastGroupRequest'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.DeleteMulticastGroupRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.DeleteMulticastGroupRequest'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.DeleteMulticastGroupRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.AddDeviceToMulticastGroupRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.AddDeviceToMulticastGroupRequest'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.AddDeviceToMulticastGroupRequest'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'd_field_ns.AddDeviceToMulticastGroupRequest_dev_eui'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_ns.AddDeviceToMulticastGroupRequest'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'd_field_ns.AddDeviceToMulticastGroupRequest_multicast_group_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'dfp_read_field_def_ns.AddDeviceToMulticastGroupRequest'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'ns.AddDeviceToMulticastGroupRequest'{dev_eui = F@_1, multicast_group_id = F@_2};
'dfp_read_field_def_ns.AddDeviceToMulticastGroupRequest'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_ns.AddDeviceToMulticastGroupRequest'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        TrUserData
    ).

'dg_read_field_def_ns.AddDeviceToMulticastGroupRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.AddDeviceToMulticastGroupRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'dg_read_field_def_ns.AddDeviceToMulticastGroupRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.AddDeviceToMulticastGroupRequest_dev_eui'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                TrUserData
            );
        18 ->
            'd_field_ns.AddDeviceToMulticastGroupRequest_multicast_group_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.AddDeviceToMulticastGroupRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.AddDeviceToMulticastGroupRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.AddDeviceToMulticastGroupRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.AddDeviceToMulticastGroupRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.AddDeviceToMulticastGroupRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.AddDeviceToMulticastGroupRequest'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'ns.AddDeviceToMulticastGroupRequest'{dev_eui = F@_1, multicast_group_id = F@_2}.

'd_field_ns.AddDeviceToMulticastGroupRequest_dev_eui'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_ns.AddDeviceToMulticastGroupRequest_dev_eui'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'd_field_ns.AddDeviceToMulticastGroupRequest_dev_eui'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.AddDeviceToMulticastGroupRequest'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        TrUserData
    ).

'd_field_ns.AddDeviceToMulticastGroupRequest_multicast_group_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_ns.AddDeviceToMulticastGroupRequest_multicast_group_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'd_field_ns.AddDeviceToMulticastGroupRequest_multicast_group_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.AddDeviceToMulticastGroupRequest'(
        RestF,
        0,
        0,
        F,
        F@_1,
        NewFValue,
        TrUserData
    ).

'skip_varint_ns.AddDeviceToMulticastGroupRequest'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'skip_varint_ns.AddDeviceToMulticastGroupRequest'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_ns.AddDeviceToMulticastGroupRequest'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'dfp_read_field_def_ns.AddDeviceToMulticastGroupRequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        TrUserData
    ).

'skip_length_delimited_ns.AddDeviceToMulticastGroupRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.AddDeviceToMulticastGroupRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'skip_length_delimited_ns.AddDeviceToMulticastGroupRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.AddDeviceToMulticastGroupRequest'(
        Rest2,
        0,
        0,
        F,
        F@_1,
        F@_2,
        TrUserData
    ).

'skip_group_ns.AddDeviceToMulticastGroupRequest'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.AddDeviceToMulticastGroupRequest'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        TrUserData
    ).

'skip_32_ns.AddDeviceToMulticastGroupRequest'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'dfp_read_field_def_ns.AddDeviceToMulticastGroupRequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        TrUserData
    ).

'skip_64_ns.AddDeviceToMulticastGroupRequest'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'dfp_read_field_def_ns.AddDeviceToMulticastGroupRequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        TrUserData
    ).

'decode_msg_ns.RemoveDeviceFromMulticastGroupRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.RemoveDeviceFromMulticastGroupRequest'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.RemoveDeviceFromMulticastGroupRequest'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'd_field_ns.RemoveDeviceFromMulticastGroupRequest_dev_eui'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'dfp_read_field_def_ns.RemoveDeviceFromMulticastGroupRequest'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'd_field_ns.RemoveDeviceFromMulticastGroupRequest_multicast_group_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'dfp_read_field_def_ns.RemoveDeviceFromMulticastGroupRequest'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'ns.RemoveDeviceFromMulticastGroupRequest'{dev_eui = F@_1, multicast_group_id = F@_2};
'dfp_read_field_def_ns.RemoveDeviceFromMulticastGroupRequest'(
    Other,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'dg_read_field_def_ns.RemoveDeviceFromMulticastGroupRequest'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        TrUserData
    ).

'dg_read_field_def_ns.RemoveDeviceFromMulticastGroupRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.RemoveDeviceFromMulticastGroupRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'dg_read_field_def_ns.RemoveDeviceFromMulticastGroupRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.RemoveDeviceFromMulticastGroupRequest_dev_eui'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                TrUserData
            );
        18 ->
            'd_field_ns.RemoveDeviceFromMulticastGroupRequest_multicast_group_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.RemoveDeviceFromMulticastGroupRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.RemoveDeviceFromMulticastGroupRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.RemoveDeviceFromMulticastGroupRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.RemoveDeviceFromMulticastGroupRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.RemoveDeviceFromMulticastGroupRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.RemoveDeviceFromMulticastGroupRequest'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'ns.RemoveDeviceFromMulticastGroupRequest'{dev_eui = F@_1, multicast_group_id = F@_2}.

'd_field_ns.RemoveDeviceFromMulticastGroupRequest_dev_eui'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_ns.RemoveDeviceFromMulticastGroupRequest_dev_eui'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'd_field_ns.RemoveDeviceFromMulticastGroupRequest_dev_eui'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.RemoveDeviceFromMulticastGroupRequest'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        TrUserData
    ).

'd_field_ns.RemoveDeviceFromMulticastGroupRequest_multicast_group_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_ns.RemoveDeviceFromMulticastGroupRequest_multicast_group_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'd_field_ns.RemoveDeviceFromMulticastGroupRequest_multicast_group_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.RemoveDeviceFromMulticastGroupRequest'(
        RestF,
        0,
        0,
        F,
        F@_1,
        NewFValue,
        TrUserData
    ).

'skip_varint_ns.RemoveDeviceFromMulticastGroupRequest'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'skip_varint_ns.RemoveDeviceFromMulticastGroupRequest'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_ns.RemoveDeviceFromMulticastGroupRequest'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'dfp_read_field_def_ns.RemoveDeviceFromMulticastGroupRequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        TrUserData
    ).

'skip_length_delimited_ns.RemoveDeviceFromMulticastGroupRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.RemoveDeviceFromMulticastGroupRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'skip_length_delimited_ns.RemoveDeviceFromMulticastGroupRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.RemoveDeviceFromMulticastGroupRequest'(
        Rest2,
        0,
        0,
        F,
        F@_1,
        F@_2,
        TrUserData
    ).

'skip_group_ns.RemoveDeviceFromMulticastGroupRequest'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.RemoveDeviceFromMulticastGroupRequest'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        TrUserData
    ).

'skip_32_ns.RemoveDeviceFromMulticastGroupRequest'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'dfp_read_field_def_ns.RemoveDeviceFromMulticastGroupRequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        TrUserData
    ).

'skip_64_ns.RemoveDeviceFromMulticastGroupRequest'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'dfp_read_field_def_ns.RemoveDeviceFromMulticastGroupRequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        TrUserData
    ).

'decode_msg_ns.MulticastQueueItem'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.MulticastQueueItem'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.MulticastQueueItem'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'd_field_ns.MulticastQueueItem_multicast_group_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'dfp_read_field_def_ns.MulticastQueueItem'(
    <<16, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'd_field_ns.MulticastQueueItem_f_cnt'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'dfp_read_field_def_ns.MulticastQueueItem'(
    <<24, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'd_field_ns.MulticastQueueItem_f_port'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'dfp_read_field_def_ns.MulticastQueueItem'(
    <<34, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'd_field_ns.MulticastQueueItem_frm_payload'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'dfp_read_field_def_ns.MulticastQueueItem'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) ->
    #'ns.MulticastQueueItem'{
        multicast_group_id = F@_1,
        f_cnt = F@_2,
        f_port = F@_3,
        frm_payload = F@_4
    };
'dfp_read_field_def_ns.MulticastQueueItem'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    'dg_read_field_def_ns.MulticastQueueItem'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

'dg_read_field_def_ns.MulticastQueueItem'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.MulticastQueueItem'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'dg_read_field_def_ns.MulticastQueueItem'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.MulticastQueueItem_multicast_group_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        16 ->
            'd_field_ns.MulticastQueueItem_f_cnt'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        24 ->
            'd_field_ns.MulticastQueueItem_f_port'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        34 ->
            'd_field_ns.MulticastQueueItem_frm_payload'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.MulticastQueueItem'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.MulticastQueueItem'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.MulticastQueueItem'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.MulticastQueueItem'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.MulticastQueueItem'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.MulticastQueueItem'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) ->
    #'ns.MulticastQueueItem'{
        multicast_group_id = F@_1,
        f_cnt = F@_2,
        f_port = F@_3,
        frm_payload = F@_4
    }.

'd_field_ns.MulticastQueueItem_multicast_group_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    'd_field_ns.MulticastQueueItem_multicast_group_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'd_field_ns.MulticastQueueItem_multicast_group_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.MulticastQueueItem'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

'd_field_ns.MulticastQueueItem_f_cnt'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    'd_field_ns.MulticastQueueItem_f_cnt'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'd_field_ns.MulticastQueueItem_f_cnt'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    F@_3,
    F@_4,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_ns.MulticastQueueItem'(
        RestF,
        0,
        0,
        F,
        F@_1,
        NewFValue,
        F@_3,
        F@_4,
        TrUserData
    ).

'd_field_ns.MulticastQueueItem_f_port'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    'd_field_ns.MulticastQueueItem_f_port'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'd_field_ns.MulticastQueueItem_f_port'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    _,
    F@_4,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_ns.MulticastQueueItem'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        NewFValue,
        F@_4,
        TrUserData
    ).

'd_field_ns.MulticastQueueItem_frm_payload'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    'd_field_ns.MulticastQueueItem_frm_payload'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'd_field_ns.MulticastQueueItem_frm_payload'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.MulticastQueueItem'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        NewFValue,
        TrUserData
    ).

'skip_varint_ns.MulticastQueueItem'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'skip_varint_ns.MulticastQueueItem'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'skip_varint_ns.MulticastQueueItem'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'dfp_read_field_def_ns.MulticastQueueItem'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

'skip_length_delimited_ns.MulticastQueueItem'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.MulticastQueueItem'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'skip_length_delimited_ns.MulticastQueueItem'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.MulticastQueueItem'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

'skip_group_ns.MulticastQueueItem'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.MulticastQueueItem'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

'skip_32_ns.MulticastQueueItem'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'dfp_read_field_def_ns.MulticastQueueItem'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

'skip_64_ns.MulticastQueueItem'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'dfp_read_field_def_ns.MulticastQueueItem'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

'decode_msg_ns.EnqueueMulticastQueueItemRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.EnqueueMulticastQueueItemRequest'(
        Bin,
        0,
        0,
        0,
        id(undefined, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.EnqueueMulticastQueueItemRequest'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'd_field_ns.EnqueueMulticastQueueItemRequest_multicast_queue_item'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        TrUserData
    );
'dfp_read_field_def_ns.EnqueueMulticastQueueItemRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.EnqueueMulticastQueueItemRequest'{multicast_queue_item = F@_1};
'dfp_read_field_def_ns.EnqueueMulticastQueueItemRequest'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.EnqueueMulticastQueueItemRequest'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.EnqueueMulticastQueueItemRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.EnqueueMulticastQueueItemRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'dg_read_field_def_ns.EnqueueMulticastQueueItemRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.EnqueueMulticastQueueItemRequest_multicast_queue_item'(
                Rest,
                0,
                0,
                0,
                F@_1,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.EnqueueMulticastQueueItemRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.EnqueueMulticastQueueItemRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.EnqueueMulticastQueueItemRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.EnqueueMulticastQueueItemRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.EnqueueMulticastQueueItemRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.EnqueueMulticastQueueItemRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.EnqueueMulticastQueueItemRequest'{multicast_queue_item = F@_1}.

'd_field_ns.EnqueueMulticastQueueItemRequest_multicast_queue_item'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.EnqueueMulticastQueueItemRequest_multicast_queue_item'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'd_field_ns.EnqueueMulticastQueueItemRequest_multicast_queue_item'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_ns.MulticastQueueItem'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.EnqueueMulticastQueueItemRequest'(
        RestF,
        0,
        0,
        F,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_ns.MulticastQueueItem'(Prev, NewFValue, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_ns.EnqueueMulticastQueueItemRequest'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'skip_varint_ns.EnqueueMulticastQueueItemRequest'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.EnqueueMulticastQueueItemRequest'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_ns.EnqueueMulticastQueueItemRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.EnqueueMulticastQueueItemRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.EnqueueMulticastQueueItemRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.EnqueueMulticastQueueItemRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.EnqueueMulticastQueueItemRequest'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.EnqueueMulticastQueueItemRequest'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.EnqueueMulticastQueueItemRequest'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_ns.EnqueueMulticastQueueItemRequest'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.EnqueueMulticastQueueItemRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.EnqueueMulticastQueueItemRequest'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.EnqueueMulticastQueueItemRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.FlushMulticastQueueForMulticastGroupRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.FlushMulticastQueueForMulticastGroupRequest'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.FlushMulticastQueueForMulticastGroupRequest'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'd_field_ns.FlushMulticastQueueForMulticastGroupRequest_multicast_group_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        TrUserData
    );
'dfp_read_field_def_ns.FlushMulticastQueueForMulticastGroupRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.FlushMulticastQueueForMulticastGroupRequest'{multicast_group_id = F@_1};
'dfp_read_field_def_ns.FlushMulticastQueueForMulticastGroupRequest'(
    Other,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dg_read_field_def_ns.FlushMulticastQueueForMulticastGroupRequest'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        TrUserData
    ).

'dg_read_field_def_ns.FlushMulticastQueueForMulticastGroupRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.FlushMulticastQueueForMulticastGroupRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'dg_read_field_def_ns.FlushMulticastQueueForMulticastGroupRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.FlushMulticastQueueForMulticastGroupRequest_multicast_group_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.FlushMulticastQueueForMulticastGroupRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.FlushMulticastQueueForMulticastGroupRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.FlushMulticastQueueForMulticastGroupRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.FlushMulticastQueueForMulticastGroupRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.FlushMulticastQueueForMulticastGroupRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.FlushMulticastQueueForMulticastGroupRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.FlushMulticastQueueForMulticastGroupRequest'{multicast_group_id = F@_1}.

'd_field_ns.FlushMulticastQueueForMulticastGroupRequest_multicast_group_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.FlushMulticastQueueForMulticastGroupRequest_multicast_group_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'd_field_ns.FlushMulticastQueueForMulticastGroupRequest_multicast_group_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.FlushMulticastQueueForMulticastGroupRequest'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        TrUserData
    ).

'skip_varint_ns.FlushMulticastQueueForMulticastGroupRequest'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'skip_varint_ns.FlushMulticastQueueForMulticastGroupRequest'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.FlushMulticastQueueForMulticastGroupRequest'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_ns.FlushMulticastQueueForMulticastGroupRequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        TrUserData
    ).

'skip_length_delimited_ns.FlushMulticastQueueForMulticastGroupRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.FlushMulticastQueueForMulticastGroupRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.FlushMulticastQueueForMulticastGroupRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.FlushMulticastQueueForMulticastGroupRequest'(
        Rest2,
        0,
        0,
        F,
        F@_1,
        TrUserData
    ).

'skip_group_ns.FlushMulticastQueueForMulticastGroupRequest'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.FlushMulticastQueueForMulticastGroupRequest'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        TrUserData
    ).

'skip_32_ns.FlushMulticastQueueForMulticastGroupRequest'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_ns.FlushMulticastQueueForMulticastGroupRequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        TrUserData
    ).

'skip_64_ns.FlushMulticastQueueForMulticastGroupRequest'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_ns.FlushMulticastQueueForMulticastGroupRequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        TrUserData
    ).

'decode_msg_ns.GetMulticastQueueItemsForMulticastGroupRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.GetMulticastQueueItemsForMulticastGroupRequest'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.GetMulticastQueueItemsForMulticastGroupRequest'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'd_field_ns.GetMulticastQueueItemsForMulticastGroupRequest_multicast_group_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        TrUserData
    );
'dfp_read_field_def_ns.GetMulticastQueueItemsForMulticastGroupRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.GetMulticastQueueItemsForMulticastGroupRequest'{multicast_group_id = F@_1};
'dfp_read_field_def_ns.GetMulticastQueueItemsForMulticastGroupRequest'(
    Other,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dg_read_field_def_ns.GetMulticastQueueItemsForMulticastGroupRequest'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        TrUserData
    ).

'dg_read_field_def_ns.GetMulticastQueueItemsForMulticastGroupRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.GetMulticastQueueItemsForMulticastGroupRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'dg_read_field_def_ns.GetMulticastQueueItemsForMulticastGroupRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.GetMulticastQueueItemsForMulticastGroupRequest_multicast_group_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.GetMulticastQueueItemsForMulticastGroupRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.GetMulticastQueueItemsForMulticastGroupRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.GetMulticastQueueItemsForMulticastGroupRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.GetMulticastQueueItemsForMulticastGroupRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.GetMulticastQueueItemsForMulticastGroupRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.GetMulticastQueueItemsForMulticastGroupRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'ns.GetMulticastQueueItemsForMulticastGroupRequest'{multicast_group_id = F@_1}.

'd_field_ns.GetMulticastQueueItemsForMulticastGroupRequest_multicast_group_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.GetMulticastQueueItemsForMulticastGroupRequest_multicast_group_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'd_field_ns.GetMulticastQueueItemsForMulticastGroupRequest_multicast_group_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GetMulticastQueueItemsForMulticastGroupRequest'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        TrUserData
    ).

'skip_varint_ns.GetMulticastQueueItemsForMulticastGroupRequest'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'skip_varint_ns.GetMulticastQueueItemsForMulticastGroupRequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        TrUserData
    );
'skip_varint_ns.GetMulticastQueueItemsForMulticastGroupRequest'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_ns.GetMulticastQueueItemsForMulticastGroupRequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        TrUserData
    ).

'skip_length_delimited_ns.GetMulticastQueueItemsForMulticastGroupRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.GetMulticastQueueItemsForMulticastGroupRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.GetMulticastQueueItemsForMulticastGroupRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.GetMulticastQueueItemsForMulticastGroupRequest'(
        Rest2,
        0,
        0,
        F,
        F@_1,
        TrUserData
    ).

'skip_group_ns.GetMulticastQueueItemsForMulticastGroupRequest'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.GetMulticastQueueItemsForMulticastGroupRequest'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        TrUserData
    ).

'skip_32_ns.GetMulticastQueueItemsForMulticastGroupRequest'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_ns.GetMulticastQueueItemsForMulticastGroupRequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        TrUserData
    ).

'skip_64_ns.GetMulticastQueueItemsForMulticastGroupRequest'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_ns.GetMulticastQueueItemsForMulticastGroupRequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        TrUserData
    ).

'decode_msg_ns.GetMulticastQueueItemsForMulticastGroupResponse'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.GetMulticastQueueItemsForMulticastGroupResponse'(
        Bin,
        0,
        0,
        0,
        id([], TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.GetMulticastQueueItemsForMulticastGroupResponse'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'd_field_ns.GetMulticastQueueItemsForMulticastGroupResponse_multicast_queue_items'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        TrUserData
    );
'dfp_read_field_def_ns.GetMulticastQueueItemsForMulticastGroupResponse'(
    <<>>,
    0,
    0,
    _,
    R1,
    TrUserData
) ->
    #'ns.GetMulticastQueueItemsForMulticastGroupResponse'{
        multicast_queue_items = lists_reverse(R1, TrUserData)
    };
'dfp_read_field_def_ns.GetMulticastQueueItemsForMulticastGroupResponse'(
    Other,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dg_read_field_def_ns.GetMulticastQueueItemsForMulticastGroupResponse'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        TrUserData
    ).

'dg_read_field_def_ns.GetMulticastQueueItemsForMulticastGroupResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.GetMulticastQueueItemsForMulticastGroupResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'dg_read_field_def_ns.GetMulticastQueueItemsForMulticastGroupResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.GetMulticastQueueItemsForMulticastGroupResponse_multicast_queue_items'(
                Rest,
                0,
                0,
                0,
                F@_1,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.GetMulticastQueueItemsForMulticastGroupResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.GetMulticastQueueItemsForMulticastGroupResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.GetMulticastQueueItemsForMulticastGroupResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.GetMulticastQueueItemsForMulticastGroupResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.GetMulticastQueueItemsForMulticastGroupResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.GetMulticastQueueItemsForMulticastGroupResponse'(
    <<>>,
    0,
    0,
    _,
    R1,
    TrUserData
) ->
    #'ns.GetMulticastQueueItemsForMulticastGroupResponse'{
        multicast_queue_items = lists_reverse(R1, TrUserData)
    }.

'd_field_ns.GetMulticastQueueItemsForMulticastGroupResponse_multicast_queue_items'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.GetMulticastQueueItemsForMulticastGroupResponse_multicast_queue_items'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'd_field_ns.GetMulticastQueueItemsForMulticastGroupResponse_multicast_queue_items'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_ns.MulticastQueueItem'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GetMulticastQueueItemsForMulticastGroupResponse'(
        RestF,
        0,
        0,
        F,
        cons(NewFValue, Prev, TrUserData),
        TrUserData
    ).

'skip_varint_ns.GetMulticastQueueItemsForMulticastGroupResponse'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'skip_varint_ns.GetMulticastQueueItemsForMulticastGroupResponse'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        TrUserData
    );
'skip_varint_ns.GetMulticastQueueItemsForMulticastGroupResponse'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_ns.GetMulticastQueueItemsForMulticastGroupResponse'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        TrUserData
    ).

'skip_length_delimited_ns.GetMulticastQueueItemsForMulticastGroupResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.GetMulticastQueueItemsForMulticastGroupResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.GetMulticastQueueItemsForMulticastGroupResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.GetMulticastQueueItemsForMulticastGroupResponse'(
        Rest2,
        0,
        0,
        F,
        F@_1,
        TrUserData
    ).

'skip_group_ns.GetMulticastQueueItemsForMulticastGroupResponse'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.GetMulticastQueueItemsForMulticastGroupResponse'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        TrUserData
    ).

'skip_32_ns.GetMulticastQueueItemsForMulticastGroupResponse'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_ns.GetMulticastQueueItemsForMulticastGroupResponse'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        TrUserData
    ).

'skip_64_ns.GetMulticastQueueItemsForMulticastGroupResponse'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_ns.GetMulticastQueueItemsForMulticastGroupResponse'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        TrUserData
    ).

'decode_msg_ns.GetADRAlgorithmsResponse'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.GetADRAlgorithmsResponse'(Bin, 0, 0, 0, id([], TrUserData), TrUserData).

'dfp_read_field_def_ns.GetADRAlgorithmsResponse'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'd_field_ns.GetADRAlgorithmsResponse_adr_algorithms'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_ns.GetADRAlgorithmsResponse'(<<>>, 0, 0, _, R1, TrUserData) ->
    #'ns.GetADRAlgorithmsResponse'{adr_algorithms = lists_reverse(R1, TrUserData)};
'dfp_read_field_def_ns.GetADRAlgorithmsResponse'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_ns.GetADRAlgorithmsResponse'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_ns.GetADRAlgorithmsResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.GetADRAlgorithmsResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'dg_read_field_def_ns.GetADRAlgorithmsResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.GetADRAlgorithmsResponse_adr_algorithms'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.GetADRAlgorithmsResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.GetADRAlgorithmsResponse'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 ->
                    'skip_length_delimited_ns.GetADRAlgorithmsResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.GetADRAlgorithmsResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.GetADRAlgorithmsResponse'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
'dg_read_field_def_ns.GetADRAlgorithmsResponse'(<<>>, 0, 0, _, R1, TrUserData) ->
    #'ns.GetADRAlgorithmsResponse'{adr_algorithms = lists_reverse(R1, TrUserData)}.

'd_field_ns.GetADRAlgorithmsResponse_adr_algorithms'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_ns.GetADRAlgorithmsResponse_adr_algorithms'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'd_field_ns.GetADRAlgorithmsResponse_adr_algorithms'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_ns.ADRAlgorithm'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.GetADRAlgorithmsResponse'(
        RestF,
        0,
        0,
        F,
        cons(NewFValue, Prev, TrUserData),
        TrUserData
    ).

'skip_varint_ns.GetADRAlgorithmsResponse'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'skip_varint_ns.GetADRAlgorithmsResponse'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_ns.GetADRAlgorithmsResponse'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.GetADRAlgorithmsResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_ns.GetADRAlgorithmsResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.GetADRAlgorithmsResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_ns.GetADRAlgorithmsResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.GetADRAlgorithmsResponse'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_ns.GetADRAlgorithmsResponse'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.GetADRAlgorithmsResponse'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_ns.GetADRAlgorithmsResponse'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.GetADRAlgorithmsResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_ns.GetADRAlgorithmsResponse'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_ns.GetADRAlgorithmsResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_ns.ADRAlgorithm'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.ADRAlgorithm'(
        Bin,
        0,
        0,
        0,
        id([], TrUserData),
        id([], TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.ADRAlgorithm'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'd_field_ns.ADRAlgorithm_id'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_ns.ADRAlgorithm'(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'd_field_ns.ADRAlgorithm_name'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_ns.ADRAlgorithm'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'ns.ADRAlgorithm'{id = F@_1, name = F@_2};
'dfp_read_field_def_ns.ADRAlgorithm'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_ns.ADRAlgorithm'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_ns.ADRAlgorithm'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.ADRAlgorithm'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'dg_read_field_def_ns.ADRAlgorithm'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.ADRAlgorithm_id'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 ->
            'd_field_ns.ADRAlgorithm_name'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.ADRAlgorithm'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 ->
                    'skip_64_ns.ADRAlgorithm'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 ->
                    'skip_length_delimited_ns.ADRAlgorithm'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.ADRAlgorithm'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 ->
                    'skip_32_ns.ADRAlgorithm'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_ns.ADRAlgorithm'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'ns.ADRAlgorithm'{id = F@_1, name = F@_2}.

'd_field_ns.ADRAlgorithm_id'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when
    N < 57
->
    'd_field_ns.ADRAlgorithm_id'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_ns.ADRAlgorithm_id'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Utf8:Len/binary, Rest2/binary>> = Rest,
        {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.ADRAlgorithm'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_ns.ADRAlgorithm_name'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when
    N < 57
->
    'd_field_ns.ADRAlgorithm_name'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_ns.ADRAlgorithm_name'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Utf8:Len/binary, Rest2/binary>> = Rest,
        {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.ADRAlgorithm'(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

'skip_varint_ns.ADRAlgorithm'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'skip_varint_ns.ADRAlgorithm'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_ns.ADRAlgorithm'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ns.ADRAlgorithm'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_ns.ADRAlgorithm'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.ADRAlgorithm'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'skip_length_delimited_ns.ADRAlgorithm'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.ADRAlgorithm'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_ns.ADRAlgorithm'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.ADRAlgorithm'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_ns.ADRAlgorithm'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ns.ADRAlgorithm'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_ns.ADRAlgorithm'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ns.ADRAlgorithm'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'decode_msg_google.protobuf.Timestamp'(Bin, TrUserData) ->
    'dfp_read_field_def_google.protobuf.Timestamp'(
        Bin,
        0,
        0,
        0,
        id(0, TrUserData),
        id(0, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_google.protobuf.Timestamp'(
    <<8, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'd_field_google.protobuf.Timestamp_seconds'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_google.protobuf.Timestamp'(
    <<16, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'd_field_google.protobuf.Timestamp_nanos'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_google.protobuf.Timestamp'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'google.protobuf.Timestamp'{seconds = F@_1, nanos = F@_2};
'dfp_read_field_def_google.protobuf.Timestamp'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_google.protobuf.Timestamp'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_google.protobuf.Timestamp'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_google.protobuf.Timestamp'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'dg_read_field_def_google.protobuf.Timestamp'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            'd_field_google.protobuf.Timestamp_seconds'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        16 ->
            'd_field_google.protobuf.Timestamp_nanos'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_google.protobuf.Timestamp'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                1 ->
                    'skip_64_google.protobuf.Timestamp'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_google.protobuf.Timestamp'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                3 ->
                    'skip_group_google.protobuf.Timestamp'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                5 ->
                    'skip_32_google.protobuf.Timestamp'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_google.protobuf.Timestamp'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'google.protobuf.Timestamp'{seconds = F@_1, nanos = F@_2}.

'd_field_google.protobuf.Timestamp_seconds'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_google.protobuf.Timestamp_seconds'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'd_field_google.protobuf.Timestamp_seconds'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    TrUserData
) ->
    {NewFValue, RestF} =
        {begin
                <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>,
                id(Res, TrUserData)
            end,
            Rest},
    'dfp_read_field_def_google.protobuf.Timestamp'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_google.protobuf.Timestamp_nanos'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_google.protobuf.Timestamp_nanos'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'd_field_google.protobuf.Timestamp_nanos'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    TrUserData
) ->
    {NewFValue, RestF} =
        {begin
                <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>,
                id(Res, TrUserData)
            end,
            Rest},
    'dfp_read_field_def_google.protobuf.Timestamp'(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

'skip_varint_google.protobuf.Timestamp'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'skip_varint_google.protobuf.Timestamp'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_google.protobuf.Timestamp'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'dfp_read_field_def_google.protobuf.Timestamp'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_google.protobuf.Timestamp'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_google.protobuf.Timestamp'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'skip_length_delimited_google.protobuf.Timestamp'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_google.protobuf.Timestamp'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_google.protobuf.Timestamp'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_google.protobuf.Timestamp'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_google.protobuf.Timestamp'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_google.protobuf.Timestamp'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_google.protobuf.Timestamp'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_google.protobuf.Timestamp'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'decode_msg_google.protobuf.Duration'(Bin, TrUserData) ->
    'dfp_read_field_def_google.protobuf.Duration'(
        Bin,
        0,
        0,
        0,
        id(0, TrUserData),
        id(0, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_google.protobuf.Duration'(
    <<8, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'd_field_google.protobuf.Duration_seconds'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_google.protobuf.Duration'(
    <<16, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'd_field_google.protobuf.Duration_nanos'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_google.protobuf.Duration'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'google.protobuf.Duration'{seconds = F@_1, nanos = F@_2};
'dfp_read_field_def_google.protobuf.Duration'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_google.protobuf.Duration'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_google.protobuf.Duration'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_google.protobuf.Duration'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'dg_read_field_def_google.protobuf.Duration'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            'd_field_google.protobuf.Duration_seconds'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        16 ->
            'd_field_google.protobuf.Duration_nanos'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_google.protobuf.Duration'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                1 ->
                    'skip_64_google.protobuf.Duration'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_google.protobuf.Duration'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                3 ->
                    'skip_group_google.protobuf.Duration'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                5 ->
                    'skip_32_google.protobuf.Duration'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_google.protobuf.Duration'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'google.protobuf.Duration'{seconds = F@_1, nanos = F@_2}.

'd_field_google.protobuf.Duration_seconds'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_google.protobuf.Duration_seconds'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'd_field_google.protobuf.Duration_seconds'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    TrUserData
) ->
    {NewFValue, RestF} =
        {begin
                <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>,
                id(Res, TrUserData)
            end,
            Rest},
    'dfp_read_field_def_google.protobuf.Duration'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_google.protobuf.Duration_nanos'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_google.protobuf.Duration_nanos'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_google.protobuf.Duration_nanos'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} =
        {begin
                <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>,
                id(Res, TrUserData)
            end,
            Rest},
    'dfp_read_field_def_google.protobuf.Duration'(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

'skip_varint_google.protobuf.Duration'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'skip_varint_google.protobuf.Duration'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_google.protobuf.Duration'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'dfp_read_field_def_google.protobuf.Duration'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_google.protobuf.Duration'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_google.protobuf.Duration'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'skip_length_delimited_google.protobuf.Duration'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_google.protobuf.Duration'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_google.protobuf.Duration'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_google.protobuf.Duration'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_google.protobuf.Duration'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_google.protobuf.Duration'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_google.protobuf.Duration'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_google.protobuf.Duration'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'decode_msg_google.protobuf.Empty'(Bin, TrUserData) ->
    'dfp_read_field_def_google.protobuf.Empty'(Bin, 0, 0, 0, TrUserData).

'dfp_read_field_def_google.protobuf.Empty'(<<>>, 0, 0, _, _) ->
    #'google.protobuf.Empty'{};
'dfp_read_field_def_google.protobuf.Empty'(Other, Z1, Z2, F, TrUserData) ->
    'dg_read_field_def_google.protobuf.Empty'(Other, Z1, Z2, F, TrUserData).

'dg_read_field_def_google.protobuf.Empty'(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when
    N < 32 - 7
->
    'dg_read_field_def_google.protobuf.Empty'(Rest, N + 7, X bsl N + Acc, F, TrUserData);
'dg_read_field_def_google.protobuf.Empty'(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> 'skip_varint_google.protobuf.Empty'(Rest, 0, 0, Key bsr 3, TrUserData);
        1 -> 'skip_64_google.protobuf.Empty'(Rest, 0, 0, Key bsr 3, TrUserData);
        2 -> 'skip_length_delimited_google.protobuf.Empty'(Rest, 0, 0, Key bsr 3, TrUserData);
        3 -> 'skip_group_google.protobuf.Empty'(Rest, 0, 0, Key bsr 3, TrUserData);
        5 -> 'skip_32_google.protobuf.Empty'(Rest, 0, 0, Key bsr 3, TrUserData)
    end;
'dg_read_field_def_google.protobuf.Empty'(<<>>, 0, 0, _, _) ->
    #'google.protobuf.Empty'{}.

'skip_varint_google.protobuf.Empty'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) ->
    'skip_varint_google.protobuf.Empty'(Rest, Z1, Z2, F, TrUserData);
'skip_varint_google.protobuf.Empty'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) ->
    'dfp_read_field_def_google.protobuf.Empty'(Rest, Z1, Z2, F, TrUserData).

'skip_length_delimited_google.protobuf.Empty'(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when
    N < 57
->
    'skip_length_delimited_google.protobuf.Empty'(Rest, N + 7, X bsl N + Acc, F, TrUserData);
'skip_length_delimited_google.protobuf.Empty'(<<0:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_google.protobuf.Empty'(Rest2, 0, 0, F, TrUserData).

'skip_group_google.protobuf.Empty'(Bin, _, Z2, FNum, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_google.protobuf.Empty'(Rest, 0, Z2, FNum, TrUserData).

'skip_32_google.protobuf.Empty'(<<_:32, Rest/binary>>, Z1, Z2, F, TrUserData) ->
    'dfp_read_field_def_google.protobuf.Empty'(Rest, Z1, Z2, F, TrUserData).

'skip_64_google.protobuf.Empty'(<<_:64, Rest/binary>>, Z1, Z2, F, TrUserData) ->
    'dfp_read_field_def_google.protobuf.Empty'(Rest, Z1, Z2, F, TrUserData).

'decode_msg_common.KeyEnvelope'(Bin, TrUserData) ->
    'dfp_read_field_def_common.KeyEnvelope'(
        Bin,
        0,
        0,
        0,
        id([], TrUserData),
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_common.KeyEnvelope'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'd_field_common.KeyEnvelope_kek_label'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_common.KeyEnvelope'(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'd_field_common.KeyEnvelope_aes_key'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_common.KeyEnvelope'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'common.KeyEnvelope'{kek_label = F@_1, aes_key = F@_2};
'dfp_read_field_def_common.KeyEnvelope'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_common.KeyEnvelope'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_common.KeyEnvelope'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_common.KeyEnvelope'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'dg_read_field_def_common.KeyEnvelope'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_common.KeyEnvelope_kek_label'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 ->
            'd_field_common.KeyEnvelope_aes_key'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_common.KeyEnvelope'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 ->
                    'skip_64_common.KeyEnvelope'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 ->
                    'skip_length_delimited_common.KeyEnvelope'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                3 ->
                    'skip_group_common.KeyEnvelope'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 ->
                    'skip_32_common.KeyEnvelope'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_common.KeyEnvelope'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'common.KeyEnvelope'{kek_label = F@_1, aes_key = F@_2}.

'd_field_common.KeyEnvelope_kek_label'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_common.KeyEnvelope_kek_label'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_common.KeyEnvelope_kek_label'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Utf8:Len/binary, Rest2/binary>> = Rest,
        {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2}
    end,
    'dfp_read_field_def_common.KeyEnvelope'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_common.KeyEnvelope_aes_key'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_common.KeyEnvelope_aes_key'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_common.KeyEnvelope_aes_key'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_common.KeyEnvelope'(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

'skip_varint_common.KeyEnvelope'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'skip_varint_common.KeyEnvelope'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_common.KeyEnvelope'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_common.KeyEnvelope'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_common.KeyEnvelope'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_common.KeyEnvelope'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'skip_length_delimited_common.KeyEnvelope'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_common.KeyEnvelope'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_common.KeyEnvelope'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_common.KeyEnvelope'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_common.KeyEnvelope'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_common.KeyEnvelope'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_common.KeyEnvelope'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_common.KeyEnvelope'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'decode_msg_common.Location'(Bin, TrUserData) ->
    'dfp_read_field_def_common.Location'(
        Bin,
        0,
        0,
        0,
        id(0.0, TrUserData),
        id(0.0, TrUserData),
        id(0.0, TrUserData),
        id('UNKNOWN', TrUserData),
        id(0, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_common.Location'(
    <<9, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_common.Location_latitude'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_common.Location'(
    <<17, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_common.Location_longitude'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_common.Location'(
    <<25, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_common.Location_altitude'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_common.Location'(
    <<32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_common.Location_source'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_common.Location'(
    <<40, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_common.Location_accuracy'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_common.Location'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    #'common.Location'{
        latitude = F@_1,
        longitude = F@_2,
        altitude = F@_3,
        source = F@_4,
        accuracy = F@_5
    };
'dfp_read_field_def_common.Location'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    'dg_read_field_def_common.Location'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'dg_read_field_def_common.Location'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_common.Location'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dg_read_field_def_common.Location'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        9 ->
            'd_field_common.Location_latitude'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        17 ->
            'd_field_common.Location_longitude'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        25 ->
            'd_field_common.Location_altitude'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        32 ->
            'd_field_common.Location_source'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        40 ->
            'd_field_common.Location_accuracy'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_common.Location'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                1 ->
                    'skip_64_common.Location'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_common.Location'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                3 ->
                    'skip_group_common.Location'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                5 ->
                    'skip_32_common.Location'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_common.Location'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    #'common.Location'{
        latitude = F@_1,
        longitude = F@_2,
        altitude = F@_3,
        source = F@_4,
        accuracy = F@_5
    }.

'd_field_common.Location_latitude'(
    <<0:48, 240, 127, Rest/binary>>,
    Z1,
    Z2,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_common.Location'(
        Rest,
        Z1,
        Z2,
        F,
        id(infinity, TrUserData),
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_common.Location_latitude'(
    <<0:48, 240, 255, Rest/binary>>,
    Z1,
    Z2,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_common.Location'(
        Rest,
        Z1,
        Z2,
        F,
        id('-infinity', TrUserData),
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_common.Location_latitude'(
    <<_:48, 15:4, _:4, _:1, 127:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_common.Location'(
        Rest,
        Z1,
        Z2,
        F,
        id(nan, TrUserData),
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_common.Location_latitude'(
    <<Value:64/little-float, Rest/binary>>,
    Z1,
    Z2,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_common.Location'(
        Rest,
        Z1,
        Z2,
        F,
        id(Value, TrUserData),
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'd_field_common.Location_longitude'(
    <<0:48, 240, 127, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    _,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_common.Location'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        id(infinity, TrUserData),
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_common.Location_longitude'(
    <<0:48, 240, 255, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    _,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_common.Location'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        id('-infinity', TrUserData),
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_common.Location_longitude'(
    <<_:48, 15:4, _:4, _:1, 127:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    _,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_common.Location'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        id(nan, TrUserData),
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_common.Location_longitude'(
    <<Value:64/little-float, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    _,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_common.Location'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        id(Value, TrUserData),
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'd_field_common.Location_altitude'(
    <<0:48, 240, 127, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    _,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_common.Location'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        id(infinity, TrUserData),
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_common.Location_altitude'(
    <<0:48, 240, 255, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    _,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_common.Location'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        id('-infinity', TrUserData),
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_common.Location_altitude'(
    <<_:48, 15:4, _:4, _:1, 127:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    _,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_common.Location'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        id(nan, TrUserData),
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_common.Location_altitude'(
    <<Value:64/little-float, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    _,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_common.Location'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        id(Value, TrUserData),
        F@_4,
        F@_5,
        TrUserData
    ).

'd_field_common.Location_source'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_common.Location_source'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_common.Location_source'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    _,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} =
        {id(
                'd_enum_common.LocationSource'(begin
                    <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>,
                    id(Res, TrUserData)
                end),
                TrUserData
            ),
            Rest},
    'dfp_read_field_def_common.Location'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        NewFValue,
        F@_5,
        TrUserData
    ).

'd_field_common.Location_accuracy'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_common.Location_accuracy'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_common.Location_accuracy'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_common.Location'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        NewFValue,
        TrUserData
    ).

'skip_varint_common.Location'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'skip_varint_common.Location'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'skip_varint_common.Location'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_common.Location'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'skip_length_delimited_common.Location'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_common.Location'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'skip_length_delimited_common.Location'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_common.Location'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'skip_group_common.Location'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_common.Location'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'skip_32_common.Location'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_common.Location'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'skip_64_common.Location'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_common.Location'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'decode_msg_gw.UplinkTXInfo'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.UplinkTXInfo'(
        Bin,
        0,
        0,
        0,
        id(0, TrUserData),
        id('LORA', TrUserData),
        id(undefined, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_gw.UplinkTXInfo'(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'd_field_gw.UplinkTXInfo_frequency'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_gw.UplinkTXInfo'(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'd_field_gw.UplinkTXInfo_modulation'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_gw.UplinkTXInfo'(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'd_field_gw.UplinkTXInfo_lora_modulation_info'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_gw.UplinkTXInfo'(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'd_field_gw.UplinkTXInfo_fsk_modulation_info'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_gw.UplinkTXInfo'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) ->
    #'gw.UplinkTXInfo'{frequency = F@_1, modulation = F@_2, modulation_info = F@_3};
'dfp_read_field_def_gw.UplinkTXInfo'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'dg_read_field_def_gw.UplinkTXInfo'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'dg_read_field_def_gw.UplinkTXInfo'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_gw.UplinkTXInfo'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'dg_read_field_def_gw.UplinkTXInfo'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            'd_field_gw.UplinkTXInfo_frequency'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        16 ->
            'd_field_gw.UplinkTXInfo_modulation'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 ->
            'd_field_gw.UplinkTXInfo_lora_modulation_info'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        34 ->
            'd_field_gw.UplinkTXInfo_fsk_modulation_info'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.UplinkTXInfo'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                1 ->
                    'skip_64_gw.UplinkTXInfo'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 ->
                    'skip_length_delimited_gw.UplinkTXInfo'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.UplinkTXInfo'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                5 ->
                    'skip_32_gw.UplinkTXInfo'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
'dg_read_field_def_gw.UplinkTXInfo'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) ->
    #'gw.UplinkTXInfo'{frequency = F@_1, modulation = F@_2, modulation_info = F@_3}.

'd_field_gw.UplinkTXInfo_frequency'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkTXInfo_frequency'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_gw.UplinkTXInfo_frequency'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.UplinkTXInfo'(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

'd_field_gw.UplinkTXInfo_modulation'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkTXInfo_modulation'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_gw.UplinkTXInfo_modulation'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} =
        {id(
                'd_enum_common.Modulation'(begin
                    <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>,
                    id(Res, TrUserData)
                end),
                TrUserData
            ),
            Rest},
    'dfp_read_field_def_gw.UplinkTXInfo'(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

'd_field_gw.UplinkTXInfo_lora_modulation_info'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkTXInfo_lora_modulation_info'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_gw.UplinkTXInfo_lora_modulation_info'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_gw.LoRaModulationInfo'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.UplinkTXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        case Prev of
            undefined ->
                id({lora_modulation_info, NewFValue}, TrUserData);
            {lora_modulation_info, MVPrev} ->
                id(
                    {lora_modulation_info,
                        'merge_msg_gw.LoRaModulationInfo'(MVPrev, NewFValue, TrUserData)},
                    TrUserData
                );
            _ ->
                id({lora_modulation_info, NewFValue}, TrUserData)
        end,
        TrUserData
    ).

'd_field_gw.UplinkTXInfo_fsk_modulation_info'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkTXInfo_fsk_modulation_info'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_gw.UplinkTXInfo_fsk_modulation_info'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_gw.FSKModulationInfo'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.UplinkTXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        case Prev of
            undefined ->
                id({fsk_modulation_info, NewFValue}, TrUserData);
            {fsk_modulation_info, MVPrev} ->
                id(
                    {fsk_modulation_info,
                        'merge_msg_gw.FSKModulationInfo'(MVPrev, NewFValue, TrUserData)},
                    TrUserData
                );
            _ ->
                id({fsk_modulation_info, NewFValue}, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_gw.UplinkTXInfo'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'skip_varint_gw.UplinkTXInfo'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'skip_varint_gw.UplinkTXInfo'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_gw.UplinkTXInfo'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'skip_length_delimited_gw.UplinkTXInfo'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.UplinkTXInfo'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'skip_length_delimited_gw.UplinkTXInfo'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.UplinkTXInfo'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

'skip_group_gw.UplinkTXInfo'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.UplinkTXInfo'(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

'skip_32_gw.UplinkTXInfo'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_gw.UplinkTXInfo'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'skip_64_gw.UplinkTXInfo'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_gw.UplinkTXInfo'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'decode_msg_gw.LoRaModulationInfo'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.LoRaModulationInfo'(
        Bin,
        0,
        0,
        0,
        id(0, TrUserData),
        id(0, TrUserData),
        id([], TrUserData),
        id(false, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_gw.LoRaModulationInfo'(
    <<8, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'd_field_gw.LoRaModulationInfo_bandwidth'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'dfp_read_field_def_gw.LoRaModulationInfo'(
    <<16, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'd_field_gw.LoRaModulationInfo_spreading_factor'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'dfp_read_field_def_gw.LoRaModulationInfo'(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'd_field_gw.LoRaModulationInfo_code_rate'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'dfp_read_field_def_gw.LoRaModulationInfo'(
    <<32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'd_field_gw.LoRaModulationInfo_polarization_inversion'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'dfp_read_field_def_gw.LoRaModulationInfo'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) ->
    #'gw.LoRaModulationInfo'{
        bandwidth = F@_1,
        spreading_factor = F@_2,
        code_rate = F@_3,
        polarization_inversion = F@_4
    };
'dfp_read_field_def_gw.LoRaModulationInfo'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    'dg_read_field_def_gw.LoRaModulationInfo'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

'dg_read_field_def_gw.LoRaModulationInfo'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_gw.LoRaModulationInfo'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'dg_read_field_def_gw.LoRaModulationInfo'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            'd_field_gw.LoRaModulationInfo_bandwidth'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        16 ->
            'd_field_gw.LoRaModulationInfo_spreading_factor'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        26 ->
            'd_field_gw.LoRaModulationInfo_code_rate'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        32 ->
            'd_field_gw.LoRaModulationInfo_polarization_inversion'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.LoRaModulationInfo'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                1 ->
                    'skip_64_gw.LoRaModulationInfo'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_gw.LoRaModulationInfo'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.LoRaModulationInfo'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                5 ->
                    'skip_32_gw.LoRaModulationInfo'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_gw.LoRaModulationInfo'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) ->
    #'gw.LoRaModulationInfo'{
        bandwidth = F@_1,
        spreading_factor = F@_2,
        code_rate = F@_3,
        polarization_inversion = F@_4
    }.

'd_field_gw.LoRaModulationInfo_bandwidth'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    'd_field_gw.LoRaModulationInfo_bandwidth'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'd_field_gw.LoRaModulationInfo_bandwidth'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.LoRaModulationInfo'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

'd_field_gw.LoRaModulationInfo_spreading_factor'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    'd_field_gw.LoRaModulationInfo_spreading_factor'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'd_field_gw.LoRaModulationInfo_spreading_factor'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    F@_3,
    F@_4,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.LoRaModulationInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        NewFValue,
        F@_3,
        F@_4,
        TrUserData
    ).

'd_field_gw.LoRaModulationInfo_code_rate'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    'd_field_gw.LoRaModulationInfo_code_rate'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'd_field_gw.LoRaModulationInfo_code_rate'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    _,
    F@_4,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Utf8:Len/binary, Rest2/binary>> = Rest,
        {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.LoRaModulationInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        NewFValue,
        F@_4,
        TrUserData
    ).

'd_field_gw.LoRaModulationInfo_polarization_inversion'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    'd_field_gw.LoRaModulationInfo_polarization_inversion'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'd_field_gw.LoRaModulationInfo_polarization_inversion'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_gw.LoRaModulationInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        NewFValue,
        TrUserData
    ).

'skip_varint_gw.LoRaModulationInfo'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'skip_varint_gw.LoRaModulationInfo'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'skip_varint_gw.LoRaModulationInfo'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'dfp_read_field_def_gw.LoRaModulationInfo'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

'skip_length_delimited_gw.LoRaModulationInfo'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.LoRaModulationInfo'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'skip_length_delimited_gw.LoRaModulationInfo'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.LoRaModulationInfo'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

'skip_group_gw.LoRaModulationInfo'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.LoRaModulationInfo'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

'skip_32_gw.LoRaModulationInfo'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'dfp_read_field_def_gw.LoRaModulationInfo'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

'skip_64_gw.LoRaModulationInfo'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'dfp_read_field_def_gw.LoRaModulationInfo'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

'decode_msg_gw.FSKModulationInfo'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.FSKModulationInfo'(
        Bin,
        0,
        0,
        0,
        id(0, TrUserData),
        id(0, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_gw.FSKModulationInfo'(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'd_field_gw.FSKModulationInfo_frequency_deviation'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_gw.FSKModulationInfo'(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'd_field_gw.FSKModulationInfo_datarate'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_gw.FSKModulationInfo'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'gw.FSKModulationInfo'{frequency_deviation = F@_1, datarate = F@_2};
'dfp_read_field_def_gw.FSKModulationInfo'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_gw.FSKModulationInfo'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_gw.FSKModulationInfo'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_gw.FSKModulationInfo'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'dg_read_field_def_gw.FSKModulationInfo'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            'd_field_gw.FSKModulationInfo_frequency_deviation'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                TrUserData
            );
        16 ->
            'd_field_gw.FSKModulationInfo_datarate'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.FSKModulationInfo'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                1 ->
                    'skip_64_gw.FSKModulationInfo'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 ->
                    'skip_length_delimited_gw.FSKModulationInfo'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.FSKModulationInfo'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                5 ->
                    'skip_32_gw.FSKModulationInfo'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_gw.FSKModulationInfo'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'gw.FSKModulationInfo'{frequency_deviation = F@_1, datarate = F@_2}.

'd_field_gw.FSKModulationInfo_frequency_deviation'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_gw.FSKModulationInfo_frequency_deviation'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'd_field_gw.FSKModulationInfo_frequency_deviation'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.FSKModulationInfo'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_gw.FSKModulationInfo_datarate'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_gw.FSKModulationInfo_datarate'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_gw.FSKModulationInfo_datarate'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.FSKModulationInfo'(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

'skip_varint_gw.FSKModulationInfo'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'skip_varint_gw.FSKModulationInfo'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_gw.FSKModulationInfo'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_gw.FSKModulationInfo'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_gw.FSKModulationInfo'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.FSKModulationInfo'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'skip_length_delimited_gw.FSKModulationInfo'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.FSKModulationInfo'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_gw.FSKModulationInfo'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.FSKModulationInfo'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_gw.FSKModulationInfo'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_gw.FSKModulationInfo'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_gw.FSKModulationInfo'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_gw.FSKModulationInfo'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'decode_msg_gw.EncryptedFineTimestamp'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.EncryptedFineTimestamp'(
        Bin,
        0,
        0,
        0,
        id(0, TrUserData),
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_gw.EncryptedFineTimestamp'(
    <<8, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_gw.EncryptedFineTimestamp_aes_key_index'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'dfp_read_field_def_gw.EncryptedFineTimestamp'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_gw.EncryptedFineTimestamp_encrypted_ns'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_gw.EncryptedFineTimestamp'(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_gw.EncryptedFineTimestamp_fpga_id'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_gw.EncryptedFineTimestamp'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) ->
    #'gw.EncryptedFineTimestamp'{aes_key_index = F@_1, encrypted_ns = F@_2, fpga_id = F@_3};
'dfp_read_field_def_gw.EncryptedFineTimestamp'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'dg_read_field_def_gw.EncryptedFineTimestamp'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'dg_read_field_def_gw.EncryptedFineTimestamp'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_gw.EncryptedFineTimestamp'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'dg_read_field_def_gw.EncryptedFineTimestamp'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            'd_field_gw.EncryptedFineTimestamp_aes_key_index'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        18 ->
            'd_field_gw.EncryptedFineTimestamp_encrypted_ns'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        26 ->
            'd_field_gw.EncryptedFineTimestamp_fpga_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.EncryptedFineTimestamp'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                1 ->
                    'skip_64_gw.EncryptedFineTimestamp'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_gw.EncryptedFineTimestamp'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.EncryptedFineTimestamp'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                5 ->
                    'skip_32_gw.EncryptedFineTimestamp'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_gw.EncryptedFineTimestamp'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) ->
    #'gw.EncryptedFineTimestamp'{aes_key_index = F@_1, encrypted_ns = F@_2, fpga_id = F@_3}.

'd_field_gw.EncryptedFineTimestamp_aes_key_index'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_gw.EncryptedFineTimestamp_aes_key_index'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_gw.EncryptedFineTimestamp_aes_key_index'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.EncryptedFineTimestamp'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        F@_3,
        TrUserData
    ).

'd_field_gw.EncryptedFineTimestamp_encrypted_ns'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_gw.EncryptedFineTimestamp_encrypted_ns'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_gw.EncryptedFineTimestamp_encrypted_ns'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.EncryptedFineTimestamp'(
        RestF,
        0,
        0,
        F,
        F@_1,
        NewFValue,
        F@_3,
        TrUserData
    ).

'd_field_gw.EncryptedFineTimestamp_fpga_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_gw.EncryptedFineTimestamp_fpga_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_gw.EncryptedFineTimestamp_fpga_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.EncryptedFineTimestamp'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        NewFValue,
        TrUserData
    ).

'skip_varint_gw.EncryptedFineTimestamp'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'skip_varint_gw.EncryptedFineTimestamp'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'skip_varint_gw.EncryptedFineTimestamp'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'dfp_read_field_def_gw.EncryptedFineTimestamp'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'skip_length_delimited_gw.EncryptedFineTimestamp'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.EncryptedFineTimestamp'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'skip_length_delimited_gw.EncryptedFineTimestamp'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.EncryptedFineTimestamp'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

'skip_group_gw.EncryptedFineTimestamp'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.EncryptedFineTimestamp'(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

'skip_32_gw.EncryptedFineTimestamp'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_gw.EncryptedFineTimestamp'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'skip_64_gw.EncryptedFineTimestamp'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_gw.EncryptedFineTimestamp'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'decode_msg_gw.PlainFineTimestamp'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.PlainFineTimestamp'(Bin, 0, 0, 0, id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_gw.PlainFineTimestamp'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'd_field_gw.PlainFineTimestamp_time'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_gw.PlainFineTimestamp'(<<>>, 0, 0, _, F@_1, _) ->
    #'gw.PlainFineTimestamp'{time = F@_1};
'dfp_read_field_def_gw.PlainFineTimestamp'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_gw.PlainFineTimestamp'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_gw.PlainFineTimestamp'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_gw.PlainFineTimestamp'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'dg_read_field_def_gw.PlainFineTimestamp'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_gw.PlainFineTimestamp_time'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.PlainFineTimestamp'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 ->
                    'skip_64_gw.PlainFineTimestamp'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 ->
                    'skip_length_delimited_gw.PlainFineTimestamp'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.PlainFineTimestamp'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 ->
                    'skip_32_gw.PlainFineTimestamp'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
'dg_read_field_def_gw.PlainFineTimestamp'(<<>>, 0, 0, _, F@_1, _) ->
    #'gw.PlainFineTimestamp'{time = F@_1}.

'd_field_gw.PlainFineTimestamp_time'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when
    N < 57
->
    'd_field_gw.PlainFineTimestamp_time'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'd_field_gw.PlainFineTimestamp_time'(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Timestamp'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.PlainFineTimestamp'(
        RestF,
        0,
        0,
        F,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Timestamp'(Prev, NewFValue, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_gw.PlainFineTimestamp'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'skip_varint_gw.PlainFineTimestamp'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_gw.PlainFineTimestamp'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_gw.PlainFineTimestamp'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_gw.PlainFineTimestamp'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.PlainFineTimestamp'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'skip_length_delimited_gw.PlainFineTimestamp'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.PlainFineTimestamp'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_gw.PlainFineTimestamp'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.PlainFineTimestamp'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_gw.PlainFineTimestamp'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_gw.PlainFineTimestamp'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_gw.PlainFineTimestamp'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_gw.PlainFineTimestamp'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_gw.GatewayStats'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.GatewayStats'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id([], TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        id([], TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        'tr_decode_init_default_gw.GatewayStats.meta_data'([], TrUserData),
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_gw.GatewayStats'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    'd_field_gw.GatewayStats_gateway_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'dfp_read_field_def_gw.GatewayStats'(
    <<74, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    'd_field_gw.GatewayStats_ip'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'dfp_read_field_def_gw.GatewayStats'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    'd_field_gw.GatewayStats_time'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'dfp_read_field_def_gw.GatewayStats'(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    'd_field_gw.GatewayStats_location'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'dfp_read_field_def_gw.GatewayStats'(
    <<34, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    'd_field_gw.GatewayStats_config_version'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'dfp_read_field_def_gw.GatewayStats'(
    <<40, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    'd_field_gw.GatewayStats_rx_packets_received'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'dfp_read_field_def_gw.GatewayStats'(
    <<48, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    'd_field_gw.GatewayStats_rx_packets_received_ok'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'dfp_read_field_def_gw.GatewayStats'(
    <<56, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    'd_field_gw.GatewayStats_tx_packets_received'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'dfp_read_field_def_gw.GatewayStats'(
    <<64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    'd_field_gw.GatewayStats_tx_packets_emitted'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'dfp_read_field_def_gw.GatewayStats'(
    <<82, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    'd_field_gw.GatewayStats_meta_data'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'dfp_read_field_def_gw.GatewayStats'(
    <<90, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    'd_field_gw.GatewayStats_stats_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'dfp_read_field_def_gw.GatewayStats'(
    <<>>,
    0,
    0,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    R1,
    F@_11,
    TrUserData
) ->
    #'gw.GatewayStats'{
        gateway_id = F@_1,
        ip = F@_2,
        time = F@_3,
        location = F@_4,
        config_version = F@_5,
        rx_packets_received = F@_6,
        rx_packets_received_ok = F@_7,
        tx_packets_received = F@_8,
        tx_packets_emitted = F@_9,
        meta_data = 'tr_decode_repeated_finalize_gw.GatewayStats.meta_data'(R1, TrUserData),
        stats_id = F@_11
    };
'dfp_read_field_def_gw.GatewayStats'(
    Other,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    'dg_read_field_def_gw.GatewayStats'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    ).

'dg_read_field_def_gw.GatewayStats'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_gw.GatewayStats'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'dg_read_field_def_gw.GatewayStats'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_gw.GatewayStats_gateway_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                TrUserData
            );
        74 ->
            'd_field_gw.GatewayStats_ip'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                TrUserData
            );
        18 ->
            'd_field_gw.GatewayStats_time'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                TrUserData
            );
        26 ->
            'd_field_gw.GatewayStats_location'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                TrUserData
            );
        34 ->
            'd_field_gw.GatewayStats_config_version'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                TrUserData
            );
        40 ->
            'd_field_gw.GatewayStats_rx_packets_received'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                TrUserData
            );
        48 ->
            'd_field_gw.GatewayStats_rx_packets_received_ok'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                TrUserData
            );
        56 ->
            'd_field_gw.GatewayStats_tx_packets_received'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                TrUserData
            );
        64 ->
            'd_field_gw.GatewayStats_tx_packets_emitted'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                TrUserData
            );
        82 ->
            'd_field_gw.GatewayStats_meta_data'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                TrUserData
            );
        90 ->
            'd_field_gw.GatewayStats_stats_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.GatewayStats'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        F@_11,
                        TrUserData
                    );
                1 ->
                    'skip_64_gw.GatewayStats'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        F@_11,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_gw.GatewayStats'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        F@_11,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.GatewayStats'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        F@_11,
                        TrUserData
                    );
                5 ->
                    'skip_32_gw.GatewayStats'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        F@_11,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_gw.GatewayStats'(
    <<>>,
    0,
    0,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    R1,
    F@_11,
    TrUserData
) ->
    #'gw.GatewayStats'{
        gateway_id = F@_1,
        ip = F@_2,
        time = F@_3,
        location = F@_4,
        config_version = F@_5,
        rx_packets_received = F@_6,
        rx_packets_received_ok = F@_7,
        tx_packets_received = F@_8,
        tx_packets_emitted = F@_9,
        meta_data = 'tr_decode_repeated_finalize_gw.GatewayStats.meta_data'(R1, TrUserData),
        stats_id = F@_11
    }.

'd_field_gw.GatewayStats_gateway_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayStats_gateway_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'd_field_gw.GatewayStats_gateway_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.GatewayStats'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    ).

'd_field_gw.GatewayStats_ip'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayStats_ip'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'd_field_gw.GatewayStats_ip'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Utf8:Len/binary, Rest2/binary>> = Rest,
        {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.GatewayStats'(
        RestF,
        0,
        0,
        F,
        F@_1,
        NewFValue,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    ).

'd_field_gw.GatewayStats_time'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayStats_time'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'd_field_gw.GatewayStats_time'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    Prev,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Timestamp'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.GatewayStats'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Timestamp'(Prev, NewFValue, TrUserData)
        end,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    ).

'd_field_gw.GatewayStats_location'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayStats_location'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'd_field_gw.GatewayStats_location'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    Prev,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_common.Location'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.GatewayStats'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_common.Location'(Prev, NewFValue, TrUserData)
        end,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    ).

'd_field_gw.GatewayStats_config_version'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayStats_config_version'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'd_field_gw.GatewayStats_config_version'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Utf8:Len/binary, Rest2/binary>> = Rest,
        {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.GatewayStats'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        NewFValue,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    ).

'd_field_gw.GatewayStats_rx_packets_received'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayStats_rx_packets_received'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'd_field_gw.GatewayStats_rx_packets_received'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    _,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.GatewayStats'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        NewFValue,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    ).

'd_field_gw.GatewayStats_rx_packets_received_ok'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayStats_rx_packets_received_ok'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'd_field_gw.GatewayStats_rx_packets_received_ok'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    _,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.GatewayStats'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        NewFValue,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    ).

'd_field_gw.GatewayStats_tx_packets_received'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayStats_tx_packets_received'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'd_field_gw.GatewayStats_tx_packets_received'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    _,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.GatewayStats'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        NewFValue,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    ).

'd_field_gw.GatewayStats_tx_packets_emitted'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayStats_tx_packets_emitted'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'd_field_gw.GatewayStats_tx_packets_emitted'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    _,
    F@_10,
    F@_11,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.GatewayStats'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        NewFValue,
        F@_10,
        F@_11,
        TrUserData
    ).

'd_field_gw.GatewayStats_meta_data'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayStats_meta_data'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'd_field_gw.GatewayStats_meta_data'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    Prev,
    F@_11,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_map<string,string>'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.GatewayStats'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        'tr_decode_repeated_add_elem_gw.GatewayStats.meta_data'(NewFValue, Prev, TrUserData),
        F@_11,
        TrUserData
    ).

'd_field_gw.GatewayStats_stats_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayStats_stats_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'd_field_gw.GatewayStats_stats_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.GatewayStats'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        NewFValue,
        TrUserData
    ).

'skip_varint_gw.GatewayStats'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    'skip_varint_gw.GatewayStats'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'skip_varint_gw.GatewayStats'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    'dfp_read_field_def_gw.GatewayStats'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    ).

'skip_length_delimited_gw.GatewayStats'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.GatewayStats'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'skip_length_delimited_gw.GatewayStats'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.GatewayStats'(
        Rest2,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    ).

'skip_group_gw.GatewayStats'(
    Bin,
    _,
    Z2,
    FNum,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.GatewayStats'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    ).

'skip_32_gw.GatewayStats'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    'dfp_read_field_def_gw.GatewayStats'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    ).

'skip_64_gw.GatewayStats'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    'dfp_read_field_def_gw.GatewayStats'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    ).

'decode_msg_gw.UplinkRXInfo'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.UplinkRXInfo'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        id(0, TrUserData),
        id(0.0, TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        id(undefined, TrUserData),
        id('NONE', TrUserData),
        id(undefined, TrUserData),
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        id('NO_CRC', TrUserData),
        TrUserData
    ).

'dfp_read_field_def_gw.UplinkRXInfo'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'd_field_gw.UplinkRXInfo_gateway_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'dfp_read_field_def_gw.UplinkRXInfo'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'd_field_gw.UplinkRXInfo_time'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'dfp_read_field_def_gw.UplinkRXInfo'(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'd_field_gw.UplinkRXInfo_time_since_gps_epoch'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'dfp_read_field_def_gw.UplinkRXInfo'(
    <<40, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'd_field_gw.UplinkRXInfo_rssi'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'dfp_read_field_def_gw.UplinkRXInfo'(
    <<49, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'd_field_gw.UplinkRXInfo_lora_snr'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'dfp_read_field_def_gw.UplinkRXInfo'(
    <<56, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'd_field_gw.UplinkRXInfo_channel'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'dfp_read_field_def_gw.UplinkRXInfo'(
    <<64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'd_field_gw.UplinkRXInfo_rf_chain'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'dfp_read_field_def_gw.UplinkRXInfo'(
    <<72, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'd_field_gw.UplinkRXInfo_board'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'dfp_read_field_def_gw.UplinkRXInfo'(
    <<80, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'd_field_gw.UplinkRXInfo_antenna'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'dfp_read_field_def_gw.UplinkRXInfo'(
    <<90, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'd_field_gw.UplinkRXInfo_location'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'dfp_read_field_def_gw.UplinkRXInfo'(
    <<96, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'd_field_gw.UplinkRXInfo_fine_timestamp_type'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'dfp_read_field_def_gw.UplinkRXInfo'(
    <<106, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'd_field_gw.UplinkRXInfo_encrypted_fine_timestamp'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'dfp_read_field_def_gw.UplinkRXInfo'(
    <<114, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'd_field_gw.UplinkRXInfo_plain_fine_timestamp'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'dfp_read_field_def_gw.UplinkRXInfo'(
    <<122, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'd_field_gw.UplinkRXInfo_context'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'dfp_read_field_def_gw.UplinkRXInfo'(
    <<130, 1, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'd_field_gw.UplinkRXInfo_uplink_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'dfp_read_field_def_gw.UplinkRXInfo'(
    <<136, 1, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'd_field_gw.UplinkRXInfo_crc_status'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'dfp_read_field_def_gw.UplinkRXInfo'(
    <<>>,
    0,
    0,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    _
) ->
    #'gw.UplinkRXInfo'{
        gateway_id = F@_1,
        time = F@_2,
        time_since_gps_epoch = F@_3,
        rssi = F@_4,
        lora_snr = F@_5,
        channel = F@_6,
        rf_chain = F@_7,
        board = F@_8,
        antenna = F@_9,
        location = F@_10,
        fine_timestamp_type = F@_11,
        fine_timestamp = F@_12,
        context = F@_13,
        uplink_id = F@_14,
        crc_status = F@_15
    };
'dfp_read_field_def_gw.UplinkRXInfo'(
    Other,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'dg_read_field_def_gw.UplinkRXInfo'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    ).

'dg_read_field_def_gw.UplinkRXInfo'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_gw.UplinkRXInfo'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'dg_read_field_def_gw.UplinkRXInfo'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_gw.UplinkRXInfo_gateway_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                TrUserData
            );
        18 ->
            'd_field_gw.UplinkRXInfo_time'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                TrUserData
            );
        26 ->
            'd_field_gw.UplinkRXInfo_time_since_gps_epoch'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                TrUserData
            );
        40 ->
            'd_field_gw.UplinkRXInfo_rssi'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                TrUserData
            );
        49 ->
            'd_field_gw.UplinkRXInfo_lora_snr'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                TrUserData
            );
        56 ->
            'd_field_gw.UplinkRXInfo_channel'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                TrUserData
            );
        64 ->
            'd_field_gw.UplinkRXInfo_rf_chain'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                TrUserData
            );
        72 ->
            'd_field_gw.UplinkRXInfo_board'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                TrUserData
            );
        80 ->
            'd_field_gw.UplinkRXInfo_antenna'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                TrUserData
            );
        90 ->
            'd_field_gw.UplinkRXInfo_location'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                TrUserData
            );
        96 ->
            'd_field_gw.UplinkRXInfo_fine_timestamp_type'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                TrUserData
            );
        106 ->
            'd_field_gw.UplinkRXInfo_encrypted_fine_timestamp'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                TrUserData
            );
        114 ->
            'd_field_gw.UplinkRXInfo_plain_fine_timestamp'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                TrUserData
            );
        122 ->
            'd_field_gw.UplinkRXInfo_context'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                TrUserData
            );
        130 ->
            'd_field_gw.UplinkRXInfo_uplink_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                TrUserData
            );
        136 ->
            'd_field_gw.UplinkRXInfo_crc_status'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.UplinkRXInfo'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        F@_11,
                        F@_12,
                        F@_13,
                        F@_14,
                        F@_15,
                        TrUserData
                    );
                1 ->
                    'skip_64_gw.UplinkRXInfo'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        F@_11,
                        F@_12,
                        F@_13,
                        F@_14,
                        F@_15,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_gw.UplinkRXInfo'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        F@_11,
                        F@_12,
                        F@_13,
                        F@_14,
                        F@_15,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.UplinkRXInfo'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        F@_11,
                        F@_12,
                        F@_13,
                        F@_14,
                        F@_15,
                        TrUserData
                    );
                5 ->
                    'skip_32_gw.UplinkRXInfo'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        F@_11,
                        F@_12,
                        F@_13,
                        F@_14,
                        F@_15,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_gw.UplinkRXInfo'(
    <<>>,
    0,
    0,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    _
) ->
    #'gw.UplinkRXInfo'{
        gateway_id = F@_1,
        time = F@_2,
        time_since_gps_epoch = F@_3,
        rssi = F@_4,
        lora_snr = F@_5,
        channel = F@_6,
        rf_chain = F@_7,
        board = F@_8,
        antenna = F@_9,
        location = F@_10,
        fine_timestamp_type = F@_11,
        fine_timestamp = F@_12,
        context = F@_13,
        uplink_id = F@_14,
        crc_status = F@_15
    }.

'd_field_gw.UplinkRXInfo_gateway_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkRXInfo_gateway_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'd_field_gw.UplinkRXInfo_gateway_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.UplinkRXInfo'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    ).

'd_field_gw.UplinkRXInfo_time'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkRXInfo_time'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'd_field_gw.UplinkRXInfo_time'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    Prev,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Timestamp'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.UplinkRXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Timestamp'(Prev, NewFValue, TrUserData)
        end,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    ).

'd_field_gw.UplinkRXInfo_time_since_gps_epoch'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkRXInfo_time_since_gps_epoch'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'd_field_gw.UplinkRXInfo_time_since_gps_epoch'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    Prev,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Duration'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.UplinkRXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Duration'(Prev, NewFValue, TrUserData)
        end,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    ).

'd_field_gw.UplinkRXInfo_rssi'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkRXInfo_rssi'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'd_field_gw.UplinkRXInfo_rssi'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    _,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    {NewFValue, RestF} =
        {begin
                <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>,
                id(Res, TrUserData)
            end,
            Rest},
    'dfp_read_field_def_gw.UplinkRXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        NewFValue,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    ).

'd_field_gw.UplinkRXInfo_lora_snr'(
    <<0:48, 240, 127, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'dfp_read_field_def_gw.UplinkRXInfo'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        id(infinity, TrUserData),
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'd_field_gw.UplinkRXInfo_lora_snr'(
    <<0:48, 240, 255, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'dfp_read_field_def_gw.UplinkRXInfo'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        id('-infinity', TrUserData),
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'd_field_gw.UplinkRXInfo_lora_snr'(
    <<_:48, 15:4, _:4, _:1, 127:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'dfp_read_field_def_gw.UplinkRXInfo'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        id(nan, TrUserData),
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'd_field_gw.UplinkRXInfo_lora_snr'(
    <<Value:64/little-float, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'dfp_read_field_def_gw.UplinkRXInfo'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        id(Value, TrUserData),
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    ).

'd_field_gw.UplinkRXInfo_channel'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkRXInfo_channel'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'd_field_gw.UplinkRXInfo_channel'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    _,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.UplinkRXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        NewFValue,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    ).

'd_field_gw.UplinkRXInfo_rf_chain'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkRXInfo_rf_chain'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'd_field_gw.UplinkRXInfo_rf_chain'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    _,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.UplinkRXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        NewFValue,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    ).

'd_field_gw.UplinkRXInfo_board'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkRXInfo_board'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'd_field_gw.UplinkRXInfo_board'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    _,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.UplinkRXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        NewFValue,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    ).

'd_field_gw.UplinkRXInfo_antenna'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkRXInfo_antenna'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'd_field_gw.UplinkRXInfo_antenna'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    _,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.UplinkRXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        NewFValue,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    ).

'd_field_gw.UplinkRXInfo_location'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkRXInfo_location'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'd_field_gw.UplinkRXInfo_location'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    Prev,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_common.Location'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.UplinkRXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_common.Location'(Prev, NewFValue, TrUserData)
        end,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    ).

'd_field_gw.UplinkRXInfo_fine_timestamp_type'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkRXInfo_fine_timestamp_type'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'd_field_gw.UplinkRXInfo_fine_timestamp_type'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    _,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    {NewFValue, RestF} =
        {id(
                'd_enum_gw.FineTimestampType'(begin
                    <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>,
                    id(Res, TrUserData)
                end),
                TrUserData
            ),
            Rest},
    'dfp_read_field_def_gw.UplinkRXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        NewFValue,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    ).

'd_field_gw.UplinkRXInfo_encrypted_fine_timestamp'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkRXInfo_encrypted_fine_timestamp'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'd_field_gw.UplinkRXInfo_encrypted_fine_timestamp'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    Prev,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_gw.EncryptedFineTimestamp'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.UplinkRXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        case Prev of
            undefined ->
                id({encrypted_fine_timestamp, NewFValue}, TrUserData);
            {encrypted_fine_timestamp, MVPrev} ->
                id(
                    {encrypted_fine_timestamp,
                        'merge_msg_gw.EncryptedFineTimestamp'(MVPrev, NewFValue, TrUserData)},
                    TrUserData
                );
            _ ->
                id({encrypted_fine_timestamp, NewFValue}, TrUserData)
        end,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    ).

'd_field_gw.UplinkRXInfo_plain_fine_timestamp'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkRXInfo_plain_fine_timestamp'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'd_field_gw.UplinkRXInfo_plain_fine_timestamp'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    Prev,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_gw.PlainFineTimestamp'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.UplinkRXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        case Prev of
            undefined ->
                id({plain_fine_timestamp, NewFValue}, TrUserData);
            {plain_fine_timestamp, MVPrev} ->
                id(
                    {plain_fine_timestamp,
                        'merge_msg_gw.PlainFineTimestamp'(MVPrev, NewFValue, TrUserData)},
                    TrUserData
                );
            _ ->
                id({plain_fine_timestamp, NewFValue}, TrUserData)
        end,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    ).

'd_field_gw.UplinkRXInfo_context'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkRXInfo_context'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'd_field_gw.UplinkRXInfo_context'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    _,
    F@_14,
    F@_15,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.UplinkRXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        NewFValue,
        F@_14,
        F@_15,
        TrUserData
    ).

'd_field_gw.UplinkRXInfo_uplink_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkRXInfo_uplink_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'd_field_gw.UplinkRXInfo_uplink_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    _,
    F@_15,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.UplinkRXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        NewFValue,
        F@_15,
        TrUserData
    ).

'd_field_gw.UplinkRXInfo_crc_status'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkRXInfo_crc_status'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'd_field_gw.UplinkRXInfo_crc_status'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    _,
    TrUserData
) ->
    {NewFValue, RestF} =
        {id(
                'd_enum_gw.CRCStatus'(begin
                    <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>,
                    id(Res, TrUserData)
                end),
                TrUserData
            ),
            Rest},
    'dfp_read_field_def_gw.UplinkRXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        NewFValue,
        TrUserData
    ).

'skip_varint_gw.UplinkRXInfo'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'skip_varint_gw.UplinkRXInfo'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'skip_varint_gw.UplinkRXInfo'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'dfp_read_field_def_gw.UplinkRXInfo'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    ).

'skip_length_delimited_gw.UplinkRXInfo'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.UplinkRXInfo'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'skip_length_delimited_gw.UplinkRXInfo'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.UplinkRXInfo'(
        Rest2,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    ).

'skip_group_gw.UplinkRXInfo'(
    Bin,
    _,
    Z2,
    FNum,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.UplinkRXInfo'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    ).

'skip_32_gw.UplinkRXInfo'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'dfp_read_field_def_gw.UplinkRXInfo'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    ).

'skip_64_gw.UplinkRXInfo'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'dfp_read_field_def_gw.UplinkRXInfo'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    ).

'decode_msg_gw.DownlinkTXInfo'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.DownlinkTXInfo'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        id('LORA', TrUserData),
        id(undefined, TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        id('IMMEDIATELY', TrUserData),
        id(undefined, TrUserData),
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_gw.DownlinkTXInfo'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'd_field_gw.DownlinkTXInfo_gateway_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'dfp_read_field_def_gw.DownlinkTXInfo'(
    <<40, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'd_field_gw.DownlinkTXInfo_frequency'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'dfp_read_field_def_gw.DownlinkTXInfo'(
    <<48, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'd_field_gw.DownlinkTXInfo_power'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'dfp_read_field_def_gw.DownlinkTXInfo'(
    <<56, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'd_field_gw.DownlinkTXInfo_modulation'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'dfp_read_field_def_gw.DownlinkTXInfo'(
    <<66, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'd_field_gw.DownlinkTXInfo_lora_modulation_info'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'dfp_read_field_def_gw.DownlinkTXInfo'(
    <<74, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'd_field_gw.DownlinkTXInfo_fsk_modulation_info'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'dfp_read_field_def_gw.DownlinkTXInfo'(
    <<80, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'd_field_gw.DownlinkTXInfo_board'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'dfp_read_field_def_gw.DownlinkTXInfo'(
    <<88, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'd_field_gw.DownlinkTXInfo_antenna'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'dfp_read_field_def_gw.DownlinkTXInfo'(
    <<96, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'd_field_gw.DownlinkTXInfo_timing'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'dfp_read_field_def_gw.DownlinkTXInfo'(
    <<106, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'd_field_gw.DownlinkTXInfo_immediately_timing_info'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'dfp_read_field_def_gw.DownlinkTXInfo'(
    <<114, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'd_field_gw.DownlinkTXInfo_delay_timing_info'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'dfp_read_field_def_gw.DownlinkTXInfo'(
    <<122, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'd_field_gw.DownlinkTXInfo_gps_epoch_timing_info'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'dfp_read_field_def_gw.DownlinkTXInfo'(
    <<130, 1, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'd_field_gw.DownlinkTXInfo_context'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'dfp_read_field_def_gw.DownlinkTXInfo'(
    <<>>,
    0,
    0,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    _
) ->
    #'gw.DownlinkTXInfo'{
        gateway_id = F@_1,
        frequency = F@_2,
        power = F@_3,
        modulation = F@_4,
        modulation_info = F@_5,
        board = F@_6,
        antenna = F@_7,
        timing = F@_8,
        timing_info = F@_9,
        context = F@_10
    };
'dfp_read_field_def_gw.DownlinkTXInfo'(
    Other,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'dg_read_field_def_gw.DownlinkTXInfo'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

'dg_read_field_def_gw.DownlinkTXInfo'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_gw.DownlinkTXInfo'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'dg_read_field_def_gw.DownlinkTXInfo'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_gw.DownlinkTXInfo_gateway_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        40 ->
            'd_field_gw.DownlinkTXInfo_frequency'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        48 ->
            'd_field_gw.DownlinkTXInfo_power'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        56 ->
            'd_field_gw.DownlinkTXInfo_modulation'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        66 ->
            'd_field_gw.DownlinkTXInfo_lora_modulation_info'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        74 ->
            'd_field_gw.DownlinkTXInfo_fsk_modulation_info'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        80 ->
            'd_field_gw.DownlinkTXInfo_board'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        88 ->
            'd_field_gw.DownlinkTXInfo_antenna'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        96 ->
            'd_field_gw.DownlinkTXInfo_timing'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        106 ->
            'd_field_gw.DownlinkTXInfo_immediately_timing_info'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        114 ->
            'd_field_gw.DownlinkTXInfo_delay_timing_info'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        122 ->
            'd_field_gw.DownlinkTXInfo_gps_epoch_timing_info'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        130 ->
            'd_field_gw.DownlinkTXInfo_context'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.DownlinkTXInfo'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        TrUserData
                    );
                1 ->
                    'skip_64_gw.DownlinkTXInfo'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_gw.DownlinkTXInfo'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.DownlinkTXInfo'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        TrUserData
                    );
                5 ->
                    'skip_32_gw.DownlinkTXInfo'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_gw.DownlinkTXInfo'(
    <<>>,
    0,
    0,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    _
) ->
    #'gw.DownlinkTXInfo'{
        gateway_id = F@_1,
        frequency = F@_2,
        power = F@_3,
        modulation = F@_4,
        modulation_info = F@_5,
        board = F@_6,
        antenna = F@_7,
        timing = F@_8,
        timing_info = F@_9,
        context = F@_10
    }.

'd_field_gw.DownlinkTXInfo_gateway_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkTXInfo_gateway_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'd_field_gw.DownlinkTXInfo_gateway_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.DownlinkTXInfo'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

'd_field_gw.DownlinkTXInfo_frequency'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkTXInfo_frequency'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'd_field_gw.DownlinkTXInfo_frequency'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.DownlinkTXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        NewFValue,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

'd_field_gw.DownlinkTXInfo_power'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkTXInfo_power'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'd_field_gw.DownlinkTXInfo_power'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    _,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} =
        {begin
                <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>,
                id(Res, TrUserData)
            end,
            Rest},
    'dfp_read_field_def_gw.DownlinkTXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        NewFValue,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

'd_field_gw.DownlinkTXInfo_modulation'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkTXInfo_modulation'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'd_field_gw.DownlinkTXInfo_modulation'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    _,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} =
        {id(
                'd_enum_common.Modulation'(begin
                    <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>,
                    id(Res, TrUserData)
                end),
                TrUserData
            ),
            Rest},
    'dfp_read_field_def_gw.DownlinkTXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        NewFValue,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

'd_field_gw.DownlinkTXInfo_lora_modulation_info'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkTXInfo_lora_modulation_info'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'd_field_gw.DownlinkTXInfo_lora_modulation_info'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    Prev,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_gw.LoRaModulationInfo'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.DownlinkTXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        case Prev of
            undefined ->
                id({lora_modulation_info, NewFValue}, TrUserData);
            {lora_modulation_info, MVPrev} ->
                id(
                    {lora_modulation_info,
                        'merge_msg_gw.LoRaModulationInfo'(MVPrev, NewFValue, TrUserData)},
                    TrUserData
                );
            _ ->
                id({lora_modulation_info, NewFValue}, TrUserData)
        end,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

'd_field_gw.DownlinkTXInfo_fsk_modulation_info'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkTXInfo_fsk_modulation_info'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'd_field_gw.DownlinkTXInfo_fsk_modulation_info'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    Prev,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_gw.FSKModulationInfo'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.DownlinkTXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        case Prev of
            undefined ->
                id({fsk_modulation_info, NewFValue}, TrUserData);
            {fsk_modulation_info, MVPrev} ->
                id(
                    {fsk_modulation_info,
                        'merge_msg_gw.FSKModulationInfo'(MVPrev, NewFValue, TrUserData)},
                    TrUserData
                );
            _ ->
                id({fsk_modulation_info, NewFValue}, TrUserData)
        end,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

'd_field_gw.DownlinkTXInfo_board'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkTXInfo_board'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'd_field_gw.DownlinkTXInfo_board'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    _,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.DownlinkTXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        NewFValue,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

'd_field_gw.DownlinkTXInfo_antenna'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkTXInfo_antenna'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'd_field_gw.DownlinkTXInfo_antenna'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    _,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.DownlinkTXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        NewFValue,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

'd_field_gw.DownlinkTXInfo_timing'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkTXInfo_timing'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'd_field_gw.DownlinkTXInfo_timing'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    _,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} =
        {id(
                'd_enum_gw.DownlinkTiming'(begin
                    <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>,
                    id(Res, TrUserData)
                end),
                TrUserData
            ),
            Rest},
    'dfp_read_field_def_gw.DownlinkTXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        NewFValue,
        F@_9,
        F@_10,
        TrUserData
    ).

'd_field_gw.DownlinkTXInfo_immediately_timing_info'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkTXInfo_immediately_timing_info'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'd_field_gw.DownlinkTXInfo_immediately_timing_info'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    Prev,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_gw.ImmediatelyTimingInfo'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.DownlinkTXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        case Prev of
            undefined ->
                id({immediately_timing_info, NewFValue}, TrUserData);
            {immediately_timing_info, MVPrev} ->
                id(
                    {immediately_timing_info,
                        'merge_msg_gw.ImmediatelyTimingInfo'(MVPrev, NewFValue, TrUserData)},
                    TrUserData
                );
            _ ->
                id({immediately_timing_info, NewFValue}, TrUserData)
        end,
        F@_10,
        TrUserData
    ).

'd_field_gw.DownlinkTXInfo_delay_timing_info'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkTXInfo_delay_timing_info'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'd_field_gw.DownlinkTXInfo_delay_timing_info'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    Prev,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_gw.DelayTimingInfo'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.DownlinkTXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        case Prev of
            undefined ->
                id({delay_timing_info, NewFValue}, TrUserData);
            {delay_timing_info, MVPrev} ->
                id(
                    {delay_timing_info,
                        'merge_msg_gw.DelayTimingInfo'(MVPrev, NewFValue, TrUserData)},
                    TrUserData
                );
            _ ->
                id({delay_timing_info, NewFValue}, TrUserData)
        end,
        F@_10,
        TrUserData
    ).

'd_field_gw.DownlinkTXInfo_gps_epoch_timing_info'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkTXInfo_gps_epoch_timing_info'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'd_field_gw.DownlinkTXInfo_gps_epoch_timing_info'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    Prev,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_gw.GPSEpochTimingInfo'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.DownlinkTXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        case Prev of
            undefined ->
                id({gps_epoch_timing_info, NewFValue}, TrUserData);
            {gps_epoch_timing_info, MVPrev} ->
                id(
                    {gps_epoch_timing_info,
                        'merge_msg_gw.GPSEpochTimingInfo'(MVPrev, NewFValue, TrUserData)},
                    TrUserData
                );
            _ ->
                id({gps_epoch_timing_info, NewFValue}, TrUserData)
        end,
        F@_10,
        TrUserData
    ).

'd_field_gw.DownlinkTXInfo_context'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkTXInfo_context'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'd_field_gw.DownlinkTXInfo_context'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.DownlinkTXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        NewFValue,
        TrUserData
    ).

'skip_varint_gw.DownlinkTXInfo'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'skip_varint_gw.DownlinkTXInfo'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'skip_varint_gw.DownlinkTXInfo'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'dfp_read_field_def_gw.DownlinkTXInfo'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

'skip_length_delimited_gw.DownlinkTXInfo'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.DownlinkTXInfo'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'skip_length_delimited_gw.DownlinkTXInfo'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.DownlinkTXInfo'(
        Rest2,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

'skip_group_gw.DownlinkTXInfo'(
    Bin,
    _,
    Z2,
    FNum,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.DownlinkTXInfo'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

'skip_32_gw.DownlinkTXInfo'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'dfp_read_field_def_gw.DownlinkTXInfo'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

'skip_64_gw.DownlinkTXInfo'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'dfp_read_field_def_gw.DownlinkTXInfo'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

'decode_msg_gw.ImmediatelyTimingInfo'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.ImmediatelyTimingInfo'(Bin, 0, 0, 0, TrUserData).

'dfp_read_field_def_gw.ImmediatelyTimingInfo'(<<>>, 0, 0, _, _) ->
    #'gw.ImmediatelyTimingInfo'{};
'dfp_read_field_def_gw.ImmediatelyTimingInfo'(Other, Z1, Z2, F, TrUserData) ->
    'dg_read_field_def_gw.ImmediatelyTimingInfo'(Other, Z1, Z2, F, TrUserData).

'dg_read_field_def_gw.ImmediatelyTimingInfo'(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when
    N < 32 - 7
->
    'dg_read_field_def_gw.ImmediatelyTimingInfo'(Rest, N + 7, X bsl N + Acc, F, TrUserData);
'dg_read_field_def_gw.ImmediatelyTimingInfo'(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> 'skip_varint_gw.ImmediatelyTimingInfo'(Rest, 0, 0, Key bsr 3, TrUserData);
        1 -> 'skip_64_gw.ImmediatelyTimingInfo'(Rest, 0, 0, Key bsr 3, TrUserData);
        2 -> 'skip_length_delimited_gw.ImmediatelyTimingInfo'(Rest, 0, 0, Key bsr 3, TrUserData);
        3 -> 'skip_group_gw.ImmediatelyTimingInfo'(Rest, 0, 0, Key bsr 3, TrUserData);
        5 -> 'skip_32_gw.ImmediatelyTimingInfo'(Rest, 0, 0, Key bsr 3, TrUserData)
    end;
'dg_read_field_def_gw.ImmediatelyTimingInfo'(<<>>, 0, 0, _, _) ->
    #'gw.ImmediatelyTimingInfo'{}.

'skip_varint_gw.ImmediatelyTimingInfo'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) ->
    'skip_varint_gw.ImmediatelyTimingInfo'(Rest, Z1, Z2, F, TrUserData);
'skip_varint_gw.ImmediatelyTimingInfo'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) ->
    'dfp_read_field_def_gw.ImmediatelyTimingInfo'(Rest, Z1, Z2, F, TrUserData).

'skip_length_delimited_gw.ImmediatelyTimingInfo'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.ImmediatelyTimingInfo'(Rest, N + 7, X bsl N + Acc, F, TrUserData);
'skip_length_delimited_gw.ImmediatelyTimingInfo'(<<0:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.ImmediatelyTimingInfo'(Rest2, 0, 0, F, TrUserData).

'skip_group_gw.ImmediatelyTimingInfo'(Bin, _, Z2, FNum, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.ImmediatelyTimingInfo'(Rest, 0, Z2, FNum, TrUserData).

'skip_32_gw.ImmediatelyTimingInfo'(<<_:32, Rest/binary>>, Z1, Z2, F, TrUserData) ->
    'dfp_read_field_def_gw.ImmediatelyTimingInfo'(Rest, Z1, Z2, F, TrUserData).

'skip_64_gw.ImmediatelyTimingInfo'(<<_:64, Rest/binary>>, Z1, Z2, F, TrUserData) ->
    'dfp_read_field_def_gw.ImmediatelyTimingInfo'(Rest, Z1, Z2, F, TrUserData).

'decode_msg_gw.DelayTimingInfo'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.DelayTimingInfo'(Bin, 0, 0, 0, id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_gw.DelayTimingInfo'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'd_field_gw.DelayTimingInfo_delay'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_gw.DelayTimingInfo'(<<>>, 0, 0, _, F@_1, _) ->
    #'gw.DelayTimingInfo'{delay = F@_1};
'dfp_read_field_def_gw.DelayTimingInfo'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_gw.DelayTimingInfo'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_gw.DelayTimingInfo'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when
    N < 32 - 7
->
    'dg_read_field_def_gw.DelayTimingInfo'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'dg_read_field_def_gw.DelayTimingInfo'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_gw.DelayTimingInfo_delay'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.DelayTimingInfo'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 ->
                    'skip_64_gw.DelayTimingInfo'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 ->
                    'skip_length_delimited_gw.DelayTimingInfo'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.DelayTimingInfo'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 ->
                    'skip_32_gw.DelayTimingInfo'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
'dg_read_field_def_gw.DelayTimingInfo'(<<>>, 0, 0, _, F@_1, _) ->
    #'gw.DelayTimingInfo'{delay = F@_1}.

'd_field_gw.DelayTimingInfo_delay'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when
    N < 57
->
    'd_field_gw.DelayTimingInfo_delay'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'd_field_gw.DelayTimingInfo_delay'(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Duration'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.DelayTimingInfo'(
        RestF,
        0,
        0,
        F,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Duration'(Prev, NewFValue, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_gw.DelayTimingInfo'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'skip_varint_gw.DelayTimingInfo'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_gw.DelayTimingInfo'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_gw.DelayTimingInfo'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_gw.DelayTimingInfo'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.DelayTimingInfo'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'skip_length_delimited_gw.DelayTimingInfo'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.DelayTimingInfo'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_gw.DelayTimingInfo'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.DelayTimingInfo'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_gw.DelayTimingInfo'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_gw.DelayTimingInfo'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_gw.DelayTimingInfo'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_gw.DelayTimingInfo'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_gw.GPSEpochTimingInfo'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.GPSEpochTimingInfo'(Bin, 0, 0, 0, id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_gw.GPSEpochTimingInfo'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'd_field_gw.GPSEpochTimingInfo_time_since_gps_epoch'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_gw.GPSEpochTimingInfo'(<<>>, 0, 0, _, F@_1, _) ->
    #'gw.GPSEpochTimingInfo'{time_since_gps_epoch = F@_1};
'dfp_read_field_def_gw.GPSEpochTimingInfo'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_gw.GPSEpochTimingInfo'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_gw.GPSEpochTimingInfo'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_gw.GPSEpochTimingInfo'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'dg_read_field_def_gw.GPSEpochTimingInfo'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_gw.GPSEpochTimingInfo_time_since_gps_epoch'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.GPSEpochTimingInfo'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 ->
                    'skip_64_gw.GPSEpochTimingInfo'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 ->
                    'skip_length_delimited_gw.GPSEpochTimingInfo'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.GPSEpochTimingInfo'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 ->
                    'skip_32_gw.GPSEpochTimingInfo'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
'dg_read_field_def_gw.GPSEpochTimingInfo'(<<>>, 0, 0, _, F@_1, _) ->
    #'gw.GPSEpochTimingInfo'{time_since_gps_epoch = F@_1}.

'd_field_gw.GPSEpochTimingInfo_time_since_gps_epoch'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_gw.GPSEpochTimingInfo_time_since_gps_epoch'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'd_field_gw.GPSEpochTimingInfo_time_since_gps_epoch'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Duration'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.GPSEpochTimingInfo'(
        RestF,
        0,
        0,
        F,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Duration'(Prev, NewFValue, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_gw.GPSEpochTimingInfo'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'skip_varint_gw.GPSEpochTimingInfo'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_gw.GPSEpochTimingInfo'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_gw.GPSEpochTimingInfo'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_gw.GPSEpochTimingInfo'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.GPSEpochTimingInfo'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'skip_length_delimited_gw.GPSEpochTimingInfo'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.GPSEpochTimingInfo'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_gw.GPSEpochTimingInfo'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.GPSEpochTimingInfo'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_gw.GPSEpochTimingInfo'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_gw.GPSEpochTimingInfo'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_gw.GPSEpochTimingInfo'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_gw.GPSEpochTimingInfo'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_gw.UplinkFrame'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.UplinkFrame'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_gw.UplinkFrame'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'd_field_gw.UplinkFrame_phy_payload'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_gw.UplinkFrame'(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'd_field_gw.UplinkFrame_tx_info'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_gw.UplinkFrame'(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'd_field_gw.UplinkFrame_rx_info'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_gw.UplinkFrame'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) ->
    #'gw.UplinkFrame'{phy_payload = F@_1, tx_info = F@_2, rx_info = F@_3};
'dfp_read_field_def_gw.UplinkFrame'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'dg_read_field_def_gw.UplinkFrame'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'dg_read_field_def_gw.UplinkFrame'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_gw.UplinkFrame'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
'dg_read_field_def_gw.UplinkFrame'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_gw.UplinkFrame_phy_payload'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 ->
            'd_field_gw.UplinkFrame_tx_info'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 ->
            'd_field_gw.UplinkFrame_rx_info'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.UplinkFrame'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                1 ->
                    'skip_64_gw.UplinkFrame'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 ->
                    'skip_length_delimited_gw.UplinkFrame'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.UplinkFrame'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                5 ->
                    'skip_32_gw.UplinkFrame'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
'dg_read_field_def_gw.UplinkFrame'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) ->
    #'gw.UplinkFrame'{phy_payload = F@_1, tx_info = F@_2, rx_info = F@_3}.

'd_field_gw.UplinkFrame_phy_payload'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkFrame_phy_payload'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_gw.UplinkFrame_phy_payload'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.UplinkFrame'(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

'd_field_gw.UplinkFrame_tx_info'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkFrame_tx_info'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
'd_field_gw.UplinkFrame_tx_info'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    Prev,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_gw.UplinkTXInfo'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.UplinkFrame'(
        RestF,
        0,
        0,
        F,
        F@_1,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_gw.UplinkTXInfo'(Prev, NewFValue, TrUserData)
        end,
        F@_3,
        TrUserData
    ).

'd_field_gw.UplinkFrame_rx_info'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkFrame_rx_info'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
'd_field_gw.UplinkFrame_rx_info'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_gw.UplinkRXInfo'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.UplinkFrame'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_gw.UplinkRXInfo'(Prev, NewFValue, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_gw.UplinkFrame'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'skip_varint_gw.UplinkFrame'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'skip_varint_gw.UplinkFrame'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_gw.UplinkFrame'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'skip_length_delimited_gw.UplinkFrame'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.UplinkFrame'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'skip_length_delimited_gw.UplinkFrame'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.UplinkFrame'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

'skip_group_gw.UplinkFrame'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.UplinkFrame'(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

'skip_32_gw.UplinkFrame'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_gw.UplinkFrame'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'skip_64_gw.UplinkFrame'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_gw.UplinkFrame'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'decode_msg_gw.UplinkFrameSet'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.UplinkFrameSet'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id(undefined, TrUserData),
        id([], TrUserData),
        TrUserData
    ).

'dfp_read_field_def_gw.UplinkFrameSet'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_gw.UplinkFrameSet_phy_payload'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_gw.UplinkFrameSet'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_gw.UplinkFrameSet_tx_info'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_gw.UplinkFrameSet'(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_gw.UplinkFrameSet_rx_info'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_gw.UplinkFrameSet'(<<>>, 0, 0, _, F@_1, F@_2, R1, TrUserData) ->
    #'gw.UplinkFrameSet'{
        phy_payload = F@_1,
        tx_info = F@_2,
        rx_info = lists_reverse(R1, TrUserData)
    };
'dfp_read_field_def_gw.UplinkFrameSet'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'dg_read_field_def_gw.UplinkFrameSet'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'dg_read_field_def_gw.UplinkFrameSet'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_gw.UplinkFrameSet'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'dg_read_field_def_gw.UplinkFrameSet'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_gw.UplinkFrameSet_phy_payload'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 ->
            'd_field_gw.UplinkFrameSet_tx_info'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 ->
            'd_field_gw.UplinkFrameSet_rx_info'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.UplinkFrameSet'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                1 ->
                    'skip_64_gw.UplinkFrameSet'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_gw.UplinkFrameSet'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.UplinkFrameSet'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                5 ->
                    'skip_32_gw.UplinkFrameSet'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
'dg_read_field_def_gw.UplinkFrameSet'(<<>>, 0, 0, _, F@_1, F@_2, R1, TrUserData) ->
    #'gw.UplinkFrameSet'{
        phy_payload = F@_1,
        tx_info = F@_2,
        rx_info = lists_reverse(R1, TrUserData)
    }.

'd_field_gw.UplinkFrameSet_phy_payload'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkFrameSet_phy_payload'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_gw.UplinkFrameSet_phy_payload'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.UplinkFrameSet'(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

'd_field_gw.UplinkFrameSet_tx_info'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkFrameSet_tx_info'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_gw.UplinkFrameSet_tx_info'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    Prev,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_gw.UplinkTXInfo'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.UplinkFrameSet'(
        RestF,
        0,
        0,
        F,
        F@_1,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_gw.UplinkTXInfo'(Prev, NewFValue, TrUserData)
        end,
        F@_3,
        TrUserData
    ).

'd_field_gw.UplinkFrameSet_rx_info'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkFrameSet_rx_info'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_gw.UplinkFrameSet_rx_info'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_gw.UplinkRXInfo'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.UplinkFrameSet'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        cons(NewFValue, Prev, TrUserData),
        TrUserData
    ).

'skip_varint_gw.UplinkFrameSet'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'skip_varint_gw.UplinkFrameSet'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'skip_varint_gw.UplinkFrameSet'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_gw.UplinkFrameSet'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'skip_length_delimited_gw.UplinkFrameSet'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.UplinkFrameSet'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'skip_length_delimited_gw.UplinkFrameSet'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.UplinkFrameSet'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

'skip_group_gw.UplinkFrameSet'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.UplinkFrameSet'(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

'skip_32_gw.UplinkFrameSet'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_gw.UplinkFrameSet'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'skip_64_gw.UplinkFrameSet'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_gw.UplinkFrameSet'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'decode_msg_gw.DownlinkFrame'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.DownlinkFrame'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id(undefined, TrUserData),
        id(0, TrUserData),
        id(<<>>, TrUserData),
        id([], TrUserData),
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_gw.DownlinkFrame'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'd_field_gw.DownlinkFrame_phy_payload'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'dfp_read_field_def_gw.DownlinkFrame'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'd_field_gw.DownlinkFrame_tx_info'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'dfp_read_field_def_gw.DownlinkFrame'(
    <<24, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'd_field_gw.DownlinkFrame_token'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'dfp_read_field_def_gw.DownlinkFrame'(
    <<34, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'd_field_gw.DownlinkFrame_downlink_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'dfp_read_field_def_gw.DownlinkFrame'(
    <<42, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'd_field_gw.DownlinkFrame_items'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'dfp_read_field_def_gw.DownlinkFrame'(
    <<50, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'd_field_gw.DownlinkFrame_gateway_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'dfp_read_field_def_gw.DownlinkFrame'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, R1, F@_6, TrUserData) ->
    #'gw.DownlinkFrame'{
        phy_payload = F@_1,
        tx_info = F@_2,
        token = F@_3,
        downlink_id = F@_4,
        items = lists_reverse(R1, TrUserData),
        gateway_id = F@_6
    };
'dfp_read_field_def_gw.DownlinkFrame'(
    Other,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'dg_read_field_def_gw.DownlinkFrame'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'dg_read_field_def_gw.DownlinkFrame'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_gw.DownlinkFrame'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'dg_read_field_def_gw.DownlinkFrame'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_gw.DownlinkFrame_phy_payload'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                TrUserData
            );
        18 ->
            'd_field_gw.DownlinkFrame_tx_info'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                TrUserData
            );
        24 ->
            'd_field_gw.DownlinkFrame_token'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                TrUserData
            );
        34 ->
            'd_field_gw.DownlinkFrame_downlink_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                TrUserData
            );
        42 ->
            'd_field_gw.DownlinkFrame_items'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                TrUserData
            );
        50 ->
            'd_field_gw.DownlinkFrame_gateway_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.DownlinkFrame'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        TrUserData
                    );
                1 ->
                    'skip_64_gw.DownlinkFrame'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_gw.DownlinkFrame'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.DownlinkFrame'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        TrUserData
                    );
                5 ->
                    'skip_32_gw.DownlinkFrame'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_gw.DownlinkFrame'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, R1, F@_6, TrUserData) ->
    #'gw.DownlinkFrame'{
        phy_payload = F@_1,
        tx_info = F@_2,
        token = F@_3,
        downlink_id = F@_4,
        items = lists_reverse(R1, TrUserData),
        gateway_id = F@_6
    }.

'd_field_gw.DownlinkFrame_phy_payload'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkFrame_phy_payload'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'd_field_gw.DownlinkFrame_phy_payload'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.DownlinkFrame'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'd_field_gw.DownlinkFrame_tx_info'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkFrame_tx_info'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'd_field_gw.DownlinkFrame_tx_info'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    Prev,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_gw.DownlinkTXInfo'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.DownlinkFrame'(
        RestF,
        0,
        0,
        F,
        F@_1,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_gw.DownlinkTXInfo'(Prev, NewFValue, TrUserData)
        end,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'd_field_gw.DownlinkFrame_token'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkFrame_token'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'd_field_gw.DownlinkFrame_token'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    _,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.DownlinkFrame'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        NewFValue,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'd_field_gw.DownlinkFrame_downlink_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkFrame_downlink_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'd_field_gw.DownlinkFrame_downlink_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    _,
    F@_5,
    F@_6,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.DownlinkFrame'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        NewFValue,
        F@_5,
        F@_6,
        TrUserData
    ).

'd_field_gw.DownlinkFrame_items'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkFrame_items'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'd_field_gw.DownlinkFrame_items'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    Prev,
    F@_6,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_gw.DownlinkFrameItem'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.DownlinkFrame'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        cons(NewFValue, Prev, TrUserData),
        F@_6,
        TrUserData
    ).

'd_field_gw.DownlinkFrame_gateway_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkFrame_gateway_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'd_field_gw.DownlinkFrame_gateway_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.DownlinkFrame'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        NewFValue,
        TrUserData
    ).

'skip_varint_gw.DownlinkFrame'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'skip_varint_gw.DownlinkFrame'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
'skip_varint_gw.DownlinkFrame'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'dfp_read_field_def_gw.DownlinkFrame'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'skip_length_delimited_gw.DownlinkFrame'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.DownlinkFrame'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'skip_length_delimited_gw.DownlinkFrame'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.DownlinkFrame'(
        Rest2,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'skip_group_gw.DownlinkFrame'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.DownlinkFrame'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'skip_32_gw.DownlinkFrame'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'dfp_read_field_def_gw.DownlinkFrame'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'skip_64_gw.DownlinkFrame'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'dfp_read_field_def_gw.DownlinkFrame'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'decode_msg_gw.DownlinkFrameItem'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.DownlinkFrameItem'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id(undefined, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_gw.DownlinkFrameItem'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'd_field_gw.DownlinkFrameItem_phy_payload'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_gw.DownlinkFrameItem'(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'd_field_gw.DownlinkFrameItem_tx_info'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_gw.DownlinkFrameItem'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'gw.DownlinkFrameItem'{phy_payload = F@_1, tx_info = F@_2};
'dfp_read_field_def_gw.DownlinkFrameItem'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_gw.DownlinkFrameItem'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_gw.DownlinkFrameItem'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_gw.DownlinkFrameItem'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'dg_read_field_def_gw.DownlinkFrameItem'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_gw.DownlinkFrameItem_phy_payload'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 ->
            'd_field_gw.DownlinkFrameItem_tx_info'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.DownlinkFrameItem'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                1 ->
                    'skip_64_gw.DownlinkFrameItem'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 ->
                    'skip_length_delimited_gw.DownlinkFrameItem'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.DownlinkFrameItem'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                5 ->
                    'skip_32_gw.DownlinkFrameItem'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_gw.DownlinkFrameItem'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'gw.DownlinkFrameItem'{phy_payload = F@_1, tx_info = F@_2}.

'd_field_gw.DownlinkFrameItem_phy_payload'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkFrameItem_phy_payload'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'd_field_gw.DownlinkFrameItem_phy_payload'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.DownlinkFrameItem'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_gw.DownlinkFrameItem_tx_info'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkFrameItem_tx_info'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_gw.DownlinkFrameItem_tx_info'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_gw.DownlinkTXInfo'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.DownlinkFrameItem'(
        RestF,
        0,
        0,
        F,
        F@_1,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_gw.DownlinkTXInfo'(Prev, NewFValue, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_gw.DownlinkFrameItem'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'skip_varint_gw.DownlinkFrameItem'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_gw.DownlinkFrameItem'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_gw.DownlinkFrameItem'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_gw.DownlinkFrameItem'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.DownlinkFrameItem'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'skip_length_delimited_gw.DownlinkFrameItem'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.DownlinkFrameItem'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_gw.DownlinkFrameItem'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.DownlinkFrameItem'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_gw.DownlinkFrameItem'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_gw.DownlinkFrameItem'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_gw.DownlinkFrameItem'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_gw.DownlinkFrameItem'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'decode_msg_gw.DownlinkTXAck'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.DownlinkTXAck'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id(0, TrUserData),
        id([], TrUserData),
        id(<<>>, TrUserData),
        id([], TrUserData),
        TrUserData
    ).

'dfp_read_field_def_gw.DownlinkTXAck'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_gw.DownlinkTXAck_gateway_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_gw.DownlinkTXAck'(
    <<16, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_gw.DownlinkTXAck_token'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_gw.DownlinkTXAck'(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_gw.DownlinkTXAck_error'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_gw.DownlinkTXAck'(
    <<34, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_gw.DownlinkTXAck_downlink_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_gw.DownlinkTXAck'(
    <<42, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_gw.DownlinkTXAck_items'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_gw.DownlinkTXAck'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, R1, TrUserData) ->
    #'gw.DownlinkTXAck'{
        gateway_id = F@_1,
        token = F@_2,
        error = F@_3,
        downlink_id = F@_4,
        items = lists_reverse(R1, TrUserData)
    };
'dfp_read_field_def_gw.DownlinkTXAck'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    'dg_read_field_def_gw.DownlinkTXAck'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'dg_read_field_def_gw.DownlinkTXAck'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_gw.DownlinkTXAck'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dg_read_field_def_gw.DownlinkTXAck'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_gw.DownlinkTXAck_gateway_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        16 ->
            'd_field_gw.DownlinkTXAck_token'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        26 ->
            'd_field_gw.DownlinkTXAck_error'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        34 ->
            'd_field_gw.DownlinkTXAck_downlink_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        42 ->
            'd_field_gw.DownlinkTXAck_items'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.DownlinkTXAck'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                1 ->
                    'skip_64_gw.DownlinkTXAck'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_gw.DownlinkTXAck'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.DownlinkTXAck'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                5 ->
                    'skip_32_gw.DownlinkTXAck'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_gw.DownlinkTXAck'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, R1, TrUserData) ->
    #'gw.DownlinkTXAck'{
        gateway_id = F@_1,
        token = F@_2,
        error = F@_3,
        downlink_id = F@_4,
        items = lists_reverse(R1, TrUserData)
    }.

'd_field_gw.DownlinkTXAck_gateway_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkTXAck_gateway_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_gw.DownlinkTXAck_gateway_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.DownlinkTXAck'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'd_field_gw.DownlinkTXAck_token'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkTXAck_token'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_gw.DownlinkTXAck_token'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.DownlinkTXAck'(
        RestF,
        0,
        0,
        F,
        F@_1,
        NewFValue,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'd_field_gw.DownlinkTXAck_error'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkTXAck_error'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_gw.DownlinkTXAck_error'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    _,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Utf8:Len/binary, Rest2/binary>> = Rest,
        {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.DownlinkTXAck'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        NewFValue,
        F@_4,
        F@_5,
        TrUserData
    ).

'd_field_gw.DownlinkTXAck_downlink_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkTXAck_downlink_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_gw.DownlinkTXAck_downlink_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    _,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.DownlinkTXAck'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        NewFValue,
        F@_5,
        TrUserData
    ).

'd_field_gw.DownlinkTXAck_items'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkTXAck_items'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_gw.DownlinkTXAck_items'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_gw.DownlinkTXAckItem'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.DownlinkTXAck'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        cons(NewFValue, Prev, TrUserData),
        TrUserData
    ).

'skip_varint_gw.DownlinkTXAck'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'skip_varint_gw.DownlinkTXAck'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'skip_varint_gw.DownlinkTXAck'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_gw.DownlinkTXAck'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'skip_length_delimited_gw.DownlinkTXAck'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.DownlinkTXAck'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'skip_length_delimited_gw.DownlinkTXAck'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.DownlinkTXAck'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'skip_group_gw.DownlinkTXAck'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.DownlinkTXAck'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'skip_32_gw.DownlinkTXAck'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_gw.DownlinkTXAck'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'skip_64_gw.DownlinkTXAck'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_gw.DownlinkTXAck'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'decode_msg_gw.DownlinkTXAckItem'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.DownlinkTXAckItem'(Bin, 0, 0, 0, id('IGNORED', TrUserData), TrUserData).

'dfp_read_field_def_gw.DownlinkTXAckItem'(<<8, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'd_field_gw.DownlinkTXAckItem_status'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_gw.DownlinkTXAckItem'(<<>>, 0, 0, _, F@_1, _) ->
    #'gw.DownlinkTXAckItem'{status = F@_1};
'dfp_read_field_def_gw.DownlinkTXAckItem'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_gw.DownlinkTXAckItem'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_gw.DownlinkTXAckItem'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_gw.DownlinkTXAckItem'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'dg_read_field_def_gw.DownlinkTXAckItem'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            'd_field_gw.DownlinkTXAckItem_status'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.DownlinkTXAckItem'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 ->
                    'skip_64_gw.DownlinkTXAckItem'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 ->
                    'skip_length_delimited_gw.DownlinkTXAckItem'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.DownlinkTXAckItem'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 ->
                    'skip_32_gw.DownlinkTXAckItem'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
'dg_read_field_def_gw.DownlinkTXAckItem'(<<>>, 0, 0, _, F@_1, _) ->
    #'gw.DownlinkTXAckItem'{status = F@_1}.

'd_field_gw.DownlinkTXAckItem_status'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when
    N < 57
->
    'd_field_gw.DownlinkTXAckItem_status'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'd_field_gw.DownlinkTXAckItem_status'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} =
        {id(
                'd_enum_gw.TxAckStatus'(begin
                    <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>,
                    id(Res, TrUserData)
                end),
                TrUserData
            ),
            Rest},
    'dfp_read_field_def_gw.DownlinkTXAckItem'(RestF, 0, 0, F, NewFValue, TrUserData).

'skip_varint_gw.DownlinkTXAckItem'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'skip_varint_gw.DownlinkTXAckItem'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_gw.DownlinkTXAckItem'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_gw.DownlinkTXAckItem'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_gw.DownlinkTXAckItem'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.DownlinkTXAckItem'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'skip_length_delimited_gw.DownlinkTXAckItem'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.DownlinkTXAckItem'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_gw.DownlinkTXAckItem'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.DownlinkTXAckItem'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_gw.DownlinkTXAckItem'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_gw.DownlinkTXAckItem'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_gw.DownlinkTXAckItem'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_gw.DownlinkTXAckItem'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_gw.GatewayConfiguration'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.GatewayConfiguration'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id([], TrUserData),
        id([], TrUserData),
        id(undefined, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_gw.GatewayConfiguration'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'd_field_gw.GatewayConfiguration_gateway_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'dfp_read_field_def_gw.GatewayConfiguration'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'd_field_gw.GatewayConfiguration_version'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'dfp_read_field_def_gw.GatewayConfiguration'(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'd_field_gw.GatewayConfiguration_channels'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'dfp_read_field_def_gw.GatewayConfiguration'(
    <<34, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'd_field_gw.GatewayConfiguration_stats_interval'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'dfp_read_field_def_gw.GatewayConfiguration'(<<>>, 0, 0, _, F@_1, F@_2, R1, F@_4, TrUserData) ->
    #'gw.GatewayConfiguration'{
        gateway_id = F@_1,
        version = F@_2,
        channels = lists_reverse(R1, TrUserData),
        stats_interval = F@_4
    };
'dfp_read_field_def_gw.GatewayConfiguration'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    'dg_read_field_def_gw.GatewayConfiguration'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

'dg_read_field_def_gw.GatewayConfiguration'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_gw.GatewayConfiguration'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'dg_read_field_def_gw.GatewayConfiguration'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_gw.GatewayConfiguration_gateway_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        18 ->
            'd_field_gw.GatewayConfiguration_version'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        26 ->
            'd_field_gw.GatewayConfiguration_channels'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        34 ->
            'd_field_gw.GatewayConfiguration_stats_interval'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.GatewayConfiguration'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                1 ->
                    'skip_64_gw.GatewayConfiguration'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_gw.GatewayConfiguration'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.GatewayConfiguration'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                5 ->
                    'skip_32_gw.GatewayConfiguration'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_gw.GatewayConfiguration'(<<>>, 0, 0, _, F@_1, F@_2, R1, F@_4, TrUserData) ->
    #'gw.GatewayConfiguration'{
        gateway_id = F@_1,
        version = F@_2,
        channels = lists_reverse(R1, TrUserData),
        stats_interval = F@_4
    }.

'd_field_gw.GatewayConfiguration_gateway_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayConfiguration_gateway_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'd_field_gw.GatewayConfiguration_gateway_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.GatewayConfiguration'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

'd_field_gw.GatewayConfiguration_version'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayConfiguration_version'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'd_field_gw.GatewayConfiguration_version'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    F@_3,
    F@_4,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Utf8:Len/binary, Rest2/binary>> = Rest,
        {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.GatewayConfiguration'(
        RestF,
        0,
        0,
        F,
        F@_1,
        NewFValue,
        F@_3,
        F@_4,
        TrUserData
    ).

'd_field_gw.GatewayConfiguration_channels'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayConfiguration_channels'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'd_field_gw.GatewayConfiguration_channels'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    Prev,
    F@_4,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_gw.ChannelConfiguration'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.GatewayConfiguration'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        cons(NewFValue, Prev, TrUserData),
        F@_4,
        TrUserData
    ).

'd_field_gw.GatewayConfiguration_stats_interval'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayConfiguration_stats_interval'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'd_field_gw.GatewayConfiguration_stats_interval'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Duration'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.GatewayConfiguration'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Duration'(Prev, NewFValue, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_gw.GatewayConfiguration'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'skip_varint_gw.GatewayConfiguration'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'skip_varint_gw.GatewayConfiguration'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'dfp_read_field_def_gw.GatewayConfiguration'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

'skip_length_delimited_gw.GatewayConfiguration'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.GatewayConfiguration'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'skip_length_delimited_gw.GatewayConfiguration'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.GatewayConfiguration'(
        Rest2,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

'skip_group_gw.GatewayConfiguration'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.GatewayConfiguration'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

'skip_32_gw.GatewayConfiguration'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'dfp_read_field_def_gw.GatewayConfiguration'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

'skip_64_gw.GatewayConfiguration'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'dfp_read_field_def_gw.GatewayConfiguration'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

'decode_msg_gw.ChannelConfiguration'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.ChannelConfiguration'(
        Bin,
        0,
        0,
        0,
        id(0, TrUserData),
        id('LORA', TrUserData),
        id(undefined, TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_gw.ChannelConfiguration'(
    <<8, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_gw.ChannelConfiguration_frequency'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_gw.ChannelConfiguration'(
    <<16, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_gw.ChannelConfiguration_modulation'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_gw.ChannelConfiguration'(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_gw.ChannelConfiguration_lora_modulation_config'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_gw.ChannelConfiguration'(
    <<34, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_gw.ChannelConfiguration_fsk_modulation_config'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_gw.ChannelConfiguration'(
    <<40, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_gw.ChannelConfiguration_board'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_gw.ChannelConfiguration'(
    <<48, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_gw.ChannelConfiguration_demodulator'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_gw.ChannelConfiguration'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    #'gw.ChannelConfiguration'{
        frequency = F@_1,
        modulation = F@_2,
        modulation_config = F@_3,
        board = F@_4,
        demodulator = F@_5
    };
'dfp_read_field_def_gw.ChannelConfiguration'(
    Other,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dg_read_field_def_gw.ChannelConfiguration'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'dg_read_field_def_gw.ChannelConfiguration'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_gw.ChannelConfiguration'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dg_read_field_def_gw.ChannelConfiguration'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            'd_field_gw.ChannelConfiguration_frequency'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        16 ->
            'd_field_gw.ChannelConfiguration_modulation'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        26 ->
            'd_field_gw.ChannelConfiguration_lora_modulation_config'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        34 ->
            'd_field_gw.ChannelConfiguration_fsk_modulation_config'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        40 ->
            'd_field_gw.ChannelConfiguration_board'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        48 ->
            'd_field_gw.ChannelConfiguration_demodulator'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.ChannelConfiguration'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                1 ->
                    'skip_64_gw.ChannelConfiguration'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_gw.ChannelConfiguration'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.ChannelConfiguration'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                5 ->
                    'skip_32_gw.ChannelConfiguration'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_gw.ChannelConfiguration'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    #'gw.ChannelConfiguration'{
        frequency = F@_1,
        modulation = F@_2,
        modulation_config = F@_3,
        board = F@_4,
        demodulator = F@_5
    }.

'd_field_gw.ChannelConfiguration_frequency'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_gw.ChannelConfiguration_frequency'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_gw.ChannelConfiguration_frequency'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.ChannelConfiguration'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'd_field_gw.ChannelConfiguration_modulation'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_gw.ChannelConfiguration_modulation'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_gw.ChannelConfiguration_modulation'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} =
        {id(
                'd_enum_common.Modulation'(begin
                    <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>,
                    id(Res, TrUserData)
                end),
                TrUserData
            ),
            Rest},
    'dfp_read_field_def_gw.ChannelConfiguration'(
        RestF,
        0,
        0,
        F,
        F@_1,
        NewFValue,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'd_field_gw.ChannelConfiguration_lora_modulation_config'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_gw.ChannelConfiguration_lora_modulation_config'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_gw.ChannelConfiguration_lora_modulation_config'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    Prev,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_gw.LoRaModulationConfig'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.ChannelConfiguration'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        case Prev of
            undefined ->
                id({lora_modulation_config, NewFValue}, TrUserData);
            {lora_modulation_config, MVPrev} ->
                id(
                    {lora_modulation_config,
                        'merge_msg_gw.LoRaModulationConfig'(MVPrev, NewFValue, TrUserData)},
                    TrUserData
                );
            _ ->
                id({lora_modulation_config, NewFValue}, TrUserData)
        end,
        F@_4,
        F@_5,
        TrUserData
    ).

'd_field_gw.ChannelConfiguration_fsk_modulation_config'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_gw.ChannelConfiguration_fsk_modulation_config'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_gw.ChannelConfiguration_fsk_modulation_config'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    Prev,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_gw.FSKModulationConfig'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.ChannelConfiguration'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        case Prev of
            undefined ->
                id({fsk_modulation_config, NewFValue}, TrUserData);
            {fsk_modulation_config, MVPrev} ->
                id(
                    {fsk_modulation_config,
                        'merge_msg_gw.FSKModulationConfig'(MVPrev, NewFValue, TrUserData)},
                    TrUserData
                );
            _ ->
                id({fsk_modulation_config, NewFValue}, TrUserData)
        end,
        F@_4,
        F@_5,
        TrUserData
    ).

'd_field_gw.ChannelConfiguration_board'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_gw.ChannelConfiguration_board'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_gw.ChannelConfiguration_board'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    _,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.ChannelConfiguration'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        NewFValue,
        F@_5,
        TrUserData
    ).

'd_field_gw.ChannelConfiguration_demodulator'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_gw.ChannelConfiguration_demodulator'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_gw.ChannelConfiguration_demodulator'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.ChannelConfiguration'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        NewFValue,
        TrUserData
    ).

'skip_varint_gw.ChannelConfiguration'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'skip_varint_gw.ChannelConfiguration'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'skip_varint_gw.ChannelConfiguration'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_gw.ChannelConfiguration'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'skip_length_delimited_gw.ChannelConfiguration'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.ChannelConfiguration'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'skip_length_delimited_gw.ChannelConfiguration'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.ChannelConfiguration'(
        Rest2,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'skip_group_gw.ChannelConfiguration'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.ChannelConfiguration'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'skip_32_gw.ChannelConfiguration'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_gw.ChannelConfiguration'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'skip_64_gw.ChannelConfiguration'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_gw.ChannelConfiguration'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'decode_msg_gw.LoRaModulationConfig'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.LoRaModulationConfig'(
        Bin,
        0,
        0,
        0,
        id(0, TrUserData),
        id([], TrUserData),
        TrUserData
    ).

'dfp_read_field_def_gw.LoRaModulationConfig'(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'd_field_gw.LoRaModulationConfig_bandwidth'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_gw.LoRaModulationConfig'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'd_pfield_gw.LoRaModulationConfig_spreading_factors'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_gw.LoRaModulationConfig'(
    <<16, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'd_field_gw.LoRaModulationConfig_spreading_factors'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_gw.LoRaModulationConfig'(<<>>, 0, 0, _, F@_1, R1, TrUserData) ->
    #'gw.LoRaModulationConfig'{bandwidth = F@_1, spreading_factors = lists_reverse(R1, TrUserData)};
'dfp_read_field_def_gw.LoRaModulationConfig'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_gw.LoRaModulationConfig'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_gw.LoRaModulationConfig'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_gw.LoRaModulationConfig'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'dg_read_field_def_gw.LoRaModulationConfig'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            'd_field_gw.LoRaModulationConfig_bandwidth'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 ->
            'd_pfield_gw.LoRaModulationConfig_spreading_factors'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                TrUserData
            );
        16 ->
            'd_field_gw.LoRaModulationConfig_spreading_factors'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.LoRaModulationConfig'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                1 ->
                    'skip_64_gw.LoRaModulationConfig'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_gw.LoRaModulationConfig'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.LoRaModulationConfig'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                5 ->
                    'skip_32_gw.LoRaModulationConfig'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_gw.LoRaModulationConfig'(<<>>, 0, 0, _, F@_1, R1, TrUserData) ->
    #'gw.LoRaModulationConfig'{bandwidth = F@_1, spreading_factors = lists_reverse(R1, TrUserData)}.

'd_field_gw.LoRaModulationConfig_bandwidth'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_gw.LoRaModulationConfig_bandwidth'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'd_field_gw.LoRaModulationConfig_bandwidth'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.LoRaModulationConfig'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_gw.LoRaModulationConfig_spreading_factors'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_gw.LoRaModulationConfig_spreading_factors'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'd_field_gw.LoRaModulationConfig_spreading_factors'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.LoRaModulationConfig'(
        RestF,
        0,
        0,
        F,
        F@_1,
        cons(NewFValue, Prev, TrUserData),
        TrUserData
    ).

'd_pfield_gw.LoRaModulationConfig_spreading_factors'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_pfield_gw.LoRaModulationConfig_spreading_factors'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'd_pfield_gw.LoRaModulationConfig_spreading_factors'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    E,
    TrUserData
) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = 'd_packed_field_gw.LoRaModulationConfig_spreading_factors'(
        PackedBytes,
        0,
        0,
        F,
        E,
        TrUserData
    ),
    'dfp_read_field_def_gw.LoRaModulationConfig'(Rest2, 0, 0, F, F@_1, NewSeq, TrUserData).

'd_packed_field_gw.LoRaModulationConfig_spreading_factors'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    AccSeq,
    TrUserData
) when N < 57 ->
    'd_packed_field_gw.LoRaModulationConfig_spreading_factors'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        AccSeq,
        TrUserData
    );
'd_packed_field_gw.LoRaModulationConfig_spreading_factors'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    AccSeq,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'd_packed_field_gw.LoRaModulationConfig_spreading_factors'(
        RestF,
        0,
        0,
        F,
        [NewFValue | AccSeq],
        TrUserData
    );
'd_packed_field_gw.LoRaModulationConfig_spreading_factors'(<<>>, 0, 0, _, AccSeq, _) ->
    AccSeq.

'skip_varint_gw.LoRaModulationConfig'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'skip_varint_gw.LoRaModulationConfig'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_gw.LoRaModulationConfig'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_gw.LoRaModulationConfig'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_gw.LoRaModulationConfig'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.LoRaModulationConfig'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'skip_length_delimited_gw.LoRaModulationConfig'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.LoRaModulationConfig'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_gw.LoRaModulationConfig'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.LoRaModulationConfig'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_gw.LoRaModulationConfig'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_gw.LoRaModulationConfig'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_gw.LoRaModulationConfig'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_gw.LoRaModulationConfig'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'decode_msg_gw.FSKModulationConfig'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.FSKModulationConfig'(
        Bin,
        0,
        0,
        0,
        id(0, TrUserData),
        id(0, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_gw.FSKModulationConfig'(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'd_field_gw.FSKModulationConfig_bandwidth'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_gw.FSKModulationConfig'(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'd_field_gw.FSKModulationConfig_bitrate'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_gw.FSKModulationConfig'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'gw.FSKModulationConfig'{bandwidth = F@_1, bitrate = F@_2};
'dfp_read_field_def_gw.FSKModulationConfig'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_gw.FSKModulationConfig'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_gw.FSKModulationConfig'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_gw.FSKModulationConfig'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'dg_read_field_def_gw.FSKModulationConfig'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            'd_field_gw.FSKModulationConfig_bandwidth'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        16 ->
            'd_field_gw.FSKModulationConfig_bitrate'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.FSKModulationConfig'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                1 ->
                    'skip_64_gw.FSKModulationConfig'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 ->
                    'skip_length_delimited_gw.FSKModulationConfig'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.FSKModulationConfig'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                5 ->
                    'skip_32_gw.FSKModulationConfig'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_gw.FSKModulationConfig'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'gw.FSKModulationConfig'{bandwidth = F@_1, bitrate = F@_2}.

'd_field_gw.FSKModulationConfig_bandwidth'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_gw.FSKModulationConfig_bandwidth'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'd_field_gw.FSKModulationConfig_bandwidth'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.FSKModulationConfig'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_gw.FSKModulationConfig_bitrate'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_gw.FSKModulationConfig_bitrate'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_gw.FSKModulationConfig_bitrate'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.FSKModulationConfig'(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

'skip_varint_gw.FSKModulationConfig'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'skip_varint_gw.FSKModulationConfig'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_gw.FSKModulationConfig'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_gw.FSKModulationConfig'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_gw.FSKModulationConfig'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.FSKModulationConfig'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'skip_length_delimited_gw.FSKModulationConfig'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.FSKModulationConfig'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_gw.FSKModulationConfig'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.FSKModulationConfig'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_gw.FSKModulationConfig'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_gw.FSKModulationConfig'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_gw.FSKModulationConfig'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_gw.FSKModulationConfig'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'decode_msg_gw.GatewayCommandExecRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.GatewayCommandExecRequest'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id([], TrUserData),
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        'tr_decode_init_default_gw.GatewayCommandExecRequest.environment'([], TrUserData),
        TrUserData
    ).

'dfp_read_field_def_gw.GatewayCommandExecRequest'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_gw.GatewayCommandExecRequest_gateway_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_gw.GatewayCommandExecRequest'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_gw.GatewayCommandExecRequest_command'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_gw.GatewayCommandExecRequest'(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_gw.GatewayCommandExecRequest_ExecId'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_gw.GatewayCommandExecRequest'(
    <<34, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_gw.GatewayCommandExecRequest_stdin'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_gw.GatewayCommandExecRequest'(
    <<42, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_gw.GatewayCommandExecRequest_environment'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_gw.GatewayCommandExecRequest'(
    <<>>,
    0,
    0,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    R1,
    TrUserData
) ->
    #'gw.GatewayCommandExecRequest'{
        gateway_id = F@_1,
        command = F@_2,
        'ExecId' = F@_3,
        stdin = F@_4,
        environment = 'tr_decode_repeated_finalize_gw.GatewayCommandExecRequest.environment'(
            R1,
            TrUserData
        )
    };
'dfp_read_field_def_gw.GatewayCommandExecRequest'(
    Other,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dg_read_field_def_gw.GatewayCommandExecRequest'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'dg_read_field_def_gw.GatewayCommandExecRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_gw.GatewayCommandExecRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dg_read_field_def_gw.GatewayCommandExecRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_gw.GatewayCommandExecRequest_gateway_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        18 ->
            'd_field_gw.GatewayCommandExecRequest_command'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        26 ->
            'd_field_gw.GatewayCommandExecRequest_ExecId'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        34 ->
            'd_field_gw.GatewayCommandExecRequest_stdin'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        42 ->
            'd_field_gw.GatewayCommandExecRequest_environment'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.GatewayCommandExecRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                1 ->
                    'skip_64_gw.GatewayCommandExecRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_gw.GatewayCommandExecRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.GatewayCommandExecRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                5 ->
                    'skip_32_gw.GatewayCommandExecRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_gw.GatewayCommandExecRequest'(
    <<>>,
    0,
    0,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    R1,
    TrUserData
) ->
    #'gw.GatewayCommandExecRequest'{
        gateway_id = F@_1,
        command = F@_2,
        'ExecId' = F@_3,
        stdin = F@_4,
        environment = 'tr_decode_repeated_finalize_gw.GatewayCommandExecRequest.environment'(
            R1,
            TrUserData
        )
    }.

'd_field_gw.GatewayCommandExecRequest_gateway_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayCommandExecRequest_gateway_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_gw.GatewayCommandExecRequest_gateway_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.GatewayCommandExecRequest'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'd_field_gw.GatewayCommandExecRequest_command'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayCommandExecRequest_command'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_gw.GatewayCommandExecRequest_command'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Utf8:Len/binary, Rest2/binary>> = Rest,
        {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.GatewayCommandExecRequest'(
        RestF,
        0,
        0,
        F,
        F@_1,
        NewFValue,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'd_field_gw.GatewayCommandExecRequest_ExecId'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayCommandExecRequest_ExecId'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_gw.GatewayCommandExecRequest_ExecId'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    _,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.GatewayCommandExecRequest'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        NewFValue,
        F@_4,
        F@_5,
        TrUserData
    ).

'd_field_gw.GatewayCommandExecRequest_stdin'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayCommandExecRequest_stdin'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_gw.GatewayCommandExecRequest_stdin'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    _,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.GatewayCommandExecRequest'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        NewFValue,
        F@_5,
        TrUserData
    ).

'd_field_gw.GatewayCommandExecRequest_environment'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayCommandExecRequest_environment'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_gw.GatewayCommandExecRequest_environment'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_map<string,string>'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.GatewayCommandExecRequest'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        'tr_decode_repeated_add_elem_gw.GatewayCommandExecRequest.environment'(
            NewFValue,
            Prev,
            TrUserData
        ),
        TrUserData
    ).

'skip_varint_gw.GatewayCommandExecRequest'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'skip_varint_gw.GatewayCommandExecRequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'skip_varint_gw.GatewayCommandExecRequest'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_gw.GatewayCommandExecRequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'skip_length_delimited_gw.GatewayCommandExecRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.GatewayCommandExecRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'skip_length_delimited_gw.GatewayCommandExecRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.GatewayCommandExecRequest'(
        Rest2,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'skip_group_gw.GatewayCommandExecRequest'(
    Bin,
    _,
    Z2,
    FNum,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.GatewayCommandExecRequest'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'skip_32_gw.GatewayCommandExecRequest'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_gw.GatewayCommandExecRequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'skip_64_gw.GatewayCommandExecRequest'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_gw.GatewayCommandExecRequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'decode_msg_gw.GatewayCommandExecResponse'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.GatewayCommandExecResponse'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        id([], TrUserData),
        TrUserData
    ).

'dfp_read_field_def_gw.GatewayCommandExecResponse'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_gw.GatewayCommandExecResponse_gateway_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_gw.GatewayCommandExecResponse'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_gw.GatewayCommandExecResponse_exec_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_gw.GatewayCommandExecResponse'(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_gw.GatewayCommandExecResponse_stdout'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_gw.GatewayCommandExecResponse'(
    <<34, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_gw.GatewayCommandExecResponse_stderr'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_gw.GatewayCommandExecResponse'(
    <<42, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_gw.GatewayCommandExecResponse_error'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_gw.GatewayCommandExecResponse'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    #'gw.GatewayCommandExecResponse'{
        gateway_id = F@_1,
        exec_id = F@_2,
        stdout = F@_3,
        stderr = F@_4,
        error = F@_5
    };
'dfp_read_field_def_gw.GatewayCommandExecResponse'(
    Other,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dg_read_field_def_gw.GatewayCommandExecResponse'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'dg_read_field_def_gw.GatewayCommandExecResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_gw.GatewayCommandExecResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dg_read_field_def_gw.GatewayCommandExecResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_gw.GatewayCommandExecResponse_gateway_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        18 ->
            'd_field_gw.GatewayCommandExecResponse_exec_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        26 ->
            'd_field_gw.GatewayCommandExecResponse_stdout'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        34 ->
            'd_field_gw.GatewayCommandExecResponse_stderr'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        42 ->
            'd_field_gw.GatewayCommandExecResponse_error'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.GatewayCommandExecResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                1 ->
                    'skip_64_gw.GatewayCommandExecResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_gw.GatewayCommandExecResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.GatewayCommandExecResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                5 ->
                    'skip_32_gw.GatewayCommandExecResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_gw.GatewayCommandExecResponse'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    #'gw.GatewayCommandExecResponse'{
        gateway_id = F@_1,
        exec_id = F@_2,
        stdout = F@_3,
        stderr = F@_4,
        error = F@_5
    }.

'd_field_gw.GatewayCommandExecResponse_gateway_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayCommandExecResponse_gateway_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_gw.GatewayCommandExecResponse_gateway_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.GatewayCommandExecResponse'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'd_field_gw.GatewayCommandExecResponse_exec_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayCommandExecResponse_exec_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_gw.GatewayCommandExecResponse_exec_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.GatewayCommandExecResponse'(
        RestF,
        0,
        0,
        F,
        F@_1,
        NewFValue,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'd_field_gw.GatewayCommandExecResponse_stdout'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayCommandExecResponse_stdout'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_gw.GatewayCommandExecResponse_stdout'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    _,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.GatewayCommandExecResponse'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        NewFValue,
        F@_4,
        F@_5,
        TrUserData
    ).

'd_field_gw.GatewayCommandExecResponse_stderr'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayCommandExecResponse_stderr'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_gw.GatewayCommandExecResponse_stderr'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    _,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.GatewayCommandExecResponse'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        NewFValue,
        F@_5,
        TrUserData
    ).

'd_field_gw.GatewayCommandExecResponse_error'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayCommandExecResponse_error'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_gw.GatewayCommandExecResponse_error'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Utf8:Len/binary, Rest2/binary>> = Rest,
        {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.GatewayCommandExecResponse'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        NewFValue,
        TrUserData
    ).

'skip_varint_gw.GatewayCommandExecResponse'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'skip_varint_gw.GatewayCommandExecResponse'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'skip_varint_gw.GatewayCommandExecResponse'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_gw.GatewayCommandExecResponse'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'skip_length_delimited_gw.GatewayCommandExecResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.GatewayCommandExecResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'skip_length_delimited_gw.GatewayCommandExecResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.GatewayCommandExecResponse'(
        Rest2,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'skip_group_gw.GatewayCommandExecResponse'(
    Bin,
    _,
    Z2,
    FNum,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.GatewayCommandExecResponse'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'skip_32_gw.GatewayCommandExecResponse'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_gw.GatewayCommandExecResponse'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'skip_64_gw.GatewayCommandExecResponse'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_gw.GatewayCommandExecResponse'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'decode_msg_gw.RawPacketForwarderEvent'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.RawPacketForwarderEvent'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_gw.RawPacketForwarderEvent'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_gw.RawPacketForwarderEvent_gateway_id'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_gw.RawPacketForwarderEvent'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_gw.RawPacketForwarderEvent_raw_id'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_gw.RawPacketForwarderEvent'(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_gw.RawPacketForwarderEvent_payload'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_gw.RawPacketForwarderEvent'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) ->
    #'gw.RawPacketForwarderEvent'{gateway_id = F@_1, raw_id = F@_2, payload = F@_3};
'dfp_read_field_def_gw.RawPacketForwarderEvent'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'dg_read_field_def_gw.RawPacketForwarderEvent'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'dg_read_field_def_gw.RawPacketForwarderEvent'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_gw.RawPacketForwarderEvent'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'dg_read_field_def_gw.RawPacketForwarderEvent'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_gw.RawPacketForwarderEvent_gateway_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        18 ->
            'd_field_gw.RawPacketForwarderEvent_raw_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        26 ->
            'd_field_gw.RawPacketForwarderEvent_payload'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.RawPacketForwarderEvent'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                1 ->
                    'skip_64_gw.RawPacketForwarderEvent'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_gw.RawPacketForwarderEvent'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.RawPacketForwarderEvent'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                5 ->
                    'skip_32_gw.RawPacketForwarderEvent'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_gw.RawPacketForwarderEvent'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) ->
    #'gw.RawPacketForwarderEvent'{gateway_id = F@_1, raw_id = F@_2, payload = F@_3}.

'd_field_gw.RawPacketForwarderEvent_gateway_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_gw.RawPacketForwarderEvent_gateway_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_gw.RawPacketForwarderEvent_gateway_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.RawPacketForwarderEvent'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        F@_3,
        TrUserData
    ).

'd_field_gw.RawPacketForwarderEvent_raw_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_gw.RawPacketForwarderEvent_raw_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_gw.RawPacketForwarderEvent_raw_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.RawPacketForwarderEvent'(
        RestF,
        0,
        0,
        F,
        F@_1,
        NewFValue,
        F@_3,
        TrUserData
    ).

'd_field_gw.RawPacketForwarderEvent_payload'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_gw.RawPacketForwarderEvent_payload'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_gw.RawPacketForwarderEvent_payload'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.RawPacketForwarderEvent'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        NewFValue,
        TrUserData
    ).

'skip_varint_gw.RawPacketForwarderEvent'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'skip_varint_gw.RawPacketForwarderEvent'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'skip_varint_gw.RawPacketForwarderEvent'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'dfp_read_field_def_gw.RawPacketForwarderEvent'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'skip_length_delimited_gw.RawPacketForwarderEvent'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.RawPacketForwarderEvent'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'skip_length_delimited_gw.RawPacketForwarderEvent'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.RawPacketForwarderEvent'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

'skip_group_gw.RawPacketForwarderEvent'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.RawPacketForwarderEvent'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

'skip_32_gw.RawPacketForwarderEvent'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'dfp_read_field_def_gw.RawPacketForwarderEvent'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'skip_64_gw.RawPacketForwarderEvent'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'dfp_read_field_def_gw.RawPacketForwarderEvent'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'decode_msg_gw.RawPacketForwarderCommand'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.RawPacketForwarderCommand'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_gw.RawPacketForwarderCommand'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_gw.RawPacketForwarderCommand_gateway_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'dfp_read_field_def_gw.RawPacketForwarderCommand'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_gw.RawPacketForwarderCommand_raw_id'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_gw.RawPacketForwarderCommand'(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_gw.RawPacketForwarderCommand_payload'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_gw.RawPacketForwarderCommand'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) ->
    #'gw.RawPacketForwarderCommand'{gateway_id = F@_1, raw_id = F@_2, payload = F@_3};
'dfp_read_field_def_gw.RawPacketForwarderCommand'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'dg_read_field_def_gw.RawPacketForwarderCommand'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

'dg_read_field_def_gw.RawPacketForwarderCommand'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_gw.RawPacketForwarderCommand'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'dg_read_field_def_gw.RawPacketForwarderCommand'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_gw.RawPacketForwarderCommand_gateway_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        18 ->
            'd_field_gw.RawPacketForwarderCommand_raw_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        26 ->
            'd_field_gw.RawPacketForwarderCommand_payload'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.RawPacketForwarderCommand'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                1 ->
                    'skip_64_gw.RawPacketForwarderCommand'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_gw.RawPacketForwarderCommand'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.RawPacketForwarderCommand'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                5 ->
                    'skip_32_gw.RawPacketForwarderCommand'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_gw.RawPacketForwarderCommand'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) ->
    #'gw.RawPacketForwarderCommand'{gateway_id = F@_1, raw_id = F@_2, payload = F@_3}.

'd_field_gw.RawPacketForwarderCommand_gateway_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_gw.RawPacketForwarderCommand_gateway_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_gw.RawPacketForwarderCommand_gateway_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.RawPacketForwarderCommand'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        F@_3,
        TrUserData
    ).

'd_field_gw.RawPacketForwarderCommand_raw_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_gw.RawPacketForwarderCommand_raw_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_gw.RawPacketForwarderCommand_raw_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.RawPacketForwarderCommand'(
        RestF,
        0,
        0,
        F,
        F@_1,
        NewFValue,
        F@_3,
        TrUserData
    ).

'd_field_gw.RawPacketForwarderCommand_payload'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_gw.RawPacketForwarderCommand_payload'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_gw.RawPacketForwarderCommand_payload'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.RawPacketForwarderCommand'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        NewFValue,
        TrUserData
    ).

'skip_varint_gw.RawPacketForwarderCommand'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'skip_varint_gw.RawPacketForwarderCommand'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'skip_varint_gw.RawPacketForwarderCommand'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'dfp_read_field_def_gw.RawPacketForwarderCommand'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

'skip_length_delimited_gw.RawPacketForwarderCommand'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.RawPacketForwarderCommand'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'skip_length_delimited_gw.RawPacketForwarderCommand'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.RawPacketForwarderCommand'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

'skip_group_gw.RawPacketForwarderCommand'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.RawPacketForwarderCommand'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

'skip_32_gw.RawPacketForwarderCommand'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'dfp_read_field_def_gw.RawPacketForwarderCommand'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

'skip_64_gw.RawPacketForwarderCommand'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'dfp_read_field_def_gw.RawPacketForwarderCommand'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

'decode_msg_gw.ConnState'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.ConnState'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id('OFFLINE', TrUserData),
        TrUserData
    ).

'dfp_read_field_def_gw.ConnState'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'd_field_gw.ConnState_gateway_id'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_gw.ConnState'(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'd_field_gw.ConnState_state'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_gw.ConnState'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'gw.ConnState'{gateway_id = F@_1, state = F@_2};
'dfp_read_field_def_gw.ConnState'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_gw.ConnState'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_gw.ConnState'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when
    N < 32 - 7
->
    'dg_read_field_def_gw.ConnState'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'dg_read_field_def_gw.ConnState'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_gw.ConnState_gateway_id'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        16 ->
            'd_field_gw.ConnState_state'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.ConnState'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 ->
                    'skip_64_gw.ConnState'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 ->
                    'skip_length_delimited_gw.ConnState'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.ConnState'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 ->
                    'skip_32_gw.ConnState'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_gw.ConnState'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'gw.ConnState'{gateway_id = F@_1, state = F@_2}.

'd_field_gw.ConnState_gateway_id'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when
    N < 57
->
    'd_field_gw.ConnState_gateway_id'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_gw.ConnState_gateway_id'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.ConnState'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_gw.ConnState_state'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when
    N < 57
->
    'd_field_gw.ConnState_state'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_gw.ConnState_state'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} =
        {id(
                'd_enum_gw.ConnState.State'(begin
                    <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>,
                    id(Res, TrUserData)
                end),
                TrUserData
            ),
            Rest},
    'dfp_read_field_def_gw.ConnState'(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

'skip_varint_gw.ConnState'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'skip_varint_gw.ConnState'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_gw.ConnState'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_gw.ConnState'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_gw.ConnState'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.ConnState'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'skip_length_delimited_gw.ConnState'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.ConnState'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_gw.ConnState'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.ConnState'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_gw.ConnState'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_gw.ConnState'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_gw.ConnState'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_gw.ConnState'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'decode_msg_ns.ServiceProfile'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.ServiceProfile'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        id('DROP', TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        id('DROP', TrUserData),
        id(false, TrUserData),
        id(0, TrUserData),
        id(false, TrUserData),
        id(false, TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        id(<<>>, TrUserData),
        id(false, TrUserData),
        id(false, TrUserData),
        id(false, TrUserData),
        id(false, TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        id(false, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.ServiceProfile'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'd_field_ns.ServiceProfile_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'dfp_read_field_def_ns.ServiceProfile'(
    <<16, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'd_field_ns.ServiceProfile_ul_rate'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'dfp_read_field_def_ns.ServiceProfile'(
    <<24, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'd_field_ns.ServiceProfile_ul_bucket_size'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'dfp_read_field_def_ns.ServiceProfile'(
    <<32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'd_field_ns.ServiceProfile_ul_rate_policy'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'dfp_read_field_def_ns.ServiceProfile'(
    <<40, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'd_field_ns.ServiceProfile_dl_rate'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'dfp_read_field_def_ns.ServiceProfile'(
    <<48, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'd_field_ns.ServiceProfile_dl_bucket_size'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'dfp_read_field_def_ns.ServiceProfile'(
    <<56, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'd_field_ns.ServiceProfile_dl_rate_policy'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'dfp_read_field_def_ns.ServiceProfile'(
    <<64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'd_field_ns.ServiceProfile_add_gw_metadata'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'dfp_read_field_def_ns.ServiceProfile'(
    <<72, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'd_field_ns.ServiceProfile_dev_status_req_freq'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'dfp_read_field_def_ns.ServiceProfile'(
    <<80, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'd_field_ns.ServiceProfile_report_dev_status_battery'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'dfp_read_field_def_ns.ServiceProfile'(
    <<88, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'd_field_ns.ServiceProfile_report_dev_status_margin'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'dfp_read_field_def_ns.ServiceProfile'(
    <<96, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'd_field_ns.ServiceProfile_dr_min'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'dfp_read_field_def_ns.ServiceProfile'(
    <<104, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'd_field_ns.ServiceProfile_dr_max'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'dfp_read_field_def_ns.ServiceProfile'(
    <<114, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'd_field_ns.ServiceProfile_channel_mask'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'dfp_read_field_def_ns.ServiceProfile'(
    <<120, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'd_field_ns.ServiceProfile_pr_allowed'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'dfp_read_field_def_ns.ServiceProfile'(
    <<128, 1, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'd_field_ns.ServiceProfile_hr_allowed'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'dfp_read_field_def_ns.ServiceProfile'(
    <<136, 1, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'd_field_ns.ServiceProfile_ra_allowed'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'dfp_read_field_def_ns.ServiceProfile'(
    <<144, 1, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'd_field_ns.ServiceProfile_nwk_geo_loc'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'dfp_read_field_def_ns.ServiceProfile'(
    <<152, 1, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'd_field_ns.ServiceProfile_target_per'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'dfp_read_field_def_ns.ServiceProfile'(
    <<160, 1, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'd_field_ns.ServiceProfile_min_gw_diversity'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'dfp_read_field_def_ns.ServiceProfile'(
    <<168, 1, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'd_field_ns.ServiceProfile_gws_private'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'dfp_read_field_def_ns.ServiceProfile'(
    <<>>,
    0,
    0,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    _
) ->
    #'ns.ServiceProfile'{
        id = F@_1,
        ul_rate = F@_2,
        ul_bucket_size = F@_3,
        ul_rate_policy = F@_4,
        dl_rate = F@_5,
        dl_bucket_size = F@_6,
        dl_rate_policy = F@_7,
        add_gw_metadata = F@_8,
        dev_status_req_freq = F@_9,
        report_dev_status_battery = F@_10,
        report_dev_status_margin = F@_11,
        dr_min = F@_12,
        dr_max = F@_13,
        channel_mask = F@_14,
        pr_allowed = F@_15,
        hr_allowed = F@_16,
        ra_allowed = F@_17,
        nwk_geo_loc = F@_18,
        target_per = F@_19,
        min_gw_diversity = F@_20,
        gws_private = F@_21
    };
'dfp_read_field_def_ns.ServiceProfile'(
    Other,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'dg_read_field_def_ns.ServiceProfile'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'dg_read_field_def_ns.ServiceProfile'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.ServiceProfile'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'dg_read_field_def_ns.ServiceProfile'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.ServiceProfile_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                F@_18,
                F@_19,
                F@_20,
                F@_21,
                TrUserData
            );
        16 ->
            'd_field_ns.ServiceProfile_ul_rate'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                F@_18,
                F@_19,
                F@_20,
                F@_21,
                TrUserData
            );
        24 ->
            'd_field_ns.ServiceProfile_ul_bucket_size'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                F@_18,
                F@_19,
                F@_20,
                F@_21,
                TrUserData
            );
        32 ->
            'd_field_ns.ServiceProfile_ul_rate_policy'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                F@_18,
                F@_19,
                F@_20,
                F@_21,
                TrUserData
            );
        40 ->
            'd_field_ns.ServiceProfile_dl_rate'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                F@_18,
                F@_19,
                F@_20,
                F@_21,
                TrUserData
            );
        48 ->
            'd_field_ns.ServiceProfile_dl_bucket_size'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                F@_18,
                F@_19,
                F@_20,
                F@_21,
                TrUserData
            );
        56 ->
            'd_field_ns.ServiceProfile_dl_rate_policy'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                F@_18,
                F@_19,
                F@_20,
                F@_21,
                TrUserData
            );
        64 ->
            'd_field_ns.ServiceProfile_add_gw_metadata'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                F@_18,
                F@_19,
                F@_20,
                F@_21,
                TrUserData
            );
        72 ->
            'd_field_ns.ServiceProfile_dev_status_req_freq'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                F@_18,
                F@_19,
                F@_20,
                F@_21,
                TrUserData
            );
        80 ->
            'd_field_ns.ServiceProfile_report_dev_status_battery'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                F@_18,
                F@_19,
                F@_20,
                F@_21,
                TrUserData
            );
        88 ->
            'd_field_ns.ServiceProfile_report_dev_status_margin'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                F@_18,
                F@_19,
                F@_20,
                F@_21,
                TrUserData
            );
        96 ->
            'd_field_ns.ServiceProfile_dr_min'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                F@_18,
                F@_19,
                F@_20,
                F@_21,
                TrUserData
            );
        104 ->
            'd_field_ns.ServiceProfile_dr_max'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                F@_18,
                F@_19,
                F@_20,
                F@_21,
                TrUserData
            );
        114 ->
            'd_field_ns.ServiceProfile_channel_mask'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                F@_18,
                F@_19,
                F@_20,
                F@_21,
                TrUserData
            );
        120 ->
            'd_field_ns.ServiceProfile_pr_allowed'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                F@_18,
                F@_19,
                F@_20,
                F@_21,
                TrUserData
            );
        128 ->
            'd_field_ns.ServiceProfile_hr_allowed'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                F@_18,
                F@_19,
                F@_20,
                F@_21,
                TrUserData
            );
        136 ->
            'd_field_ns.ServiceProfile_ra_allowed'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                F@_18,
                F@_19,
                F@_20,
                F@_21,
                TrUserData
            );
        144 ->
            'd_field_ns.ServiceProfile_nwk_geo_loc'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                F@_18,
                F@_19,
                F@_20,
                F@_21,
                TrUserData
            );
        152 ->
            'd_field_ns.ServiceProfile_target_per'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                F@_18,
                F@_19,
                F@_20,
                F@_21,
                TrUserData
            );
        160 ->
            'd_field_ns.ServiceProfile_min_gw_diversity'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                F@_18,
                F@_19,
                F@_20,
                F@_21,
                TrUserData
            );
        168 ->
            'd_field_ns.ServiceProfile_gws_private'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                F@_18,
                F@_19,
                F@_20,
                F@_21,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.ServiceProfile'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        F@_11,
                        F@_12,
                        F@_13,
                        F@_14,
                        F@_15,
                        F@_16,
                        F@_17,
                        F@_18,
                        F@_19,
                        F@_20,
                        F@_21,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.ServiceProfile'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        F@_11,
                        F@_12,
                        F@_13,
                        F@_14,
                        F@_15,
                        F@_16,
                        F@_17,
                        F@_18,
                        F@_19,
                        F@_20,
                        F@_21,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.ServiceProfile'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        F@_11,
                        F@_12,
                        F@_13,
                        F@_14,
                        F@_15,
                        F@_16,
                        F@_17,
                        F@_18,
                        F@_19,
                        F@_20,
                        F@_21,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.ServiceProfile'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        F@_11,
                        F@_12,
                        F@_13,
                        F@_14,
                        F@_15,
                        F@_16,
                        F@_17,
                        F@_18,
                        F@_19,
                        F@_20,
                        F@_21,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.ServiceProfile'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        F@_11,
                        F@_12,
                        F@_13,
                        F@_14,
                        F@_15,
                        F@_16,
                        F@_17,
                        F@_18,
                        F@_19,
                        F@_20,
                        F@_21,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.ServiceProfile'(
    <<>>,
    0,
    0,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    _
) ->
    #'ns.ServiceProfile'{
        id = F@_1,
        ul_rate = F@_2,
        ul_bucket_size = F@_3,
        ul_rate_policy = F@_4,
        dl_rate = F@_5,
        dl_bucket_size = F@_6,
        dl_rate_policy = F@_7,
        add_gw_metadata = F@_8,
        dev_status_req_freq = F@_9,
        report_dev_status_battery = F@_10,
        report_dev_status_margin = F@_11,
        dr_min = F@_12,
        dr_max = F@_13,
        channel_mask = F@_14,
        pr_allowed = F@_15,
        hr_allowed = F@_16,
        ra_allowed = F@_17,
        nwk_geo_loc = F@_18,
        target_per = F@_19,
        min_gw_diversity = F@_20,
        gws_private = F@_21
    }.

'd_field_ns.ServiceProfile_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) when N < 57 ->
    'd_field_ns.ServiceProfile_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'd_field_ns.ServiceProfile_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.ServiceProfile'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'd_field_ns.ServiceProfile_ul_rate'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) when N < 57 ->
    'd_field_ns.ServiceProfile_ul_rate'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'd_field_ns.ServiceProfile_ul_rate'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_ns.ServiceProfile'(
        RestF,
        0,
        0,
        F,
        F@_1,
        NewFValue,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'd_field_ns.ServiceProfile_ul_bucket_size'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) when N < 57 ->
    'd_field_ns.ServiceProfile_ul_bucket_size'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'd_field_ns.ServiceProfile_ul_bucket_size'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    _,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_ns.ServiceProfile'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        NewFValue,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'd_field_ns.ServiceProfile_ul_rate_policy'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) when N < 57 ->
    'd_field_ns.ServiceProfile_ul_rate_policy'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'd_field_ns.ServiceProfile_ul_rate_policy'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    _,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    {NewFValue, RestF} =
        {id(
                'd_enum_ns.RatePolicy'(begin
                    <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>,
                    id(Res, TrUserData)
                end),
                TrUserData
            ),
            Rest},
    'dfp_read_field_def_ns.ServiceProfile'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        NewFValue,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'd_field_ns.ServiceProfile_dl_rate'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) when N < 57 ->
    'd_field_ns.ServiceProfile_dl_rate'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'd_field_ns.ServiceProfile_dl_rate'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_ns.ServiceProfile'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        NewFValue,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'd_field_ns.ServiceProfile_dl_bucket_size'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) when N < 57 ->
    'd_field_ns.ServiceProfile_dl_bucket_size'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'd_field_ns.ServiceProfile_dl_bucket_size'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    _,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_ns.ServiceProfile'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        NewFValue,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'd_field_ns.ServiceProfile_dl_rate_policy'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) when N < 57 ->
    'd_field_ns.ServiceProfile_dl_rate_policy'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'd_field_ns.ServiceProfile_dl_rate_policy'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    _,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    {NewFValue, RestF} =
        {id(
                'd_enum_ns.RatePolicy'(begin
                    <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>,
                    id(Res, TrUserData)
                end),
                TrUserData
            ),
            Rest},
    'dfp_read_field_def_ns.ServiceProfile'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        NewFValue,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'd_field_ns.ServiceProfile_add_gw_metadata'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) when N < 57 ->
    'd_field_ns.ServiceProfile_add_gw_metadata'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'd_field_ns.ServiceProfile_add_gw_metadata'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    _,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_ns.ServiceProfile'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        NewFValue,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'd_field_ns.ServiceProfile_dev_status_req_freq'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) when N < 57 ->
    'd_field_ns.ServiceProfile_dev_status_req_freq'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'd_field_ns.ServiceProfile_dev_status_req_freq'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    _,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_ns.ServiceProfile'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        NewFValue,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'd_field_ns.ServiceProfile_report_dev_status_battery'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) when N < 57 ->
    'd_field_ns.ServiceProfile_report_dev_status_battery'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'd_field_ns.ServiceProfile_report_dev_status_battery'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    _,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_ns.ServiceProfile'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        NewFValue,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'd_field_ns.ServiceProfile_report_dev_status_margin'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) when N < 57 ->
    'd_field_ns.ServiceProfile_report_dev_status_margin'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'd_field_ns.ServiceProfile_report_dev_status_margin'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    _,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_ns.ServiceProfile'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        NewFValue,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'd_field_ns.ServiceProfile_dr_min'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) when N < 57 ->
    'd_field_ns.ServiceProfile_dr_min'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'd_field_ns.ServiceProfile_dr_min'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    _,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_ns.ServiceProfile'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        NewFValue,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'd_field_ns.ServiceProfile_dr_max'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) when N < 57 ->
    'd_field_ns.ServiceProfile_dr_max'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'd_field_ns.ServiceProfile_dr_max'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    _,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_ns.ServiceProfile'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        NewFValue,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'd_field_ns.ServiceProfile_channel_mask'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) when N < 57 ->
    'd_field_ns.ServiceProfile_channel_mask'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'd_field_ns.ServiceProfile_channel_mask'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    _,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.ServiceProfile'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        NewFValue,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'd_field_ns.ServiceProfile_pr_allowed'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) when N < 57 ->
    'd_field_ns.ServiceProfile_pr_allowed'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'd_field_ns.ServiceProfile_pr_allowed'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    _,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_ns.ServiceProfile'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        NewFValue,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'd_field_ns.ServiceProfile_hr_allowed'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) when N < 57 ->
    'd_field_ns.ServiceProfile_hr_allowed'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'd_field_ns.ServiceProfile_hr_allowed'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    _,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_ns.ServiceProfile'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        NewFValue,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'd_field_ns.ServiceProfile_ra_allowed'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) when N < 57 ->
    'd_field_ns.ServiceProfile_ra_allowed'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'd_field_ns.ServiceProfile_ra_allowed'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    _,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_ns.ServiceProfile'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        NewFValue,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'd_field_ns.ServiceProfile_nwk_geo_loc'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) when N < 57 ->
    'd_field_ns.ServiceProfile_nwk_geo_loc'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'd_field_ns.ServiceProfile_nwk_geo_loc'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    _,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_ns.ServiceProfile'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        NewFValue,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'd_field_ns.ServiceProfile_target_per'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) when N < 57 ->
    'd_field_ns.ServiceProfile_target_per'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'd_field_ns.ServiceProfile_target_per'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    _,
    F@_20,
    F@_21,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_ns.ServiceProfile'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        NewFValue,
        F@_20,
        F@_21,
        TrUserData
    ).

'd_field_ns.ServiceProfile_min_gw_diversity'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) when N < 57 ->
    'd_field_ns.ServiceProfile_min_gw_diversity'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'd_field_ns.ServiceProfile_min_gw_diversity'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    _,
    F@_21,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_ns.ServiceProfile'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        NewFValue,
        F@_21,
        TrUserData
    ).

'd_field_ns.ServiceProfile_gws_private'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) when N < 57 ->
    'd_field_ns.ServiceProfile_gws_private'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'd_field_ns.ServiceProfile_gws_private'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_ns.ServiceProfile'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        NewFValue,
        TrUserData
    ).

'skip_varint_ns.ServiceProfile'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'skip_varint_ns.ServiceProfile'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'skip_varint_ns.ServiceProfile'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'dfp_read_field_def_ns.ServiceProfile'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'skip_length_delimited_ns.ServiceProfile'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.ServiceProfile'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'skip_length_delimited_ns.ServiceProfile'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.ServiceProfile'(
        Rest2,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'skip_group_ns.ServiceProfile'(
    Bin,
    _,
    Z2,
    FNum,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.ServiceProfile'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'skip_32_ns.ServiceProfile'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'dfp_read_field_def_ns.ServiceProfile'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'skip_64_ns.ServiceProfile'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'dfp_read_field_def_ns.ServiceProfile'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'decode_msg_ns.DeviceProfile'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.DeviceProfile'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id(false, TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        id(false, TrUserData),
        id(0, TrUserData),
        id([], TrUserData),
        id([], TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        id([], TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        id(false, TrUserData),
        id([], TrUserData),
        id(false, TrUserData),
        id([], TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.DeviceProfile'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'd_field_ns.DeviceProfile_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'dfp_read_field_def_ns.DeviceProfile'(
    <<16, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'd_field_ns.DeviceProfile_supports_class_b'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'dfp_read_field_def_ns.DeviceProfile'(
    <<24, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'd_field_ns.DeviceProfile_class_b_timeout'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'dfp_read_field_def_ns.DeviceProfile'(
    <<32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'd_field_ns.DeviceProfile_ping_slot_period'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'dfp_read_field_def_ns.DeviceProfile'(
    <<40, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'd_field_ns.DeviceProfile_ping_slot_dr'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'dfp_read_field_def_ns.DeviceProfile'(
    <<48, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'd_field_ns.DeviceProfile_ping_slot_freq'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'dfp_read_field_def_ns.DeviceProfile'(
    <<56, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'd_field_ns.DeviceProfile_supports_class_c'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'dfp_read_field_def_ns.DeviceProfile'(
    <<64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'd_field_ns.DeviceProfile_class_c_timeout'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'dfp_read_field_def_ns.DeviceProfile'(
    <<74, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'd_field_ns.DeviceProfile_mac_version'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'dfp_read_field_def_ns.DeviceProfile'(
    <<82, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'd_field_ns.DeviceProfile_reg_params_revision'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'dfp_read_field_def_ns.DeviceProfile'(
    <<88, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'd_field_ns.DeviceProfile_rx_delay_1'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'dfp_read_field_def_ns.DeviceProfile'(
    <<96, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'd_field_ns.DeviceProfile_rx_dr_offset_1'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'dfp_read_field_def_ns.DeviceProfile'(
    <<104, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'd_field_ns.DeviceProfile_rx_datarate_2'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'dfp_read_field_def_ns.DeviceProfile'(
    <<112, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'd_field_ns.DeviceProfile_rx_freq_2'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'dfp_read_field_def_ns.DeviceProfile'(
    <<122, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'd_pfield_ns.DeviceProfile_factory_preset_freqs'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'dfp_read_field_def_ns.DeviceProfile'(
    <<120, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'd_field_ns.DeviceProfile_factory_preset_freqs'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'dfp_read_field_def_ns.DeviceProfile'(
    <<128, 1, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'd_field_ns.DeviceProfile_max_eirp'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'dfp_read_field_def_ns.DeviceProfile'(
    <<136, 1, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'd_field_ns.DeviceProfile_max_duty_cycle'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'dfp_read_field_def_ns.DeviceProfile'(
    <<144, 1, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'd_field_ns.DeviceProfile_supports_join'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'dfp_read_field_def_ns.DeviceProfile'(
    <<154, 1, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'd_field_ns.DeviceProfile_rf_region'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'dfp_read_field_def_ns.DeviceProfile'(
    <<160, 1, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'd_field_ns.DeviceProfile_supports_32bit_f_cnt'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'dfp_read_field_def_ns.DeviceProfile'(
    <<170, 1, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'd_field_ns.DeviceProfile_adr_algorithm_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'dfp_read_field_def_ns.DeviceProfile'(
    <<>>,
    0,
    0,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    R1,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    #'ns.DeviceProfile'{
        id = F@_1,
        supports_class_b = F@_2,
        class_b_timeout = F@_3,
        ping_slot_period = F@_4,
        ping_slot_dr = F@_5,
        ping_slot_freq = F@_6,
        supports_class_c = F@_7,
        class_c_timeout = F@_8,
        mac_version = F@_9,
        reg_params_revision = F@_10,
        rx_delay_1 = F@_11,
        rx_dr_offset_1 = F@_12,
        rx_datarate_2 = F@_13,
        rx_freq_2 = F@_14,
        factory_preset_freqs = lists_reverse(R1, TrUserData),
        max_eirp = F@_16,
        max_duty_cycle = F@_17,
        supports_join = F@_18,
        rf_region = F@_19,
        supports_32bit_f_cnt = F@_20,
        adr_algorithm_id = F@_21
    };
'dfp_read_field_def_ns.DeviceProfile'(
    Other,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'dg_read_field_def_ns.DeviceProfile'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'dg_read_field_def_ns.DeviceProfile'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.DeviceProfile'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'dg_read_field_def_ns.DeviceProfile'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.DeviceProfile_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                F@_18,
                F@_19,
                F@_20,
                F@_21,
                TrUserData
            );
        16 ->
            'd_field_ns.DeviceProfile_supports_class_b'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                F@_18,
                F@_19,
                F@_20,
                F@_21,
                TrUserData
            );
        24 ->
            'd_field_ns.DeviceProfile_class_b_timeout'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                F@_18,
                F@_19,
                F@_20,
                F@_21,
                TrUserData
            );
        32 ->
            'd_field_ns.DeviceProfile_ping_slot_period'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                F@_18,
                F@_19,
                F@_20,
                F@_21,
                TrUserData
            );
        40 ->
            'd_field_ns.DeviceProfile_ping_slot_dr'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                F@_18,
                F@_19,
                F@_20,
                F@_21,
                TrUserData
            );
        48 ->
            'd_field_ns.DeviceProfile_ping_slot_freq'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                F@_18,
                F@_19,
                F@_20,
                F@_21,
                TrUserData
            );
        56 ->
            'd_field_ns.DeviceProfile_supports_class_c'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                F@_18,
                F@_19,
                F@_20,
                F@_21,
                TrUserData
            );
        64 ->
            'd_field_ns.DeviceProfile_class_c_timeout'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                F@_18,
                F@_19,
                F@_20,
                F@_21,
                TrUserData
            );
        74 ->
            'd_field_ns.DeviceProfile_mac_version'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                F@_18,
                F@_19,
                F@_20,
                F@_21,
                TrUserData
            );
        82 ->
            'd_field_ns.DeviceProfile_reg_params_revision'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                F@_18,
                F@_19,
                F@_20,
                F@_21,
                TrUserData
            );
        88 ->
            'd_field_ns.DeviceProfile_rx_delay_1'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                F@_18,
                F@_19,
                F@_20,
                F@_21,
                TrUserData
            );
        96 ->
            'd_field_ns.DeviceProfile_rx_dr_offset_1'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                F@_18,
                F@_19,
                F@_20,
                F@_21,
                TrUserData
            );
        104 ->
            'd_field_ns.DeviceProfile_rx_datarate_2'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                F@_18,
                F@_19,
                F@_20,
                F@_21,
                TrUserData
            );
        112 ->
            'd_field_ns.DeviceProfile_rx_freq_2'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                F@_18,
                F@_19,
                F@_20,
                F@_21,
                TrUserData
            );
        122 ->
            'd_pfield_ns.DeviceProfile_factory_preset_freqs'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                F@_18,
                F@_19,
                F@_20,
                F@_21,
                TrUserData
            );
        120 ->
            'd_field_ns.DeviceProfile_factory_preset_freqs'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                F@_18,
                F@_19,
                F@_20,
                F@_21,
                TrUserData
            );
        128 ->
            'd_field_ns.DeviceProfile_max_eirp'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                F@_18,
                F@_19,
                F@_20,
                F@_21,
                TrUserData
            );
        136 ->
            'd_field_ns.DeviceProfile_max_duty_cycle'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                F@_18,
                F@_19,
                F@_20,
                F@_21,
                TrUserData
            );
        144 ->
            'd_field_ns.DeviceProfile_supports_join'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                F@_18,
                F@_19,
                F@_20,
                F@_21,
                TrUserData
            );
        154 ->
            'd_field_ns.DeviceProfile_rf_region'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                F@_18,
                F@_19,
                F@_20,
                F@_21,
                TrUserData
            );
        160 ->
            'd_field_ns.DeviceProfile_supports_32bit_f_cnt'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                F@_18,
                F@_19,
                F@_20,
                F@_21,
                TrUserData
            );
        170 ->
            'd_field_ns.DeviceProfile_adr_algorithm_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                F@_18,
                F@_19,
                F@_20,
                F@_21,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.DeviceProfile'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        F@_11,
                        F@_12,
                        F@_13,
                        F@_14,
                        F@_15,
                        F@_16,
                        F@_17,
                        F@_18,
                        F@_19,
                        F@_20,
                        F@_21,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.DeviceProfile'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        F@_11,
                        F@_12,
                        F@_13,
                        F@_14,
                        F@_15,
                        F@_16,
                        F@_17,
                        F@_18,
                        F@_19,
                        F@_20,
                        F@_21,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.DeviceProfile'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        F@_11,
                        F@_12,
                        F@_13,
                        F@_14,
                        F@_15,
                        F@_16,
                        F@_17,
                        F@_18,
                        F@_19,
                        F@_20,
                        F@_21,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.DeviceProfile'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        F@_11,
                        F@_12,
                        F@_13,
                        F@_14,
                        F@_15,
                        F@_16,
                        F@_17,
                        F@_18,
                        F@_19,
                        F@_20,
                        F@_21,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.DeviceProfile'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        F@_11,
                        F@_12,
                        F@_13,
                        F@_14,
                        F@_15,
                        F@_16,
                        F@_17,
                        F@_18,
                        F@_19,
                        F@_20,
                        F@_21,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.DeviceProfile'(
    <<>>,
    0,
    0,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    R1,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    #'ns.DeviceProfile'{
        id = F@_1,
        supports_class_b = F@_2,
        class_b_timeout = F@_3,
        ping_slot_period = F@_4,
        ping_slot_dr = F@_5,
        ping_slot_freq = F@_6,
        supports_class_c = F@_7,
        class_c_timeout = F@_8,
        mac_version = F@_9,
        reg_params_revision = F@_10,
        rx_delay_1 = F@_11,
        rx_dr_offset_1 = F@_12,
        rx_datarate_2 = F@_13,
        rx_freq_2 = F@_14,
        factory_preset_freqs = lists_reverse(R1, TrUserData),
        max_eirp = F@_16,
        max_duty_cycle = F@_17,
        supports_join = F@_18,
        rf_region = F@_19,
        supports_32bit_f_cnt = F@_20,
        adr_algorithm_id = F@_21
    }.

'd_field_ns.DeviceProfile_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) when N < 57 ->
    'd_field_ns.DeviceProfile_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'd_field_ns.DeviceProfile_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.DeviceProfile'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'd_field_ns.DeviceProfile_supports_class_b'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) when N < 57 ->
    'd_field_ns.DeviceProfile_supports_class_b'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'd_field_ns.DeviceProfile_supports_class_b'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_ns.DeviceProfile'(
        RestF,
        0,
        0,
        F,
        F@_1,
        NewFValue,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'd_field_ns.DeviceProfile_class_b_timeout'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) when N < 57 ->
    'd_field_ns.DeviceProfile_class_b_timeout'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'd_field_ns.DeviceProfile_class_b_timeout'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    _,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_ns.DeviceProfile'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        NewFValue,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'd_field_ns.DeviceProfile_ping_slot_period'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) when N < 57 ->
    'd_field_ns.DeviceProfile_ping_slot_period'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'd_field_ns.DeviceProfile_ping_slot_period'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    _,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_ns.DeviceProfile'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        NewFValue,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'd_field_ns.DeviceProfile_ping_slot_dr'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) when N < 57 ->
    'd_field_ns.DeviceProfile_ping_slot_dr'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'd_field_ns.DeviceProfile_ping_slot_dr'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_ns.DeviceProfile'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        NewFValue,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'd_field_ns.DeviceProfile_ping_slot_freq'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) when N < 57 ->
    'd_field_ns.DeviceProfile_ping_slot_freq'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'd_field_ns.DeviceProfile_ping_slot_freq'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    _,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_ns.DeviceProfile'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        NewFValue,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'd_field_ns.DeviceProfile_supports_class_c'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) when N < 57 ->
    'd_field_ns.DeviceProfile_supports_class_c'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'd_field_ns.DeviceProfile_supports_class_c'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    _,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_ns.DeviceProfile'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        NewFValue,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'd_field_ns.DeviceProfile_class_c_timeout'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) when N < 57 ->
    'd_field_ns.DeviceProfile_class_c_timeout'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'd_field_ns.DeviceProfile_class_c_timeout'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    _,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_ns.DeviceProfile'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        NewFValue,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'd_field_ns.DeviceProfile_mac_version'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) when N < 57 ->
    'd_field_ns.DeviceProfile_mac_version'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'd_field_ns.DeviceProfile_mac_version'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    _,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Utf8:Len/binary, Rest2/binary>> = Rest,
        {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.DeviceProfile'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        NewFValue,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'd_field_ns.DeviceProfile_reg_params_revision'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) when N < 57 ->
    'd_field_ns.DeviceProfile_reg_params_revision'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'd_field_ns.DeviceProfile_reg_params_revision'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    _,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Utf8:Len/binary, Rest2/binary>> = Rest,
        {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.DeviceProfile'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        NewFValue,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'd_field_ns.DeviceProfile_rx_delay_1'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) when N < 57 ->
    'd_field_ns.DeviceProfile_rx_delay_1'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'd_field_ns.DeviceProfile_rx_delay_1'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    _,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_ns.DeviceProfile'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        NewFValue,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'd_field_ns.DeviceProfile_rx_dr_offset_1'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) when N < 57 ->
    'd_field_ns.DeviceProfile_rx_dr_offset_1'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'd_field_ns.DeviceProfile_rx_dr_offset_1'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    _,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_ns.DeviceProfile'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        NewFValue,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'd_field_ns.DeviceProfile_rx_datarate_2'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) when N < 57 ->
    'd_field_ns.DeviceProfile_rx_datarate_2'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'd_field_ns.DeviceProfile_rx_datarate_2'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    _,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_ns.DeviceProfile'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        NewFValue,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'd_field_ns.DeviceProfile_rx_freq_2'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) when N < 57 ->
    'd_field_ns.DeviceProfile_rx_freq_2'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'd_field_ns.DeviceProfile_rx_freq_2'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    _,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_ns.DeviceProfile'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        NewFValue,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'd_field_ns.DeviceProfile_factory_preset_freqs'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) when N < 57 ->
    'd_field_ns.DeviceProfile_factory_preset_freqs'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'd_field_ns.DeviceProfile_factory_preset_freqs'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    Prev,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_ns.DeviceProfile'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        cons(NewFValue, Prev, TrUserData),
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'd_pfield_ns.DeviceProfile_factory_preset_freqs'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) when N < 57 ->
    'd_pfield_ns.DeviceProfile_factory_preset_freqs'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'd_pfield_ns.DeviceProfile_factory_preset_freqs'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    E,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = 'd_packed_field_ns.DeviceProfile_factory_preset_freqs'(
        PackedBytes,
        0,
        0,
        F,
        E,
        TrUserData
    ),
    'dfp_read_field_def_ns.DeviceProfile'(
        Rest2,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        NewSeq,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'd_packed_field_ns.DeviceProfile_factory_preset_freqs'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    AccSeq,
    TrUserData
) when N < 57 ->
    'd_packed_field_ns.DeviceProfile_factory_preset_freqs'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        AccSeq,
        TrUserData
    );
'd_packed_field_ns.DeviceProfile_factory_preset_freqs'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    AccSeq,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'd_packed_field_ns.DeviceProfile_factory_preset_freqs'(
        RestF,
        0,
        0,
        F,
        [NewFValue | AccSeq],
        TrUserData
    );
'd_packed_field_ns.DeviceProfile_factory_preset_freqs'(<<>>, 0, 0, _, AccSeq, _) ->
    AccSeq.

'd_field_ns.DeviceProfile_max_eirp'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) when N < 57 ->
    'd_field_ns.DeviceProfile_max_eirp'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'd_field_ns.DeviceProfile_max_eirp'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    _,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_ns.DeviceProfile'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        NewFValue,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'd_field_ns.DeviceProfile_max_duty_cycle'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) when N < 57 ->
    'd_field_ns.DeviceProfile_max_duty_cycle'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'd_field_ns.DeviceProfile_max_duty_cycle'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    _,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_ns.DeviceProfile'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        NewFValue,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'd_field_ns.DeviceProfile_supports_join'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) when N < 57 ->
    'd_field_ns.DeviceProfile_supports_join'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'd_field_ns.DeviceProfile_supports_join'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    _,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_ns.DeviceProfile'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        NewFValue,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'd_field_ns.DeviceProfile_rf_region'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) when N < 57 ->
    'd_field_ns.DeviceProfile_rf_region'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'd_field_ns.DeviceProfile_rf_region'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    _,
    F@_20,
    F@_21,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Utf8:Len/binary, Rest2/binary>> = Rest,
        {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.DeviceProfile'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        NewFValue,
        F@_20,
        F@_21,
        TrUserData
    ).

'd_field_ns.DeviceProfile_supports_32bit_f_cnt'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) when N < 57 ->
    'd_field_ns.DeviceProfile_supports_32bit_f_cnt'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'd_field_ns.DeviceProfile_supports_32bit_f_cnt'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    _,
    F@_21,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_ns.DeviceProfile'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        NewFValue,
        F@_21,
        TrUserData
    ).

'd_field_ns.DeviceProfile_adr_algorithm_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) when N < 57 ->
    'd_field_ns.DeviceProfile_adr_algorithm_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'd_field_ns.DeviceProfile_adr_algorithm_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Utf8:Len/binary, Rest2/binary>> = Rest,
        {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.DeviceProfile'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        NewFValue,
        TrUserData
    ).

'skip_varint_ns.DeviceProfile'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'skip_varint_ns.DeviceProfile'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'skip_varint_ns.DeviceProfile'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'dfp_read_field_def_ns.DeviceProfile'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'skip_length_delimited_ns.DeviceProfile'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.DeviceProfile'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    );
'skip_length_delimited_ns.DeviceProfile'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.DeviceProfile'(
        Rest2,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'skip_group_ns.DeviceProfile'(
    Bin,
    _,
    Z2,
    FNum,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.DeviceProfile'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'skip_32_ns.DeviceProfile'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'dfp_read_field_def_ns.DeviceProfile'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'skip_64_ns.DeviceProfile'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    F@_18,
    F@_19,
    F@_20,
    F@_21,
    TrUserData
) ->
    'dfp_read_field_def_ns.DeviceProfile'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        F@_18,
        F@_19,
        F@_20,
        F@_21,
        TrUserData
    ).

'decode_msg_ns.RoutingProfile'(Bin, TrUserData) ->
    'dfp_read_field_def_ns.RoutingProfile'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id([], TrUserData),
        id([], TrUserData),
        id([], TrUserData),
        id([], TrUserData),
        TrUserData
    ).

'dfp_read_field_def_ns.RoutingProfile'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_ns.RoutingProfile_id'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_ns.RoutingProfile'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_ns.RoutingProfile_as_id'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_ns.RoutingProfile'(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_ns.RoutingProfile_ca_cert'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_ns.RoutingProfile'(
    <<34, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_ns.RoutingProfile_tls_cert'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_ns.RoutingProfile'(
    <<42, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_ns.RoutingProfile_tls_key'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_ns.RoutingProfile'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    #'ns.RoutingProfile'{id = F@_1, as_id = F@_2, ca_cert = F@_3, tls_cert = F@_4, tls_key = F@_5};
'dfp_read_field_def_ns.RoutingProfile'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    'dg_read_field_def_ns.RoutingProfile'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'dg_read_field_def_ns.RoutingProfile'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_ns.RoutingProfile'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dg_read_field_def_ns.RoutingProfile'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_ns.RoutingProfile_id'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        18 ->
            'd_field_ns.RoutingProfile_as_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        26 ->
            'd_field_ns.RoutingProfile_ca_cert'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        34 ->
            'd_field_ns.RoutingProfile_tls_cert'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        42 ->
            'd_field_ns.RoutingProfile_tls_key'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_ns.RoutingProfile'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                1 ->
                    'skip_64_ns.RoutingProfile'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_ns.RoutingProfile'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                3 ->
                    'skip_group_ns.RoutingProfile'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                5 ->
                    'skip_32_ns.RoutingProfile'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_ns.RoutingProfile'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    #'ns.RoutingProfile'{id = F@_1, as_id = F@_2, ca_cert = F@_3, tls_cert = F@_4, tls_key = F@_5}.

'd_field_ns.RoutingProfile_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_ns.RoutingProfile_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_ns.RoutingProfile_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.RoutingProfile'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'd_field_ns.RoutingProfile_as_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_ns.RoutingProfile_as_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_ns.RoutingProfile_as_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Utf8:Len/binary, Rest2/binary>> = Rest,
        {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.RoutingProfile'(
        RestF,
        0,
        0,
        F,
        F@_1,
        NewFValue,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'd_field_ns.RoutingProfile_ca_cert'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_ns.RoutingProfile_ca_cert'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_ns.RoutingProfile_ca_cert'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    _,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Utf8:Len/binary, Rest2/binary>> = Rest,
        {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.RoutingProfile'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        NewFValue,
        F@_4,
        F@_5,
        TrUserData
    ).

'd_field_ns.RoutingProfile_tls_cert'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_ns.RoutingProfile_tls_cert'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_ns.RoutingProfile_tls_cert'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    _,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Utf8:Len/binary, Rest2/binary>> = Rest,
        {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.RoutingProfile'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        NewFValue,
        F@_5,
        TrUserData
    ).

'd_field_ns.RoutingProfile_tls_key'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_ns.RoutingProfile_tls_key'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_ns.RoutingProfile_tls_key'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Utf8:Len/binary, Rest2/binary>> = Rest,
        {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2}
    end,
    'dfp_read_field_def_ns.RoutingProfile'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        NewFValue,
        TrUserData
    ).

'skip_varint_ns.RoutingProfile'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'skip_varint_ns.RoutingProfile'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'skip_varint_ns.RoutingProfile'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_ns.RoutingProfile'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'skip_length_delimited_ns.RoutingProfile'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_ns.RoutingProfile'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'skip_length_delimited_ns.RoutingProfile'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ns.RoutingProfile'(
        Rest2,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'skip_group_ns.RoutingProfile'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ns.RoutingProfile'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'skip_32_ns.RoutingProfile'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_ns.RoutingProfile'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'skip_64_ns.RoutingProfile'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_ns.RoutingProfile'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'decode_msg_map<string,string>'(Bin, TrUserData) ->
    'dfp_read_field_def_map<string,string>'(
        Bin,
        0,
        0,
        0,
        id([], TrUserData),
        id([], TrUserData),
        TrUserData
    ).

'dfp_read_field_def_map<string,string>'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'd_field_map<string,string>_key'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_map<string,string>'(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'd_field_map<string,string>_value'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_map<string,string>'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'map<string,string>'{key = F@_1, value = F@_2};
'dfp_read_field_def_map<string,string>'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_map<string,string>'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_map<string,string>'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_map<string,string>'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'dg_read_field_def_map<string,string>'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_map<string,string>_key'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 ->
            'd_field_map<string,string>_value'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_map<string,string>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 ->
                    'skip_64_map<string,string>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 ->
                    'skip_length_delimited_map<string,string>'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                3 ->
                    'skip_group_map<string,string>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 ->
                    'skip_32_map<string,string>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_map<string,string>'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'map<string,string>'{key = F@_1, value = F@_2}.

'd_field_map<string,string>_key'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when
    N < 57
->
    'd_field_map<string,string>_key'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_map<string,string>_key'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Utf8:Len/binary, Rest2/binary>> = Rest,
        {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2}
    end,
    'dfp_read_field_def_map<string,string>'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_map<string,string>_value'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_map<string,string>_value'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_map<string,string>_value'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Utf8:Len/binary, Rest2/binary>> = Rest,
        {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2}
    end,
    'dfp_read_field_def_map<string,string>'(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

'skip_varint_map<string,string>'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'skip_varint_map<string,string>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_map<string,string>'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,string>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_map<string,string>'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_map<string,string>'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'skip_length_delimited_map<string,string>'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<string,string>'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_map<string,string>'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<string,string>'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_map<string,string>'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,string>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_map<string,string>'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,string>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'd_enum_ns.AggregationInterval'(0) -> 'SECOND';
'd_enum_ns.AggregationInterval'(1) -> 'MINUTE';
'd_enum_ns.AggregationInterval'(2) -> 'HOUR';
'd_enum_ns.AggregationInterval'(3) -> 'DAY';
'd_enum_ns.AggregationInterval'(4) -> 'WEEK';
'd_enum_ns.AggregationInterval'(5) -> 'MONTH';
'd_enum_ns.AggregationInterval'(6) -> 'QUARTER';
'd_enum_ns.AggregationInterval'(7) -> 'YEAR';
'd_enum_ns.AggregationInterval'(V) -> V.

'd_enum_ns.MulticastGroupType'(0) -> 'CLASS_C';
'd_enum_ns.MulticastGroupType'(1) -> 'CLASS_B';
'd_enum_ns.MulticastGroupType'(V) -> V.

'd_enum_common.Modulation'(0) -> 'LORA';
'd_enum_common.Modulation'(1) -> 'FSK';
'd_enum_common.Modulation'(V) -> V.

'd_enum_common.Region'(0) -> 'EU868';
'd_enum_common.Region'(2) -> 'US915';
'd_enum_common.Region'(3) -> 'CN779';
'd_enum_common.Region'(4) -> 'EU433';
'd_enum_common.Region'(5) -> 'AU915';
'd_enum_common.Region'(6) -> 'CN470';
'd_enum_common.Region'(7) -> 'AS923';
'd_enum_common.Region'(8) -> 'KR920';
'd_enum_common.Region'(9) -> 'IN865';
'd_enum_common.Region'(10) -> 'RU864';
'd_enum_common.Region'(V) -> V.

'd_enum_common.MType'(0) -> 'JoinRequest';
'd_enum_common.MType'(1) -> 'JoinAccept';
'd_enum_common.MType'(2) -> 'UnconfirmedDataUp';
'd_enum_common.MType'(3) -> 'UnconfirmedDataDown';
'd_enum_common.MType'(4) -> 'ConfirmedDataUp';
'd_enum_common.MType'(5) -> 'ConfirmedDataDown';
'd_enum_common.MType'(6) -> 'RejoinRequest';
'd_enum_common.MType'(7) -> 'Proprietary';
'd_enum_common.MType'(V) -> V.

'd_enum_common.LocationSource'(0) -> 'UNKNOWN';
'd_enum_common.LocationSource'(1) -> 'GPS';
'd_enum_common.LocationSource'(2) -> 'CONFIG';
'd_enum_common.LocationSource'(3) -> 'GEO_RESOLVER_TDOA';
'd_enum_common.LocationSource'(4) -> 'GEO_RESOLVER_RSSI';
'd_enum_common.LocationSource'(5) -> 'GEO_RESOLVER_GNSS';
'd_enum_common.LocationSource'(6) -> 'GEO_RESOLVER_WIFI';
'd_enum_common.LocationSource'(V) -> V.

'd_enum_gw.DownlinkTiming'(0) -> 'IMMEDIATELY';
'd_enum_gw.DownlinkTiming'(1) -> 'DELAY';
'd_enum_gw.DownlinkTiming'(2) -> 'GPS_EPOCH';
'd_enum_gw.DownlinkTiming'(V) -> V.

'd_enum_gw.FineTimestampType'(0) -> 'NONE';
'd_enum_gw.FineTimestampType'(1) -> 'ENCRYPTED';
'd_enum_gw.FineTimestampType'(2) -> 'PLAIN';
'd_enum_gw.FineTimestampType'(V) -> V.

'd_enum_gw.CRCStatus'(0) -> 'NO_CRC';
'd_enum_gw.CRCStatus'(1) -> 'BAD_CRC';
'd_enum_gw.CRCStatus'(2) -> 'CRC_OK';
'd_enum_gw.CRCStatus'(V) -> V.

'd_enum_gw.TxAckStatus'(0) -> 'IGNORED';
'd_enum_gw.TxAckStatus'(1) -> 'OK';
'd_enum_gw.TxAckStatus'(2) -> 'TOO_LATE';
'd_enum_gw.TxAckStatus'(3) -> 'TOO_EARLY';
'd_enum_gw.TxAckStatus'(4) -> 'COLLISION_PACKET';
'd_enum_gw.TxAckStatus'(5) -> 'COLLISION_BEACON';
'd_enum_gw.TxAckStatus'(6) -> 'TX_FREQ';
'd_enum_gw.TxAckStatus'(7) -> 'TX_POWER';
'd_enum_gw.TxAckStatus'(8) -> 'GPS_UNLOCKED';
'd_enum_gw.TxAckStatus'(9) -> 'QUEUE_FULL';
'd_enum_gw.TxAckStatus'(10) -> 'INTERNAL_ERROR';
'd_enum_gw.TxAckStatus'(V) -> V.

'd_enum_gw.ConnState.State'(0) -> 'OFFLINE';
'd_enum_gw.ConnState.State'(1) -> 'ONLINE';
'd_enum_gw.ConnState.State'(V) -> V.

'd_enum_ns.RatePolicy'(0) -> 'DROP';
'd_enum_ns.RatePolicy'(1) -> 'MARK';
'd_enum_ns.RatePolicy'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum) when N < (32 - 7) ->
    read_gr_b(Tl, N + 7, X bsl N + Acc, NumBytes, TagLen + 1, FieldNum);
read_gr_b(
    <<0:1, X:7, Tl/binary>>,
    N,
    Acc,
    NumBytes,
    TagLen,
    FieldNum
) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        % 4 = group_end
        {FieldNum, 4} ->
            {NumBytes, TagLen1};
        % 0 = varint
        {_, 0} ->
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        % 1 = bits64
        {_, 1} ->
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        % 2 = length_delimited
        {_, 2} ->
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        % 3 = group_start
        {_, 3} ->
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        % 4 = group_end
        {_, 4} ->
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        % 5 = bits32
        {_, 5} ->
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum) when N < (64 - 7) ->
    read_gr_vi(Tl, N + 7, NumBytes + 1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes + 1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) when N < (64 - 7) ->
    read_gr_ld(Tl, N + 7, X bsl N + Acc, NumBytes + 1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts) when element(1, Prev) =:= element(1, New), is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'ns.CreateServiceProfileRequest' ->
            'merge_msg_ns.CreateServiceProfileRequest'(Prev, New, TrUserData);
        'ns.CreateServiceProfileResponse' ->
            'merge_msg_ns.CreateServiceProfileResponse'(Prev, New, TrUserData);
        'ns.GetServiceProfileRequest' ->
            'merge_msg_ns.GetServiceProfileRequest'(Prev, New, TrUserData);
        'ns.GetServiceProfileResponse' ->
            'merge_msg_ns.GetServiceProfileResponse'(Prev, New, TrUserData);
        'ns.UpdateServiceProfileRequest' ->
            'merge_msg_ns.UpdateServiceProfileRequest'(Prev, New, TrUserData);
        'ns.DeleteServiceProfileRequest' ->
            'merge_msg_ns.DeleteServiceProfileRequest'(Prev, New, TrUserData);
        'ns.CreateRoutingProfileRequest' ->
            'merge_msg_ns.CreateRoutingProfileRequest'(Prev, New, TrUserData);
        'ns.CreateRoutingProfileResponse' ->
            'merge_msg_ns.CreateRoutingProfileResponse'(Prev, New, TrUserData);
        'ns.GetRoutingProfileRequest' ->
            'merge_msg_ns.GetRoutingProfileRequest'(Prev, New, TrUserData);
        'ns.GetRoutingProfileResponse' ->
            'merge_msg_ns.GetRoutingProfileResponse'(Prev, New, TrUserData);
        'ns.UpdateRoutingProfileRequest' ->
            'merge_msg_ns.UpdateRoutingProfileRequest'(Prev, New, TrUserData);
        'ns.DeleteRoutingProfileRequest' ->
            'merge_msg_ns.DeleteRoutingProfileRequest'(Prev, New, TrUserData);
        'ns.CreateDeviceProfileRequest' ->
            'merge_msg_ns.CreateDeviceProfileRequest'(Prev, New, TrUserData);
        'ns.CreateDeviceProfileResponse' ->
            'merge_msg_ns.CreateDeviceProfileResponse'(Prev, New, TrUserData);
        'ns.GetDeviceProfileRequest' ->
            'merge_msg_ns.GetDeviceProfileRequest'(Prev, New, TrUserData);
        'ns.GetDeviceProfileResponse' ->
            'merge_msg_ns.GetDeviceProfileResponse'(Prev, New, TrUserData);
        'ns.UpdateDeviceProfileRequest' ->
            'merge_msg_ns.UpdateDeviceProfileRequest'(Prev, New, TrUserData);
        'ns.DeleteDeviceProfileRequest' ->
            'merge_msg_ns.DeleteDeviceProfileRequest'(Prev, New, TrUserData);
        'ns.Device' ->
            'merge_msg_ns.Device'(Prev, New, TrUserData);
        'ns.CreateDeviceRequest' ->
            'merge_msg_ns.CreateDeviceRequest'(Prev, New, TrUserData);
        'ns.GetDeviceRequest' ->
            'merge_msg_ns.GetDeviceRequest'(Prev, New, TrUserData);
        'ns.GetDeviceResponse' ->
            'merge_msg_ns.GetDeviceResponse'(Prev, New, TrUserData);
        'ns.UpdateDeviceRequest' ->
            'merge_msg_ns.UpdateDeviceRequest'(Prev, New, TrUserData);
        'ns.DeleteDeviceRequest' ->
            'merge_msg_ns.DeleteDeviceRequest'(Prev, New, TrUserData);
        'ns.DeviceActivation' ->
            'merge_msg_ns.DeviceActivation'(Prev, New, TrUserData);
        'ns.ActivateDeviceRequest' ->
            'merge_msg_ns.ActivateDeviceRequest'(Prev, New, TrUserData);
        'ns.DeactivateDeviceRequest' ->
            'merge_msg_ns.DeactivateDeviceRequest'(Prev, New, TrUserData);
        'ns.GetDeviceActivationRequest' ->
            'merge_msg_ns.GetDeviceActivationRequest'(Prev, New, TrUserData);
        'ns.GetDeviceActivationResponse' ->
            'merge_msg_ns.GetDeviceActivationResponse'(Prev, New, TrUserData);
        'ns.GetRandomDevAddrResponse' ->
            'merge_msg_ns.GetRandomDevAddrResponse'(Prev, New, TrUserData);
        'ns.CreateMACCommandQueueItemRequest' ->
            'merge_msg_ns.CreateMACCommandQueueItemRequest'(Prev, New, TrUserData);
        'ns.SendProprietaryPayloadRequest' ->
            'merge_msg_ns.SendProprietaryPayloadRequest'(Prev, New, TrUserData);
        'ns.Gateway' ->
            'merge_msg_ns.Gateway'(Prev, New, TrUserData);
        'ns.GatewayBoard' ->
            'merge_msg_ns.GatewayBoard'(Prev, New, TrUserData);
        'ns.CreateGatewayRequest' ->
            'merge_msg_ns.CreateGatewayRequest'(Prev, New, TrUserData);
        'ns.GetGatewayRequest' ->
            'merge_msg_ns.GetGatewayRequest'(Prev, New, TrUserData);
        'ns.GetGatewayResponse' ->
            'merge_msg_ns.GetGatewayResponse'(Prev, New, TrUserData);
        'ns.UpdateGatewayRequest' ->
            'merge_msg_ns.UpdateGatewayRequest'(Prev, New, TrUserData);
        'ns.DeleteGatewayRequest' ->
            'merge_msg_ns.DeleteGatewayRequest'(Prev, New, TrUserData);
        'ns.GenerateGatewayClientCertificateRequest' ->
            'merge_msg_ns.GenerateGatewayClientCertificateRequest'(Prev, New, TrUserData);
        'ns.GenerateGatewayClientCertificateResponse' ->
            'merge_msg_ns.GenerateGatewayClientCertificateResponse'(Prev, New, TrUserData);
        'ns.GatewayStats' ->
            'merge_msg_ns.GatewayStats'(Prev, New, TrUserData);
        'ns.GetGatewayStatsRequest' ->
            'merge_msg_ns.GetGatewayStatsRequest'(Prev, New, TrUserData);
        'ns.GetGatewayStatsResponse' ->
            'merge_msg_ns.GetGatewayStatsResponse'(Prev, New, TrUserData);
        'ns.DeviceQueueItem' ->
            'merge_msg_ns.DeviceQueueItem'(Prev, New, TrUserData);
        'ns.CreateDeviceQueueItemRequest' ->
            'merge_msg_ns.CreateDeviceQueueItemRequest'(Prev, New, TrUserData);
        'ns.FlushDeviceQueueForDevEUIRequest' ->
            'merge_msg_ns.FlushDeviceQueueForDevEUIRequest'(Prev, New, TrUserData);
        'ns.GetDeviceQueueItemsForDevEUIRequest' ->
            'merge_msg_ns.GetDeviceQueueItemsForDevEUIRequest'(Prev, New, TrUserData);
        'ns.GetDeviceQueueItemsForDevEUIResponse' ->
            'merge_msg_ns.GetDeviceQueueItemsForDevEUIResponse'(Prev, New, TrUserData);
        'ns.GetNextDownlinkFCntForDevEUIRequest' ->
            'merge_msg_ns.GetNextDownlinkFCntForDevEUIRequest'(Prev, New, TrUserData);
        'ns.GetNextDownlinkFCntForDevEUIResponse' ->
            'merge_msg_ns.GetNextDownlinkFCntForDevEUIResponse'(Prev, New, TrUserData);
        'ns.UplinkFrameLog' ->
            'merge_msg_ns.UplinkFrameLog'(Prev, New, TrUserData);
        'ns.DownlinkFrameLog' ->
            'merge_msg_ns.DownlinkFrameLog'(Prev, New, TrUserData);
        'ns.StreamFrameLogsForGatewayRequest' ->
            'merge_msg_ns.StreamFrameLogsForGatewayRequest'(Prev, New, TrUserData);
        'ns.StreamFrameLogsForGatewayResponse' ->
            'merge_msg_ns.StreamFrameLogsForGatewayResponse'(Prev, New, TrUserData);
        'ns.StreamFrameLogsForDeviceRequest' ->
            'merge_msg_ns.StreamFrameLogsForDeviceRequest'(Prev, New, TrUserData);
        'ns.StreamFrameLogsForDeviceResponse' ->
            'merge_msg_ns.StreamFrameLogsForDeviceResponse'(Prev, New, TrUserData);
        'ns.GetVersionResponse' ->
            'merge_msg_ns.GetVersionResponse'(Prev, New, TrUserData);
        'ns.GatewayProfile' ->
            'merge_msg_ns.GatewayProfile'(Prev, New, TrUserData);
        'ns.GatewayProfileExtraChannel' ->
            'merge_msg_ns.GatewayProfileExtraChannel'(Prev, New, TrUserData);
        'ns.CreateGatewayProfileRequest' ->
            'merge_msg_ns.CreateGatewayProfileRequest'(Prev, New, TrUserData);
        'ns.CreateGatewayProfileResponse' ->
            'merge_msg_ns.CreateGatewayProfileResponse'(Prev, New, TrUserData);
        'ns.GetGatewayProfileRequest' ->
            'merge_msg_ns.GetGatewayProfileRequest'(Prev, New, TrUserData);
        'ns.GetGatewayProfileResponse' ->
            'merge_msg_ns.GetGatewayProfileResponse'(Prev, New, TrUserData);
        'ns.UpdateGatewayProfileRequest' ->
            'merge_msg_ns.UpdateGatewayProfileRequest'(Prev, New, TrUserData);
        'ns.DeleteGatewayProfileRequest' ->
            'merge_msg_ns.DeleteGatewayProfileRequest'(Prev, New, TrUserData);
        'ns.MulticastGroup' ->
            'merge_msg_ns.MulticastGroup'(Prev, New, TrUserData);
        'ns.CreateMulticastGroupRequest' ->
            'merge_msg_ns.CreateMulticastGroupRequest'(Prev, New, TrUserData);
        'ns.CreateMulticastGroupResponse' ->
            'merge_msg_ns.CreateMulticastGroupResponse'(Prev, New, TrUserData);
        'ns.GetMulticastGroupRequest' ->
            'merge_msg_ns.GetMulticastGroupRequest'(Prev, New, TrUserData);
        'ns.GetMulticastGroupResponse' ->
            'merge_msg_ns.GetMulticastGroupResponse'(Prev, New, TrUserData);
        'ns.UpdateMulticastGroupRequest' ->
            'merge_msg_ns.UpdateMulticastGroupRequest'(Prev, New, TrUserData);
        'ns.DeleteMulticastGroupRequest' ->
            'merge_msg_ns.DeleteMulticastGroupRequest'(Prev, New, TrUserData);
        'ns.AddDeviceToMulticastGroupRequest' ->
            'merge_msg_ns.AddDeviceToMulticastGroupRequest'(Prev, New, TrUserData);
        'ns.RemoveDeviceFromMulticastGroupRequest' ->
            'merge_msg_ns.RemoveDeviceFromMulticastGroupRequest'(Prev, New, TrUserData);
        'ns.MulticastQueueItem' ->
            'merge_msg_ns.MulticastQueueItem'(Prev, New, TrUserData);
        'ns.EnqueueMulticastQueueItemRequest' ->
            'merge_msg_ns.EnqueueMulticastQueueItemRequest'(Prev, New, TrUserData);
        'ns.FlushMulticastQueueForMulticastGroupRequest' ->
            'merge_msg_ns.FlushMulticastQueueForMulticastGroupRequest'(Prev, New, TrUserData);
        'ns.GetMulticastQueueItemsForMulticastGroupRequest' ->
            'merge_msg_ns.GetMulticastQueueItemsForMulticastGroupRequest'(Prev, New, TrUserData);
        'ns.GetMulticastQueueItemsForMulticastGroupResponse' ->
            'merge_msg_ns.GetMulticastQueueItemsForMulticastGroupResponse'(Prev, New, TrUserData);
        'ns.GetADRAlgorithmsResponse' ->
            'merge_msg_ns.GetADRAlgorithmsResponse'(Prev, New, TrUserData);
        'ns.ADRAlgorithm' ->
            'merge_msg_ns.ADRAlgorithm'(Prev, New, TrUserData);
        'google.protobuf.Timestamp' ->
            'merge_msg_google.protobuf.Timestamp'(Prev, New, TrUserData);
        'google.protobuf.Duration' ->
            'merge_msg_google.protobuf.Duration'(Prev, New, TrUserData);
        'google.protobuf.Empty' ->
            'merge_msg_google.protobuf.Empty'(Prev, New, TrUserData);
        'common.KeyEnvelope' ->
            'merge_msg_common.KeyEnvelope'(Prev, New, TrUserData);
        'common.Location' ->
            'merge_msg_common.Location'(Prev, New, TrUserData);
        'gw.UplinkTXInfo' ->
            'merge_msg_gw.UplinkTXInfo'(Prev, New, TrUserData);
        'gw.LoRaModulationInfo' ->
            'merge_msg_gw.LoRaModulationInfo'(Prev, New, TrUserData);
        'gw.FSKModulationInfo' ->
            'merge_msg_gw.FSKModulationInfo'(Prev, New, TrUserData);
        'gw.EncryptedFineTimestamp' ->
            'merge_msg_gw.EncryptedFineTimestamp'(Prev, New, TrUserData);
        'gw.PlainFineTimestamp' ->
            'merge_msg_gw.PlainFineTimestamp'(Prev, New, TrUserData);
        'gw.GatewayStats' ->
            'merge_msg_gw.GatewayStats'(Prev, New, TrUserData);
        'gw.UplinkRXInfo' ->
            'merge_msg_gw.UplinkRXInfo'(Prev, New, TrUserData);
        'gw.DownlinkTXInfo' ->
            'merge_msg_gw.DownlinkTXInfo'(Prev, New, TrUserData);
        'gw.ImmediatelyTimingInfo' ->
            'merge_msg_gw.ImmediatelyTimingInfo'(Prev, New, TrUserData);
        'gw.DelayTimingInfo' ->
            'merge_msg_gw.DelayTimingInfo'(Prev, New, TrUserData);
        'gw.GPSEpochTimingInfo' ->
            'merge_msg_gw.GPSEpochTimingInfo'(Prev, New, TrUserData);
        'gw.UplinkFrame' ->
            'merge_msg_gw.UplinkFrame'(Prev, New, TrUserData);
        'gw.UplinkFrameSet' ->
            'merge_msg_gw.UplinkFrameSet'(Prev, New, TrUserData);
        'gw.DownlinkFrame' ->
            'merge_msg_gw.DownlinkFrame'(Prev, New, TrUserData);
        'gw.DownlinkFrameItem' ->
            'merge_msg_gw.DownlinkFrameItem'(Prev, New, TrUserData);
        'gw.DownlinkTXAck' ->
            'merge_msg_gw.DownlinkTXAck'(Prev, New, TrUserData);
        'gw.DownlinkTXAckItem' ->
            'merge_msg_gw.DownlinkTXAckItem'(Prev, New, TrUserData);
        'gw.GatewayConfiguration' ->
            'merge_msg_gw.GatewayConfiguration'(Prev, New, TrUserData);
        'gw.ChannelConfiguration' ->
            'merge_msg_gw.ChannelConfiguration'(Prev, New, TrUserData);
        'gw.LoRaModulationConfig' ->
            'merge_msg_gw.LoRaModulationConfig'(Prev, New, TrUserData);
        'gw.FSKModulationConfig' ->
            'merge_msg_gw.FSKModulationConfig'(Prev, New, TrUserData);
        'gw.GatewayCommandExecRequest' ->
            'merge_msg_gw.GatewayCommandExecRequest'(Prev, New, TrUserData);
        'gw.GatewayCommandExecResponse' ->
            'merge_msg_gw.GatewayCommandExecResponse'(Prev, New, TrUserData);
        'gw.RawPacketForwarderEvent' ->
            'merge_msg_gw.RawPacketForwarderEvent'(Prev, New, TrUserData);
        'gw.RawPacketForwarderCommand' ->
            'merge_msg_gw.RawPacketForwarderCommand'(Prev, New, TrUserData);
        'gw.ConnState' ->
            'merge_msg_gw.ConnState'(Prev, New, TrUserData);
        'ns.ServiceProfile' ->
            'merge_msg_ns.ServiceProfile'(Prev, New, TrUserData);
        'ns.DeviceProfile' ->
            'merge_msg_ns.DeviceProfile'(Prev, New, TrUserData);
        'ns.RoutingProfile' ->
            'merge_msg_ns.RoutingProfile'(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function, 'merge_msg_ns.CreateServiceProfileRequest'/3}).
'merge_msg_ns.CreateServiceProfileRequest'(
    #'ns.CreateServiceProfileRequest'{service_profile = PFservice_profile},
    #'ns.CreateServiceProfileRequest'{service_profile = NFservice_profile},
    TrUserData
) ->
    #'ns.CreateServiceProfileRequest'{
        service_profile =
            if
                PFservice_profile /= undefined, NFservice_profile /= undefined ->
                    'merge_msg_ns.ServiceProfile'(PFservice_profile, NFservice_profile, TrUserData);
                PFservice_profile == undefined ->
                    NFservice_profile;
                NFservice_profile == undefined ->
                    PFservice_profile
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.CreateServiceProfileResponse'/3}).
'merge_msg_ns.CreateServiceProfileResponse'(
    #'ns.CreateServiceProfileResponse'{id = PFid},
    #'ns.CreateServiceProfileResponse'{id = NFid},
    _
) ->
    #'ns.CreateServiceProfileResponse'{
        id =
            if
                NFid =:= undefined -> PFid;
                true -> NFid
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.GetServiceProfileRequest'/3}).
'merge_msg_ns.GetServiceProfileRequest'(
    #'ns.GetServiceProfileRequest'{id = PFid},
    #'ns.GetServiceProfileRequest'{id = NFid},
    _
) ->
    #'ns.GetServiceProfileRequest'{
        id =
            if
                NFid =:= undefined -> PFid;
                true -> NFid
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.GetServiceProfileResponse'/3}).
'merge_msg_ns.GetServiceProfileResponse'(
    #'ns.GetServiceProfileResponse'{
        service_profile = PFservice_profile,
        created_at = PFcreated_at,
        updated_at = PFupdated_at
    },
    #'ns.GetServiceProfileResponse'{
        service_profile = NFservice_profile,
        created_at = NFcreated_at,
        updated_at = NFupdated_at
    },
    TrUserData
) ->
    #'ns.GetServiceProfileResponse'{
        service_profile =
            if
                PFservice_profile /= undefined, NFservice_profile /= undefined ->
                    'merge_msg_ns.ServiceProfile'(PFservice_profile, NFservice_profile, TrUserData);
                PFservice_profile == undefined ->
                    NFservice_profile;
                NFservice_profile == undefined ->
                    PFservice_profile
            end,
        created_at =
            if
                PFcreated_at /= undefined, NFcreated_at /= undefined ->
                    'merge_msg_google.protobuf.Timestamp'(PFcreated_at, NFcreated_at, TrUserData);
                PFcreated_at == undefined ->
                    NFcreated_at;
                NFcreated_at == undefined ->
                    PFcreated_at
            end,
        updated_at =
            if
                PFupdated_at /= undefined, NFupdated_at /= undefined ->
                    'merge_msg_google.protobuf.Timestamp'(PFupdated_at, NFupdated_at, TrUserData);
                PFupdated_at == undefined ->
                    NFupdated_at;
                NFupdated_at == undefined ->
                    PFupdated_at
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.UpdateServiceProfileRequest'/3}).
'merge_msg_ns.UpdateServiceProfileRequest'(
    #'ns.UpdateServiceProfileRequest'{service_profile = PFservice_profile},
    #'ns.UpdateServiceProfileRequest'{service_profile = NFservice_profile},
    TrUserData
) ->
    #'ns.UpdateServiceProfileRequest'{
        service_profile =
            if
                PFservice_profile /= undefined, NFservice_profile /= undefined ->
                    'merge_msg_ns.ServiceProfile'(PFservice_profile, NFservice_profile, TrUserData);
                PFservice_profile == undefined ->
                    NFservice_profile;
                NFservice_profile == undefined ->
                    PFservice_profile
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.DeleteServiceProfileRequest'/3}).
'merge_msg_ns.DeleteServiceProfileRequest'(
    #'ns.DeleteServiceProfileRequest'{id = PFid},
    #'ns.DeleteServiceProfileRequest'{id = NFid},
    _
) ->
    #'ns.DeleteServiceProfileRequest'{
        id =
            if
                NFid =:= undefined -> PFid;
                true -> NFid
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.CreateRoutingProfileRequest'/3}).
'merge_msg_ns.CreateRoutingProfileRequest'(
    #'ns.CreateRoutingProfileRequest'{routing_profile = PFrouting_profile},
    #'ns.CreateRoutingProfileRequest'{routing_profile = NFrouting_profile},
    TrUserData
) ->
    #'ns.CreateRoutingProfileRequest'{
        routing_profile =
            if
                PFrouting_profile /= undefined, NFrouting_profile /= undefined ->
                    'merge_msg_ns.RoutingProfile'(PFrouting_profile, NFrouting_profile, TrUserData);
                PFrouting_profile == undefined ->
                    NFrouting_profile;
                NFrouting_profile == undefined ->
                    PFrouting_profile
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.CreateRoutingProfileResponse'/3}).
'merge_msg_ns.CreateRoutingProfileResponse'(
    #'ns.CreateRoutingProfileResponse'{id = PFid},
    #'ns.CreateRoutingProfileResponse'{id = NFid},
    _
) ->
    #'ns.CreateRoutingProfileResponse'{
        id =
            if
                NFid =:= undefined -> PFid;
                true -> NFid
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.GetRoutingProfileRequest'/3}).
'merge_msg_ns.GetRoutingProfileRequest'(
    #'ns.GetRoutingProfileRequest'{id = PFid},
    #'ns.GetRoutingProfileRequest'{id = NFid},
    _
) ->
    #'ns.GetRoutingProfileRequest'{
        id =
            if
                NFid =:= undefined -> PFid;
                true -> NFid
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.GetRoutingProfileResponse'/3}).
'merge_msg_ns.GetRoutingProfileResponse'(
    #'ns.GetRoutingProfileResponse'{
        routing_profile = PFrouting_profile,
        created_at = PFcreated_at,
        updated_at = PFupdated_at
    },
    #'ns.GetRoutingProfileResponse'{
        routing_profile = NFrouting_profile,
        created_at = NFcreated_at,
        updated_at = NFupdated_at
    },
    TrUserData
) ->
    #'ns.GetRoutingProfileResponse'{
        routing_profile =
            if
                PFrouting_profile /= undefined, NFrouting_profile /= undefined ->
                    'merge_msg_ns.RoutingProfile'(PFrouting_profile, NFrouting_profile, TrUserData);
                PFrouting_profile == undefined ->
                    NFrouting_profile;
                NFrouting_profile == undefined ->
                    PFrouting_profile
            end,
        created_at =
            if
                PFcreated_at /= undefined, NFcreated_at /= undefined ->
                    'merge_msg_google.protobuf.Timestamp'(PFcreated_at, NFcreated_at, TrUserData);
                PFcreated_at == undefined ->
                    NFcreated_at;
                NFcreated_at == undefined ->
                    PFcreated_at
            end,
        updated_at =
            if
                PFupdated_at /= undefined, NFupdated_at /= undefined ->
                    'merge_msg_google.protobuf.Timestamp'(PFupdated_at, NFupdated_at, TrUserData);
                PFupdated_at == undefined ->
                    NFupdated_at;
                NFupdated_at == undefined ->
                    PFupdated_at
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.UpdateRoutingProfileRequest'/3}).
'merge_msg_ns.UpdateRoutingProfileRequest'(
    #'ns.UpdateRoutingProfileRequest'{routing_profile = PFrouting_profile},
    #'ns.UpdateRoutingProfileRequest'{routing_profile = NFrouting_profile},
    TrUserData
) ->
    #'ns.UpdateRoutingProfileRequest'{
        routing_profile =
            if
                PFrouting_profile /= undefined, NFrouting_profile /= undefined ->
                    'merge_msg_ns.RoutingProfile'(PFrouting_profile, NFrouting_profile, TrUserData);
                PFrouting_profile == undefined ->
                    NFrouting_profile;
                NFrouting_profile == undefined ->
                    PFrouting_profile
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.DeleteRoutingProfileRequest'/3}).
'merge_msg_ns.DeleteRoutingProfileRequest'(
    #'ns.DeleteRoutingProfileRequest'{id = PFid},
    #'ns.DeleteRoutingProfileRequest'{id = NFid},
    _
) ->
    #'ns.DeleteRoutingProfileRequest'{
        id =
            if
                NFid =:= undefined -> PFid;
                true -> NFid
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.CreateDeviceProfileRequest'/3}).
'merge_msg_ns.CreateDeviceProfileRequest'(
    #'ns.CreateDeviceProfileRequest'{device_profile = PFdevice_profile},
    #'ns.CreateDeviceProfileRequest'{device_profile = NFdevice_profile},
    TrUserData
) ->
    #'ns.CreateDeviceProfileRequest'{
        device_profile =
            if
                PFdevice_profile /= undefined, NFdevice_profile /= undefined ->
                    'merge_msg_ns.DeviceProfile'(PFdevice_profile, NFdevice_profile, TrUserData);
                PFdevice_profile == undefined ->
                    NFdevice_profile;
                NFdevice_profile == undefined ->
                    PFdevice_profile
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.CreateDeviceProfileResponse'/3}).
'merge_msg_ns.CreateDeviceProfileResponse'(
    #'ns.CreateDeviceProfileResponse'{id = PFid},
    #'ns.CreateDeviceProfileResponse'{id = NFid},
    _
) ->
    #'ns.CreateDeviceProfileResponse'{
        id =
            if
                NFid =:= undefined -> PFid;
                true -> NFid
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.GetDeviceProfileRequest'/3}).
'merge_msg_ns.GetDeviceProfileRequest'(
    #'ns.GetDeviceProfileRequest'{id = PFid},
    #'ns.GetDeviceProfileRequest'{id = NFid},
    _
) ->
    #'ns.GetDeviceProfileRequest'{
        id =
            if
                NFid =:= undefined -> PFid;
                true -> NFid
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.GetDeviceProfileResponse'/3}).
'merge_msg_ns.GetDeviceProfileResponse'(
    #'ns.GetDeviceProfileResponse'{
        device_profile = PFdevice_profile,
        created_at = PFcreated_at,
        updated_at = PFupdated_at
    },
    #'ns.GetDeviceProfileResponse'{
        device_profile = NFdevice_profile,
        created_at = NFcreated_at,
        updated_at = NFupdated_at
    },
    TrUserData
) ->
    #'ns.GetDeviceProfileResponse'{
        device_profile =
            if
                PFdevice_profile /= undefined, NFdevice_profile /= undefined ->
                    'merge_msg_ns.DeviceProfile'(PFdevice_profile, NFdevice_profile, TrUserData);
                PFdevice_profile == undefined ->
                    NFdevice_profile;
                NFdevice_profile == undefined ->
                    PFdevice_profile
            end,
        created_at =
            if
                PFcreated_at /= undefined, NFcreated_at /= undefined ->
                    'merge_msg_google.protobuf.Timestamp'(PFcreated_at, NFcreated_at, TrUserData);
                PFcreated_at == undefined ->
                    NFcreated_at;
                NFcreated_at == undefined ->
                    PFcreated_at
            end,
        updated_at =
            if
                PFupdated_at /= undefined, NFupdated_at /= undefined ->
                    'merge_msg_google.protobuf.Timestamp'(PFupdated_at, NFupdated_at, TrUserData);
                PFupdated_at == undefined ->
                    NFupdated_at;
                NFupdated_at == undefined ->
                    PFupdated_at
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.UpdateDeviceProfileRequest'/3}).
'merge_msg_ns.UpdateDeviceProfileRequest'(
    #'ns.UpdateDeviceProfileRequest'{device_profile = PFdevice_profile},
    #'ns.UpdateDeviceProfileRequest'{device_profile = NFdevice_profile},
    TrUserData
) ->
    #'ns.UpdateDeviceProfileRequest'{
        device_profile =
            if
                PFdevice_profile /= undefined, NFdevice_profile /= undefined ->
                    'merge_msg_ns.DeviceProfile'(PFdevice_profile, NFdevice_profile, TrUserData);
                PFdevice_profile == undefined ->
                    NFdevice_profile;
                NFdevice_profile == undefined ->
                    PFdevice_profile
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.DeleteDeviceProfileRequest'/3}).
'merge_msg_ns.DeleteDeviceProfileRequest'(
    #'ns.DeleteDeviceProfileRequest'{id = PFid},
    #'ns.DeleteDeviceProfileRequest'{id = NFid},
    _
) ->
    #'ns.DeleteDeviceProfileRequest'{
        id =
            if
                NFid =:= undefined -> PFid;
                true -> NFid
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.Device'/3}).
'merge_msg_ns.Device'(
    #'ns.Device'{
        dev_eui = PFdev_eui,
        device_profile_id = PFdevice_profile_id,
        service_profile_id = PFservice_profile_id,
        routing_profile_id = PFrouting_profile_id,
        skip_f_cnt_check = PFskip_f_cnt_check,
        reference_altitude = PFreference_altitude,
        is_disabled = PFis_disabled
    },
    #'ns.Device'{
        dev_eui = NFdev_eui,
        device_profile_id = NFdevice_profile_id,
        service_profile_id = NFservice_profile_id,
        routing_profile_id = NFrouting_profile_id,
        skip_f_cnt_check = NFskip_f_cnt_check,
        reference_altitude = NFreference_altitude,
        is_disabled = NFis_disabled
    },
    _
) ->
    #'ns.Device'{
        dev_eui =
            if
                NFdev_eui =:= undefined -> PFdev_eui;
                true -> NFdev_eui
            end,
        device_profile_id =
            if
                NFdevice_profile_id =:= undefined -> PFdevice_profile_id;
                true -> NFdevice_profile_id
            end,
        service_profile_id =
            if
                NFservice_profile_id =:= undefined -> PFservice_profile_id;
                true -> NFservice_profile_id
            end,
        routing_profile_id =
            if
                NFrouting_profile_id =:= undefined -> PFrouting_profile_id;
                true -> NFrouting_profile_id
            end,
        skip_f_cnt_check =
            if
                NFskip_f_cnt_check =:= undefined -> PFskip_f_cnt_check;
                true -> NFskip_f_cnt_check
            end,
        reference_altitude =
            if
                NFreference_altitude =:= undefined -> PFreference_altitude;
                true -> NFreference_altitude
            end,
        is_disabled =
            if
                NFis_disabled =:= undefined -> PFis_disabled;
                true -> NFis_disabled
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.CreateDeviceRequest'/3}).
'merge_msg_ns.CreateDeviceRequest'(
    #'ns.CreateDeviceRequest'{device = PFdevice},
    #'ns.CreateDeviceRequest'{device = NFdevice},
    TrUserData
) ->
    #'ns.CreateDeviceRequest'{
        device =
            if
                PFdevice /= undefined, NFdevice /= undefined ->
                    'merge_msg_ns.Device'(PFdevice, NFdevice, TrUserData);
                PFdevice == undefined ->
                    NFdevice;
                NFdevice == undefined ->
                    PFdevice
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.GetDeviceRequest'/3}).
'merge_msg_ns.GetDeviceRequest'(
    #'ns.GetDeviceRequest'{dev_eui = PFdev_eui},
    #'ns.GetDeviceRequest'{dev_eui = NFdev_eui},
    _
) ->
    #'ns.GetDeviceRequest'{
        dev_eui =
            if
                NFdev_eui =:= undefined -> PFdev_eui;
                true -> NFdev_eui
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.GetDeviceResponse'/3}).
'merge_msg_ns.GetDeviceResponse'(
    #'ns.GetDeviceResponse'{
        device = PFdevice,
        created_at = PFcreated_at,
        updated_at = PFupdated_at
    },
    #'ns.GetDeviceResponse'{
        device = NFdevice,
        created_at = NFcreated_at,
        updated_at = NFupdated_at
    },
    TrUserData
) ->
    #'ns.GetDeviceResponse'{
        device =
            if
                PFdevice /= undefined, NFdevice /= undefined ->
                    'merge_msg_ns.Device'(PFdevice, NFdevice, TrUserData);
                PFdevice == undefined ->
                    NFdevice;
                NFdevice == undefined ->
                    PFdevice
            end,
        created_at =
            if
                PFcreated_at /= undefined, NFcreated_at /= undefined ->
                    'merge_msg_google.protobuf.Timestamp'(PFcreated_at, NFcreated_at, TrUserData);
                PFcreated_at == undefined ->
                    NFcreated_at;
                NFcreated_at == undefined ->
                    PFcreated_at
            end,
        updated_at =
            if
                PFupdated_at /= undefined, NFupdated_at /= undefined ->
                    'merge_msg_google.protobuf.Timestamp'(PFupdated_at, NFupdated_at, TrUserData);
                PFupdated_at == undefined ->
                    NFupdated_at;
                NFupdated_at == undefined ->
                    PFupdated_at
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.UpdateDeviceRequest'/3}).
'merge_msg_ns.UpdateDeviceRequest'(
    #'ns.UpdateDeviceRequest'{device = PFdevice},
    #'ns.UpdateDeviceRequest'{device = NFdevice},
    TrUserData
) ->
    #'ns.UpdateDeviceRequest'{
        device =
            if
                PFdevice /= undefined, NFdevice /= undefined ->
                    'merge_msg_ns.Device'(PFdevice, NFdevice, TrUserData);
                PFdevice == undefined ->
                    NFdevice;
                NFdevice == undefined ->
                    PFdevice
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.DeleteDeviceRequest'/3}).
'merge_msg_ns.DeleteDeviceRequest'(
    #'ns.DeleteDeviceRequest'{dev_eui = PFdev_eui},
    #'ns.DeleteDeviceRequest'{dev_eui = NFdev_eui},
    _
) ->
    #'ns.DeleteDeviceRequest'{
        dev_eui =
            if
                NFdev_eui =:= undefined -> PFdev_eui;
                true -> NFdev_eui
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.DeviceActivation'/3}).
'merge_msg_ns.DeviceActivation'(
    #'ns.DeviceActivation'{
        dev_eui = PFdev_eui,
        dev_addr = PFdev_addr,
        s_nwk_s_int_key = PFs_nwk_s_int_key,
        f_nwk_s_int_key = PFf_nwk_s_int_key,
        nwk_s_enc_key = PFnwk_s_enc_key,
        f_cnt_up = PFf_cnt_up,
        n_f_cnt_down = PFn_f_cnt_down,
        a_f_cnt_down = PFa_f_cnt_down,
        skip_f_cnt_check = PFskip_f_cnt_check
    },
    #'ns.DeviceActivation'{
        dev_eui = NFdev_eui,
        dev_addr = NFdev_addr,
        s_nwk_s_int_key = NFs_nwk_s_int_key,
        f_nwk_s_int_key = NFf_nwk_s_int_key,
        nwk_s_enc_key = NFnwk_s_enc_key,
        f_cnt_up = NFf_cnt_up,
        n_f_cnt_down = NFn_f_cnt_down,
        a_f_cnt_down = NFa_f_cnt_down,
        skip_f_cnt_check = NFskip_f_cnt_check
    },
    _
) ->
    #'ns.DeviceActivation'{
        dev_eui =
            if
                NFdev_eui =:= undefined -> PFdev_eui;
                true -> NFdev_eui
            end,
        dev_addr =
            if
                NFdev_addr =:= undefined -> PFdev_addr;
                true -> NFdev_addr
            end,
        s_nwk_s_int_key =
            if
                NFs_nwk_s_int_key =:= undefined -> PFs_nwk_s_int_key;
                true -> NFs_nwk_s_int_key
            end,
        f_nwk_s_int_key =
            if
                NFf_nwk_s_int_key =:= undefined -> PFf_nwk_s_int_key;
                true -> NFf_nwk_s_int_key
            end,
        nwk_s_enc_key =
            if
                NFnwk_s_enc_key =:= undefined -> PFnwk_s_enc_key;
                true -> NFnwk_s_enc_key
            end,
        f_cnt_up =
            if
                NFf_cnt_up =:= undefined -> PFf_cnt_up;
                true -> NFf_cnt_up
            end,
        n_f_cnt_down =
            if
                NFn_f_cnt_down =:= undefined -> PFn_f_cnt_down;
                true -> NFn_f_cnt_down
            end,
        a_f_cnt_down =
            if
                NFa_f_cnt_down =:= undefined -> PFa_f_cnt_down;
                true -> NFa_f_cnt_down
            end,
        skip_f_cnt_check =
            if
                NFskip_f_cnt_check =:= undefined -> PFskip_f_cnt_check;
                true -> NFskip_f_cnt_check
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.ActivateDeviceRequest'/3}).
'merge_msg_ns.ActivateDeviceRequest'(
    #'ns.ActivateDeviceRequest'{device_activation = PFdevice_activation},
    #'ns.ActivateDeviceRequest'{device_activation = NFdevice_activation},
    TrUserData
) ->
    #'ns.ActivateDeviceRequest'{
        device_activation =
            if
                PFdevice_activation /= undefined, NFdevice_activation /= undefined ->
                    'merge_msg_ns.DeviceActivation'(
                        PFdevice_activation,
                        NFdevice_activation,
                        TrUserData
                    );
                PFdevice_activation == undefined ->
                    NFdevice_activation;
                NFdevice_activation == undefined ->
                    PFdevice_activation
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.DeactivateDeviceRequest'/3}).
'merge_msg_ns.DeactivateDeviceRequest'(
    #'ns.DeactivateDeviceRequest'{dev_eui = PFdev_eui},
    #'ns.DeactivateDeviceRequest'{dev_eui = NFdev_eui},
    _
) ->
    #'ns.DeactivateDeviceRequest'{
        dev_eui =
            if
                NFdev_eui =:= undefined -> PFdev_eui;
                true -> NFdev_eui
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.GetDeviceActivationRequest'/3}).
'merge_msg_ns.GetDeviceActivationRequest'(
    #'ns.GetDeviceActivationRequest'{dev_eui = PFdev_eui},
    #'ns.GetDeviceActivationRequest'{dev_eui = NFdev_eui},
    _
) ->
    #'ns.GetDeviceActivationRequest'{
        dev_eui =
            if
                NFdev_eui =:= undefined -> PFdev_eui;
                true -> NFdev_eui
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.GetDeviceActivationResponse'/3}).
'merge_msg_ns.GetDeviceActivationResponse'(
    #'ns.GetDeviceActivationResponse'{device_activation = PFdevice_activation},
    #'ns.GetDeviceActivationResponse'{device_activation = NFdevice_activation},
    TrUserData
) ->
    #'ns.GetDeviceActivationResponse'{
        device_activation =
            if
                PFdevice_activation /= undefined, NFdevice_activation /= undefined ->
                    'merge_msg_ns.DeviceActivation'(
                        PFdevice_activation,
                        NFdevice_activation,
                        TrUserData
                    );
                PFdevice_activation == undefined ->
                    NFdevice_activation;
                NFdevice_activation == undefined ->
                    PFdevice_activation
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.GetRandomDevAddrResponse'/3}).
'merge_msg_ns.GetRandomDevAddrResponse'(
    #'ns.GetRandomDevAddrResponse'{dev_addr = PFdev_addr},
    #'ns.GetRandomDevAddrResponse'{dev_addr = NFdev_addr},
    _
) ->
    #'ns.GetRandomDevAddrResponse'{
        dev_addr =
            if
                NFdev_addr =:= undefined -> PFdev_addr;
                true -> NFdev_addr
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.CreateMACCommandQueueItemRequest'/3}).
'merge_msg_ns.CreateMACCommandQueueItemRequest'(
    #'ns.CreateMACCommandQueueItemRequest'{dev_eui = PFdev_eui, cid = PFcid, commands = PFcommands},
    #'ns.CreateMACCommandQueueItemRequest'{dev_eui = NFdev_eui, cid = NFcid, commands = NFcommands},
    TrUserData
) ->
    #'ns.CreateMACCommandQueueItemRequest'{
        dev_eui =
            if
                NFdev_eui =:= undefined -> PFdev_eui;
                true -> NFdev_eui
            end,
        cid =
            if
                NFcid =:= undefined -> PFcid;
                true -> NFcid
            end,
        commands =
            if
                PFcommands /= undefined, NFcommands /= undefined ->
                    'erlang_++'(PFcommands, NFcommands, TrUserData);
                PFcommands == undefined ->
                    NFcommands;
                NFcommands == undefined ->
                    PFcommands
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.SendProprietaryPayloadRequest'/3}).
'merge_msg_ns.SendProprietaryPayloadRequest'(
    #'ns.SendProprietaryPayloadRequest'{
        mac_payload = PFmac_payload,
        mic = PFmic,
        gateway_macs = PFgateway_macs,
        polarization_inversion = PFpolarization_inversion,
        frequency = PFfrequency,
        dr = PFdr
    },
    #'ns.SendProprietaryPayloadRequest'{
        mac_payload = NFmac_payload,
        mic = NFmic,
        gateway_macs = NFgateway_macs,
        polarization_inversion = NFpolarization_inversion,
        frequency = NFfrequency,
        dr = NFdr
    },
    TrUserData
) ->
    #'ns.SendProprietaryPayloadRequest'{
        mac_payload =
            if
                NFmac_payload =:= undefined -> PFmac_payload;
                true -> NFmac_payload
            end,
        mic =
            if
                NFmic =:= undefined -> PFmic;
                true -> NFmic
            end,
        gateway_macs =
            if
                PFgateway_macs /= undefined, NFgateway_macs /= undefined ->
                    'erlang_++'(PFgateway_macs, NFgateway_macs, TrUserData);
                PFgateway_macs == undefined ->
                    NFgateway_macs;
                NFgateway_macs == undefined ->
                    PFgateway_macs
            end,
        polarization_inversion =
            if
                NFpolarization_inversion =:= undefined -> PFpolarization_inversion;
                true -> NFpolarization_inversion
            end,
        frequency =
            if
                NFfrequency =:= undefined -> PFfrequency;
                true -> NFfrequency
            end,
        dr =
            if
                NFdr =:= undefined -> PFdr;
                true -> NFdr
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.Gateway'/3}).
'merge_msg_ns.Gateway'(
    #'ns.Gateway'{
        id = PFid,
        location = PFlocation,
        gateway_profile_id = PFgateway_profile_id,
        boards = PFboards,
        routing_profile_id = PFrouting_profile_id,
        service_profile_id = PFservice_profile_id
    },
    #'ns.Gateway'{
        id = NFid,
        location = NFlocation,
        gateway_profile_id = NFgateway_profile_id,
        boards = NFboards,
        routing_profile_id = NFrouting_profile_id,
        service_profile_id = NFservice_profile_id
    },
    TrUserData
) ->
    #'ns.Gateway'{
        id =
            if
                NFid =:= undefined -> PFid;
                true -> NFid
            end,
        location =
            if
                PFlocation /= undefined, NFlocation /= undefined ->
                    'merge_msg_common.Location'(PFlocation, NFlocation, TrUserData);
                PFlocation == undefined ->
                    NFlocation;
                NFlocation == undefined ->
                    PFlocation
            end,
        gateway_profile_id =
            if
                NFgateway_profile_id =:= undefined -> PFgateway_profile_id;
                true -> NFgateway_profile_id
            end,
        boards =
            if
                PFboards /= undefined, NFboards /= undefined ->
                    'erlang_++'(PFboards, NFboards, TrUserData);
                PFboards == undefined ->
                    NFboards;
                NFboards == undefined ->
                    PFboards
            end,
        routing_profile_id =
            if
                NFrouting_profile_id =:= undefined -> PFrouting_profile_id;
                true -> NFrouting_profile_id
            end,
        service_profile_id =
            if
                NFservice_profile_id =:= undefined -> PFservice_profile_id;
                true -> NFservice_profile_id
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.GatewayBoard'/3}).
'merge_msg_ns.GatewayBoard'(
    #'ns.GatewayBoard'{fpga_id = PFfpga_id, fine_timestamp_key = PFfine_timestamp_key},
    #'ns.GatewayBoard'{fpga_id = NFfpga_id, fine_timestamp_key = NFfine_timestamp_key},
    _
) ->
    #'ns.GatewayBoard'{
        fpga_id =
            if
                NFfpga_id =:= undefined -> PFfpga_id;
                true -> NFfpga_id
            end,
        fine_timestamp_key =
            if
                NFfine_timestamp_key =:= undefined -> PFfine_timestamp_key;
                true -> NFfine_timestamp_key
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.CreateGatewayRequest'/3}).
'merge_msg_ns.CreateGatewayRequest'(
    #'ns.CreateGatewayRequest'{gateway = PFgateway},
    #'ns.CreateGatewayRequest'{gateway = NFgateway},
    TrUserData
) ->
    #'ns.CreateGatewayRequest'{
        gateway =
            if
                PFgateway /= undefined, NFgateway /= undefined ->
                    'merge_msg_ns.Gateway'(PFgateway, NFgateway, TrUserData);
                PFgateway == undefined ->
                    NFgateway;
                NFgateway == undefined ->
                    PFgateway
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.GetGatewayRequest'/3}).
'merge_msg_ns.GetGatewayRequest'(
    #'ns.GetGatewayRequest'{id = PFid},
    #'ns.GetGatewayRequest'{id = NFid},
    _
) ->
    #'ns.GetGatewayRequest'{
        id =
            if
                NFid =:= undefined -> PFid;
                true -> NFid
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.GetGatewayResponse'/3}).
'merge_msg_ns.GetGatewayResponse'(
    #'ns.GetGatewayResponse'{
        gateway = PFgateway,
        created_at = PFcreated_at,
        updated_at = PFupdated_at,
        first_seen_at = PFfirst_seen_at,
        last_seen_at = PFlast_seen_at
    },
    #'ns.GetGatewayResponse'{
        gateway = NFgateway,
        created_at = NFcreated_at,
        updated_at = NFupdated_at,
        first_seen_at = NFfirst_seen_at,
        last_seen_at = NFlast_seen_at
    },
    TrUserData
) ->
    #'ns.GetGatewayResponse'{
        gateway =
            if
                PFgateway /= undefined, NFgateway /= undefined ->
                    'merge_msg_ns.Gateway'(PFgateway, NFgateway, TrUserData);
                PFgateway == undefined ->
                    NFgateway;
                NFgateway == undefined ->
                    PFgateway
            end,
        created_at =
            if
                PFcreated_at /= undefined, NFcreated_at /= undefined ->
                    'merge_msg_google.protobuf.Timestamp'(PFcreated_at, NFcreated_at, TrUserData);
                PFcreated_at == undefined ->
                    NFcreated_at;
                NFcreated_at == undefined ->
                    PFcreated_at
            end,
        updated_at =
            if
                PFupdated_at /= undefined, NFupdated_at /= undefined ->
                    'merge_msg_google.protobuf.Timestamp'(PFupdated_at, NFupdated_at, TrUserData);
                PFupdated_at == undefined ->
                    NFupdated_at;
                NFupdated_at == undefined ->
                    PFupdated_at
            end,
        first_seen_at =
            if
                PFfirst_seen_at /= undefined, NFfirst_seen_at /= undefined ->
                    'merge_msg_google.protobuf.Timestamp'(
                        PFfirst_seen_at,
                        NFfirst_seen_at,
                        TrUserData
                    );
                PFfirst_seen_at == undefined ->
                    NFfirst_seen_at;
                NFfirst_seen_at == undefined ->
                    PFfirst_seen_at
            end,
        last_seen_at =
            if
                PFlast_seen_at /= undefined, NFlast_seen_at /= undefined ->
                    'merge_msg_google.protobuf.Timestamp'(
                        PFlast_seen_at,
                        NFlast_seen_at,
                        TrUserData
                    );
                PFlast_seen_at == undefined ->
                    NFlast_seen_at;
                NFlast_seen_at == undefined ->
                    PFlast_seen_at
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.UpdateGatewayRequest'/3}).
'merge_msg_ns.UpdateGatewayRequest'(
    #'ns.UpdateGatewayRequest'{gateway = PFgateway},
    #'ns.UpdateGatewayRequest'{gateway = NFgateway},
    TrUserData
) ->
    #'ns.UpdateGatewayRequest'{
        gateway =
            if
                PFgateway /= undefined, NFgateway /= undefined ->
                    'merge_msg_ns.Gateway'(PFgateway, NFgateway, TrUserData);
                PFgateway == undefined ->
                    NFgateway;
                NFgateway == undefined ->
                    PFgateway
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.DeleteGatewayRequest'/3}).
'merge_msg_ns.DeleteGatewayRequest'(
    #'ns.DeleteGatewayRequest'{id = PFid},
    #'ns.DeleteGatewayRequest'{id = NFid},
    _
) ->
    #'ns.DeleteGatewayRequest'{
        id =
            if
                NFid =:= undefined -> PFid;
                true -> NFid
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.GenerateGatewayClientCertificateRequest'/3}).
'merge_msg_ns.GenerateGatewayClientCertificateRequest'(
    #'ns.GenerateGatewayClientCertificateRequest'{id = PFid},
    #'ns.GenerateGatewayClientCertificateRequest'{id = NFid},
    _
) ->
    #'ns.GenerateGatewayClientCertificateRequest'{
        id =
            if
                NFid =:= undefined -> PFid;
                true -> NFid
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.GenerateGatewayClientCertificateResponse'/3}).
'merge_msg_ns.GenerateGatewayClientCertificateResponse'(
    #'ns.GenerateGatewayClientCertificateResponse'{
        tls_cert = PFtls_cert,
        tls_key = PFtls_key,
        ca_cert = PFca_cert,
        expires_at = PFexpires_at
    },
    #'ns.GenerateGatewayClientCertificateResponse'{
        tls_cert = NFtls_cert,
        tls_key = NFtls_key,
        ca_cert = NFca_cert,
        expires_at = NFexpires_at
    },
    TrUserData
) ->
    #'ns.GenerateGatewayClientCertificateResponse'{
        tls_cert =
            if
                NFtls_cert =:= undefined -> PFtls_cert;
                true -> NFtls_cert
            end,
        tls_key =
            if
                NFtls_key =:= undefined -> PFtls_key;
                true -> NFtls_key
            end,
        ca_cert =
            if
                NFca_cert =:= undefined -> PFca_cert;
                true -> NFca_cert
            end,
        expires_at =
            if
                PFexpires_at /= undefined, NFexpires_at /= undefined ->
                    'merge_msg_google.protobuf.Timestamp'(PFexpires_at, NFexpires_at, TrUserData);
                PFexpires_at == undefined ->
                    NFexpires_at;
                NFexpires_at == undefined ->
                    PFexpires_at
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.GatewayStats'/3}).
'merge_msg_ns.GatewayStats'(
    #'ns.GatewayStats'{
        timestamp = PFtimestamp,
        rx_packets_received = PFrx_packets_received,
        rx_packets_received_ok = PFrx_packets_received_ok,
        tx_packets_received = PFtx_packets_received,
        tx_packets_emitted = PFtx_packets_emitted
    },
    #'ns.GatewayStats'{
        timestamp = NFtimestamp,
        rx_packets_received = NFrx_packets_received,
        rx_packets_received_ok = NFrx_packets_received_ok,
        tx_packets_received = NFtx_packets_received,
        tx_packets_emitted = NFtx_packets_emitted
    },
    TrUserData
) ->
    #'ns.GatewayStats'{
        timestamp =
            if
                PFtimestamp /= undefined, NFtimestamp /= undefined ->
                    'merge_msg_google.protobuf.Timestamp'(PFtimestamp, NFtimestamp, TrUserData);
                PFtimestamp == undefined ->
                    NFtimestamp;
                NFtimestamp == undefined ->
                    PFtimestamp
            end,
        rx_packets_received =
            if
                NFrx_packets_received =:= undefined -> PFrx_packets_received;
                true -> NFrx_packets_received
            end,
        rx_packets_received_ok =
            if
                NFrx_packets_received_ok =:= undefined -> PFrx_packets_received_ok;
                true -> NFrx_packets_received_ok
            end,
        tx_packets_received =
            if
                NFtx_packets_received =:= undefined -> PFtx_packets_received;
                true -> NFtx_packets_received
            end,
        tx_packets_emitted =
            if
                NFtx_packets_emitted =:= undefined -> PFtx_packets_emitted;
                true -> NFtx_packets_emitted
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.GetGatewayStatsRequest'/3}).
'merge_msg_ns.GetGatewayStatsRequest'(
    #'ns.GetGatewayStatsRequest'{
        gateway_id = PFgateway_id,
        interval = PFinterval,
        start_timestamp = PFstart_timestamp,
        end_timestamp = PFend_timestamp
    },
    #'ns.GetGatewayStatsRequest'{
        gateway_id = NFgateway_id,
        interval = NFinterval,
        start_timestamp = NFstart_timestamp,
        end_timestamp = NFend_timestamp
    },
    TrUserData
) ->
    #'ns.GetGatewayStatsRequest'{
        gateway_id =
            if
                NFgateway_id =:= undefined -> PFgateway_id;
                true -> NFgateway_id
            end,
        interval =
            if
                NFinterval =:= undefined -> PFinterval;
                true -> NFinterval
            end,
        start_timestamp =
            if
                PFstart_timestamp /= undefined, NFstart_timestamp /= undefined ->
                    'merge_msg_google.protobuf.Timestamp'(
                        PFstart_timestamp,
                        NFstart_timestamp,
                        TrUserData
                    );
                PFstart_timestamp == undefined ->
                    NFstart_timestamp;
                NFstart_timestamp == undefined ->
                    PFstart_timestamp
            end,
        end_timestamp =
            if
                PFend_timestamp /= undefined, NFend_timestamp /= undefined ->
                    'merge_msg_google.protobuf.Timestamp'(
                        PFend_timestamp,
                        NFend_timestamp,
                        TrUserData
                    );
                PFend_timestamp == undefined ->
                    NFend_timestamp;
                NFend_timestamp == undefined ->
                    PFend_timestamp
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.GetGatewayStatsResponse'/3}).
'merge_msg_ns.GetGatewayStatsResponse'(
    #'ns.GetGatewayStatsResponse'{result = PFresult},
    #'ns.GetGatewayStatsResponse'{result = NFresult},
    TrUserData
) ->
    #'ns.GetGatewayStatsResponse'{
        result =
            if
                PFresult /= undefined, NFresult /= undefined ->
                    'erlang_++'(PFresult, NFresult, TrUserData);
                PFresult == undefined ->
                    NFresult;
                NFresult == undefined ->
                    PFresult
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.DeviceQueueItem'/3}).
'merge_msg_ns.DeviceQueueItem'(
    #'ns.DeviceQueueItem'{
        dev_eui = PFdev_eui,
        frm_payload = PFfrm_payload,
        f_cnt = PFf_cnt,
        f_port = PFf_port,
        confirmed = PFconfirmed,
        dev_addr = PFdev_addr
    },
    #'ns.DeviceQueueItem'{
        dev_eui = NFdev_eui,
        frm_payload = NFfrm_payload,
        f_cnt = NFf_cnt,
        f_port = NFf_port,
        confirmed = NFconfirmed,
        dev_addr = NFdev_addr
    },
    _
) ->
    #'ns.DeviceQueueItem'{
        dev_eui =
            if
                NFdev_eui =:= undefined -> PFdev_eui;
                true -> NFdev_eui
            end,
        frm_payload =
            if
                NFfrm_payload =:= undefined -> PFfrm_payload;
                true -> NFfrm_payload
            end,
        f_cnt =
            if
                NFf_cnt =:= undefined -> PFf_cnt;
                true -> NFf_cnt
            end,
        f_port =
            if
                NFf_port =:= undefined -> PFf_port;
                true -> NFf_port
            end,
        confirmed =
            if
                NFconfirmed =:= undefined -> PFconfirmed;
                true -> NFconfirmed
            end,
        dev_addr =
            if
                NFdev_addr =:= undefined -> PFdev_addr;
                true -> NFdev_addr
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.CreateDeviceQueueItemRequest'/3}).
'merge_msg_ns.CreateDeviceQueueItemRequest'(
    #'ns.CreateDeviceQueueItemRequest'{item = PFitem},
    #'ns.CreateDeviceQueueItemRequest'{item = NFitem},
    TrUserData
) ->
    #'ns.CreateDeviceQueueItemRequest'{
        item =
            if
                PFitem /= undefined, NFitem /= undefined ->
                    'merge_msg_ns.DeviceQueueItem'(PFitem, NFitem, TrUserData);
                PFitem == undefined ->
                    NFitem;
                NFitem == undefined ->
                    PFitem
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.FlushDeviceQueueForDevEUIRequest'/3}).
'merge_msg_ns.FlushDeviceQueueForDevEUIRequest'(
    #'ns.FlushDeviceQueueForDevEUIRequest'{dev_eui = PFdev_eui},
    #'ns.FlushDeviceQueueForDevEUIRequest'{dev_eui = NFdev_eui},
    _
) ->
    #'ns.FlushDeviceQueueForDevEUIRequest'{
        dev_eui =
            if
                NFdev_eui =:= undefined -> PFdev_eui;
                true -> NFdev_eui
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.GetDeviceQueueItemsForDevEUIRequest'/3}).
'merge_msg_ns.GetDeviceQueueItemsForDevEUIRequest'(
    #'ns.GetDeviceQueueItemsForDevEUIRequest'{dev_eui = PFdev_eui, count_only = PFcount_only},
    #'ns.GetDeviceQueueItemsForDevEUIRequest'{dev_eui = NFdev_eui, count_only = NFcount_only},
    _
) ->
    #'ns.GetDeviceQueueItemsForDevEUIRequest'{
        dev_eui =
            if
                NFdev_eui =:= undefined -> PFdev_eui;
                true -> NFdev_eui
            end,
        count_only =
            if
                NFcount_only =:= undefined -> PFcount_only;
                true -> NFcount_only
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.GetDeviceQueueItemsForDevEUIResponse'/3}).
'merge_msg_ns.GetDeviceQueueItemsForDevEUIResponse'(
    #'ns.GetDeviceQueueItemsForDevEUIResponse'{items = PFitems, total_count = PFtotal_count},
    #'ns.GetDeviceQueueItemsForDevEUIResponse'{items = NFitems, total_count = NFtotal_count},
    TrUserData
) ->
    #'ns.GetDeviceQueueItemsForDevEUIResponse'{
        items =
            if
                PFitems /= undefined, NFitems /= undefined ->
                    'erlang_++'(PFitems, NFitems, TrUserData);
                PFitems == undefined ->
                    NFitems;
                NFitems == undefined ->
                    PFitems
            end,
        total_count =
            if
                NFtotal_count =:= undefined -> PFtotal_count;
                true -> NFtotal_count
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.GetNextDownlinkFCntForDevEUIRequest'/3}).
'merge_msg_ns.GetNextDownlinkFCntForDevEUIRequest'(
    #'ns.GetNextDownlinkFCntForDevEUIRequest'{dev_eui = PFdev_eui},
    #'ns.GetNextDownlinkFCntForDevEUIRequest'{dev_eui = NFdev_eui},
    _
) ->
    #'ns.GetNextDownlinkFCntForDevEUIRequest'{
        dev_eui =
            if
                NFdev_eui =:= undefined -> PFdev_eui;
                true -> NFdev_eui
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.GetNextDownlinkFCntForDevEUIResponse'/3}).
'merge_msg_ns.GetNextDownlinkFCntForDevEUIResponse'(
    #'ns.GetNextDownlinkFCntForDevEUIResponse'{f_cnt = PFf_cnt},
    #'ns.GetNextDownlinkFCntForDevEUIResponse'{f_cnt = NFf_cnt},
    _
) ->
    #'ns.GetNextDownlinkFCntForDevEUIResponse'{
        f_cnt =
            if
                NFf_cnt =:= undefined -> PFf_cnt;
                true -> NFf_cnt
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.UplinkFrameLog'/3}).
'merge_msg_ns.UplinkFrameLog'(
    #'ns.UplinkFrameLog'{
        phy_payload = PFphy_payload,
        tx_info = PFtx_info,
        rx_info = PFrx_info,
        m_type = PFm_type,
        dev_addr = PFdev_addr,
        dev_eui = PFdev_eui
    },
    #'ns.UplinkFrameLog'{
        phy_payload = NFphy_payload,
        tx_info = NFtx_info,
        rx_info = NFrx_info,
        m_type = NFm_type,
        dev_addr = NFdev_addr,
        dev_eui = NFdev_eui
    },
    TrUserData
) ->
    #'ns.UplinkFrameLog'{
        phy_payload =
            if
                NFphy_payload =:= undefined -> PFphy_payload;
                true -> NFphy_payload
            end,
        tx_info =
            if
                PFtx_info /= undefined, NFtx_info /= undefined ->
                    'merge_msg_gw.UplinkTXInfo'(PFtx_info, NFtx_info, TrUserData);
                PFtx_info == undefined ->
                    NFtx_info;
                NFtx_info == undefined ->
                    PFtx_info
            end,
        rx_info =
            if
                PFrx_info /= undefined, NFrx_info /= undefined ->
                    'erlang_++'(PFrx_info, NFrx_info, TrUserData);
                PFrx_info == undefined ->
                    NFrx_info;
                NFrx_info == undefined ->
                    PFrx_info
            end,
        m_type =
            if
                NFm_type =:= undefined -> PFm_type;
                true -> NFm_type
            end,
        dev_addr =
            if
                NFdev_addr =:= undefined -> PFdev_addr;
                true -> NFdev_addr
            end,
        dev_eui =
            if
                NFdev_eui =:= undefined -> PFdev_eui;
                true -> NFdev_eui
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.DownlinkFrameLog'/3}).
'merge_msg_ns.DownlinkFrameLog'(
    #'ns.DownlinkFrameLog'{
        phy_payload = PFphy_payload,
        tx_info = PFtx_info,
        token = PFtoken,
        downlink_id = PFdownlink_id,
        gateway_id = PFgateway_id,
        m_type = PFm_type,
        dev_addr = PFdev_addr,
        dev_eui = PFdev_eui
    },
    #'ns.DownlinkFrameLog'{
        phy_payload = NFphy_payload,
        tx_info = NFtx_info,
        token = NFtoken,
        downlink_id = NFdownlink_id,
        gateway_id = NFgateway_id,
        m_type = NFm_type,
        dev_addr = NFdev_addr,
        dev_eui = NFdev_eui
    },
    TrUserData
) ->
    #'ns.DownlinkFrameLog'{
        phy_payload =
            if
                NFphy_payload =:= undefined -> PFphy_payload;
                true -> NFphy_payload
            end,
        tx_info =
            if
                PFtx_info /= undefined, NFtx_info /= undefined ->
                    'merge_msg_gw.DownlinkTXInfo'(PFtx_info, NFtx_info, TrUserData);
                PFtx_info == undefined ->
                    NFtx_info;
                NFtx_info == undefined ->
                    PFtx_info
            end,
        token =
            if
                NFtoken =:= undefined -> PFtoken;
                true -> NFtoken
            end,
        downlink_id =
            if
                NFdownlink_id =:= undefined -> PFdownlink_id;
                true -> NFdownlink_id
            end,
        gateway_id =
            if
                NFgateway_id =:= undefined -> PFgateway_id;
                true -> NFgateway_id
            end,
        m_type =
            if
                NFm_type =:= undefined -> PFm_type;
                true -> NFm_type
            end,
        dev_addr =
            if
                NFdev_addr =:= undefined -> PFdev_addr;
                true -> NFdev_addr
            end,
        dev_eui =
            if
                NFdev_eui =:= undefined -> PFdev_eui;
                true -> NFdev_eui
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.StreamFrameLogsForGatewayRequest'/3}).
'merge_msg_ns.StreamFrameLogsForGatewayRequest'(
    #'ns.StreamFrameLogsForGatewayRequest'{gateway_id = PFgateway_id},
    #'ns.StreamFrameLogsForGatewayRequest'{gateway_id = NFgateway_id},
    _
) ->
    #'ns.StreamFrameLogsForGatewayRequest'{
        gateway_id =
            if
                NFgateway_id =:= undefined -> PFgateway_id;
                true -> NFgateway_id
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.StreamFrameLogsForGatewayResponse'/3}).
'merge_msg_ns.StreamFrameLogsForGatewayResponse'(
    #'ns.StreamFrameLogsForGatewayResponse'{frame = PFframe},
    #'ns.StreamFrameLogsForGatewayResponse'{frame = NFframe},
    TrUserData
) ->
    #'ns.StreamFrameLogsForGatewayResponse'{
        frame =
            case {PFframe, NFframe} of
                {{uplink_frame_set, OPFframe}, {uplink_frame_set, ONFframe}} ->
                    {uplink_frame_set,
                        'merge_msg_ns.UplinkFrameLog'(OPFframe, ONFframe, TrUserData)};
                {{downlink_frame, OPFframe}, {downlink_frame, ONFframe}} ->
                    {downlink_frame,
                        'merge_msg_ns.DownlinkFrameLog'(OPFframe, ONFframe, TrUserData)};
                {_, undefined} ->
                    PFframe;
                _ ->
                    NFframe
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.StreamFrameLogsForDeviceRequest'/3}).
'merge_msg_ns.StreamFrameLogsForDeviceRequest'(
    #'ns.StreamFrameLogsForDeviceRequest'{dev_eui = PFdev_eui},
    #'ns.StreamFrameLogsForDeviceRequest'{dev_eui = NFdev_eui},
    _
) ->
    #'ns.StreamFrameLogsForDeviceRequest'{
        dev_eui =
            if
                NFdev_eui =:= undefined -> PFdev_eui;
                true -> NFdev_eui
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.StreamFrameLogsForDeviceResponse'/3}).
'merge_msg_ns.StreamFrameLogsForDeviceResponse'(
    #'ns.StreamFrameLogsForDeviceResponse'{frame = PFframe},
    #'ns.StreamFrameLogsForDeviceResponse'{frame = NFframe},
    TrUserData
) ->
    #'ns.StreamFrameLogsForDeviceResponse'{
        frame =
            case {PFframe, NFframe} of
                {{uplink_frame_set, OPFframe}, {uplink_frame_set, ONFframe}} ->
                    {uplink_frame_set,
                        'merge_msg_ns.UplinkFrameLog'(OPFframe, ONFframe, TrUserData)};
                {{downlink_frame, OPFframe}, {downlink_frame, ONFframe}} ->
                    {downlink_frame,
                        'merge_msg_ns.DownlinkFrameLog'(OPFframe, ONFframe, TrUserData)};
                {_, undefined} ->
                    PFframe;
                _ ->
                    NFframe
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.GetVersionResponse'/3}).
'merge_msg_ns.GetVersionResponse'(
    #'ns.GetVersionResponse'{version = PFversion, region = PFregion},
    #'ns.GetVersionResponse'{version = NFversion, region = NFregion},
    _
) ->
    #'ns.GetVersionResponse'{
        version =
            if
                NFversion =:= undefined -> PFversion;
                true -> NFversion
            end,
        region =
            if
                NFregion =:= undefined -> PFregion;
                true -> NFregion
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.GatewayProfile'/3}).
'merge_msg_ns.GatewayProfile'(
    #'ns.GatewayProfile'{
        id = PFid,
        channels = PFchannels,
        extra_channels = PFextra_channels,
        stats_interval = PFstats_interval
    },
    #'ns.GatewayProfile'{
        id = NFid,
        channels = NFchannels,
        extra_channels = NFextra_channels,
        stats_interval = NFstats_interval
    },
    TrUserData
) ->
    #'ns.GatewayProfile'{
        id =
            if
                NFid =:= undefined -> PFid;
                true -> NFid
            end,
        channels =
            if
                PFchannels /= undefined, NFchannels /= undefined ->
                    'erlang_++'(PFchannels, NFchannels, TrUserData);
                PFchannels == undefined ->
                    NFchannels;
                NFchannels == undefined ->
                    PFchannels
            end,
        extra_channels =
            if
                PFextra_channels /= undefined, NFextra_channels /= undefined ->
                    'erlang_++'(PFextra_channels, NFextra_channels, TrUserData);
                PFextra_channels == undefined ->
                    NFextra_channels;
                NFextra_channels == undefined ->
                    PFextra_channels
            end,
        stats_interval =
            if
                PFstats_interval /= undefined, NFstats_interval /= undefined ->
                    'merge_msg_google.protobuf.Duration'(
                        PFstats_interval,
                        NFstats_interval,
                        TrUserData
                    );
                PFstats_interval == undefined ->
                    NFstats_interval;
                NFstats_interval == undefined ->
                    PFstats_interval
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.GatewayProfileExtraChannel'/3}).
'merge_msg_ns.GatewayProfileExtraChannel'(
    #'ns.GatewayProfileExtraChannel'{
        modulation = PFmodulation,
        frequency = PFfrequency,
        bandwidth = PFbandwidth,
        bitrate = PFbitrate,
        spreading_factors = PFspreading_factors
    },
    #'ns.GatewayProfileExtraChannel'{
        modulation = NFmodulation,
        frequency = NFfrequency,
        bandwidth = NFbandwidth,
        bitrate = NFbitrate,
        spreading_factors = NFspreading_factors
    },
    TrUserData
) ->
    #'ns.GatewayProfileExtraChannel'{
        modulation =
            if
                NFmodulation =:= undefined -> PFmodulation;
                true -> NFmodulation
            end,
        frequency =
            if
                NFfrequency =:= undefined -> PFfrequency;
                true -> NFfrequency
            end,
        bandwidth =
            if
                NFbandwidth =:= undefined -> PFbandwidth;
                true -> NFbandwidth
            end,
        bitrate =
            if
                NFbitrate =:= undefined -> PFbitrate;
                true -> NFbitrate
            end,
        spreading_factors =
            if
                PFspreading_factors /= undefined, NFspreading_factors /= undefined ->
                    'erlang_++'(PFspreading_factors, NFspreading_factors, TrUserData);
                PFspreading_factors == undefined ->
                    NFspreading_factors;
                NFspreading_factors == undefined ->
                    PFspreading_factors
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.CreateGatewayProfileRequest'/3}).
'merge_msg_ns.CreateGatewayProfileRequest'(
    #'ns.CreateGatewayProfileRequest'{gateway_profile = PFgateway_profile},
    #'ns.CreateGatewayProfileRequest'{gateway_profile = NFgateway_profile},
    TrUserData
) ->
    #'ns.CreateGatewayProfileRequest'{
        gateway_profile =
            if
                PFgateway_profile /= undefined, NFgateway_profile /= undefined ->
                    'merge_msg_ns.GatewayProfile'(PFgateway_profile, NFgateway_profile, TrUserData);
                PFgateway_profile == undefined ->
                    NFgateway_profile;
                NFgateway_profile == undefined ->
                    PFgateway_profile
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.CreateGatewayProfileResponse'/3}).
'merge_msg_ns.CreateGatewayProfileResponse'(
    #'ns.CreateGatewayProfileResponse'{id = PFid},
    #'ns.CreateGatewayProfileResponse'{id = NFid},
    _
) ->
    #'ns.CreateGatewayProfileResponse'{
        id =
            if
                NFid =:= undefined -> PFid;
                true -> NFid
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.GetGatewayProfileRequest'/3}).
'merge_msg_ns.GetGatewayProfileRequest'(
    #'ns.GetGatewayProfileRequest'{id = PFid},
    #'ns.GetGatewayProfileRequest'{id = NFid},
    _
) ->
    #'ns.GetGatewayProfileRequest'{
        id =
            if
                NFid =:= undefined -> PFid;
                true -> NFid
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.GetGatewayProfileResponse'/3}).
'merge_msg_ns.GetGatewayProfileResponse'(
    #'ns.GetGatewayProfileResponse'{
        gateway_profile = PFgateway_profile,
        created_at = PFcreated_at,
        updated_at = PFupdated_at
    },
    #'ns.GetGatewayProfileResponse'{
        gateway_profile = NFgateway_profile,
        created_at = NFcreated_at,
        updated_at = NFupdated_at
    },
    TrUserData
) ->
    #'ns.GetGatewayProfileResponse'{
        gateway_profile =
            if
                PFgateway_profile /= undefined, NFgateway_profile /= undefined ->
                    'merge_msg_ns.GatewayProfile'(PFgateway_profile, NFgateway_profile, TrUserData);
                PFgateway_profile == undefined ->
                    NFgateway_profile;
                NFgateway_profile == undefined ->
                    PFgateway_profile
            end,
        created_at =
            if
                PFcreated_at /= undefined, NFcreated_at /= undefined ->
                    'merge_msg_google.protobuf.Timestamp'(PFcreated_at, NFcreated_at, TrUserData);
                PFcreated_at == undefined ->
                    NFcreated_at;
                NFcreated_at == undefined ->
                    PFcreated_at
            end,
        updated_at =
            if
                PFupdated_at /= undefined, NFupdated_at /= undefined ->
                    'merge_msg_google.protobuf.Timestamp'(PFupdated_at, NFupdated_at, TrUserData);
                PFupdated_at == undefined ->
                    NFupdated_at;
                NFupdated_at == undefined ->
                    PFupdated_at
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.UpdateGatewayProfileRequest'/3}).
'merge_msg_ns.UpdateGatewayProfileRequest'(
    #'ns.UpdateGatewayProfileRequest'{gateway_profile = PFgateway_profile},
    #'ns.UpdateGatewayProfileRequest'{gateway_profile = NFgateway_profile},
    TrUserData
) ->
    #'ns.UpdateGatewayProfileRequest'{
        gateway_profile =
            if
                PFgateway_profile /= undefined, NFgateway_profile /= undefined ->
                    'merge_msg_ns.GatewayProfile'(PFgateway_profile, NFgateway_profile, TrUserData);
                PFgateway_profile == undefined ->
                    NFgateway_profile;
                NFgateway_profile == undefined ->
                    PFgateway_profile
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.DeleteGatewayProfileRequest'/3}).
'merge_msg_ns.DeleteGatewayProfileRequest'(
    #'ns.DeleteGatewayProfileRequest'{id = PFid},
    #'ns.DeleteGatewayProfileRequest'{id = NFid},
    _
) ->
    #'ns.DeleteGatewayProfileRequest'{
        id =
            if
                NFid =:= undefined -> PFid;
                true -> NFid
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.MulticastGroup'/3}).
'merge_msg_ns.MulticastGroup'(
    #'ns.MulticastGroup'{
        id = PFid,
        mc_addr = PFmc_addr,
        mc_nwk_s_key = PFmc_nwk_s_key,
        f_cnt = PFf_cnt,
        group_type = PFgroup_type,
        dr = PFdr,
        frequency = PFfrequency,
        ping_slot_period = PFping_slot_period,
        service_profile_id = PFservice_profile_id,
        routing_profile_id = PFrouting_profile_id
    },
    #'ns.MulticastGroup'{
        id = NFid,
        mc_addr = NFmc_addr,
        mc_nwk_s_key = NFmc_nwk_s_key,
        f_cnt = NFf_cnt,
        group_type = NFgroup_type,
        dr = NFdr,
        frequency = NFfrequency,
        ping_slot_period = NFping_slot_period,
        service_profile_id = NFservice_profile_id,
        routing_profile_id = NFrouting_profile_id
    },
    _
) ->
    #'ns.MulticastGroup'{
        id =
            if
                NFid =:= undefined -> PFid;
                true -> NFid
            end,
        mc_addr =
            if
                NFmc_addr =:= undefined -> PFmc_addr;
                true -> NFmc_addr
            end,
        mc_nwk_s_key =
            if
                NFmc_nwk_s_key =:= undefined -> PFmc_nwk_s_key;
                true -> NFmc_nwk_s_key
            end,
        f_cnt =
            if
                NFf_cnt =:= undefined -> PFf_cnt;
                true -> NFf_cnt
            end,
        group_type =
            if
                NFgroup_type =:= undefined -> PFgroup_type;
                true -> NFgroup_type
            end,
        dr =
            if
                NFdr =:= undefined -> PFdr;
                true -> NFdr
            end,
        frequency =
            if
                NFfrequency =:= undefined -> PFfrequency;
                true -> NFfrequency
            end,
        ping_slot_period =
            if
                NFping_slot_period =:= undefined -> PFping_slot_period;
                true -> NFping_slot_period
            end,
        service_profile_id =
            if
                NFservice_profile_id =:= undefined -> PFservice_profile_id;
                true -> NFservice_profile_id
            end,
        routing_profile_id =
            if
                NFrouting_profile_id =:= undefined -> PFrouting_profile_id;
                true -> NFrouting_profile_id
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.CreateMulticastGroupRequest'/3}).
'merge_msg_ns.CreateMulticastGroupRequest'(
    #'ns.CreateMulticastGroupRequest'{multicast_group = PFmulticast_group},
    #'ns.CreateMulticastGroupRequest'{multicast_group = NFmulticast_group},
    TrUserData
) ->
    #'ns.CreateMulticastGroupRequest'{
        multicast_group =
            if
                PFmulticast_group /= undefined, NFmulticast_group /= undefined ->
                    'merge_msg_ns.MulticastGroup'(PFmulticast_group, NFmulticast_group, TrUserData);
                PFmulticast_group == undefined ->
                    NFmulticast_group;
                NFmulticast_group == undefined ->
                    PFmulticast_group
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.CreateMulticastGroupResponse'/3}).
'merge_msg_ns.CreateMulticastGroupResponse'(
    #'ns.CreateMulticastGroupResponse'{id = PFid},
    #'ns.CreateMulticastGroupResponse'{id = NFid},
    _
) ->
    #'ns.CreateMulticastGroupResponse'{
        id =
            if
                NFid =:= undefined -> PFid;
                true -> NFid
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.GetMulticastGroupRequest'/3}).
'merge_msg_ns.GetMulticastGroupRequest'(
    #'ns.GetMulticastGroupRequest'{id = PFid},
    #'ns.GetMulticastGroupRequest'{id = NFid},
    _
) ->
    #'ns.GetMulticastGroupRequest'{
        id =
            if
                NFid =:= undefined -> PFid;
                true -> NFid
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.GetMulticastGroupResponse'/3}).
'merge_msg_ns.GetMulticastGroupResponse'(
    #'ns.GetMulticastGroupResponse'{
        multicast_group = PFmulticast_group,
        created_at = PFcreated_at,
        updated_at = PFupdated_at
    },
    #'ns.GetMulticastGroupResponse'{
        multicast_group = NFmulticast_group,
        created_at = NFcreated_at,
        updated_at = NFupdated_at
    },
    TrUserData
) ->
    #'ns.GetMulticastGroupResponse'{
        multicast_group =
            if
                PFmulticast_group /= undefined, NFmulticast_group /= undefined ->
                    'merge_msg_ns.MulticastGroup'(PFmulticast_group, NFmulticast_group, TrUserData);
                PFmulticast_group == undefined ->
                    NFmulticast_group;
                NFmulticast_group == undefined ->
                    PFmulticast_group
            end,
        created_at =
            if
                PFcreated_at /= undefined, NFcreated_at /= undefined ->
                    'merge_msg_google.protobuf.Timestamp'(PFcreated_at, NFcreated_at, TrUserData);
                PFcreated_at == undefined ->
                    NFcreated_at;
                NFcreated_at == undefined ->
                    PFcreated_at
            end,
        updated_at =
            if
                PFupdated_at /= undefined, NFupdated_at /= undefined ->
                    'merge_msg_google.protobuf.Timestamp'(PFupdated_at, NFupdated_at, TrUserData);
                PFupdated_at == undefined ->
                    NFupdated_at;
                NFupdated_at == undefined ->
                    PFupdated_at
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.UpdateMulticastGroupRequest'/3}).
'merge_msg_ns.UpdateMulticastGroupRequest'(
    #'ns.UpdateMulticastGroupRequest'{multicast_group = PFmulticast_group},
    #'ns.UpdateMulticastGroupRequest'{multicast_group = NFmulticast_group},
    TrUserData
) ->
    #'ns.UpdateMulticastGroupRequest'{
        multicast_group =
            if
                PFmulticast_group /= undefined, NFmulticast_group /= undefined ->
                    'merge_msg_ns.MulticastGroup'(PFmulticast_group, NFmulticast_group, TrUserData);
                PFmulticast_group == undefined ->
                    NFmulticast_group;
                NFmulticast_group == undefined ->
                    PFmulticast_group
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.DeleteMulticastGroupRequest'/3}).
'merge_msg_ns.DeleteMulticastGroupRequest'(
    #'ns.DeleteMulticastGroupRequest'{id = PFid},
    #'ns.DeleteMulticastGroupRequest'{id = NFid},
    _
) ->
    #'ns.DeleteMulticastGroupRequest'{
        id =
            if
                NFid =:= undefined -> PFid;
                true -> NFid
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.AddDeviceToMulticastGroupRequest'/3}).
'merge_msg_ns.AddDeviceToMulticastGroupRequest'(
    #'ns.AddDeviceToMulticastGroupRequest'{
        dev_eui = PFdev_eui,
        multicast_group_id = PFmulticast_group_id
    },
    #'ns.AddDeviceToMulticastGroupRequest'{
        dev_eui = NFdev_eui,
        multicast_group_id = NFmulticast_group_id
    },
    _
) ->
    #'ns.AddDeviceToMulticastGroupRequest'{
        dev_eui =
            if
                NFdev_eui =:= undefined -> PFdev_eui;
                true -> NFdev_eui
            end,
        multicast_group_id =
            if
                NFmulticast_group_id =:= undefined -> PFmulticast_group_id;
                true -> NFmulticast_group_id
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.RemoveDeviceFromMulticastGroupRequest'/3}).
'merge_msg_ns.RemoveDeviceFromMulticastGroupRequest'(
    #'ns.RemoveDeviceFromMulticastGroupRequest'{
        dev_eui = PFdev_eui,
        multicast_group_id = PFmulticast_group_id
    },
    #'ns.RemoveDeviceFromMulticastGroupRequest'{
        dev_eui = NFdev_eui,
        multicast_group_id = NFmulticast_group_id
    },
    _
) ->
    #'ns.RemoveDeviceFromMulticastGroupRequest'{
        dev_eui =
            if
                NFdev_eui =:= undefined -> PFdev_eui;
                true -> NFdev_eui
            end,
        multicast_group_id =
            if
                NFmulticast_group_id =:= undefined -> PFmulticast_group_id;
                true -> NFmulticast_group_id
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.MulticastQueueItem'/3}).
'merge_msg_ns.MulticastQueueItem'(
    #'ns.MulticastQueueItem'{
        multicast_group_id = PFmulticast_group_id,
        f_cnt = PFf_cnt,
        f_port = PFf_port,
        frm_payload = PFfrm_payload
    },
    #'ns.MulticastQueueItem'{
        multicast_group_id = NFmulticast_group_id,
        f_cnt = NFf_cnt,
        f_port = NFf_port,
        frm_payload = NFfrm_payload
    },
    _
) ->
    #'ns.MulticastQueueItem'{
        multicast_group_id =
            if
                NFmulticast_group_id =:= undefined -> PFmulticast_group_id;
                true -> NFmulticast_group_id
            end,
        f_cnt =
            if
                NFf_cnt =:= undefined -> PFf_cnt;
                true -> NFf_cnt
            end,
        f_port =
            if
                NFf_port =:= undefined -> PFf_port;
                true -> NFf_port
            end,
        frm_payload =
            if
                NFfrm_payload =:= undefined -> PFfrm_payload;
                true -> NFfrm_payload
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.EnqueueMulticastQueueItemRequest'/3}).
'merge_msg_ns.EnqueueMulticastQueueItemRequest'(
    #'ns.EnqueueMulticastQueueItemRequest'{multicast_queue_item = PFmulticast_queue_item},
    #'ns.EnqueueMulticastQueueItemRequest'{multicast_queue_item = NFmulticast_queue_item},
    TrUserData
) ->
    #'ns.EnqueueMulticastQueueItemRequest'{
        multicast_queue_item =
            if
                PFmulticast_queue_item /= undefined, NFmulticast_queue_item /= undefined ->
                    'merge_msg_ns.MulticastQueueItem'(
                        PFmulticast_queue_item,
                        NFmulticast_queue_item,
                        TrUserData
                    );
                PFmulticast_queue_item == undefined ->
                    NFmulticast_queue_item;
                NFmulticast_queue_item == undefined ->
                    PFmulticast_queue_item
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.FlushMulticastQueueForMulticastGroupRequest'/3}).
'merge_msg_ns.FlushMulticastQueueForMulticastGroupRequest'(
    #'ns.FlushMulticastQueueForMulticastGroupRequest'{multicast_group_id = PFmulticast_group_id},
    #'ns.FlushMulticastQueueForMulticastGroupRequest'{multicast_group_id = NFmulticast_group_id},
    _
) ->
    #'ns.FlushMulticastQueueForMulticastGroupRequest'{
        multicast_group_id =
            if
                NFmulticast_group_id =:= undefined -> PFmulticast_group_id;
                true -> NFmulticast_group_id
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.GetMulticastQueueItemsForMulticastGroupRequest'/3}).
'merge_msg_ns.GetMulticastQueueItemsForMulticastGroupRequest'(
    #'ns.GetMulticastQueueItemsForMulticastGroupRequest'{multicast_group_id = PFmulticast_group_id},
    #'ns.GetMulticastQueueItemsForMulticastGroupRequest'{multicast_group_id = NFmulticast_group_id},
    _
) ->
    #'ns.GetMulticastQueueItemsForMulticastGroupRequest'{
        multicast_group_id =
            if
                NFmulticast_group_id =:= undefined -> PFmulticast_group_id;
                true -> NFmulticast_group_id
            end
    }.

-compile(
    {nowarn_unused_function, 'merge_msg_ns.GetMulticastQueueItemsForMulticastGroupResponse'/3}
).
'merge_msg_ns.GetMulticastQueueItemsForMulticastGroupResponse'(
    #'ns.GetMulticastQueueItemsForMulticastGroupResponse'{
        multicast_queue_items = PFmulticast_queue_items
    },
    #'ns.GetMulticastQueueItemsForMulticastGroupResponse'{
        multicast_queue_items = NFmulticast_queue_items
    },
    TrUserData
) ->
    #'ns.GetMulticastQueueItemsForMulticastGroupResponse'{
        multicast_queue_items =
            if
                PFmulticast_queue_items /= undefined, NFmulticast_queue_items /= undefined ->
                    'erlang_++'(PFmulticast_queue_items, NFmulticast_queue_items, TrUserData);
                PFmulticast_queue_items == undefined ->
                    NFmulticast_queue_items;
                NFmulticast_queue_items == undefined ->
                    PFmulticast_queue_items
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.GetADRAlgorithmsResponse'/3}).
'merge_msg_ns.GetADRAlgorithmsResponse'(
    #'ns.GetADRAlgorithmsResponse'{adr_algorithms = PFadr_algorithms},
    #'ns.GetADRAlgorithmsResponse'{adr_algorithms = NFadr_algorithms},
    TrUserData
) ->
    #'ns.GetADRAlgorithmsResponse'{
        adr_algorithms =
            if
                PFadr_algorithms /= undefined, NFadr_algorithms /= undefined ->
                    'erlang_++'(PFadr_algorithms, NFadr_algorithms, TrUserData);
                PFadr_algorithms == undefined ->
                    NFadr_algorithms;
                NFadr_algorithms == undefined ->
                    PFadr_algorithms
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.ADRAlgorithm'/3}).
'merge_msg_ns.ADRAlgorithm'(
    #'ns.ADRAlgorithm'{id = PFid, name = PFname},
    #'ns.ADRAlgorithm'{id = NFid, name = NFname},
    _
) ->
    #'ns.ADRAlgorithm'{
        id =
            if
                NFid =:= undefined -> PFid;
                true -> NFid
            end,
        name =
            if
                NFname =:= undefined -> PFname;
                true -> NFname
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_google.protobuf.Timestamp'/3}).
'merge_msg_google.protobuf.Timestamp'(
    #'google.protobuf.Timestamp'{seconds = PFseconds, nanos = PFnanos},
    #'google.protobuf.Timestamp'{seconds = NFseconds, nanos = NFnanos},
    _
) ->
    #'google.protobuf.Timestamp'{
        seconds =
            if
                NFseconds =:= undefined -> PFseconds;
                true -> NFseconds
            end,
        nanos =
            if
                NFnanos =:= undefined -> PFnanos;
                true -> NFnanos
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_google.protobuf.Duration'/3}).
'merge_msg_google.protobuf.Duration'(
    #'google.protobuf.Duration'{seconds = PFseconds, nanos = PFnanos},
    #'google.protobuf.Duration'{seconds = NFseconds, nanos = NFnanos},
    _
) ->
    #'google.protobuf.Duration'{
        seconds =
            if
                NFseconds =:= undefined -> PFseconds;
                true -> NFseconds
            end,
        nanos =
            if
                NFnanos =:= undefined -> PFnanos;
                true -> NFnanos
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_google.protobuf.Empty'/3}).
'merge_msg_google.protobuf.Empty'(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function, 'merge_msg_common.KeyEnvelope'/3}).
'merge_msg_common.KeyEnvelope'(
    #'common.KeyEnvelope'{kek_label = PFkek_label, aes_key = PFaes_key},
    #'common.KeyEnvelope'{kek_label = NFkek_label, aes_key = NFaes_key},
    _
) ->
    #'common.KeyEnvelope'{
        kek_label =
            if
                NFkek_label =:= undefined -> PFkek_label;
                true -> NFkek_label
            end,
        aes_key =
            if
                NFaes_key =:= undefined -> PFaes_key;
                true -> NFaes_key
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_common.Location'/3}).
'merge_msg_common.Location'(
    #'common.Location'{
        latitude = PFlatitude,
        longitude = PFlongitude,
        altitude = PFaltitude,
        source = PFsource,
        accuracy = PFaccuracy
    },
    #'common.Location'{
        latitude = NFlatitude,
        longitude = NFlongitude,
        altitude = NFaltitude,
        source = NFsource,
        accuracy = NFaccuracy
    },
    _
) ->
    #'common.Location'{
        latitude =
            if
                NFlatitude =:= undefined -> PFlatitude;
                true -> NFlatitude
            end,
        longitude =
            if
                NFlongitude =:= undefined -> PFlongitude;
                true -> NFlongitude
            end,
        altitude =
            if
                NFaltitude =:= undefined -> PFaltitude;
                true -> NFaltitude
            end,
        source =
            if
                NFsource =:= undefined -> PFsource;
                true -> NFsource
            end,
        accuracy =
            if
                NFaccuracy =:= undefined -> PFaccuracy;
                true -> NFaccuracy
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.UplinkTXInfo'/3}).
'merge_msg_gw.UplinkTXInfo'(
    #'gw.UplinkTXInfo'{
        frequency = PFfrequency,
        modulation = PFmodulation,
        modulation_info = PFmodulation_info
    },
    #'gw.UplinkTXInfo'{
        frequency = NFfrequency,
        modulation = NFmodulation,
        modulation_info = NFmodulation_info
    },
    TrUserData
) ->
    #'gw.UplinkTXInfo'{
        frequency =
            if
                NFfrequency =:= undefined -> PFfrequency;
                true -> NFfrequency
            end,
        modulation =
            if
                NFmodulation =:= undefined -> PFmodulation;
                true -> NFmodulation
            end,
        modulation_info =
            case {PFmodulation_info, NFmodulation_info} of
                {{lora_modulation_info, OPFmodulation_info},
                    {lora_modulation_info, ONFmodulation_info}} ->
                    {lora_modulation_info,
                        'merge_msg_gw.LoRaModulationInfo'(
                            OPFmodulation_info,
                            ONFmodulation_info,
                            TrUserData
                        )};
                {{fsk_modulation_info, OPFmodulation_info},
                    {fsk_modulation_info, ONFmodulation_info}} ->
                    {fsk_modulation_info,
                        'merge_msg_gw.FSKModulationInfo'(
                            OPFmodulation_info,
                            ONFmodulation_info,
                            TrUserData
                        )};
                {_, undefined} ->
                    PFmodulation_info;
                _ ->
                    NFmodulation_info
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.LoRaModulationInfo'/3}).
'merge_msg_gw.LoRaModulationInfo'(
    #'gw.LoRaModulationInfo'{
        bandwidth = PFbandwidth,
        spreading_factor = PFspreading_factor,
        code_rate = PFcode_rate,
        polarization_inversion = PFpolarization_inversion
    },
    #'gw.LoRaModulationInfo'{
        bandwidth = NFbandwidth,
        spreading_factor = NFspreading_factor,
        code_rate = NFcode_rate,
        polarization_inversion = NFpolarization_inversion
    },
    _
) ->
    #'gw.LoRaModulationInfo'{
        bandwidth =
            if
                NFbandwidth =:= undefined -> PFbandwidth;
                true -> NFbandwidth
            end,
        spreading_factor =
            if
                NFspreading_factor =:= undefined -> PFspreading_factor;
                true -> NFspreading_factor
            end,
        code_rate =
            if
                NFcode_rate =:= undefined -> PFcode_rate;
                true -> NFcode_rate
            end,
        polarization_inversion =
            if
                NFpolarization_inversion =:= undefined -> PFpolarization_inversion;
                true -> NFpolarization_inversion
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.FSKModulationInfo'/3}).
'merge_msg_gw.FSKModulationInfo'(
    #'gw.FSKModulationInfo'{frequency_deviation = PFfrequency_deviation, datarate = PFdatarate},
    #'gw.FSKModulationInfo'{frequency_deviation = NFfrequency_deviation, datarate = NFdatarate},
    _
) ->
    #'gw.FSKModulationInfo'{
        frequency_deviation =
            if
                NFfrequency_deviation =:= undefined -> PFfrequency_deviation;
                true -> NFfrequency_deviation
            end,
        datarate =
            if
                NFdatarate =:= undefined -> PFdatarate;
                true -> NFdatarate
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.EncryptedFineTimestamp'/3}).
'merge_msg_gw.EncryptedFineTimestamp'(
    #'gw.EncryptedFineTimestamp'{
        aes_key_index = PFaes_key_index,
        encrypted_ns = PFencrypted_ns,
        fpga_id = PFfpga_id
    },
    #'gw.EncryptedFineTimestamp'{
        aes_key_index = NFaes_key_index,
        encrypted_ns = NFencrypted_ns,
        fpga_id = NFfpga_id
    },
    _
) ->
    #'gw.EncryptedFineTimestamp'{
        aes_key_index =
            if
                NFaes_key_index =:= undefined -> PFaes_key_index;
                true -> NFaes_key_index
            end,
        encrypted_ns =
            if
                NFencrypted_ns =:= undefined -> PFencrypted_ns;
                true -> NFencrypted_ns
            end,
        fpga_id =
            if
                NFfpga_id =:= undefined -> PFfpga_id;
                true -> NFfpga_id
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.PlainFineTimestamp'/3}).
'merge_msg_gw.PlainFineTimestamp'(
    #'gw.PlainFineTimestamp'{time = PFtime},
    #'gw.PlainFineTimestamp'{time = NFtime},
    TrUserData
) ->
    #'gw.PlainFineTimestamp'{
        time =
            if
                PFtime /= undefined, NFtime /= undefined ->
                    'merge_msg_google.protobuf.Timestamp'(PFtime, NFtime, TrUserData);
                PFtime == undefined ->
                    NFtime;
                NFtime == undefined ->
                    PFtime
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.GatewayStats'/3}).
'merge_msg_gw.GatewayStats'(
    #'gw.GatewayStats'{
        gateway_id = PFgateway_id,
        ip = PFip,
        time = PFtime,
        location = PFlocation,
        config_version = PFconfig_version,
        rx_packets_received = PFrx_packets_received,
        rx_packets_received_ok = PFrx_packets_received_ok,
        tx_packets_received = PFtx_packets_received,
        tx_packets_emitted = PFtx_packets_emitted,
        meta_data = PFmeta_data,
        stats_id = PFstats_id
    },
    #'gw.GatewayStats'{
        gateway_id = NFgateway_id,
        ip = NFip,
        time = NFtime,
        location = NFlocation,
        config_version = NFconfig_version,
        rx_packets_received = NFrx_packets_received,
        rx_packets_received_ok = NFrx_packets_received_ok,
        tx_packets_received = NFtx_packets_received,
        tx_packets_emitted = NFtx_packets_emitted,
        meta_data = NFmeta_data,
        stats_id = NFstats_id
    },
    TrUserData
) ->
    #'gw.GatewayStats'{
        gateway_id =
            if
                NFgateway_id =:= undefined -> PFgateway_id;
                true -> NFgateway_id
            end,
        ip =
            if
                NFip =:= undefined -> PFip;
                true -> NFip
            end,
        time =
            if
                PFtime /= undefined, NFtime /= undefined ->
                    'merge_msg_google.protobuf.Timestamp'(PFtime, NFtime, TrUserData);
                PFtime == undefined ->
                    NFtime;
                NFtime == undefined ->
                    PFtime
            end,
        location =
            if
                PFlocation /= undefined, NFlocation /= undefined ->
                    'merge_msg_common.Location'(PFlocation, NFlocation, TrUserData);
                PFlocation == undefined ->
                    NFlocation;
                NFlocation == undefined ->
                    PFlocation
            end,
        config_version =
            if
                NFconfig_version =:= undefined -> PFconfig_version;
                true -> NFconfig_version
            end,
        rx_packets_received =
            if
                NFrx_packets_received =:= undefined -> PFrx_packets_received;
                true -> NFrx_packets_received
            end,
        rx_packets_received_ok =
            if
                NFrx_packets_received_ok =:= undefined -> PFrx_packets_received_ok;
                true -> NFrx_packets_received_ok
            end,
        tx_packets_received =
            if
                NFtx_packets_received =:= undefined -> PFtx_packets_received;
                true -> NFtx_packets_received
            end,
        tx_packets_emitted =
            if
                NFtx_packets_emitted =:= undefined -> PFtx_packets_emitted;
                true -> NFtx_packets_emitted
            end,
        meta_data =
            if
                PFmeta_data /= undefined, NFmeta_data /= undefined ->
                    'tr_merge_gw.GatewayStats.meta_data'(PFmeta_data, NFmeta_data, TrUserData);
                PFmeta_data == undefined ->
                    NFmeta_data;
                NFmeta_data == undefined ->
                    PFmeta_data
            end,
        stats_id =
            if
                NFstats_id =:= undefined -> PFstats_id;
                true -> NFstats_id
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.UplinkRXInfo'/3}).
'merge_msg_gw.UplinkRXInfo'(
    #'gw.UplinkRXInfo'{
        gateway_id = PFgateway_id,
        time = PFtime,
        time_since_gps_epoch = PFtime_since_gps_epoch,
        rssi = PFrssi,
        lora_snr = PFlora_snr,
        channel = PFchannel,
        rf_chain = PFrf_chain,
        board = PFboard,
        antenna = PFantenna,
        location = PFlocation,
        fine_timestamp_type = PFfine_timestamp_type,
        fine_timestamp = PFfine_timestamp,
        context = PFcontext,
        uplink_id = PFuplink_id,
        crc_status = PFcrc_status
    },
    #'gw.UplinkRXInfo'{
        gateway_id = NFgateway_id,
        time = NFtime,
        time_since_gps_epoch = NFtime_since_gps_epoch,
        rssi = NFrssi,
        lora_snr = NFlora_snr,
        channel = NFchannel,
        rf_chain = NFrf_chain,
        board = NFboard,
        antenna = NFantenna,
        location = NFlocation,
        fine_timestamp_type = NFfine_timestamp_type,
        fine_timestamp = NFfine_timestamp,
        context = NFcontext,
        uplink_id = NFuplink_id,
        crc_status = NFcrc_status
    },
    TrUserData
) ->
    #'gw.UplinkRXInfo'{
        gateway_id =
            if
                NFgateway_id =:= undefined -> PFgateway_id;
                true -> NFgateway_id
            end,
        time =
            if
                PFtime /= undefined, NFtime /= undefined ->
                    'merge_msg_google.protobuf.Timestamp'(PFtime, NFtime, TrUserData);
                PFtime == undefined ->
                    NFtime;
                NFtime == undefined ->
                    PFtime
            end,
        time_since_gps_epoch =
            if
                PFtime_since_gps_epoch /= undefined, NFtime_since_gps_epoch /= undefined ->
                    'merge_msg_google.protobuf.Duration'(
                        PFtime_since_gps_epoch,
                        NFtime_since_gps_epoch,
                        TrUserData
                    );
                PFtime_since_gps_epoch == undefined ->
                    NFtime_since_gps_epoch;
                NFtime_since_gps_epoch == undefined ->
                    PFtime_since_gps_epoch
            end,
        rssi =
            if
                NFrssi =:= undefined -> PFrssi;
                true -> NFrssi
            end,
        lora_snr =
            if
                NFlora_snr =:= undefined -> PFlora_snr;
                true -> NFlora_snr
            end,
        channel =
            if
                NFchannel =:= undefined -> PFchannel;
                true -> NFchannel
            end,
        rf_chain =
            if
                NFrf_chain =:= undefined -> PFrf_chain;
                true -> NFrf_chain
            end,
        board =
            if
                NFboard =:= undefined -> PFboard;
                true -> NFboard
            end,
        antenna =
            if
                NFantenna =:= undefined -> PFantenna;
                true -> NFantenna
            end,
        location =
            if
                PFlocation /= undefined, NFlocation /= undefined ->
                    'merge_msg_common.Location'(PFlocation, NFlocation, TrUserData);
                PFlocation == undefined ->
                    NFlocation;
                NFlocation == undefined ->
                    PFlocation
            end,
        fine_timestamp_type =
            if
                NFfine_timestamp_type =:= undefined -> PFfine_timestamp_type;
                true -> NFfine_timestamp_type
            end,
        fine_timestamp =
            case {PFfine_timestamp, NFfine_timestamp} of
                {{encrypted_fine_timestamp, OPFfine_timestamp},
                    {encrypted_fine_timestamp, ONFfine_timestamp}} ->
                    {encrypted_fine_timestamp,
                        'merge_msg_gw.EncryptedFineTimestamp'(
                            OPFfine_timestamp,
                            ONFfine_timestamp,
                            TrUserData
                        )};
                {{plain_fine_timestamp, OPFfine_timestamp},
                    {plain_fine_timestamp, ONFfine_timestamp}} ->
                    {plain_fine_timestamp,
                        'merge_msg_gw.PlainFineTimestamp'(
                            OPFfine_timestamp,
                            ONFfine_timestamp,
                            TrUserData
                        )};
                {_, undefined} ->
                    PFfine_timestamp;
                _ ->
                    NFfine_timestamp
            end,
        context =
            if
                NFcontext =:= undefined -> PFcontext;
                true -> NFcontext
            end,
        uplink_id =
            if
                NFuplink_id =:= undefined -> PFuplink_id;
                true -> NFuplink_id
            end,
        crc_status =
            if
                NFcrc_status =:= undefined -> PFcrc_status;
                true -> NFcrc_status
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.DownlinkTXInfo'/3}).
'merge_msg_gw.DownlinkTXInfo'(
    #'gw.DownlinkTXInfo'{
        gateway_id = PFgateway_id,
        frequency = PFfrequency,
        power = PFpower,
        modulation = PFmodulation,
        modulation_info = PFmodulation_info,
        board = PFboard,
        antenna = PFantenna,
        timing = PFtiming,
        timing_info = PFtiming_info,
        context = PFcontext
    },
    #'gw.DownlinkTXInfo'{
        gateway_id = NFgateway_id,
        frequency = NFfrequency,
        power = NFpower,
        modulation = NFmodulation,
        modulation_info = NFmodulation_info,
        board = NFboard,
        antenna = NFantenna,
        timing = NFtiming,
        timing_info = NFtiming_info,
        context = NFcontext
    },
    TrUserData
) ->
    #'gw.DownlinkTXInfo'{
        gateway_id =
            if
                NFgateway_id =:= undefined -> PFgateway_id;
                true -> NFgateway_id
            end,
        frequency =
            if
                NFfrequency =:= undefined -> PFfrequency;
                true -> NFfrequency
            end,
        power =
            if
                NFpower =:= undefined -> PFpower;
                true -> NFpower
            end,
        modulation =
            if
                NFmodulation =:= undefined -> PFmodulation;
                true -> NFmodulation
            end,
        modulation_info =
            case {PFmodulation_info, NFmodulation_info} of
                {{lora_modulation_info, OPFmodulation_info},
                    {lora_modulation_info, ONFmodulation_info}} ->
                    {lora_modulation_info,
                        'merge_msg_gw.LoRaModulationInfo'(
                            OPFmodulation_info,
                            ONFmodulation_info,
                            TrUserData
                        )};
                {{fsk_modulation_info, OPFmodulation_info},
                    {fsk_modulation_info, ONFmodulation_info}} ->
                    {fsk_modulation_info,
                        'merge_msg_gw.FSKModulationInfo'(
                            OPFmodulation_info,
                            ONFmodulation_info,
                            TrUserData
                        )};
                {_, undefined} ->
                    PFmodulation_info;
                _ ->
                    NFmodulation_info
            end,
        board =
            if
                NFboard =:= undefined -> PFboard;
                true -> NFboard
            end,
        antenna =
            if
                NFantenna =:= undefined -> PFantenna;
                true -> NFantenna
            end,
        timing =
            if
                NFtiming =:= undefined -> PFtiming;
                true -> NFtiming
            end,
        timing_info =
            case {PFtiming_info, NFtiming_info} of
                {{immediately_timing_info, OPFtiming_info},
                    {immediately_timing_info, ONFtiming_info}} ->
                    {immediately_timing_info,
                        'merge_msg_gw.ImmediatelyTimingInfo'(
                            OPFtiming_info,
                            ONFtiming_info,
                            TrUserData
                        )};
                {{delay_timing_info, OPFtiming_info}, {delay_timing_info, ONFtiming_info}} ->
                    {delay_timing_info,
                        'merge_msg_gw.DelayTimingInfo'(OPFtiming_info, ONFtiming_info, TrUserData)};
                {{gps_epoch_timing_info, OPFtiming_info}, {gps_epoch_timing_info, ONFtiming_info}} ->
                    {gps_epoch_timing_info,
                        'merge_msg_gw.GPSEpochTimingInfo'(
                            OPFtiming_info,
                            ONFtiming_info,
                            TrUserData
                        )};
                {_, undefined} ->
                    PFtiming_info;
                _ ->
                    NFtiming_info
            end,
        context =
            if
                NFcontext =:= undefined -> PFcontext;
                true -> NFcontext
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.ImmediatelyTimingInfo'/3}).
'merge_msg_gw.ImmediatelyTimingInfo'(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function, 'merge_msg_gw.DelayTimingInfo'/3}).
'merge_msg_gw.DelayTimingInfo'(
    #'gw.DelayTimingInfo'{delay = PFdelay},
    #'gw.DelayTimingInfo'{delay = NFdelay},
    TrUserData
) ->
    #'gw.DelayTimingInfo'{
        delay =
            if
                PFdelay /= undefined, NFdelay /= undefined ->
                    'merge_msg_google.protobuf.Duration'(PFdelay, NFdelay, TrUserData);
                PFdelay == undefined ->
                    NFdelay;
                NFdelay == undefined ->
                    PFdelay
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.GPSEpochTimingInfo'/3}).
'merge_msg_gw.GPSEpochTimingInfo'(
    #'gw.GPSEpochTimingInfo'{time_since_gps_epoch = PFtime_since_gps_epoch},
    #'gw.GPSEpochTimingInfo'{time_since_gps_epoch = NFtime_since_gps_epoch},
    TrUserData
) ->
    #'gw.GPSEpochTimingInfo'{
        time_since_gps_epoch =
            if
                PFtime_since_gps_epoch /= undefined, NFtime_since_gps_epoch /= undefined ->
                    'merge_msg_google.protobuf.Duration'(
                        PFtime_since_gps_epoch,
                        NFtime_since_gps_epoch,
                        TrUserData
                    );
                PFtime_since_gps_epoch == undefined ->
                    NFtime_since_gps_epoch;
                NFtime_since_gps_epoch == undefined ->
                    PFtime_since_gps_epoch
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.UplinkFrame'/3}).
'merge_msg_gw.UplinkFrame'(
    #'gw.UplinkFrame'{phy_payload = PFphy_payload, tx_info = PFtx_info, rx_info = PFrx_info},
    #'gw.UplinkFrame'{phy_payload = NFphy_payload, tx_info = NFtx_info, rx_info = NFrx_info},
    TrUserData
) ->
    #'gw.UplinkFrame'{
        phy_payload =
            if
                NFphy_payload =:= undefined -> PFphy_payload;
                true -> NFphy_payload
            end,
        tx_info =
            if
                PFtx_info /= undefined, NFtx_info /= undefined ->
                    'merge_msg_gw.UplinkTXInfo'(PFtx_info, NFtx_info, TrUserData);
                PFtx_info == undefined ->
                    NFtx_info;
                NFtx_info == undefined ->
                    PFtx_info
            end,
        rx_info =
            if
                PFrx_info /= undefined, NFrx_info /= undefined ->
                    'merge_msg_gw.UplinkRXInfo'(PFrx_info, NFrx_info, TrUserData);
                PFrx_info == undefined ->
                    NFrx_info;
                NFrx_info == undefined ->
                    PFrx_info
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.UplinkFrameSet'/3}).
'merge_msg_gw.UplinkFrameSet'(
    #'gw.UplinkFrameSet'{phy_payload = PFphy_payload, tx_info = PFtx_info, rx_info = PFrx_info},
    #'gw.UplinkFrameSet'{phy_payload = NFphy_payload, tx_info = NFtx_info, rx_info = NFrx_info},
    TrUserData
) ->
    #'gw.UplinkFrameSet'{
        phy_payload =
            if
                NFphy_payload =:= undefined -> PFphy_payload;
                true -> NFphy_payload
            end,
        tx_info =
            if
                PFtx_info /= undefined, NFtx_info /= undefined ->
                    'merge_msg_gw.UplinkTXInfo'(PFtx_info, NFtx_info, TrUserData);
                PFtx_info == undefined ->
                    NFtx_info;
                NFtx_info == undefined ->
                    PFtx_info
            end,
        rx_info =
            if
                PFrx_info /= undefined, NFrx_info /= undefined ->
                    'erlang_++'(PFrx_info, NFrx_info, TrUserData);
                PFrx_info == undefined ->
                    NFrx_info;
                NFrx_info == undefined ->
                    PFrx_info
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.DownlinkFrame'/3}).
'merge_msg_gw.DownlinkFrame'(
    #'gw.DownlinkFrame'{
        phy_payload = PFphy_payload,
        tx_info = PFtx_info,
        token = PFtoken,
        downlink_id = PFdownlink_id,
        items = PFitems,
        gateway_id = PFgateway_id
    },
    #'gw.DownlinkFrame'{
        phy_payload = NFphy_payload,
        tx_info = NFtx_info,
        token = NFtoken,
        downlink_id = NFdownlink_id,
        items = NFitems,
        gateway_id = NFgateway_id
    },
    TrUserData
) ->
    #'gw.DownlinkFrame'{
        phy_payload =
            if
                NFphy_payload =:= undefined -> PFphy_payload;
                true -> NFphy_payload
            end,
        tx_info =
            if
                PFtx_info /= undefined, NFtx_info /= undefined ->
                    'merge_msg_gw.DownlinkTXInfo'(PFtx_info, NFtx_info, TrUserData);
                PFtx_info == undefined ->
                    NFtx_info;
                NFtx_info == undefined ->
                    PFtx_info
            end,
        token =
            if
                NFtoken =:= undefined -> PFtoken;
                true -> NFtoken
            end,
        downlink_id =
            if
                NFdownlink_id =:= undefined -> PFdownlink_id;
                true -> NFdownlink_id
            end,
        items =
            if
                PFitems /= undefined, NFitems /= undefined ->
                    'erlang_++'(PFitems, NFitems, TrUserData);
                PFitems == undefined ->
                    NFitems;
                NFitems == undefined ->
                    PFitems
            end,
        gateway_id =
            if
                NFgateway_id =:= undefined -> PFgateway_id;
                true -> NFgateway_id
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.DownlinkFrameItem'/3}).
'merge_msg_gw.DownlinkFrameItem'(
    #'gw.DownlinkFrameItem'{phy_payload = PFphy_payload, tx_info = PFtx_info},
    #'gw.DownlinkFrameItem'{phy_payload = NFphy_payload, tx_info = NFtx_info},
    TrUserData
) ->
    #'gw.DownlinkFrameItem'{
        phy_payload =
            if
                NFphy_payload =:= undefined -> PFphy_payload;
                true -> NFphy_payload
            end,
        tx_info =
            if
                PFtx_info /= undefined, NFtx_info /= undefined ->
                    'merge_msg_gw.DownlinkTXInfo'(PFtx_info, NFtx_info, TrUserData);
                PFtx_info == undefined ->
                    NFtx_info;
                NFtx_info == undefined ->
                    PFtx_info
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.DownlinkTXAck'/3}).
'merge_msg_gw.DownlinkTXAck'(
    #'gw.DownlinkTXAck'{
        gateway_id = PFgateway_id,
        token = PFtoken,
        error = PFerror,
        downlink_id = PFdownlink_id,
        items = PFitems
    },
    #'gw.DownlinkTXAck'{
        gateway_id = NFgateway_id,
        token = NFtoken,
        error = NFerror,
        downlink_id = NFdownlink_id,
        items = NFitems
    },
    TrUserData
) ->
    #'gw.DownlinkTXAck'{
        gateway_id =
            if
                NFgateway_id =:= undefined -> PFgateway_id;
                true -> NFgateway_id
            end,
        token =
            if
                NFtoken =:= undefined -> PFtoken;
                true -> NFtoken
            end,
        error =
            if
                NFerror =:= undefined -> PFerror;
                true -> NFerror
            end,
        downlink_id =
            if
                NFdownlink_id =:= undefined -> PFdownlink_id;
                true -> NFdownlink_id
            end,
        items =
            if
                PFitems /= undefined, NFitems /= undefined ->
                    'erlang_++'(PFitems, NFitems, TrUserData);
                PFitems == undefined ->
                    NFitems;
                NFitems == undefined ->
                    PFitems
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.DownlinkTXAckItem'/3}).
'merge_msg_gw.DownlinkTXAckItem'(
    #'gw.DownlinkTXAckItem'{status = PFstatus},
    #'gw.DownlinkTXAckItem'{status = NFstatus},
    _
) ->
    #'gw.DownlinkTXAckItem'{
        status =
            if
                NFstatus =:= undefined -> PFstatus;
                true -> NFstatus
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.GatewayConfiguration'/3}).
'merge_msg_gw.GatewayConfiguration'(
    #'gw.GatewayConfiguration'{
        gateway_id = PFgateway_id,
        version = PFversion,
        channels = PFchannels,
        stats_interval = PFstats_interval
    },
    #'gw.GatewayConfiguration'{
        gateway_id = NFgateway_id,
        version = NFversion,
        channels = NFchannels,
        stats_interval = NFstats_interval
    },
    TrUserData
) ->
    #'gw.GatewayConfiguration'{
        gateway_id =
            if
                NFgateway_id =:= undefined -> PFgateway_id;
                true -> NFgateway_id
            end,
        version =
            if
                NFversion =:= undefined -> PFversion;
                true -> NFversion
            end,
        channels =
            if
                PFchannels /= undefined, NFchannels /= undefined ->
                    'erlang_++'(PFchannels, NFchannels, TrUserData);
                PFchannels == undefined ->
                    NFchannels;
                NFchannels == undefined ->
                    PFchannels
            end,
        stats_interval =
            if
                PFstats_interval /= undefined, NFstats_interval /= undefined ->
                    'merge_msg_google.protobuf.Duration'(
                        PFstats_interval,
                        NFstats_interval,
                        TrUserData
                    );
                PFstats_interval == undefined ->
                    NFstats_interval;
                NFstats_interval == undefined ->
                    PFstats_interval
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.ChannelConfiguration'/3}).
'merge_msg_gw.ChannelConfiguration'(
    #'gw.ChannelConfiguration'{
        frequency = PFfrequency,
        modulation = PFmodulation,
        modulation_config = PFmodulation_config,
        board = PFboard,
        demodulator = PFdemodulator
    },
    #'gw.ChannelConfiguration'{
        frequency = NFfrequency,
        modulation = NFmodulation,
        modulation_config = NFmodulation_config,
        board = NFboard,
        demodulator = NFdemodulator
    },
    TrUserData
) ->
    #'gw.ChannelConfiguration'{
        frequency =
            if
                NFfrequency =:= undefined -> PFfrequency;
                true -> NFfrequency
            end,
        modulation =
            if
                NFmodulation =:= undefined -> PFmodulation;
                true -> NFmodulation
            end,
        modulation_config =
            case {PFmodulation_config, NFmodulation_config} of
                {{lora_modulation_config, OPFmodulation_config},
                    {lora_modulation_config, ONFmodulation_config}} ->
                    {lora_modulation_config,
                        'merge_msg_gw.LoRaModulationConfig'(
                            OPFmodulation_config,
                            ONFmodulation_config,
                            TrUserData
                        )};
                {{fsk_modulation_config, OPFmodulation_config},
                    {fsk_modulation_config, ONFmodulation_config}} ->
                    {fsk_modulation_config,
                        'merge_msg_gw.FSKModulationConfig'(
                            OPFmodulation_config,
                            ONFmodulation_config,
                            TrUserData
                        )};
                {_, undefined} ->
                    PFmodulation_config;
                _ ->
                    NFmodulation_config
            end,
        board =
            if
                NFboard =:= undefined -> PFboard;
                true -> NFboard
            end,
        demodulator =
            if
                NFdemodulator =:= undefined -> PFdemodulator;
                true -> NFdemodulator
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.LoRaModulationConfig'/3}).
'merge_msg_gw.LoRaModulationConfig'(
    #'gw.LoRaModulationConfig'{bandwidth = PFbandwidth, spreading_factors = PFspreading_factors},
    #'gw.LoRaModulationConfig'{bandwidth = NFbandwidth, spreading_factors = NFspreading_factors},
    TrUserData
) ->
    #'gw.LoRaModulationConfig'{
        bandwidth =
            if
                NFbandwidth =:= undefined -> PFbandwidth;
                true -> NFbandwidth
            end,
        spreading_factors =
            if
                PFspreading_factors /= undefined, NFspreading_factors /= undefined ->
                    'erlang_++'(PFspreading_factors, NFspreading_factors, TrUserData);
                PFspreading_factors == undefined ->
                    NFspreading_factors;
                NFspreading_factors == undefined ->
                    PFspreading_factors
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.FSKModulationConfig'/3}).
'merge_msg_gw.FSKModulationConfig'(
    #'gw.FSKModulationConfig'{bandwidth = PFbandwidth, bitrate = PFbitrate},
    #'gw.FSKModulationConfig'{bandwidth = NFbandwidth, bitrate = NFbitrate},
    _
) ->
    #'gw.FSKModulationConfig'{
        bandwidth =
            if
                NFbandwidth =:= undefined -> PFbandwidth;
                true -> NFbandwidth
            end,
        bitrate =
            if
                NFbitrate =:= undefined -> PFbitrate;
                true -> NFbitrate
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.GatewayCommandExecRequest'/3}).
'merge_msg_gw.GatewayCommandExecRequest'(
    #'gw.GatewayCommandExecRequest'{
        gateway_id = PFgateway_id,
        command = PFcommand,
        'ExecId' = PFExecId,
        stdin = PFstdin,
        environment = PFenvironment
    },
    #'gw.GatewayCommandExecRequest'{
        gateway_id = NFgateway_id,
        command = NFcommand,
        'ExecId' = NFExecId,
        stdin = NFstdin,
        environment = NFenvironment
    },
    TrUserData
) ->
    #'gw.GatewayCommandExecRequest'{
        gateway_id =
            if
                NFgateway_id =:= undefined -> PFgateway_id;
                true -> NFgateway_id
            end,
        command =
            if
                NFcommand =:= undefined -> PFcommand;
                true -> NFcommand
            end,
        'ExecId' =
            if
                NFExecId =:= undefined -> PFExecId;
                true -> NFExecId
            end,
        stdin =
            if
                NFstdin =:= undefined -> PFstdin;
                true -> NFstdin
            end,
        environment =
            if
                PFenvironment /= undefined, NFenvironment /= undefined ->
                    'tr_merge_gw.GatewayCommandExecRequest.environment'(
                        PFenvironment,
                        NFenvironment,
                        TrUserData
                    );
                PFenvironment == undefined ->
                    NFenvironment;
                NFenvironment == undefined ->
                    PFenvironment
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.GatewayCommandExecResponse'/3}).
'merge_msg_gw.GatewayCommandExecResponse'(
    #'gw.GatewayCommandExecResponse'{
        gateway_id = PFgateway_id,
        exec_id = PFexec_id,
        stdout = PFstdout,
        stderr = PFstderr,
        error = PFerror
    },
    #'gw.GatewayCommandExecResponse'{
        gateway_id = NFgateway_id,
        exec_id = NFexec_id,
        stdout = NFstdout,
        stderr = NFstderr,
        error = NFerror
    },
    _
) ->
    #'gw.GatewayCommandExecResponse'{
        gateway_id =
            if
                NFgateway_id =:= undefined -> PFgateway_id;
                true -> NFgateway_id
            end,
        exec_id =
            if
                NFexec_id =:= undefined -> PFexec_id;
                true -> NFexec_id
            end,
        stdout =
            if
                NFstdout =:= undefined -> PFstdout;
                true -> NFstdout
            end,
        stderr =
            if
                NFstderr =:= undefined -> PFstderr;
                true -> NFstderr
            end,
        error =
            if
                NFerror =:= undefined -> PFerror;
                true -> NFerror
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.RawPacketForwarderEvent'/3}).
'merge_msg_gw.RawPacketForwarderEvent'(
    #'gw.RawPacketForwarderEvent'{
        gateway_id = PFgateway_id,
        raw_id = PFraw_id,
        payload = PFpayload
    },
    #'gw.RawPacketForwarderEvent'{
        gateway_id = NFgateway_id,
        raw_id = NFraw_id,
        payload = NFpayload
    },
    _
) ->
    #'gw.RawPacketForwarderEvent'{
        gateway_id =
            if
                NFgateway_id =:= undefined -> PFgateway_id;
                true -> NFgateway_id
            end,
        raw_id =
            if
                NFraw_id =:= undefined -> PFraw_id;
                true -> NFraw_id
            end,
        payload =
            if
                NFpayload =:= undefined -> PFpayload;
                true -> NFpayload
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.RawPacketForwarderCommand'/3}).
'merge_msg_gw.RawPacketForwarderCommand'(
    #'gw.RawPacketForwarderCommand'{
        gateway_id = PFgateway_id,
        raw_id = PFraw_id,
        payload = PFpayload
    },
    #'gw.RawPacketForwarderCommand'{
        gateway_id = NFgateway_id,
        raw_id = NFraw_id,
        payload = NFpayload
    },
    _
) ->
    #'gw.RawPacketForwarderCommand'{
        gateway_id =
            if
                NFgateway_id =:= undefined -> PFgateway_id;
                true -> NFgateway_id
            end,
        raw_id =
            if
                NFraw_id =:= undefined -> PFraw_id;
                true -> NFraw_id
            end,
        payload =
            if
                NFpayload =:= undefined -> PFpayload;
                true -> NFpayload
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.ConnState'/3}).
'merge_msg_gw.ConnState'(
    #'gw.ConnState'{gateway_id = PFgateway_id, state = PFstate},
    #'gw.ConnState'{gateway_id = NFgateway_id, state = NFstate},
    _
) ->
    #'gw.ConnState'{
        gateway_id =
            if
                NFgateway_id =:= undefined -> PFgateway_id;
                true -> NFgateway_id
            end,
        state =
            if
                NFstate =:= undefined -> PFstate;
                true -> NFstate
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.ServiceProfile'/3}).
'merge_msg_ns.ServiceProfile'(
    #'ns.ServiceProfile'{
        id = PFid,
        ul_rate = PFul_rate,
        ul_bucket_size = PFul_bucket_size,
        ul_rate_policy = PFul_rate_policy,
        dl_rate = PFdl_rate,
        dl_bucket_size = PFdl_bucket_size,
        dl_rate_policy = PFdl_rate_policy,
        add_gw_metadata = PFadd_gw_metadata,
        dev_status_req_freq = PFdev_status_req_freq,
        report_dev_status_battery = PFreport_dev_status_battery,
        report_dev_status_margin = PFreport_dev_status_margin,
        dr_min = PFdr_min,
        dr_max = PFdr_max,
        channel_mask = PFchannel_mask,
        pr_allowed = PFpr_allowed,
        hr_allowed = PFhr_allowed,
        ra_allowed = PFra_allowed,
        nwk_geo_loc = PFnwk_geo_loc,
        target_per = PFtarget_per,
        min_gw_diversity = PFmin_gw_diversity,
        gws_private = PFgws_private
    },
    #'ns.ServiceProfile'{
        id = NFid,
        ul_rate = NFul_rate,
        ul_bucket_size = NFul_bucket_size,
        ul_rate_policy = NFul_rate_policy,
        dl_rate = NFdl_rate,
        dl_bucket_size = NFdl_bucket_size,
        dl_rate_policy = NFdl_rate_policy,
        add_gw_metadata = NFadd_gw_metadata,
        dev_status_req_freq = NFdev_status_req_freq,
        report_dev_status_battery = NFreport_dev_status_battery,
        report_dev_status_margin = NFreport_dev_status_margin,
        dr_min = NFdr_min,
        dr_max = NFdr_max,
        channel_mask = NFchannel_mask,
        pr_allowed = NFpr_allowed,
        hr_allowed = NFhr_allowed,
        ra_allowed = NFra_allowed,
        nwk_geo_loc = NFnwk_geo_loc,
        target_per = NFtarget_per,
        min_gw_diversity = NFmin_gw_diversity,
        gws_private = NFgws_private
    },
    _
) ->
    #'ns.ServiceProfile'{
        id =
            if
                NFid =:= undefined -> PFid;
                true -> NFid
            end,
        ul_rate =
            if
                NFul_rate =:= undefined -> PFul_rate;
                true -> NFul_rate
            end,
        ul_bucket_size =
            if
                NFul_bucket_size =:= undefined -> PFul_bucket_size;
                true -> NFul_bucket_size
            end,
        ul_rate_policy =
            if
                NFul_rate_policy =:= undefined -> PFul_rate_policy;
                true -> NFul_rate_policy
            end,
        dl_rate =
            if
                NFdl_rate =:= undefined -> PFdl_rate;
                true -> NFdl_rate
            end,
        dl_bucket_size =
            if
                NFdl_bucket_size =:= undefined -> PFdl_bucket_size;
                true -> NFdl_bucket_size
            end,
        dl_rate_policy =
            if
                NFdl_rate_policy =:= undefined -> PFdl_rate_policy;
                true -> NFdl_rate_policy
            end,
        add_gw_metadata =
            if
                NFadd_gw_metadata =:= undefined -> PFadd_gw_metadata;
                true -> NFadd_gw_metadata
            end,
        dev_status_req_freq =
            if
                NFdev_status_req_freq =:= undefined -> PFdev_status_req_freq;
                true -> NFdev_status_req_freq
            end,
        report_dev_status_battery =
            if
                NFreport_dev_status_battery =:= undefined -> PFreport_dev_status_battery;
                true -> NFreport_dev_status_battery
            end,
        report_dev_status_margin =
            if
                NFreport_dev_status_margin =:= undefined -> PFreport_dev_status_margin;
                true -> NFreport_dev_status_margin
            end,
        dr_min =
            if
                NFdr_min =:= undefined -> PFdr_min;
                true -> NFdr_min
            end,
        dr_max =
            if
                NFdr_max =:= undefined -> PFdr_max;
                true -> NFdr_max
            end,
        channel_mask =
            if
                NFchannel_mask =:= undefined -> PFchannel_mask;
                true -> NFchannel_mask
            end,
        pr_allowed =
            if
                NFpr_allowed =:= undefined -> PFpr_allowed;
                true -> NFpr_allowed
            end,
        hr_allowed =
            if
                NFhr_allowed =:= undefined -> PFhr_allowed;
                true -> NFhr_allowed
            end,
        ra_allowed =
            if
                NFra_allowed =:= undefined -> PFra_allowed;
                true -> NFra_allowed
            end,
        nwk_geo_loc =
            if
                NFnwk_geo_loc =:= undefined -> PFnwk_geo_loc;
                true -> NFnwk_geo_loc
            end,
        target_per =
            if
                NFtarget_per =:= undefined -> PFtarget_per;
                true -> NFtarget_per
            end,
        min_gw_diversity =
            if
                NFmin_gw_diversity =:= undefined -> PFmin_gw_diversity;
                true -> NFmin_gw_diversity
            end,
        gws_private =
            if
                NFgws_private =:= undefined -> PFgws_private;
                true -> NFgws_private
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.DeviceProfile'/3}).
'merge_msg_ns.DeviceProfile'(
    #'ns.DeviceProfile'{
        id = PFid,
        supports_class_b = PFsupports_class_b,
        class_b_timeout = PFclass_b_timeout,
        ping_slot_period = PFping_slot_period,
        ping_slot_dr = PFping_slot_dr,
        ping_slot_freq = PFping_slot_freq,
        supports_class_c = PFsupports_class_c,
        class_c_timeout = PFclass_c_timeout,
        mac_version = PFmac_version,
        reg_params_revision = PFreg_params_revision,
        rx_delay_1 = PFrx_delay_1,
        rx_dr_offset_1 = PFrx_dr_offset_1,
        rx_datarate_2 = PFrx_datarate_2,
        rx_freq_2 = PFrx_freq_2,
        factory_preset_freqs = PFfactory_preset_freqs,
        max_eirp = PFmax_eirp,
        max_duty_cycle = PFmax_duty_cycle,
        supports_join = PFsupports_join,
        rf_region = PFrf_region,
        supports_32bit_f_cnt = PFsupports_32bit_f_cnt,
        adr_algorithm_id = PFadr_algorithm_id
    },
    #'ns.DeviceProfile'{
        id = NFid,
        supports_class_b = NFsupports_class_b,
        class_b_timeout = NFclass_b_timeout,
        ping_slot_period = NFping_slot_period,
        ping_slot_dr = NFping_slot_dr,
        ping_slot_freq = NFping_slot_freq,
        supports_class_c = NFsupports_class_c,
        class_c_timeout = NFclass_c_timeout,
        mac_version = NFmac_version,
        reg_params_revision = NFreg_params_revision,
        rx_delay_1 = NFrx_delay_1,
        rx_dr_offset_1 = NFrx_dr_offset_1,
        rx_datarate_2 = NFrx_datarate_2,
        rx_freq_2 = NFrx_freq_2,
        factory_preset_freqs = NFfactory_preset_freqs,
        max_eirp = NFmax_eirp,
        max_duty_cycle = NFmax_duty_cycle,
        supports_join = NFsupports_join,
        rf_region = NFrf_region,
        supports_32bit_f_cnt = NFsupports_32bit_f_cnt,
        adr_algorithm_id = NFadr_algorithm_id
    },
    TrUserData
) ->
    #'ns.DeviceProfile'{
        id =
            if
                NFid =:= undefined -> PFid;
                true -> NFid
            end,
        supports_class_b =
            if
                NFsupports_class_b =:= undefined -> PFsupports_class_b;
                true -> NFsupports_class_b
            end,
        class_b_timeout =
            if
                NFclass_b_timeout =:= undefined -> PFclass_b_timeout;
                true -> NFclass_b_timeout
            end,
        ping_slot_period =
            if
                NFping_slot_period =:= undefined -> PFping_slot_period;
                true -> NFping_slot_period
            end,
        ping_slot_dr =
            if
                NFping_slot_dr =:= undefined -> PFping_slot_dr;
                true -> NFping_slot_dr
            end,
        ping_slot_freq =
            if
                NFping_slot_freq =:= undefined -> PFping_slot_freq;
                true -> NFping_slot_freq
            end,
        supports_class_c =
            if
                NFsupports_class_c =:= undefined -> PFsupports_class_c;
                true -> NFsupports_class_c
            end,
        class_c_timeout =
            if
                NFclass_c_timeout =:= undefined -> PFclass_c_timeout;
                true -> NFclass_c_timeout
            end,
        mac_version =
            if
                NFmac_version =:= undefined -> PFmac_version;
                true -> NFmac_version
            end,
        reg_params_revision =
            if
                NFreg_params_revision =:= undefined -> PFreg_params_revision;
                true -> NFreg_params_revision
            end,
        rx_delay_1 =
            if
                NFrx_delay_1 =:= undefined -> PFrx_delay_1;
                true -> NFrx_delay_1
            end,
        rx_dr_offset_1 =
            if
                NFrx_dr_offset_1 =:= undefined -> PFrx_dr_offset_1;
                true -> NFrx_dr_offset_1
            end,
        rx_datarate_2 =
            if
                NFrx_datarate_2 =:= undefined -> PFrx_datarate_2;
                true -> NFrx_datarate_2
            end,
        rx_freq_2 =
            if
                NFrx_freq_2 =:= undefined -> PFrx_freq_2;
                true -> NFrx_freq_2
            end,
        factory_preset_freqs =
            if
                PFfactory_preset_freqs /= undefined, NFfactory_preset_freqs /= undefined ->
                    'erlang_++'(PFfactory_preset_freqs, NFfactory_preset_freqs, TrUserData);
                PFfactory_preset_freqs == undefined ->
                    NFfactory_preset_freqs;
                NFfactory_preset_freqs == undefined ->
                    PFfactory_preset_freqs
            end,
        max_eirp =
            if
                NFmax_eirp =:= undefined -> PFmax_eirp;
                true -> NFmax_eirp
            end,
        max_duty_cycle =
            if
                NFmax_duty_cycle =:= undefined -> PFmax_duty_cycle;
                true -> NFmax_duty_cycle
            end,
        supports_join =
            if
                NFsupports_join =:= undefined -> PFsupports_join;
                true -> NFsupports_join
            end,
        rf_region =
            if
                NFrf_region =:= undefined -> PFrf_region;
                true -> NFrf_region
            end,
        supports_32bit_f_cnt =
            if
                NFsupports_32bit_f_cnt =:= undefined -> PFsupports_32bit_f_cnt;
                true -> NFsupports_32bit_f_cnt
            end,
        adr_algorithm_id =
            if
                NFadr_algorithm_id =:= undefined -> PFadr_algorithm_id;
                true -> NFadr_algorithm_id
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_ns.RoutingProfile'/3}).
'merge_msg_ns.RoutingProfile'(
    #'ns.RoutingProfile'{
        id = PFid,
        as_id = PFas_id,
        ca_cert = PFca_cert,
        tls_cert = PFtls_cert,
        tls_key = PFtls_key
    },
    #'ns.RoutingProfile'{
        id = NFid,
        as_id = NFas_id,
        ca_cert = NFca_cert,
        tls_cert = NFtls_cert,
        tls_key = NFtls_key
    },
    _
) ->
    #'ns.RoutingProfile'{
        id =
            if
                NFid =:= undefined -> PFid;
                true -> NFid
            end,
        as_id =
            if
                NFas_id =:= undefined -> PFas_id;
                true -> NFas_id
            end,
        ca_cert =
            if
                NFca_cert =:= undefined -> PFca_cert;
                true -> NFca_cert
            end,
        tls_cert =
            if
                NFtls_cert =:= undefined -> PFtls_cert;
                true -> NFtls_cert
            end,
        tls_key =
            if
                NFtls_key =:= undefined -> PFtls_key;
                true -> NFtls_key
            end
    }.

verify_msg(Msg) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), []);
verify_msg(X) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'ns.CreateServiceProfileRequest' ->
            'v_msg_ns.CreateServiceProfileRequest'(Msg, [MsgName], TrUserData);
        'ns.CreateServiceProfileResponse' ->
            'v_msg_ns.CreateServiceProfileResponse'(Msg, [MsgName], TrUserData);
        'ns.GetServiceProfileRequest' ->
            'v_msg_ns.GetServiceProfileRequest'(Msg, [MsgName], TrUserData);
        'ns.GetServiceProfileResponse' ->
            'v_msg_ns.GetServiceProfileResponse'(Msg, [MsgName], TrUserData);
        'ns.UpdateServiceProfileRequest' ->
            'v_msg_ns.UpdateServiceProfileRequest'(Msg, [MsgName], TrUserData);
        'ns.DeleteServiceProfileRequest' ->
            'v_msg_ns.DeleteServiceProfileRequest'(Msg, [MsgName], TrUserData);
        'ns.CreateRoutingProfileRequest' ->
            'v_msg_ns.CreateRoutingProfileRequest'(Msg, [MsgName], TrUserData);
        'ns.CreateRoutingProfileResponse' ->
            'v_msg_ns.CreateRoutingProfileResponse'(Msg, [MsgName], TrUserData);
        'ns.GetRoutingProfileRequest' ->
            'v_msg_ns.GetRoutingProfileRequest'(Msg, [MsgName], TrUserData);
        'ns.GetRoutingProfileResponse' ->
            'v_msg_ns.GetRoutingProfileResponse'(Msg, [MsgName], TrUserData);
        'ns.UpdateRoutingProfileRequest' ->
            'v_msg_ns.UpdateRoutingProfileRequest'(Msg, [MsgName], TrUserData);
        'ns.DeleteRoutingProfileRequest' ->
            'v_msg_ns.DeleteRoutingProfileRequest'(Msg, [MsgName], TrUserData);
        'ns.CreateDeviceProfileRequest' ->
            'v_msg_ns.CreateDeviceProfileRequest'(Msg, [MsgName], TrUserData);
        'ns.CreateDeviceProfileResponse' ->
            'v_msg_ns.CreateDeviceProfileResponse'(Msg, [MsgName], TrUserData);
        'ns.GetDeviceProfileRequest' ->
            'v_msg_ns.GetDeviceProfileRequest'(Msg, [MsgName], TrUserData);
        'ns.GetDeviceProfileResponse' ->
            'v_msg_ns.GetDeviceProfileResponse'(Msg, [MsgName], TrUserData);
        'ns.UpdateDeviceProfileRequest' ->
            'v_msg_ns.UpdateDeviceProfileRequest'(Msg, [MsgName], TrUserData);
        'ns.DeleteDeviceProfileRequest' ->
            'v_msg_ns.DeleteDeviceProfileRequest'(Msg, [MsgName], TrUserData);
        'ns.Device' ->
            'v_msg_ns.Device'(Msg, [MsgName], TrUserData);
        'ns.CreateDeviceRequest' ->
            'v_msg_ns.CreateDeviceRequest'(Msg, [MsgName], TrUserData);
        'ns.GetDeviceRequest' ->
            'v_msg_ns.GetDeviceRequest'(Msg, [MsgName], TrUserData);
        'ns.GetDeviceResponse' ->
            'v_msg_ns.GetDeviceResponse'(Msg, [MsgName], TrUserData);
        'ns.UpdateDeviceRequest' ->
            'v_msg_ns.UpdateDeviceRequest'(Msg, [MsgName], TrUserData);
        'ns.DeleteDeviceRequest' ->
            'v_msg_ns.DeleteDeviceRequest'(Msg, [MsgName], TrUserData);
        'ns.DeviceActivation' ->
            'v_msg_ns.DeviceActivation'(Msg, [MsgName], TrUserData);
        'ns.ActivateDeviceRequest' ->
            'v_msg_ns.ActivateDeviceRequest'(Msg, [MsgName], TrUserData);
        'ns.DeactivateDeviceRequest' ->
            'v_msg_ns.DeactivateDeviceRequest'(Msg, [MsgName], TrUserData);
        'ns.GetDeviceActivationRequest' ->
            'v_msg_ns.GetDeviceActivationRequest'(Msg, [MsgName], TrUserData);
        'ns.GetDeviceActivationResponse' ->
            'v_msg_ns.GetDeviceActivationResponse'(Msg, [MsgName], TrUserData);
        'ns.GetRandomDevAddrResponse' ->
            'v_msg_ns.GetRandomDevAddrResponse'(Msg, [MsgName], TrUserData);
        'ns.CreateMACCommandQueueItemRequest' ->
            'v_msg_ns.CreateMACCommandQueueItemRequest'(Msg, [MsgName], TrUserData);
        'ns.SendProprietaryPayloadRequest' ->
            'v_msg_ns.SendProprietaryPayloadRequest'(Msg, [MsgName], TrUserData);
        'ns.Gateway' ->
            'v_msg_ns.Gateway'(Msg, [MsgName], TrUserData);
        'ns.GatewayBoard' ->
            'v_msg_ns.GatewayBoard'(Msg, [MsgName], TrUserData);
        'ns.CreateGatewayRequest' ->
            'v_msg_ns.CreateGatewayRequest'(Msg, [MsgName], TrUserData);
        'ns.GetGatewayRequest' ->
            'v_msg_ns.GetGatewayRequest'(Msg, [MsgName], TrUserData);
        'ns.GetGatewayResponse' ->
            'v_msg_ns.GetGatewayResponse'(Msg, [MsgName], TrUserData);
        'ns.UpdateGatewayRequest' ->
            'v_msg_ns.UpdateGatewayRequest'(Msg, [MsgName], TrUserData);
        'ns.DeleteGatewayRequest' ->
            'v_msg_ns.DeleteGatewayRequest'(Msg, [MsgName], TrUserData);
        'ns.GenerateGatewayClientCertificateRequest' ->
            'v_msg_ns.GenerateGatewayClientCertificateRequest'(Msg, [MsgName], TrUserData);
        'ns.GenerateGatewayClientCertificateResponse' ->
            'v_msg_ns.GenerateGatewayClientCertificateResponse'(Msg, [MsgName], TrUserData);
        'ns.GatewayStats' ->
            'v_msg_ns.GatewayStats'(Msg, [MsgName], TrUserData);
        'ns.GetGatewayStatsRequest' ->
            'v_msg_ns.GetGatewayStatsRequest'(Msg, [MsgName], TrUserData);
        'ns.GetGatewayStatsResponse' ->
            'v_msg_ns.GetGatewayStatsResponse'(Msg, [MsgName], TrUserData);
        'ns.DeviceQueueItem' ->
            'v_msg_ns.DeviceQueueItem'(Msg, [MsgName], TrUserData);
        'ns.CreateDeviceQueueItemRequest' ->
            'v_msg_ns.CreateDeviceQueueItemRequest'(Msg, [MsgName], TrUserData);
        'ns.FlushDeviceQueueForDevEUIRequest' ->
            'v_msg_ns.FlushDeviceQueueForDevEUIRequest'(Msg, [MsgName], TrUserData);
        'ns.GetDeviceQueueItemsForDevEUIRequest' ->
            'v_msg_ns.GetDeviceQueueItemsForDevEUIRequest'(Msg, [MsgName], TrUserData);
        'ns.GetDeviceQueueItemsForDevEUIResponse' ->
            'v_msg_ns.GetDeviceQueueItemsForDevEUIResponse'(Msg, [MsgName], TrUserData);
        'ns.GetNextDownlinkFCntForDevEUIRequest' ->
            'v_msg_ns.GetNextDownlinkFCntForDevEUIRequest'(Msg, [MsgName], TrUserData);
        'ns.GetNextDownlinkFCntForDevEUIResponse' ->
            'v_msg_ns.GetNextDownlinkFCntForDevEUIResponse'(Msg, [MsgName], TrUserData);
        'ns.UplinkFrameLog' ->
            'v_msg_ns.UplinkFrameLog'(Msg, [MsgName], TrUserData);
        'ns.DownlinkFrameLog' ->
            'v_msg_ns.DownlinkFrameLog'(Msg, [MsgName], TrUserData);
        'ns.StreamFrameLogsForGatewayRequest' ->
            'v_msg_ns.StreamFrameLogsForGatewayRequest'(Msg, [MsgName], TrUserData);
        'ns.StreamFrameLogsForGatewayResponse' ->
            'v_msg_ns.StreamFrameLogsForGatewayResponse'(Msg, [MsgName], TrUserData);
        'ns.StreamFrameLogsForDeviceRequest' ->
            'v_msg_ns.StreamFrameLogsForDeviceRequest'(Msg, [MsgName], TrUserData);
        'ns.StreamFrameLogsForDeviceResponse' ->
            'v_msg_ns.StreamFrameLogsForDeviceResponse'(Msg, [MsgName], TrUserData);
        'ns.GetVersionResponse' ->
            'v_msg_ns.GetVersionResponse'(Msg, [MsgName], TrUserData);
        'ns.GatewayProfile' ->
            'v_msg_ns.GatewayProfile'(Msg, [MsgName], TrUserData);
        'ns.GatewayProfileExtraChannel' ->
            'v_msg_ns.GatewayProfileExtraChannel'(Msg, [MsgName], TrUserData);
        'ns.CreateGatewayProfileRequest' ->
            'v_msg_ns.CreateGatewayProfileRequest'(Msg, [MsgName], TrUserData);
        'ns.CreateGatewayProfileResponse' ->
            'v_msg_ns.CreateGatewayProfileResponse'(Msg, [MsgName], TrUserData);
        'ns.GetGatewayProfileRequest' ->
            'v_msg_ns.GetGatewayProfileRequest'(Msg, [MsgName], TrUserData);
        'ns.GetGatewayProfileResponse' ->
            'v_msg_ns.GetGatewayProfileResponse'(Msg, [MsgName], TrUserData);
        'ns.UpdateGatewayProfileRequest' ->
            'v_msg_ns.UpdateGatewayProfileRequest'(Msg, [MsgName], TrUserData);
        'ns.DeleteGatewayProfileRequest' ->
            'v_msg_ns.DeleteGatewayProfileRequest'(Msg, [MsgName], TrUserData);
        'ns.MulticastGroup' ->
            'v_msg_ns.MulticastGroup'(Msg, [MsgName], TrUserData);
        'ns.CreateMulticastGroupRequest' ->
            'v_msg_ns.CreateMulticastGroupRequest'(Msg, [MsgName], TrUserData);
        'ns.CreateMulticastGroupResponse' ->
            'v_msg_ns.CreateMulticastGroupResponse'(Msg, [MsgName], TrUserData);
        'ns.GetMulticastGroupRequest' ->
            'v_msg_ns.GetMulticastGroupRequest'(Msg, [MsgName], TrUserData);
        'ns.GetMulticastGroupResponse' ->
            'v_msg_ns.GetMulticastGroupResponse'(Msg, [MsgName], TrUserData);
        'ns.UpdateMulticastGroupRequest' ->
            'v_msg_ns.UpdateMulticastGroupRequest'(Msg, [MsgName], TrUserData);
        'ns.DeleteMulticastGroupRequest' ->
            'v_msg_ns.DeleteMulticastGroupRequest'(Msg, [MsgName], TrUserData);
        'ns.AddDeviceToMulticastGroupRequest' ->
            'v_msg_ns.AddDeviceToMulticastGroupRequest'(Msg, [MsgName], TrUserData);
        'ns.RemoveDeviceFromMulticastGroupRequest' ->
            'v_msg_ns.RemoveDeviceFromMulticastGroupRequest'(Msg, [MsgName], TrUserData);
        'ns.MulticastQueueItem' ->
            'v_msg_ns.MulticastQueueItem'(Msg, [MsgName], TrUserData);
        'ns.EnqueueMulticastQueueItemRequest' ->
            'v_msg_ns.EnqueueMulticastQueueItemRequest'(Msg, [MsgName], TrUserData);
        'ns.FlushMulticastQueueForMulticastGroupRequest' ->
            'v_msg_ns.FlushMulticastQueueForMulticastGroupRequest'(Msg, [MsgName], TrUserData);
        'ns.GetMulticastQueueItemsForMulticastGroupRequest' ->
            'v_msg_ns.GetMulticastQueueItemsForMulticastGroupRequest'(Msg, [MsgName], TrUserData);
        'ns.GetMulticastQueueItemsForMulticastGroupResponse' ->
            'v_msg_ns.GetMulticastQueueItemsForMulticastGroupResponse'(Msg, [MsgName], TrUserData);
        'ns.GetADRAlgorithmsResponse' ->
            'v_msg_ns.GetADRAlgorithmsResponse'(Msg, [MsgName], TrUserData);
        'ns.ADRAlgorithm' ->
            'v_msg_ns.ADRAlgorithm'(Msg, [MsgName], TrUserData);
        'google.protobuf.Timestamp' ->
            'v_msg_google.protobuf.Timestamp'(Msg, [MsgName], TrUserData);
        'google.protobuf.Duration' ->
            'v_msg_google.protobuf.Duration'(Msg, [MsgName], TrUserData);
        'google.protobuf.Empty' ->
            'v_msg_google.protobuf.Empty'(Msg, [MsgName], TrUserData);
        'common.KeyEnvelope' ->
            'v_msg_common.KeyEnvelope'(Msg, [MsgName], TrUserData);
        'common.Location' ->
            'v_msg_common.Location'(Msg, [MsgName], TrUserData);
        'gw.UplinkTXInfo' ->
            'v_msg_gw.UplinkTXInfo'(Msg, [MsgName], TrUserData);
        'gw.LoRaModulationInfo' ->
            'v_msg_gw.LoRaModulationInfo'(Msg, [MsgName], TrUserData);
        'gw.FSKModulationInfo' ->
            'v_msg_gw.FSKModulationInfo'(Msg, [MsgName], TrUserData);
        'gw.EncryptedFineTimestamp' ->
            'v_msg_gw.EncryptedFineTimestamp'(Msg, [MsgName], TrUserData);
        'gw.PlainFineTimestamp' ->
            'v_msg_gw.PlainFineTimestamp'(Msg, [MsgName], TrUserData);
        'gw.GatewayStats' ->
            'v_msg_gw.GatewayStats'(Msg, [MsgName], TrUserData);
        'gw.UplinkRXInfo' ->
            'v_msg_gw.UplinkRXInfo'(Msg, [MsgName], TrUserData);
        'gw.DownlinkTXInfo' ->
            'v_msg_gw.DownlinkTXInfo'(Msg, [MsgName], TrUserData);
        'gw.ImmediatelyTimingInfo' ->
            'v_msg_gw.ImmediatelyTimingInfo'(Msg, [MsgName], TrUserData);
        'gw.DelayTimingInfo' ->
            'v_msg_gw.DelayTimingInfo'(Msg, [MsgName], TrUserData);
        'gw.GPSEpochTimingInfo' ->
            'v_msg_gw.GPSEpochTimingInfo'(Msg, [MsgName], TrUserData);
        'gw.UplinkFrame' ->
            'v_msg_gw.UplinkFrame'(Msg, [MsgName], TrUserData);
        'gw.UplinkFrameSet' ->
            'v_msg_gw.UplinkFrameSet'(Msg, [MsgName], TrUserData);
        'gw.DownlinkFrame' ->
            'v_msg_gw.DownlinkFrame'(Msg, [MsgName], TrUserData);
        'gw.DownlinkFrameItem' ->
            'v_msg_gw.DownlinkFrameItem'(Msg, [MsgName], TrUserData);
        'gw.DownlinkTXAck' ->
            'v_msg_gw.DownlinkTXAck'(Msg, [MsgName], TrUserData);
        'gw.DownlinkTXAckItem' ->
            'v_msg_gw.DownlinkTXAckItem'(Msg, [MsgName], TrUserData);
        'gw.GatewayConfiguration' ->
            'v_msg_gw.GatewayConfiguration'(Msg, [MsgName], TrUserData);
        'gw.ChannelConfiguration' ->
            'v_msg_gw.ChannelConfiguration'(Msg, [MsgName], TrUserData);
        'gw.LoRaModulationConfig' ->
            'v_msg_gw.LoRaModulationConfig'(Msg, [MsgName], TrUserData);
        'gw.FSKModulationConfig' ->
            'v_msg_gw.FSKModulationConfig'(Msg, [MsgName], TrUserData);
        'gw.GatewayCommandExecRequest' ->
            'v_msg_gw.GatewayCommandExecRequest'(Msg, [MsgName], TrUserData);
        'gw.GatewayCommandExecResponse' ->
            'v_msg_gw.GatewayCommandExecResponse'(Msg, [MsgName], TrUserData);
        'gw.RawPacketForwarderEvent' ->
            'v_msg_gw.RawPacketForwarderEvent'(Msg, [MsgName], TrUserData);
        'gw.RawPacketForwarderCommand' ->
            'v_msg_gw.RawPacketForwarderCommand'(Msg, [MsgName], TrUserData);
        'gw.ConnState' ->
            'v_msg_gw.ConnState'(Msg, [MsgName], TrUserData);
        'ns.ServiceProfile' ->
            'v_msg_ns.ServiceProfile'(Msg, [MsgName], TrUserData);
        'ns.DeviceProfile' ->
            'v_msg_ns.DeviceProfile'(Msg, [MsgName], TrUserData);
        'ns.RoutingProfile' ->
            'v_msg_ns.RoutingProfile'(Msg, [MsgName], TrUserData);
        _ ->
            mk_type_error(not_a_known_message, Msg, [])
    end.

-compile({nowarn_unused_function, 'v_msg_ns.CreateServiceProfileRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.CreateServiceProfileRequest'/3}).
'v_msg_ns.CreateServiceProfileRequest'(
    #'ns.CreateServiceProfileRequest'{service_profile = F1},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> 'v_msg_ns.ServiceProfile'(F1, [service_profile | Path], TrUserData)
    end,
    ok;
'v_msg_ns.CreateServiceProfileRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.CreateServiceProfileRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.CreateServiceProfileResponse'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.CreateServiceProfileResponse'/3}).
'v_msg_ns.CreateServiceProfileResponse'(
    #'ns.CreateServiceProfileResponse'{id = F1},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [id | Path], TrUserData)
    end,
    ok;
'v_msg_ns.CreateServiceProfileResponse'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.CreateServiceProfileResponse'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.GetServiceProfileRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.GetServiceProfileRequest'/3}).
'v_msg_ns.GetServiceProfileRequest'(#'ns.GetServiceProfileRequest'{id = F1}, Path, TrUserData) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [id | Path], TrUserData)
    end,
    ok;
'v_msg_ns.GetServiceProfileRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.GetServiceProfileRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.GetServiceProfileResponse'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.GetServiceProfileResponse'/3}).
'v_msg_ns.GetServiceProfileResponse'(
    #'ns.GetServiceProfileResponse'{service_profile = F1, created_at = F2, updated_at = F3},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> 'v_msg_ns.ServiceProfile'(F1, [service_profile | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> 'v_msg_google.protobuf.Timestamp'(F2, [created_at | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> 'v_msg_google.protobuf.Timestamp'(F3, [updated_at | Path], TrUserData)
    end,
    ok;
'v_msg_ns.GetServiceProfileResponse'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.GetServiceProfileResponse'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.UpdateServiceProfileRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.UpdateServiceProfileRequest'/3}).
'v_msg_ns.UpdateServiceProfileRequest'(
    #'ns.UpdateServiceProfileRequest'{service_profile = F1},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> 'v_msg_ns.ServiceProfile'(F1, [service_profile | Path], TrUserData)
    end,
    ok;
'v_msg_ns.UpdateServiceProfileRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.UpdateServiceProfileRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.DeleteServiceProfileRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.DeleteServiceProfileRequest'/3}).
'v_msg_ns.DeleteServiceProfileRequest'(
    #'ns.DeleteServiceProfileRequest'{id = F1},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [id | Path], TrUserData)
    end,
    ok;
'v_msg_ns.DeleteServiceProfileRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.DeleteServiceProfileRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.CreateRoutingProfileRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.CreateRoutingProfileRequest'/3}).
'v_msg_ns.CreateRoutingProfileRequest'(
    #'ns.CreateRoutingProfileRequest'{routing_profile = F1},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> 'v_msg_ns.RoutingProfile'(F1, [routing_profile | Path], TrUserData)
    end,
    ok;
'v_msg_ns.CreateRoutingProfileRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.CreateRoutingProfileRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.CreateRoutingProfileResponse'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.CreateRoutingProfileResponse'/3}).
'v_msg_ns.CreateRoutingProfileResponse'(
    #'ns.CreateRoutingProfileResponse'{id = F1},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [id | Path], TrUserData)
    end,
    ok;
'v_msg_ns.CreateRoutingProfileResponse'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.CreateRoutingProfileResponse'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.GetRoutingProfileRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.GetRoutingProfileRequest'/3}).
'v_msg_ns.GetRoutingProfileRequest'(#'ns.GetRoutingProfileRequest'{id = F1}, Path, TrUserData) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [id | Path], TrUserData)
    end,
    ok;
'v_msg_ns.GetRoutingProfileRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.GetRoutingProfileRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.GetRoutingProfileResponse'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.GetRoutingProfileResponse'/3}).
'v_msg_ns.GetRoutingProfileResponse'(
    #'ns.GetRoutingProfileResponse'{routing_profile = F1, created_at = F2, updated_at = F3},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> 'v_msg_ns.RoutingProfile'(F1, [routing_profile | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> 'v_msg_google.protobuf.Timestamp'(F2, [created_at | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> 'v_msg_google.protobuf.Timestamp'(F3, [updated_at | Path], TrUserData)
    end,
    ok;
'v_msg_ns.GetRoutingProfileResponse'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.GetRoutingProfileResponse'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.UpdateRoutingProfileRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.UpdateRoutingProfileRequest'/3}).
'v_msg_ns.UpdateRoutingProfileRequest'(
    #'ns.UpdateRoutingProfileRequest'{routing_profile = F1},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> 'v_msg_ns.RoutingProfile'(F1, [routing_profile | Path], TrUserData)
    end,
    ok;
'v_msg_ns.UpdateRoutingProfileRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.UpdateRoutingProfileRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.DeleteRoutingProfileRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.DeleteRoutingProfileRequest'/3}).
'v_msg_ns.DeleteRoutingProfileRequest'(
    #'ns.DeleteRoutingProfileRequest'{id = F1},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [id | Path], TrUserData)
    end,
    ok;
'v_msg_ns.DeleteRoutingProfileRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.DeleteRoutingProfileRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.CreateDeviceProfileRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.CreateDeviceProfileRequest'/3}).
'v_msg_ns.CreateDeviceProfileRequest'(
    #'ns.CreateDeviceProfileRequest'{device_profile = F1},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> 'v_msg_ns.DeviceProfile'(F1, [device_profile | Path], TrUserData)
    end,
    ok;
'v_msg_ns.CreateDeviceProfileRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.CreateDeviceProfileRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.CreateDeviceProfileResponse'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.CreateDeviceProfileResponse'/3}).
'v_msg_ns.CreateDeviceProfileResponse'(
    #'ns.CreateDeviceProfileResponse'{id = F1},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [id | Path], TrUserData)
    end,
    ok;
'v_msg_ns.CreateDeviceProfileResponse'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.CreateDeviceProfileResponse'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.GetDeviceProfileRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.GetDeviceProfileRequest'/3}).
'v_msg_ns.GetDeviceProfileRequest'(#'ns.GetDeviceProfileRequest'{id = F1}, Path, TrUserData) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [id | Path], TrUserData)
    end,
    ok;
'v_msg_ns.GetDeviceProfileRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.GetDeviceProfileRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.GetDeviceProfileResponse'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.GetDeviceProfileResponse'/3}).
'v_msg_ns.GetDeviceProfileResponse'(
    #'ns.GetDeviceProfileResponse'{device_profile = F1, created_at = F2, updated_at = F3},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> 'v_msg_ns.DeviceProfile'(F1, [device_profile | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> 'v_msg_google.protobuf.Timestamp'(F2, [created_at | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> 'v_msg_google.protobuf.Timestamp'(F3, [updated_at | Path], TrUserData)
    end,
    ok;
'v_msg_ns.GetDeviceProfileResponse'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.GetDeviceProfileResponse'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.UpdateDeviceProfileRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.UpdateDeviceProfileRequest'/3}).
'v_msg_ns.UpdateDeviceProfileRequest'(
    #'ns.UpdateDeviceProfileRequest'{device_profile = F1},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> 'v_msg_ns.DeviceProfile'(F1, [device_profile | Path], TrUserData)
    end,
    ok;
'v_msg_ns.UpdateDeviceProfileRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.UpdateDeviceProfileRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.DeleteDeviceProfileRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.DeleteDeviceProfileRequest'/3}).
'v_msg_ns.DeleteDeviceProfileRequest'(#'ns.DeleteDeviceProfileRequest'{id = F1}, Path, TrUserData) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [id | Path], TrUserData)
    end,
    ok;
'v_msg_ns.DeleteDeviceProfileRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.DeleteDeviceProfileRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.Device'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.Device'/3}).
'v_msg_ns.Device'(
    #'ns.Device'{
        dev_eui = F1,
        device_profile_id = F2,
        service_profile_id = F3,
        routing_profile_id = F4,
        skip_f_cnt_check = F5,
        reference_altitude = F6,
        is_disabled = F7
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [dev_eui | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_bytes(F2, [device_profile_id | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_bytes(F3, [service_profile_id | Path], TrUserData)
    end,
    if
        F4 == undefined -> ok;
        true -> v_type_bytes(F4, [routing_profile_id | Path], TrUserData)
    end,
    if
        F5 == undefined -> ok;
        true -> v_type_bool(F5, [skip_f_cnt_check | Path], TrUserData)
    end,
    if
        F6 == undefined -> ok;
        true -> v_type_double(F6, [reference_altitude | Path], TrUserData)
    end,
    if
        F7 == undefined -> ok;
        true -> v_type_bool(F7, [is_disabled | Path], TrUserData)
    end,
    ok;
'v_msg_ns.Device'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.Device'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.CreateDeviceRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.CreateDeviceRequest'/3}).
'v_msg_ns.CreateDeviceRequest'(#'ns.CreateDeviceRequest'{device = F1}, Path, TrUserData) ->
    if
        F1 == undefined -> ok;
        true -> 'v_msg_ns.Device'(F1, [device | Path], TrUserData)
    end,
    ok;
'v_msg_ns.CreateDeviceRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.CreateDeviceRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.GetDeviceRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.GetDeviceRequest'/3}).
'v_msg_ns.GetDeviceRequest'(#'ns.GetDeviceRequest'{dev_eui = F1}, Path, TrUserData) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [dev_eui | Path], TrUserData)
    end,
    ok;
'v_msg_ns.GetDeviceRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.GetDeviceRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.GetDeviceResponse'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.GetDeviceResponse'/3}).
'v_msg_ns.GetDeviceResponse'(
    #'ns.GetDeviceResponse'{device = F1, created_at = F2, updated_at = F3},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> 'v_msg_ns.Device'(F1, [device | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> 'v_msg_google.protobuf.Timestamp'(F2, [created_at | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> 'v_msg_google.protobuf.Timestamp'(F3, [updated_at | Path], TrUserData)
    end,
    ok;
'v_msg_ns.GetDeviceResponse'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.GetDeviceResponse'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.UpdateDeviceRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.UpdateDeviceRequest'/3}).
'v_msg_ns.UpdateDeviceRequest'(#'ns.UpdateDeviceRequest'{device = F1}, Path, TrUserData) ->
    if
        F1 == undefined -> ok;
        true -> 'v_msg_ns.Device'(F1, [device | Path], TrUserData)
    end,
    ok;
'v_msg_ns.UpdateDeviceRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.UpdateDeviceRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.DeleteDeviceRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.DeleteDeviceRequest'/3}).
'v_msg_ns.DeleteDeviceRequest'(#'ns.DeleteDeviceRequest'{dev_eui = F1}, Path, TrUserData) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [dev_eui | Path], TrUserData)
    end,
    ok;
'v_msg_ns.DeleteDeviceRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.DeleteDeviceRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.DeviceActivation'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.DeviceActivation'/3}).
'v_msg_ns.DeviceActivation'(
    #'ns.DeviceActivation'{
        dev_eui = F1,
        dev_addr = F2,
        s_nwk_s_int_key = F3,
        f_nwk_s_int_key = F4,
        nwk_s_enc_key = F5,
        f_cnt_up = F6,
        n_f_cnt_down = F7,
        a_f_cnt_down = F8,
        skip_f_cnt_check = F9
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [dev_eui | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_bytes(F2, [dev_addr | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_bytes(F3, [s_nwk_s_int_key | Path], TrUserData)
    end,
    if
        F4 == undefined -> ok;
        true -> v_type_bytes(F4, [f_nwk_s_int_key | Path], TrUserData)
    end,
    if
        F5 == undefined -> ok;
        true -> v_type_bytes(F5, [nwk_s_enc_key | Path], TrUserData)
    end,
    if
        F6 == undefined -> ok;
        true -> v_type_uint32(F6, [f_cnt_up | Path], TrUserData)
    end,
    if
        F7 == undefined -> ok;
        true -> v_type_uint32(F7, [n_f_cnt_down | Path], TrUserData)
    end,
    if
        F8 == undefined -> ok;
        true -> v_type_uint32(F8, [a_f_cnt_down | Path], TrUserData)
    end,
    if
        F9 == undefined -> ok;
        true -> v_type_bool(F9, [skip_f_cnt_check | Path], TrUserData)
    end,
    ok;
'v_msg_ns.DeviceActivation'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.DeviceActivation'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.ActivateDeviceRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.ActivateDeviceRequest'/3}).
'v_msg_ns.ActivateDeviceRequest'(
    #'ns.ActivateDeviceRequest'{device_activation = F1},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> 'v_msg_ns.DeviceActivation'(F1, [device_activation | Path], TrUserData)
    end,
    ok;
'v_msg_ns.ActivateDeviceRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.ActivateDeviceRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.DeactivateDeviceRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.DeactivateDeviceRequest'/3}).
'v_msg_ns.DeactivateDeviceRequest'(#'ns.DeactivateDeviceRequest'{dev_eui = F1}, Path, TrUserData) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [dev_eui | Path], TrUserData)
    end,
    ok;
'v_msg_ns.DeactivateDeviceRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.DeactivateDeviceRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.GetDeviceActivationRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.GetDeviceActivationRequest'/3}).
'v_msg_ns.GetDeviceActivationRequest'(
    #'ns.GetDeviceActivationRequest'{dev_eui = F1},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [dev_eui | Path], TrUserData)
    end,
    ok;
'v_msg_ns.GetDeviceActivationRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.GetDeviceActivationRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.GetDeviceActivationResponse'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.GetDeviceActivationResponse'/3}).
'v_msg_ns.GetDeviceActivationResponse'(
    #'ns.GetDeviceActivationResponse'{device_activation = F1},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> 'v_msg_ns.DeviceActivation'(F1, [device_activation | Path], TrUserData)
    end,
    ok;
'v_msg_ns.GetDeviceActivationResponse'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.GetDeviceActivationResponse'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.GetRandomDevAddrResponse'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.GetRandomDevAddrResponse'/3}).
'v_msg_ns.GetRandomDevAddrResponse'(
    #'ns.GetRandomDevAddrResponse'{dev_addr = F1},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [dev_addr | Path], TrUserData)
    end,
    ok;
'v_msg_ns.GetRandomDevAddrResponse'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.GetRandomDevAddrResponse'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.CreateMACCommandQueueItemRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.CreateMACCommandQueueItemRequest'/3}).
'v_msg_ns.CreateMACCommandQueueItemRequest'(
    #'ns.CreateMACCommandQueueItemRequest'{dev_eui = F1, cid = F2, commands = F3},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [dev_eui | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_uint32(F2, [cid | Path], TrUserData)
    end,
    if
        is_list(F3) ->
            _ = [v_type_bytes(Elem, [commands | Path], TrUserData) || Elem <- F3],
            ok;
        true ->
            mk_type_error({invalid_list_of, bytes}, F3, [commands | Path])
    end,
    ok;
'v_msg_ns.CreateMACCommandQueueItemRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.CreateMACCommandQueueItemRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.SendProprietaryPayloadRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.SendProprietaryPayloadRequest'/3}).
'v_msg_ns.SendProprietaryPayloadRequest'(
    #'ns.SendProprietaryPayloadRequest'{
        mac_payload = F1,
        mic = F2,
        gateway_macs = F3,
        polarization_inversion = F4,
        frequency = F5,
        dr = F6
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [mac_payload | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_bytes(F2, [mic | Path], TrUserData)
    end,
    if
        is_list(F3) ->
            _ = [v_type_bytes(Elem, [gateway_macs | Path], TrUserData) || Elem <- F3],
            ok;
        true ->
            mk_type_error({invalid_list_of, bytes}, F3, [gateway_macs | Path])
    end,
    if
        F4 == undefined -> ok;
        true -> v_type_bool(F4, [polarization_inversion | Path], TrUserData)
    end,
    if
        F5 == undefined -> ok;
        true -> v_type_uint32(F5, [frequency | Path], TrUserData)
    end,
    if
        F6 == undefined -> ok;
        true -> v_type_uint32(F6, [dr | Path], TrUserData)
    end,
    ok;
'v_msg_ns.SendProprietaryPayloadRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.SendProprietaryPayloadRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.Gateway'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.Gateway'/3}).
'v_msg_ns.Gateway'(
    #'ns.Gateway'{
        id = F1,
        location = F2,
        gateway_profile_id = F3,
        boards = F4,
        routing_profile_id = F5,
        service_profile_id = F6
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [id | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> 'v_msg_common.Location'(F2, [location | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_bytes(F3, [gateway_profile_id | Path], TrUserData)
    end,
    if
        is_list(F4) ->
            _ = ['v_msg_ns.GatewayBoard'(Elem, [boards | Path], TrUserData) || Elem <- F4],
            ok;
        true ->
            mk_type_error({invalid_list_of, {msg, 'ns.GatewayBoard'}}, F4, [boards | Path])
    end,
    if
        F5 == undefined -> ok;
        true -> v_type_bytes(F5, [routing_profile_id | Path], TrUserData)
    end,
    if
        F6 == undefined -> ok;
        true -> v_type_bytes(F6, [service_profile_id | Path], TrUserData)
    end,
    ok;
'v_msg_ns.Gateway'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.Gateway'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.GatewayBoard'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.GatewayBoard'/3}).
'v_msg_ns.GatewayBoard'(
    #'ns.GatewayBoard'{fpga_id = F1, fine_timestamp_key = F2},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [fpga_id | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_bytes(F2, [fine_timestamp_key | Path], TrUserData)
    end,
    ok;
'v_msg_ns.GatewayBoard'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.GatewayBoard'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.CreateGatewayRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.CreateGatewayRequest'/3}).
'v_msg_ns.CreateGatewayRequest'(#'ns.CreateGatewayRequest'{gateway = F1}, Path, TrUserData) ->
    if
        F1 == undefined -> ok;
        true -> 'v_msg_ns.Gateway'(F1, [gateway | Path], TrUserData)
    end,
    ok;
'v_msg_ns.CreateGatewayRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.CreateGatewayRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.GetGatewayRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.GetGatewayRequest'/3}).
'v_msg_ns.GetGatewayRequest'(#'ns.GetGatewayRequest'{id = F1}, Path, TrUserData) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [id | Path], TrUserData)
    end,
    ok;
'v_msg_ns.GetGatewayRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.GetGatewayRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.GetGatewayResponse'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.GetGatewayResponse'/3}).
'v_msg_ns.GetGatewayResponse'(
    #'ns.GetGatewayResponse'{
        gateway = F1,
        created_at = F2,
        updated_at = F3,
        first_seen_at = F4,
        last_seen_at = F5
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> 'v_msg_ns.Gateway'(F1, [gateway | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> 'v_msg_google.protobuf.Timestamp'(F2, [created_at | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> 'v_msg_google.protobuf.Timestamp'(F3, [updated_at | Path], TrUserData)
    end,
    if
        F4 == undefined -> ok;
        true -> 'v_msg_google.protobuf.Timestamp'(F4, [first_seen_at | Path], TrUserData)
    end,
    if
        F5 == undefined -> ok;
        true -> 'v_msg_google.protobuf.Timestamp'(F5, [last_seen_at | Path], TrUserData)
    end,
    ok;
'v_msg_ns.GetGatewayResponse'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.GetGatewayResponse'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.UpdateGatewayRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.UpdateGatewayRequest'/3}).
'v_msg_ns.UpdateGatewayRequest'(#'ns.UpdateGatewayRequest'{gateway = F1}, Path, TrUserData) ->
    if
        F1 == undefined -> ok;
        true -> 'v_msg_ns.Gateway'(F1, [gateway | Path], TrUserData)
    end,
    ok;
'v_msg_ns.UpdateGatewayRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.UpdateGatewayRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.DeleteGatewayRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.DeleteGatewayRequest'/3}).
'v_msg_ns.DeleteGatewayRequest'(#'ns.DeleteGatewayRequest'{id = F1}, Path, TrUserData) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [id | Path], TrUserData)
    end,
    ok;
'v_msg_ns.DeleteGatewayRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.DeleteGatewayRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.GenerateGatewayClientCertificateRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.GenerateGatewayClientCertificateRequest'/3}).
'v_msg_ns.GenerateGatewayClientCertificateRequest'(
    #'ns.GenerateGatewayClientCertificateRequest'{id = F1},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [id | Path], TrUserData)
    end,
    ok;
'v_msg_ns.GenerateGatewayClientCertificateRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.GenerateGatewayClientCertificateRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.GenerateGatewayClientCertificateResponse'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.GenerateGatewayClientCertificateResponse'/3}).
'v_msg_ns.GenerateGatewayClientCertificateResponse'(
    #'ns.GenerateGatewayClientCertificateResponse'{
        tls_cert = F1,
        tls_key = F2,
        ca_cert = F3,
        expires_at = F4
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [tls_cert | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_bytes(F2, [tls_key | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_bytes(F3, [ca_cert | Path], TrUserData)
    end,
    if
        F4 == undefined -> ok;
        true -> 'v_msg_google.protobuf.Timestamp'(F4, [expires_at | Path], TrUserData)
    end,
    ok;
'v_msg_ns.GenerateGatewayClientCertificateResponse'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.GenerateGatewayClientCertificateResponse'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.GatewayStats'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.GatewayStats'/3}).
'v_msg_ns.GatewayStats'(
    #'ns.GatewayStats'{
        timestamp = F1,
        rx_packets_received = F2,
        rx_packets_received_ok = F3,
        tx_packets_received = F4,
        tx_packets_emitted = F5
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> 'v_msg_google.protobuf.Timestamp'(F1, [timestamp | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_int32(F2, [rx_packets_received | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_int32(F3, [rx_packets_received_ok | Path], TrUserData)
    end,
    if
        F4 == undefined -> ok;
        true -> v_type_int32(F4, [tx_packets_received | Path], TrUserData)
    end,
    if
        F5 == undefined -> ok;
        true -> v_type_int32(F5, [tx_packets_emitted | Path], TrUserData)
    end,
    ok;
'v_msg_ns.GatewayStats'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.GatewayStats'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.GetGatewayStatsRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.GetGatewayStatsRequest'/3}).
'v_msg_ns.GetGatewayStatsRequest'(
    #'ns.GetGatewayStatsRequest'{
        gateway_id = F1,
        interval = F2,
        start_timestamp = F3,
        end_timestamp = F4
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [gateway_id | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> 'v_enum_ns.AggregationInterval'(F2, [interval | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> 'v_msg_google.protobuf.Timestamp'(F3, [start_timestamp | Path], TrUserData)
    end,
    if
        F4 == undefined -> ok;
        true -> 'v_msg_google.protobuf.Timestamp'(F4, [end_timestamp | Path], TrUserData)
    end,
    ok;
'v_msg_ns.GetGatewayStatsRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.GetGatewayStatsRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.GetGatewayStatsResponse'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.GetGatewayStatsResponse'/3}).
'v_msg_ns.GetGatewayStatsResponse'(#'ns.GetGatewayStatsResponse'{result = F1}, Path, TrUserData) ->
    if
        is_list(F1) ->
            _ = ['v_msg_ns.GatewayStats'(Elem, [result | Path], TrUserData) || Elem <- F1],
            ok;
        true ->
            mk_type_error({invalid_list_of, {msg, 'ns.GatewayStats'}}, F1, [result | Path])
    end,
    ok;
'v_msg_ns.GetGatewayStatsResponse'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.GetGatewayStatsResponse'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.DeviceQueueItem'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.DeviceQueueItem'/3}).
'v_msg_ns.DeviceQueueItem'(
    #'ns.DeviceQueueItem'{
        dev_eui = F1,
        frm_payload = F2,
        f_cnt = F3,
        f_port = F4,
        confirmed = F5,
        dev_addr = F6
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [dev_eui | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_bytes(F2, [frm_payload | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_uint32(F3, [f_cnt | Path], TrUserData)
    end,
    if
        F4 == undefined -> ok;
        true -> v_type_uint32(F4, [f_port | Path], TrUserData)
    end,
    if
        F5 == undefined -> ok;
        true -> v_type_bool(F5, [confirmed | Path], TrUserData)
    end,
    if
        F6 == undefined -> ok;
        true -> v_type_bytes(F6, [dev_addr | Path], TrUserData)
    end,
    ok;
'v_msg_ns.DeviceQueueItem'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.DeviceQueueItem'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.CreateDeviceQueueItemRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.CreateDeviceQueueItemRequest'/3}).
'v_msg_ns.CreateDeviceQueueItemRequest'(
    #'ns.CreateDeviceQueueItemRequest'{item = F1},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> 'v_msg_ns.DeviceQueueItem'(F1, [item | Path], TrUserData)
    end,
    ok;
'v_msg_ns.CreateDeviceQueueItemRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.CreateDeviceQueueItemRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.FlushDeviceQueueForDevEUIRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.FlushDeviceQueueForDevEUIRequest'/3}).
'v_msg_ns.FlushDeviceQueueForDevEUIRequest'(
    #'ns.FlushDeviceQueueForDevEUIRequest'{dev_eui = F1},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [dev_eui | Path], TrUserData)
    end,
    ok;
'v_msg_ns.FlushDeviceQueueForDevEUIRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.FlushDeviceQueueForDevEUIRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.GetDeviceQueueItemsForDevEUIRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.GetDeviceQueueItemsForDevEUIRequest'/3}).
'v_msg_ns.GetDeviceQueueItemsForDevEUIRequest'(
    #'ns.GetDeviceQueueItemsForDevEUIRequest'{dev_eui = F1, count_only = F2},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [dev_eui | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_bool(F2, [count_only | Path], TrUserData)
    end,
    ok;
'v_msg_ns.GetDeviceQueueItemsForDevEUIRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.GetDeviceQueueItemsForDevEUIRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.GetDeviceQueueItemsForDevEUIResponse'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.GetDeviceQueueItemsForDevEUIResponse'/3}).
'v_msg_ns.GetDeviceQueueItemsForDevEUIResponse'(
    #'ns.GetDeviceQueueItemsForDevEUIResponse'{items = F1, total_count = F2},
    Path,
    TrUserData
) ->
    if
        is_list(F1) ->
            _ = ['v_msg_ns.DeviceQueueItem'(Elem, [items | Path], TrUserData) || Elem <- F1],
            ok;
        true ->
            mk_type_error({invalid_list_of, {msg, 'ns.DeviceQueueItem'}}, F1, [items | Path])
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_uint32(F2, [total_count | Path], TrUserData)
    end,
    ok;
'v_msg_ns.GetDeviceQueueItemsForDevEUIResponse'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.GetDeviceQueueItemsForDevEUIResponse'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.GetNextDownlinkFCntForDevEUIRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.GetNextDownlinkFCntForDevEUIRequest'/3}).
'v_msg_ns.GetNextDownlinkFCntForDevEUIRequest'(
    #'ns.GetNextDownlinkFCntForDevEUIRequest'{dev_eui = F1},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [dev_eui | Path], TrUserData)
    end,
    ok;
'v_msg_ns.GetNextDownlinkFCntForDevEUIRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.GetNextDownlinkFCntForDevEUIRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.GetNextDownlinkFCntForDevEUIResponse'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.GetNextDownlinkFCntForDevEUIResponse'/3}).
'v_msg_ns.GetNextDownlinkFCntForDevEUIResponse'(
    #'ns.GetNextDownlinkFCntForDevEUIResponse'{f_cnt = F1},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_uint32(F1, [f_cnt | Path], TrUserData)
    end,
    ok;
'v_msg_ns.GetNextDownlinkFCntForDevEUIResponse'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.GetNextDownlinkFCntForDevEUIResponse'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.UplinkFrameLog'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.UplinkFrameLog'/3}).
'v_msg_ns.UplinkFrameLog'(
    #'ns.UplinkFrameLog'{
        phy_payload = F1,
        tx_info = F2,
        rx_info = F3,
        m_type = F4,
        dev_addr = F5,
        dev_eui = F6
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [phy_payload | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> 'v_msg_gw.UplinkTXInfo'(F2, [tx_info | Path], TrUserData)
    end,
    if
        is_list(F3) ->
            _ = ['v_msg_gw.UplinkRXInfo'(Elem, [rx_info | Path], TrUserData) || Elem <- F3],
            ok;
        true ->
            mk_type_error({invalid_list_of, {msg, 'gw.UplinkRXInfo'}}, F3, [rx_info | Path])
    end,
    if
        F4 == undefined -> ok;
        true -> 'v_enum_common.MType'(F4, [m_type | Path], TrUserData)
    end,
    if
        F5 == undefined -> ok;
        true -> v_type_bytes(F5, [dev_addr | Path], TrUserData)
    end,
    if
        F6 == undefined -> ok;
        true -> v_type_bytes(F6, [dev_eui | Path], TrUserData)
    end,
    ok;
'v_msg_ns.UplinkFrameLog'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.UplinkFrameLog'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.DownlinkFrameLog'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.DownlinkFrameLog'/3}).
'v_msg_ns.DownlinkFrameLog'(
    #'ns.DownlinkFrameLog'{
        phy_payload = F1,
        tx_info = F2,
        token = F3,
        downlink_id = F4,
        gateway_id = F5,
        m_type = F6,
        dev_addr = F7,
        dev_eui = F8
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [phy_payload | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> 'v_msg_gw.DownlinkTXInfo'(F2, [tx_info | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_uint32(F3, [token | Path], TrUserData)
    end,
    if
        F4 == undefined -> ok;
        true -> v_type_bytes(F4, [downlink_id | Path], TrUserData)
    end,
    if
        F5 == undefined -> ok;
        true -> v_type_bytes(F5, [gateway_id | Path], TrUserData)
    end,
    if
        F6 == undefined -> ok;
        true -> 'v_enum_common.MType'(F6, [m_type | Path], TrUserData)
    end,
    if
        F7 == undefined -> ok;
        true -> v_type_bytes(F7, [dev_addr | Path], TrUserData)
    end,
    if
        F8 == undefined -> ok;
        true -> v_type_bytes(F8, [dev_eui | Path], TrUserData)
    end,
    ok;
'v_msg_ns.DownlinkFrameLog'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.DownlinkFrameLog'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.StreamFrameLogsForGatewayRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.StreamFrameLogsForGatewayRequest'/3}).
'v_msg_ns.StreamFrameLogsForGatewayRequest'(
    #'ns.StreamFrameLogsForGatewayRequest'{gateway_id = F1},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [gateway_id | Path], TrUserData)
    end,
    ok;
'v_msg_ns.StreamFrameLogsForGatewayRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.StreamFrameLogsForGatewayRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.StreamFrameLogsForGatewayResponse'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.StreamFrameLogsForGatewayResponse'/3}).
'v_msg_ns.StreamFrameLogsForGatewayResponse'(
    #'ns.StreamFrameLogsForGatewayResponse'{frame = F1},
    Path,
    TrUserData
) ->
    case F1 of
        undefined ->
            ok;
        {uplink_frame_set, OF1} ->
            'v_msg_ns.UplinkFrameLog'(OF1, [uplink_frame_set, frame | Path], TrUserData);
        {downlink_frame, OF1} ->
            'v_msg_ns.DownlinkFrameLog'(OF1, [downlink_frame, frame | Path], TrUserData);
        _ ->
            mk_type_error(invalid_oneof, F1, [frame | Path])
    end,
    ok;
'v_msg_ns.StreamFrameLogsForGatewayResponse'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.StreamFrameLogsForGatewayResponse'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.StreamFrameLogsForDeviceRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.StreamFrameLogsForDeviceRequest'/3}).
'v_msg_ns.StreamFrameLogsForDeviceRequest'(
    #'ns.StreamFrameLogsForDeviceRequest'{dev_eui = F1},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [dev_eui | Path], TrUserData)
    end,
    ok;
'v_msg_ns.StreamFrameLogsForDeviceRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.StreamFrameLogsForDeviceRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.StreamFrameLogsForDeviceResponse'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.StreamFrameLogsForDeviceResponse'/3}).
'v_msg_ns.StreamFrameLogsForDeviceResponse'(
    #'ns.StreamFrameLogsForDeviceResponse'{frame = F1},
    Path,
    TrUserData
) ->
    case F1 of
        undefined ->
            ok;
        {uplink_frame_set, OF1} ->
            'v_msg_ns.UplinkFrameLog'(OF1, [uplink_frame_set, frame | Path], TrUserData);
        {downlink_frame, OF1} ->
            'v_msg_ns.DownlinkFrameLog'(OF1, [downlink_frame, frame | Path], TrUserData);
        _ ->
            mk_type_error(invalid_oneof, F1, [frame | Path])
    end,
    ok;
'v_msg_ns.StreamFrameLogsForDeviceResponse'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.StreamFrameLogsForDeviceResponse'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.GetVersionResponse'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.GetVersionResponse'/3}).
'v_msg_ns.GetVersionResponse'(
    #'ns.GetVersionResponse'{version = F1, region = F2},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_string(F1, [version | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> 'v_enum_common.Region'(F2, [region | Path], TrUserData)
    end,
    ok;
'v_msg_ns.GetVersionResponse'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.GetVersionResponse'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.GatewayProfile'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.GatewayProfile'/3}).
'v_msg_ns.GatewayProfile'(
    #'ns.GatewayProfile'{id = F1, channels = F2, extra_channels = F3, stats_interval = F4},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [id | Path], TrUserData)
    end,
    if
        is_list(F2) ->
            _ = [v_type_uint32(Elem, [channels | Path], TrUserData) || Elem <- F2],
            ok;
        true ->
            mk_type_error({invalid_list_of, uint32}, F2, [channels | Path])
    end,
    if
        is_list(F3) ->
            _ = [
                'v_msg_ns.GatewayProfileExtraChannel'(Elem, [extra_channels | Path], TrUserData)
                || Elem <- F3
            ],
            ok;
        true ->
            mk_type_error({invalid_list_of, {msg, 'ns.GatewayProfileExtraChannel'}}, F3, [
                extra_channels
                | Path
            ])
    end,
    if
        F4 == undefined -> ok;
        true -> 'v_msg_google.protobuf.Duration'(F4, [stats_interval | Path], TrUserData)
    end,
    ok;
'v_msg_ns.GatewayProfile'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.GatewayProfile'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.GatewayProfileExtraChannel'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.GatewayProfileExtraChannel'/3}).
'v_msg_ns.GatewayProfileExtraChannel'(
    #'ns.GatewayProfileExtraChannel'{
        modulation = F1,
        frequency = F2,
        bandwidth = F3,
        bitrate = F4,
        spreading_factors = F5
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> 'v_enum_common.Modulation'(F1, [modulation | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_uint32(F2, [frequency | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_uint32(F3, [bandwidth | Path], TrUserData)
    end,
    if
        F4 == undefined -> ok;
        true -> v_type_uint32(F4, [bitrate | Path], TrUserData)
    end,
    if
        is_list(F5) ->
            _ = [v_type_uint32(Elem, [spreading_factors | Path], TrUserData) || Elem <- F5],
            ok;
        true ->
            mk_type_error({invalid_list_of, uint32}, F5, [spreading_factors | Path])
    end,
    ok;
'v_msg_ns.GatewayProfileExtraChannel'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.GatewayProfileExtraChannel'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.CreateGatewayProfileRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.CreateGatewayProfileRequest'/3}).
'v_msg_ns.CreateGatewayProfileRequest'(
    #'ns.CreateGatewayProfileRequest'{gateway_profile = F1},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> 'v_msg_ns.GatewayProfile'(F1, [gateway_profile | Path], TrUserData)
    end,
    ok;
'v_msg_ns.CreateGatewayProfileRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.CreateGatewayProfileRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.CreateGatewayProfileResponse'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.CreateGatewayProfileResponse'/3}).
'v_msg_ns.CreateGatewayProfileResponse'(
    #'ns.CreateGatewayProfileResponse'{id = F1},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [id | Path], TrUserData)
    end,
    ok;
'v_msg_ns.CreateGatewayProfileResponse'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.CreateGatewayProfileResponse'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.GetGatewayProfileRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.GetGatewayProfileRequest'/3}).
'v_msg_ns.GetGatewayProfileRequest'(#'ns.GetGatewayProfileRequest'{id = F1}, Path, TrUserData) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [id | Path], TrUserData)
    end,
    ok;
'v_msg_ns.GetGatewayProfileRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.GetGatewayProfileRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.GetGatewayProfileResponse'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.GetGatewayProfileResponse'/3}).
'v_msg_ns.GetGatewayProfileResponse'(
    #'ns.GetGatewayProfileResponse'{gateway_profile = F1, created_at = F2, updated_at = F3},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> 'v_msg_ns.GatewayProfile'(F1, [gateway_profile | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> 'v_msg_google.protobuf.Timestamp'(F2, [created_at | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> 'v_msg_google.protobuf.Timestamp'(F3, [updated_at | Path], TrUserData)
    end,
    ok;
'v_msg_ns.GetGatewayProfileResponse'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.GetGatewayProfileResponse'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.UpdateGatewayProfileRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.UpdateGatewayProfileRequest'/3}).
'v_msg_ns.UpdateGatewayProfileRequest'(
    #'ns.UpdateGatewayProfileRequest'{gateway_profile = F1},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> 'v_msg_ns.GatewayProfile'(F1, [gateway_profile | Path], TrUserData)
    end,
    ok;
'v_msg_ns.UpdateGatewayProfileRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.UpdateGatewayProfileRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.DeleteGatewayProfileRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.DeleteGatewayProfileRequest'/3}).
'v_msg_ns.DeleteGatewayProfileRequest'(
    #'ns.DeleteGatewayProfileRequest'{id = F1},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [id | Path], TrUserData)
    end,
    ok;
'v_msg_ns.DeleteGatewayProfileRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.DeleteGatewayProfileRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.MulticastGroup'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.MulticastGroup'/3}).
'v_msg_ns.MulticastGroup'(
    #'ns.MulticastGroup'{
        id = F1,
        mc_addr = F2,
        mc_nwk_s_key = F3,
        f_cnt = F4,
        group_type = F5,
        dr = F6,
        frequency = F7,
        ping_slot_period = F8,
        service_profile_id = F9,
        routing_profile_id = F10
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [id | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_bytes(F2, [mc_addr | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_bytes(F3, [mc_nwk_s_key | Path], TrUserData)
    end,
    if
        F4 == undefined -> ok;
        true -> v_type_uint32(F4, [f_cnt | Path], TrUserData)
    end,
    if
        F5 == undefined -> ok;
        true -> 'v_enum_ns.MulticastGroupType'(F5, [group_type | Path], TrUserData)
    end,
    if
        F6 == undefined -> ok;
        true -> v_type_uint32(F6, [dr | Path], TrUserData)
    end,
    if
        F7 == undefined -> ok;
        true -> v_type_uint32(F7, [frequency | Path], TrUserData)
    end,
    if
        F8 == undefined -> ok;
        true -> v_type_uint32(F8, [ping_slot_period | Path], TrUserData)
    end,
    if
        F9 == undefined -> ok;
        true -> v_type_bytes(F9, [service_profile_id | Path], TrUserData)
    end,
    if
        F10 == undefined -> ok;
        true -> v_type_bytes(F10, [routing_profile_id | Path], TrUserData)
    end,
    ok;
'v_msg_ns.MulticastGroup'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.MulticastGroup'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.CreateMulticastGroupRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.CreateMulticastGroupRequest'/3}).
'v_msg_ns.CreateMulticastGroupRequest'(
    #'ns.CreateMulticastGroupRequest'{multicast_group = F1},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> 'v_msg_ns.MulticastGroup'(F1, [multicast_group | Path], TrUserData)
    end,
    ok;
'v_msg_ns.CreateMulticastGroupRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.CreateMulticastGroupRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.CreateMulticastGroupResponse'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.CreateMulticastGroupResponse'/3}).
'v_msg_ns.CreateMulticastGroupResponse'(
    #'ns.CreateMulticastGroupResponse'{id = F1},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [id | Path], TrUserData)
    end,
    ok;
'v_msg_ns.CreateMulticastGroupResponse'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.CreateMulticastGroupResponse'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.GetMulticastGroupRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.GetMulticastGroupRequest'/3}).
'v_msg_ns.GetMulticastGroupRequest'(#'ns.GetMulticastGroupRequest'{id = F1}, Path, TrUserData) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [id | Path], TrUserData)
    end,
    ok;
'v_msg_ns.GetMulticastGroupRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.GetMulticastGroupRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.GetMulticastGroupResponse'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.GetMulticastGroupResponse'/3}).
'v_msg_ns.GetMulticastGroupResponse'(
    #'ns.GetMulticastGroupResponse'{multicast_group = F1, created_at = F2, updated_at = F3},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> 'v_msg_ns.MulticastGroup'(F1, [multicast_group | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> 'v_msg_google.protobuf.Timestamp'(F2, [created_at | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> 'v_msg_google.protobuf.Timestamp'(F3, [updated_at | Path], TrUserData)
    end,
    ok;
'v_msg_ns.GetMulticastGroupResponse'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.GetMulticastGroupResponse'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.UpdateMulticastGroupRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.UpdateMulticastGroupRequest'/3}).
'v_msg_ns.UpdateMulticastGroupRequest'(
    #'ns.UpdateMulticastGroupRequest'{multicast_group = F1},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> 'v_msg_ns.MulticastGroup'(F1, [multicast_group | Path], TrUserData)
    end,
    ok;
'v_msg_ns.UpdateMulticastGroupRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.UpdateMulticastGroupRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.DeleteMulticastGroupRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.DeleteMulticastGroupRequest'/3}).
'v_msg_ns.DeleteMulticastGroupRequest'(
    #'ns.DeleteMulticastGroupRequest'{id = F1},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [id | Path], TrUserData)
    end,
    ok;
'v_msg_ns.DeleteMulticastGroupRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.DeleteMulticastGroupRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.AddDeviceToMulticastGroupRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.AddDeviceToMulticastGroupRequest'/3}).
'v_msg_ns.AddDeviceToMulticastGroupRequest'(
    #'ns.AddDeviceToMulticastGroupRequest'{dev_eui = F1, multicast_group_id = F2},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [dev_eui | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_bytes(F2, [multicast_group_id | Path], TrUserData)
    end,
    ok;
'v_msg_ns.AddDeviceToMulticastGroupRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.AddDeviceToMulticastGroupRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.RemoveDeviceFromMulticastGroupRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.RemoveDeviceFromMulticastGroupRequest'/3}).
'v_msg_ns.RemoveDeviceFromMulticastGroupRequest'(
    #'ns.RemoveDeviceFromMulticastGroupRequest'{dev_eui = F1, multicast_group_id = F2},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [dev_eui | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_bytes(F2, [multicast_group_id | Path], TrUserData)
    end,
    ok;
'v_msg_ns.RemoveDeviceFromMulticastGroupRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.RemoveDeviceFromMulticastGroupRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.MulticastQueueItem'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.MulticastQueueItem'/3}).
'v_msg_ns.MulticastQueueItem'(
    #'ns.MulticastQueueItem'{multicast_group_id = F1, f_cnt = F2, f_port = F3, frm_payload = F4},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [multicast_group_id | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_uint32(F2, [f_cnt | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_uint32(F3, [f_port | Path], TrUserData)
    end,
    if
        F4 == undefined -> ok;
        true -> v_type_bytes(F4, [frm_payload | Path], TrUserData)
    end,
    ok;
'v_msg_ns.MulticastQueueItem'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.MulticastQueueItem'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.EnqueueMulticastQueueItemRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.EnqueueMulticastQueueItemRequest'/3}).
'v_msg_ns.EnqueueMulticastQueueItemRequest'(
    #'ns.EnqueueMulticastQueueItemRequest'{multicast_queue_item = F1},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> 'v_msg_ns.MulticastQueueItem'(F1, [multicast_queue_item | Path], TrUserData)
    end,
    ok;
'v_msg_ns.EnqueueMulticastQueueItemRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.EnqueueMulticastQueueItemRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.FlushMulticastQueueForMulticastGroupRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.FlushMulticastQueueForMulticastGroupRequest'/3}).
'v_msg_ns.FlushMulticastQueueForMulticastGroupRequest'(
    #'ns.FlushMulticastQueueForMulticastGroupRequest'{multicast_group_id = F1},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [multicast_group_id | Path], TrUserData)
    end,
    ok;
'v_msg_ns.FlushMulticastQueueForMulticastGroupRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.FlushMulticastQueueForMulticastGroupRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.GetMulticastQueueItemsForMulticastGroupRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.GetMulticastQueueItemsForMulticastGroupRequest'/3}).
'v_msg_ns.GetMulticastQueueItemsForMulticastGroupRequest'(
    #'ns.GetMulticastQueueItemsForMulticastGroupRequest'{multicast_group_id = F1},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [multicast_group_id | Path], TrUserData)
    end,
    ok;
'v_msg_ns.GetMulticastQueueItemsForMulticastGroupRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.GetMulticastQueueItemsForMulticastGroupRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.GetMulticastQueueItemsForMulticastGroupResponse'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.GetMulticastQueueItemsForMulticastGroupResponse'/3}).
'v_msg_ns.GetMulticastQueueItemsForMulticastGroupResponse'(
    #'ns.GetMulticastQueueItemsForMulticastGroupResponse'{multicast_queue_items = F1},
    Path,
    TrUserData
) ->
    if
        is_list(F1) ->
            _ = [
                'v_msg_ns.MulticastQueueItem'(Elem, [multicast_queue_items | Path], TrUserData)
                || Elem <- F1
            ],
            ok;
        true ->
            mk_type_error({invalid_list_of, {msg, 'ns.MulticastQueueItem'}}, F1, [
                multicast_queue_items
                | Path
            ])
    end,
    ok;
'v_msg_ns.GetMulticastQueueItemsForMulticastGroupResponse'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.GetMulticastQueueItemsForMulticastGroupResponse'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.GetADRAlgorithmsResponse'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.GetADRAlgorithmsResponse'/3}).
'v_msg_ns.GetADRAlgorithmsResponse'(
    #'ns.GetADRAlgorithmsResponse'{adr_algorithms = F1},
    Path,
    TrUserData
) ->
    if
        is_list(F1) ->
            _ = ['v_msg_ns.ADRAlgorithm'(Elem, [adr_algorithms | Path], TrUserData) || Elem <- F1],
            ok;
        true ->
            mk_type_error({invalid_list_of, {msg, 'ns.ADRAlgorithm'}}, F1, [adr_algorithms | Path])
    end,
    ok;
'v_msg_ns.GetADRAlgorithmsResponse'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.GetADRAlgorithmsResponse'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.ADRAlgorithm'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.ADRAlgorithm'/3}).
'v_msg_ns.ADRAlgorithm'(#'ns.ADRAlgorithm'{id = F1, name = F2}, Path, TrUserData) ->
    if
        F1 == undefined -> ok;
        true -> v_type_string(F1, [id | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_string(F2, [name | Path], TrUserData)
    end,
    ok;
'v_msg_ns.ADRAlgorithm'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.ADRAlgorithm'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_google.protobuf.Timestamp'/3}).
-dialyzer({nowarn_function, 'v_msg_google.protobuf.Timestamp'/3}).
'v_msg_google.protobuf.Timestamp'(
    #'google.protobuf.Timestamp'{seconds = F1, nanos = F2},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_int64(F1, [seconds | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_int32(F2, [nanos | Path], TrUserData)
    end,
    ok;
'v_msg_google.protobuf.Timestamp'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'google.protobuf.Timestamp'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_google.protobuf.Duration'/3}).
-dialyzer({nowarn_function, 'v_msg_google.protobuf.Duration'/3}).
'v_msg_google.protobuf.Duration'(
    #'google.protobuf.Duration'{seconds = F1, nanos = F2},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_int64(F1, [seconds | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_int32(F2, [nanos | Path], TrUserData)
    end,
    ok;
'v_msg_google.protobuf.Duration'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'google.protobuf.Duration'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_google.protobuf.Empty'/3}).
-dialyzer({nowarn_function, 'v_msg_google.protobuf.Empty'/3}).
'v_msg_google.protobuf.Empty'(#'google.protobuf.Empty'{}, _Path, _) ->
    ok;
'v_msg_google.protobuf.Empty'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'google.protobuf.Empty'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_common.KeyEnvelope'/3}).
-dialyzer({nowarn_function, 'v_msg_common.KeyEnvelope'/3}).
'v_msg_common.KeyEnvelope'(#'common.KeyEnvelope'{kek_label = F1, aes_key = F2}, Path, TrUserData) ->
    if
        F1 == undefined -> ok;
        true -> v_type_string(F1, [kek_label | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_bytes(F2, [aes_key | Path], TrUserData)
    end,
    ok;
'v_msg_common.KeyEnvelope'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'common.KeyEnvelope'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_common.Location'/3}).
-dialyzer({nowarn_function, 'v_msg_common.Location'/3}).
'v_msg_common.Location'(
    #'common.Location'{latitude = F1, longitude = F2, altitude = F3, source = F4, accuracy = F5},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_double(F1, [latitude | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_double(F2, [longitude | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_double(F3, [altitude | Path], TrUserData)
    end,
    if
        F4 == undefined -> ok;
        true -> 'v_enum_common.LocationSource'(F4, [source | Path], TrUserData)
    end,
    if
        F5 == undefined -> ok;
        true -> v_type_uint32(F5, [accuracy | Path], TrUserData)
    end,
    ok;
'v_msg_common.Location'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'common.Location'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.UplinkTXInfo'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.UplinkTXInfo'/3}).
'v_msg_gw.UplinkTXInfo'(
    #'gw.UplinkTXInfo'{frequency = F1, modulation = F2, modulation_info = F3},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_uint32(F1, [frequency | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> 'v_enum_common.Modulation'(F2, [modulation | Path], TrUserData)
    end,
    case F3 of
        undefined ->
            ok;
        {lora_modulation_info, OF3} ->
            'v_msg_gw.LoRaModulationInfo'(
                OF3,
                [lora_modulation_info, modulation_info | Path],
                TrUserData
            );
        {fsk_modulation_info, OF3} ->
            'v_msg_gw.FSKModulationInfo'(
                OF3,
                [fsk_modulation_info, modulation_info | Path],
                TrUserData
            );
        _ ->
            mk_type_error(invalid_oneof, F3, [modulation_info | Path])
    end,
    ok;
'v_msg_gw.UplinkTXInfo'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.UplinkTXInfo'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.LoRaModulationInfo'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.LoRaModulationInfo'/3}).
'v_msg_gw.LoRaModulationInfo'(
    #'gw.LoRaModulationInfo'{
        bandwidth = F1,
        spreading_factor = F2,
        code_rate = F3,
        polarization_inversion = F4
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_uint32(F1, [bandwidth | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_uint32(F2, [spreading_factor | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_string(F3, [code_rate | Path], TrUserData)
    end,
    if
        F4 == undefined -> ok;
        true -> v_type_bool(F4, [polarization_inversion | Path], TrUserData)
    end,
    ok;
'v_msg_gw.LoRaModulationInfo'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.LoRaModulationInfo'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.FSKModulationInfo'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.FSKModulationInfo'/3}).
'v_msg_gw.FSKModulationInfo'(
    #'gw.FSKModulationInfo'{frequency_deviation = F1, datarate = F2},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_uint32(F1, [frequency_deviation | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_uint32(F2, [datarate | Path], TrUserData)
    end,
    ok;
'v_msg_gw.FSKModulationInfo'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.FSKModulationInfo'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.EncryptedFineTimestamp'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.EncryptedFineTimestamp'/3}).
'v_msg_gw.EncryptedFineTimestamp'(
    #'gw.EncryptedFineTimestamp'{aes_key_index = F1, encrypted_ns = F2, fpga_id = F3},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_uint32(F1, [aes_key_index | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_bytes(F2, [encrypted_ns | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_bytes(F3, [fpga_id | Path], TrUserData)
    end,
    ok;
'v_msg_gw.EncryptedFineTimestamp'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.EncryptedFineTimestamp'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.PlainFineTimestamp'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.PlainFineTimestamp'/3}).
'v_msg_gw.PlainFineTimestamp'(#'gw.PlainFineTimestamp'{time = F1}, Path, TrUserData) ->
    if
        F1 == undefined -> ok;
        true -> 'v_msg_google.protobuf.Timestamp'(F1, [time | Path], TrUserData)
    end,
    ok;
'v_msg_gw.PlainFineTimestamp'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.PlainFineTimestamp'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.GatewayStats'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.GatewayStats'/3}).
'v_msg_gw.GatewayStats'(
    #'gw.GatewayStats'{
        gateway_id = F1,
        ip = F2,
        time = F3,
        location = F4,
        config_version = F5,
        rx_packets_received = F6,
        rx_packets_received_ok = F7,
        tx_packets_received = F8,
        tx_packets_emitted = F9,
        meta_data = F10,
        stats_id = F11
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [gateway_id | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_string(F2, [ip | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> 'v_msg_google.protobuf.Timestamp'(F3, [time | Path], TrUserData)
    end,
    if
        F4 == undefined -> ok;
        true -> 'v_msg_common.Location'(F4, [location | Path], TrUserData)
    end,
    if
        F5 == undefined -> ok;
        true -> v_type_string(F5, [config_version | Path], TrUserData)
    end,
    if
        F6 == undefined -> ok;
        true -> v_type_uint32(F6, [rx_packets_received | Path], TrUserData)
    end,
    if
        F7 == undefined -> ok;
        true -> v_type_uint32(F7, [rx_packets_received_ok | Path], TrUserData)
    end,
    if
        F8 == undefined -> ok;
        true -> v_type_uint32(F8, [tx_packets_received | Path], TrUserData)
    end,
    if
        F9 == undefined -> ok;
        true -> v_type_uint32(F9, [tx_packets_emitted | Path], TrUserData)
    end,
    'v_map<string,string>'(F10, [meta_data | Path], TrUserData),
    if
        F11 == undefined -> ok;
        true -> v_type_bytes(F11, [stats_id | Path], TrUserData)
    end,
    ok;
'v_msg_gw.GatewayStats'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.GatewayStats'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.UplinkRXInfo'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.UplinkRXInfo'/3}).
'v_msg_gw.UplinkRXInfo'(
    #'gw.UplinkRXInfo'{
        gateway_id = F1,
        time = F2,
        time_since_gps_epoch = F3,
        rssi = F4,
        lora_snr = F5,
        channel = F6,
        rf_chain = F7,
        board = F8,
        antenna = F9,
        location = F10,
        fine_timestamp_type = F11,
        fine_timestamp = F12,
        context = F13,
        uplink_id = F14,
        crc_status = F15
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [gateway_id | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> 'v_msg_google.protobuf.Timestamp'(F2, [time | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> 'v_msg_google.protobuf.Duration'(F3, [time_since_gps_epoch | Path], TrUserData)
    end,
    if
        F4 == undefined -> ok;
        true -> v_type_int32(F4, [rssi | Path], TrUserData)
    end,
    if
        F5 == undefined -> ok;
        true -> v_type_double(F5, [lora_snr | Path], TrUserData)
    end,
    if
        F6 == undefined -> ok;
        true -> v_type_uint32(F6, [channel | Path], TrUserData)
    end,
    if
        F7 == undefined -> ok;
        true -> v_type_uint32(F7, [rf_chain | Path], TrUserData)
    end,
    if
        F8 == undefined -> ok;
        true -> v_type_uint32(F8, [board | Path], TrUserData)
    end,
    if
        F9 == undefined -> ok;
        true -> v_type_uint32(F9, [antenna | Path], TrUserData)
    end,
    if
        F10 == undefined -> ok;
        true -> 'v_msg_common.Location'(F10, [location | Path], TrUserData)
    end,
    if
        F11 == undefined -> ok;
        true -> 'v_enum_gw.FineTimestampType'(F11, [fine_timestamp_type | Path], TrUserData)
    end,
    case F12 of
        undefined ->
            ok;
        {encrypted_fine_timestamp, OF12} ->
            'v_msg_gw.EncryptedFineTimestamp'(
                OF12,
                [encrypted_fine_timestamp, fine_timestamp | Path],
                TrUserData
            );
        {plain_fine_timestamp, OF12} ->
            'v_msg_gw.PlainFineTimestamp'(
                OF12,
                [plain_fine_timestamp, fine_timestamp | Path],
                TrUserData
            );
        _ ->
            mk_type_error(invalid_oneof, F12, [fine_timestamp | Path])
    end,
    if
        F13 == undefined -> ok;
        true -> v_type_bytes(F13, [context | Path], TrUserData)
    end,
    if
        F14 == undefined -> ok;
        true -> v_type_bytes(F14, [uplink_id | Path], TrUserData)
    end,
    if
        F15 == undefined -> ok;
        true -> 'v_enum_gw.CRCStatus'(F15, [crc_status | Path], TrUserData)
    end,
    ok;
'v_msg_gw.UplinkRXInfo'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.UplinkRXInfo'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.DownlinkTXInfo'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.DownlinkTXInfo'/3}).
'v_msg_gw.DownlinkTXInfo'(
    #'gw.DownlinkTXInfo'{
        gateway_id = F1,
        frequency = F2,
        power = F3,
        modulation = F4,
        modulation_info = F5,
        board = F6,
        antenna = F7,
        timing = F8,
        timing_info = F9,
        context = F10
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [gateway_id | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_uint32(F2, [frequency | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_int32(F3, [power | Path], TrUserData)
    end,
    if
        F4 == undefined -> ok;
        true -> 'v_enum_common.Modulation'(F4, [modulation | Path], TrUserData)
    end,
    case F5 of
        undefined ->
            ok;
        {lora_modulation_info, OF5} ->
            'v_msg_gw.LoRaModulationInfo'(
                OF5,
                [lora_modulation_info, modulation_info | Path],
                TrUserData
            );
        {fsk_modulation_info, OF5} ->
            'v_msg_gw.FSKModulationInfo'(
                OF5,
                [fsk_modulation_info, modulation_info | Path],
                TrUserData
            );
        _ ->
            mk_type_error(invalid_oneof, F5, [modulation_info | Path])
    end,
    if
        F6 == undefined -> ok;
        true -> v_type_uint32(F6, [board | Path], TrUserData)
    end,
    if
        F7 == undefined -> ok;
        true -> v_type_uint32(F7, [antenna | Path], TrUserData)
    end,
    if
        F8 == undefined -> ok;
        true -> 'v_enum_gw.DownlinkTiming'(F8, [timing | Path], TrUserData)
    end,
    case F9 of
        undefined ->
            ok;
        {immediately_timing_info, OF9} ->
            'v_msg_gw.ImmediatelyTimingInfo'(
                OF9,
                [immediately_timing_info, timing_info | Path],
                TrUserData
            );
        {delay_timing_info, OF9} ->
            'v_msg_gw.DelayTimingInfo'(OF9, [delay_timing_info, timing_info | Path], TrUserData);
        {gps_epoch_timing_info, OF9} ->
            'v_msg_gw.GPSEpochTimingInfo'(
                OF9,
                [gps_epoch_timing_info, timing_info | Path],
                TrUserData
            );
        _ ->
            mk_type_error(invalid_oneof, F9, [timing_info | Path])
    end,
    if
        F10 == undefined -> ok;
        true -> v_type_bytes(F10, [context | Path], TrUserData)
    end,
    ok;
'v_msg_gw.DownlinkTXInfo'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.DownlinkTXInfo'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.ImmediatelyTimingInfo'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.ImmediatelyTimingInfo'/3}).
'v_msg_gw.ImmediatelyTimingInfo'(#'gw.ImmediatelyTimingInfo'{}, _Path, _) ->
    ok;
'v_msg_gw.ImmediatelyTimingInfo'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.ImmediatelyTimingInfo'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.DelayTimingInfo'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.DelayTimingInfo'/3}).
'v_msg_gw.DelayTimingInfo'(#'gw.DelayTimingInfo'{delay = F1}, Path, TrUserData) ->
    if
        F1 == undefined -> ok;
        true -> 'v_msg_google.protobuf.Duration'(F1, [delay | Path], TrUserData)
    end,
    ok;
'v_msg_gw.DelayTimingInfo'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.DelayTimingInfo'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.GPSEpochTimingInfo'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.GPSEpochTimingInfo'/3}).
'v_msg_gw.GPSEpochTimingInfo'(
    #'gw.GPSEpochTimingInfo'{time_since_gps_epoch = F1},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> 'v_msg_google.protobuf.Duration'(F1, [time_since_gps_epoch | Path], TrUserData)
    end,
    ok;
'v_msg_gw.GPSEpochTimingInfo'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.GPSEpochTimingInfo'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.UplinkFrame'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.UplinkFrame'/3}).
'v_msg_gw.UplinkFrame'(
    #'gw.UplinkFrame'{phy_payload = F1, tx_info = F2, rx_info = F3},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [phy_payload | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> 'v_msg_gw.UplinkTXInfo'(F2, [tx_info | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> 'v_msg_gw.UplinkRXInfo'(F3, [rx_info | Path], TrUserData)
    end,
    ok;
'v_msg_gw.UplinkFrame'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.UplinkFrame'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.UplinkFrameSet'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.UplinkFrameSet'/3}).
'v_msg_gw.UplinkFrameSet'(
    #'gw.UplinkFrameSet'{phy_payload = F1, tx_info = F2, rx_info = F3},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [phy_payload | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> 'v_msg_gw.UplinkTXInfo'(F2, [tx_info | Path], TrUserData)
    end,
    if
        is_list(F3) ->
            _ = ['v_msg_gw.UplinkRXInfo'(Elem, [rx_info | Path], TrUserData) || Elem <- F3],
            ok;
        true ->
            mk_type_error({invalid_list_of, {msg, 'gw.UplinkRXInfo'}}, F3, [rx_info | Path])
    end,
    ok;
'v_msg_gw.UplinkFrameSet'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.UplinkFrameSet'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.DownlinkFrame'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.DownlinkFrame'/3}).
'v_msg_gw.DownlinkFrame'(
    #'gw.DownlinkFrame'{
        phy_payload = F1,
        tx_info = F2,
        token = F3,
        downlink_id = F4,
        items = F5,
        gateway_id = F6
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [phy_payload | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> 'v_msg_gw.DownlinkTXInfo'(F2, [tx_info | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_uint32(F3, [token | Path], TrUserData)
    end,
    if
        F4 == undefined -> ok;
        true -> v_type_bytes(F4, [downlink_id | Path], TrUserData)
    end,
    if
        is_list(F5) ->
            _ = ['v_msg_gw.DownlinkFrameItem'(Elem, [items | Path], TrUserData) || Elem <- F5],
            ok;
        true ->
            mk_type_error({invalid_list_of, {msg, 'gw.DownlinkFrameItem'}}, F5, [items | Path])
    end,
    if
        F6 == undefined -> ok;
        true -> v_type_bytes(F6, [gateway_id | Path], TrUserData)
    end,
    ok;
'v_msg_gw.DownlinkFrame'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.DownlinkFrame'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.DownlinkFrameItem'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.DownlinkFrameItem'/3}).
'v_msg_gw.DownlinkFrameItem'(
    #'gw.DownlinkFrameItem'{phy_payload = F1, tx_info = F2},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [phy_payload | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> 'v_msg_gw.DownlinkTXInfo'(F2, [tx_info | Path], TrUserData)
    end,
    ok;
'v_msg_gw.DownlinkFrameItem'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.DownlinkFrameItem'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.DownlinkTXAck'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.DownlinkTXAck'/3}).
'v_msg_gw.DownlinkTXAck'(
    #'gw.DownlinkTXAck'{gateway_id = F1, token = F2, error = F3, downlink_id = F4, items = F5},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [gateway_id | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_uint32(F2, [token | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_string(F3, [error | Path], TrUserData)
    end,
    if
        F4 == undefined -> ok;
        true -> v_type_bytes(F4, [downlink_id | Path], TrUserData)
    end,
    if
        is_list(F5) ->
            _ = ['v_msg_gw.DownlinkTXAckItem'(Elem, [items | Path], TrUserData) || Elem <- F5],
            ok;
        true ->
            mk_type_error({invalid_list_of, {msg, 'gw.DownlinkTXAckItem'}}, F5, [items | Path])
    end,
    ok;
'v_msg_gw.DownlinkTXAck'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.DownlinkTXAck'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.DownlinkTXAckItem'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.DownlinkTXAckItem'/3}).
'v_msg_gw.DownlinkTXAckItem'(#'gw.DownlinkTXAckItem'{status = F1}, Path, TrUserData) ->
    if
        F1 == undefined -> ok;
        true -> 'v_enum_gw.TxAckStatus'(F1, [status | Path], TrUserData)
    end,
    ok;
'v_msg_gw.DownlinkTXAckItem'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.DownlinkTXAckItem'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.GatewayConfiguration'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.GatewayConfiguration'/3}).
'v_msg_gw.GatewayConfiguration'(
    #'gw.GatewayConfiguration'{gateway_id = F1, version = F2, channels = F3, stats_interval = F4},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [gateway_id | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_string(F2, [version | Path], TrUserData)
    end,
    if
        is_list(F3) ->
            _ = [
                'v_msg_gw.ChannelConfiguration'(Elem, [channels | Path], TrUserData)
                || Elem <- F3
            ],
            ok;
        true ->
            mk_type_error({invalid_list_of, {msg, 'gw.ChannelConfiguration'}}, F3, [channels | Path])
    end,
    if
        F4 == undefined -> ok;
        true -> 'v_msg_google.protobuf.Duration'(F4, [stats_interval | Path], TrUserData)
    end,
    ok;
'v_msg_gw.GatewayConfiguration'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.GatewayConfiguration'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.ChannelConfiguration'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.ChannelConfiguration'/3}).
'v_msg_gw.ChannelConfiguration'(
    #'gw.ChannelConfiguration'{
        frequency = F1,
        modulation = F2,
        modulation_config = F3,
        board = F4,
        demodulator = F5
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_uint32(F1, [frequency | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> 'v_enum_common.Modulation'(F2, [modulation | Path], TrUserData)
    end,
    case F3 of
        undefined ->
            ok;
        {lora_modulation_config, OF3} ->
            'v_msg_gw.LoRaModulationConfig'(
                OF3,
                [lora_modulation_config, modulation_config | Path],
                TrUserData
            );
        {fsk_modulation_config, OF3} ->
            'v_msg_gw.FSKModulationConfig'(
                OF3,
                [fsk_modulation_config, modulation_config | Path],
                TrUserData
            );
        _ ->
            mk_type_error(invalid_oneof, F3, [modulation_config | Path])
    end,
    if
        F4 == undefined -> ok;
        true -> v_type_uint32(F4, [board | Path], TrUserData)
    end,
    if
        F5 == undefined -> ok;
        true -> v_type_uint32(F5, [demodulator | Path], TrUserData)
    end,
    ok;
'v_msg_gw.ChannelConfiguration'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.ChannelConfiguration'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.LoRaModulationConfig'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.LoRaModulationConfig'/3}).
'v_msg_gw.LoRaModulationConfig'(
    #'gw.LoRaModulationConfig'{bandwidth = F1, spreading_factors = F2},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_uint32(F1, [bandwidth | Path], TrUserData)
    end,
    if
        is_list(F2) ->
            _ = [v_type_uint32(Elem, [spreading_factors | Path], TrUserData) || Elem <- F2],
            ok;
        true ->
            mk_type_error({invalid_list_of, uint32}, F2, [spreading_factors | Path])
    end,
    ok;
'v_msg_gw.LoRaModulationConfig'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.LoRaModulationConfig'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.FSKModulationConfig'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.FSKModulationConfig'/3}).
'v_msg_gw.FSKModulationConfig'(
    #'gw.FSKModulationConfig'{bandwidth = F1, bitrate = F2},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_uint32(F1, [bandwidth | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_uint32(F2, [bitrate | Path], TrUserData)
    end,
    ok;
'v_msg_gw.FSKModulationConfig'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.FSKModulationConfig'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.GatewayCommandExecRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.GatewayCommandExecRequest'/3}).
'v_msg_gw.GatewayCommandExecRequest'(
    #'gw.GatewayCommandExecRequest'{
        gateway_id = F1,
        command = F2,
        'ExecId' = F3,
        stdin = F4,
        environment = F5
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [gateway_id | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_string(F2, [command | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_bytes(F3, ['ExecId' | Path], TrUserData)
    end,
    if
        F4 == undefined -> ok;
        true -> v_type_bytes(F4, [stdin | Path], TrUserData)
    end,
    'v_map<string,string>'(F5, [environment | Path], TrUserData),
    ok;
'v_msg_gw.GatewayCommandExecRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.GatewayCommandExecRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.GatewayCommandExecResponse'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.GatewayCommandExecResponse'/3}).
'v_msg_gw.GatewayCommandExecResponse'(
    #'gw.GatewayCommandExecResponse'{
        gateway_id = F1,
        exec_id = F2,
        stdout = F3,
        stderr = F4,
        error = F5
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [gateway_id | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_bytes(F2, [exec_id | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_bytes(F3, [stdout | Path], TrUserData)
    end,
    if
        F4 == undefined -> ok;
        true -> v_type_bytes(F4, [stderr | Path], TrUserData)
    end,
    if
        F5 == undefined -> ok;
        true -> v_type_string(F5, [error | Path], TrUserData)
    end,
    ok;
'v_msg_gw.GatewayCommandExecResponse'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.GatewayCommandExecResponse'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.RawPacketForwarderEvent'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.RawPacketForwarderEvent'/3}).
'v_msg_gw.RawPacketForwarderEvent'(
    #'gw.RawPacketForwarderEvent'{gateway_id = F1, raw_id = F2, payload = F3},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [gateway_id | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_bytes(F2, [raw_id | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_bytes(F3, [payload | Path], TrUserData)
    end,
    ok;
'v_msg_gw.RawPacketForwarderEvent'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.RawPacketForwarderEvent'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.RawPacketForwarderCommand'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.RawPacketForwarderCommand'/3}).
'v_msg_gw.RawPacketForwarderCommand'(
    #'gw.RawPacketForwarderCommand'{gateway_id = F1, raw_id = F2, payload = F3},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [gateway_id | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_bytes(F2, [raw_id | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_bytes(F3, [payload | Path], TrUserData)
    end,
    ok;
'v_msg_gw.RawPacketForwarderCommand'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.RawPacketForwarderCommand'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.ConnState'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.ConnState'/3}).
'v_msg_gw.ConnState'(#'gw.ConnState'{gateway_id = F1, state = F2}, Path, TrUserData) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [gateway_id | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> 'v_enum_gw.ConnState.State'(F2, [state | Path], TrUserData)
    end,
    ok;
'v_msg_gw.ConnState'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.ConnState'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.ServiceProfile'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.ServiceProfile'/3}).
'v_msg_ns.ServiceProfile'(
    #'ns.ServiceProfile'{
        id = F1,
        ul_rate = F2,
        ul_bucket_size = F3,
        ul_rate_policy = F4,
        dl_rate = F5,
        dl_bucket_size = F6,
        dl_rate_policy = F7,
        add_gw_metadata = F8,
        dev_status_req_freq = F9,
        report_dev_status_battery = F10,
        report_dev_status_margin = F11,
        dr_min = F12,
        dr_max = F13,
        channel_mask = F14,
        pr_allowed = F15,
        hr_allowed = F16,
        ra_allowed = F17,
        nwk_geo_loc = F18,
        target_per = F19,
        min_gw_diversity = F20,
        gws_private = F21
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [id | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_uint32(F2, [ul_rate | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_uint32(F3, [ul_bucket_size | Path], TrUserData)
    end,
    if
        F4 == undefined -> ok;
        true -> 'v_enum_ns.RatePolicy'(F4, [ul_rate_policy | Path], TrUserData)
    end,
    if
        F5 == undefined -> ok;
        true -> v_type_uint32(F5, [dl_rate | Path], TrUserData)
    end,
    if
        F6 == undefined -> ok;
        true -> v_type_uint32(F6, [dl_bucket_size | Path], TrUserData)
    end,
    if
        F7 == undefined -> ok;
        true -> 'v_enum_ns.RatePolicy'(F7, [dl_rate_policy | Path], TrUserData)
    end,
    if
        F8 == undefined -> ok;
        true -> v_type_bool(F8, [add_gw_metadata | Path], TrUserData)
    end,
    if
        F9 == undefined -> ok;
        true -> v_type_uint32(F9, [dev_status_req_freq | Path], TrUserData)
    end,
    if
        F10 == undefined -> ok;
        true -> v_type_bool(F10, [report_dev_status_battery | Path], TrUserData)
    end,
    if
        F11 == undefined -> ok;
        true -> v_type_bool(F11, [report_dev_status_margin | Path], TrUserData)
    end,
    if
        F12 == undefined -> ok;
        true -> v_type_uint32(F12, [dr_min | Path], TrUserData)
    end,
    if
        F13 == undefined -> ok;
        true -> v_type_uint32(F13, [dr_max | Path], TrUserData)
    end,
    if
        F14 == undefined -> ok;
        true -> v_type_bytes(F14, [channel_mask | Path], TrUserData)
    end,
    if
        F15 == undefined -> ok;
        true -> v_type_bool(F15, [pr_allowed | Path], TrUserData)
    end,
    if
        F16 == undefined -> ok;
        true -> v_type_bool(F16, [hr_allowed | Path], TrUserData)
    end,
    if
        F17 == undefined -> ok;
        true -> v_type_bool(F17, [ra_allowed | Path], TrUserData)
    end,
    if
        F18 == undefined -> ok;
        true -> v_type_bool(F18, [nwk_geo_loc | Path], TrUserData)
    end,
    if
        F19 == undefined -> ok;
        true -> v_type_uint32(F19, [target_per | Path], TrUserData)
    end,
    if
        F20 == undefined -> ok;
        true -> v_type_uint32(F20, [min_gw_diversity | Path], TrUserData)
    end,
    if
        F21 == undefined -> ok;
        true -> v_type_bool(F21, [gws_private | Path], TrUserData)
    end,
    ok;
'v_msg_ns.ServiceProfile'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.ServiceProfile'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.DeviceProfile'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.DeviceProfile'/3}).
'v_msg_ns.DeviceProfile'(
    #'ns.DeviceProfile'{
        id = F1,
        supports_class_b = F2,
        class_b_timeout = F3,
        ping_slot_period = F4,
        ping_slot_dr = F5,
        ping_slot_freq = F6,
        supports_class_c = F7,
        class_c_timeout = F8,
        mac_version = F9,
        reg_params_revision = F10,
        rx_delay_1 = F11,
        rx_dr_offset_1 = F12,
        rx_datarate_2 = F13,
        rx_freq_2 = F14,
        factory_preset_freqs = F15,
        max_eirp = F16,
        max_duty_cycle = F17,
        supports_join = F18,
        rf_region = F19,
        supports_32bit_f_cnt = F20,
        adr_algorithm_id = F21
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [id | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_bool(F2, [supports_class_b | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_uint32(F3, [class_b_timeout | Path], TrUserData)
    end,
    if
        F4 == undefined -> ok;
        true -> v_type_uint32(F4, [ping_slot_period | Path], TrUserData)
    end,
    if
        F5 == undefined -> ok;
        true -> v_type_uint32(F5, [ping_slot_dr | Path], TrUserData)
    end,
    if
        F6 == undefined -> ok;
        true -> v_type_uint32(F6, [ping_slot_freq | Path], TrUserData)
    end,
    if
        F7 == undefined -> ok;
        true -> v_type_bool(F7, [supports_class_c | Path], TrUserData)
    end,
    if
        F8 == undefined -> ok;
        true -> v_type_uint32(F8, [class_c_timeout | Path], TrUserData)
    end,
    if
        F9 == undefined -> ok;
        true -> v_type_string(F9, [mac_version | Path], TrUserData)
    end,
    if
        F10 == undefined -> ok;
        true -> v_type_string(F10, [reg_params_revision | Path], TrUserData)
    end,
    if
        F11 == undefined -> ok;
        true -> v_type_uint32(F11, [rx_delay_1 | Path], TrUserData)
    end,
    if
        F12 == undefined -> ok;
        true -> v_type_uint32(F12, [rx_dr_offset_1 | Path], TrUserData)
    end,
    if
        F13 == undefined -> ok;
        true -> v_type_uint32(F13, [rx_datarate_2 | Path], TrUserData)
    end,
    if
        F14 == undefined -> ok;
        true -> v_type_uint32(F14, [rx_freq_2 | Path], TrUserData)
    end,
    if
        is_list(F15) ->
            _ = [v_type_uint32(Elem, [factory_preset_freqs | Path], TrUserData) || Elem <- F15],
            ok;
        true ->
            mk_type_error({invalid_list_of, uint32}, F15, [factory_preset_freqs | Path])
    end,
    if
        F16 == undefined -> ok;
        true -> v_type_uint32(F16, [max_eirp | Path], TrUserData)
    end,
    if
        F17 == undefined -> ok;
        true -> v_type_uint32(F17, [max_duty_cycle | Path], TrUserData)
    end,
    if
        F18 == undefined -> ok;
        true -> v_type_bool(F18, [supports_join | Path], TrUserData)
    end,
    if
        F19 == undefined -> ok;
        true -> v_type_string(F19, [rf_region | Path], TrUserData)
    end,
    if
        F20 == undefined -> ok;
        true -> v_type_bool(F20, [supports_32bit_f_cnt | Path], TrUserData)
    end,
    if
        F21 == undefined -> ok;
        true -> v_type_string(F21, [adr_algorithm_id | Path], TrUserData)
    end,
    ok;
'v_msg_ns.DeviceProfile'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.DeviceProfile'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_ns.RoutingProfile'/3}).
-dialyzer({nowarn_function, 'v_msg_ns.RoutingProfile'/3}).
'v_msg_ns.RoutingProfile'(
    #'ns.RoutingProfile'{id = F1, as_id = F2, ca_cert = F3, tls_cert = F4, tls_key = F5},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [id | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_string(F2, [as_id | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_string(F3, [ca_cert | Path], TrUserData)
    end,
    if
        F4 == undefined -> ok;
        true -> v_type_string(F4, [tls_cert | Path], TrUserData)
    end,
    if
        F5 == undefined -> ok;
        true -> v_type_string(F5, [tls_key | Path], TrUserData)
    end,
    ok;
'v_msg_ns.RoutingProfile'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ns.RoutingProfile'}, X, Path).

-compile({nowarn_unused_function, 'v_enum_ns.AggregationInterval'/3}).
-dialyzer({nowarn_function, 'v_enum_ns.AggregationInterval'/3}).
'v_enum_ns.AggregationInterval'('SECOND', _Path, _TrUserData) ->
    ok;
'v_enum_ns.AggregationInterval'('MINUTE', _Path, _TrUserData) ->
    ok;
'v_enum_ns.AggregationInterval'('HOUR', _Path, _TrUserData) ->
    ok;
'v_enum_ns.AggregationInterval'('DAY', _Path, _TrUserData) ->
    ok;
'v_enum_ns.AggregationInterval'('WEEK', _Path, _TrUserData) ->
    ok;
'v_enum_ns.AggregationInterval'('MONTH', _Path, _TrUserData) ->
    ok;
'v_enum_ns.AggregationInterval'('QUARTER', _Path, _TrUserData) ->
    ok;
'v_enum_ns.AggregationInterval'('YEAR', _Path, _TrUserData) ->
    ok;
'v_enum_ns.AggregationInterval'(V, _Path, _TrUserData) when
    -2147483648 =< V, V =< 2147483647, is_integer(V)
->
    ok;
'v_enum_ns.AggregationInterval'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'ns.AggregationInterval'}, X, Path).

-compile({nowarn_unused_function, 'v_enum_ns.MulticastGroupType'/3}).
-dialyzer({nowarn_function, 'v_enum_ns.MulticastGroupType'/3}).
'v_enum_ns.MulticastGroupType'('CLASS_C', _Path, _TrUserData) ->
    ok;
'v_enum_ns.MulticastGroupType'('CLASS_B', _Path, _TrUserData) ->
    ok;
'v_enum_ns.MulticastGroupType'(V, _Path, _TrUserData) when
    -2147483648 =< V, V =< 2147483647, is_integer(V)
->
    ok;
'v_enum_ns.MulticastGroupType'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'ns.MulticastGroupType'}, X, Path).

-compile({nowarn_unused_function, 'v_enum_common.Modulation'/3}).
-dialyzer({nowarn_function, 'v_enum_common.Modulation'/3}).
'v_enum_common.Modulation'('LORA', _Path, _TrUserData) ->
    ok;
'v_enum_common.Modulation'('FSK', _Path, _TrUserData) ->
    ok;
'v_enum_common.Modulation'(V, _Path, _TrUserData) when
    -2147483648 =< V, V =< 2147483647, is_integer(V)
->
    ok;
'v_enum_common.Modulation'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'common.Modulation'}, X, Path).

-compile({nowarn_unused_function, 'v_enum_common.Region'/3}).
-dialyzer({nowarn_function, 'v_enum_common.Region'/3}).
'v_enum_common.Region'('EU868', _Path, _TrUserData) ->
    ok;
'v_enum_common.Region'('US915', _Path, _TrUserData) ->
    ok;
'v_enum_common.Region'('CN779', _Path, _TrUserData) ->
    ok;
'v_enum_common.Region'('EU433', _Path, _TrUserData) ->
    ok;
'v_enum_common.Region'('AU915', _Path, _TrUserData) ->
    ok;
'v_enum_common.Region'('CN470', _Path, _TrUserData) ->
    ok;
'v_enum_common.Region'('AS923', _Path, _TrUserData) ->
    ok;
'v_enum_common.Region'('KR920', _Path, _TrUserData) ->
    ok;
'v_enum_common.Region'('IN865', _Path, _TrUserData) ->
    ok;
'v_enum_common.Region'('RU864', _Path, _TrUserData) ->
    ok;
'v_enum_common.Region'(V, _Path, _TrUserData) when
    -2147483648 =< V, V =< 2147483647, is_integer(V)
->
    ok;
'v_enum_common.Region'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'common.Region'}, X, Path).

-compile({nowarn_unused_function, 'v_enum_common.MType'/3}).
-dialyzer({nowarn_function, 'v_enum_common.MType'/3}).
'v_enum_common.MType'('JoinRequest', _Path, _TrUserData) ->
    ok;
'v_enum_common.MType'('JoinAccept', _Path, _TrUserData) ->
    ok;
'v_enum_common.MType'('UnconfirmedDataUp', _Path, _TrUserData) ->
    ok;
'v_enum_common.MType'('UnconfirmedDataDown', _Path, _TrUserData) ->
    ok;
'v_enum_common.MType'('ConfirmedDataUp', _Path, _TrUserData) ->
    ok;
'v_enum_common.MType'('ConfirmedDataDown', _Path, _TrUserData) ->
    ok;
'v_enum_common.MType'('RejoinRequest', _Path, _TrUserData) ->
    ok;
'v_enum_common.MType'('Proprietary', _Path, _TrUserData) ->
    ok;
'v_enum_common.MType'(V, _Path, _TrUserData) when
    -2147483648 =< V, V =< 2147483647, is_integer(V)
->
    ok;
'v_enum_common.MType'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'common.MType'}, X, Path).

-compile({nowarn_unused_function, 'v_enum_common.LocationSource'/3}).
-dialyzer({nowarn_function, 'v_enum_common.LocationSource'/3}).
'v_enum_common.LocationSource'('UNKNOWN', _Path, _TrUserData) ->
    ok;
'v_enum_common.LocationSource'('GPS', _Path, _TrUserData) ->
    ok;
'v_enum_common.LocationSource'('CONFIG', _Path, _TrUserData) ->
    ok;
'v_enum_common.LocationSource'('GEO_RESOLVER_TDOA', _Path, _TrUserData) ->
    ok;
'v_enum_common.LocationSource'('GEO_RESOLVER_RSSI', _Path, _TrUserData) ->
    ok;
'v_enum_common.LocationSource'('GEO_RESOLVER_GNSS', _Path, _TrUserData) ->
    ok;
'v_enum_common.LocationSource'('GEO_RESOLVER_WIFI', _Path, _TrUserData) ->
    ok;
'v_enum_common.LocationSource'(V, _Path, _TrUserData) when
    -2147483648 =< V, V =< 2147483647, is_integer(V)
->
    ok;
'v_enum_common.LocationSource'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'common.LocationSource'}, X, Path).

-compile({nowarn_unused_function, 'v_enum_gw.DownlinkTiming'/3}).
-dialyzer({nowarn_function, 'v_enum_gw.DownlinkTiming'/3}).
'v_enum_gw.DownlinkTiming'('IMMEDIATELY', _Path, _TrUserData) ->
    ok;
'v_enum_gw.DownlinkTiming'('DELAY', _Path, _TrUserData) ->
    ok;
'v_enum_gw.DownlinkTiming'('GPS_EPOCH', _Path, _TrUserData) ->
    ok;
'v_enum_gw.DownlinkTiming'(V, _Path, _TrUserData) when
    -2147483648 =< V, V =< 2147483647, is_integer(V)
->
    ok;
'v_enum_gw.DownlinkTiming'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'gw.DownlinkTiming'}, X, Path).

-compile({nowarn_unused_function, 'v_enum_gw.FineTimestampType'/3}).
-dialyzer({nowarn_function, 'v_enum_gw.FineTimestampType'/3}).
'v_enum_gw.FineTimestampType'('NONE', _Path, _TrUserData) ->
    ok;
'v_enum_gw.FineTimestampType'('ENCRYPTED', _Path, _TrUserData) ->
    ok;
'v_enum_gw.FineTimestampType'('PLAIN', _Path, _TrUserData) ->
    ok;
'v_enum_gw.FineTimestampType'(V, _Path, _TrUserData) when
    -2147483648 =< V, V =< 2147483647, is_integer(V)
->
    ok;
'v_enum_gw.FineTimestampType'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'gw.FineTimestampType'}, X, Path).

-compile({nowarn_unused_function, 'v_enum_gw.CRCStatus'/3}).
-dialyzer({nowarn_function, 'v_enum_gw.CRCStatus'/3}).
'v_enum_gw.CRCStatus'('NO_CRC', _Path, _TrUserData) ->
    ok;
'v_enum_gw.CRCStatus'('BAD_CRC', _Path, _TrUserData) ->
    ok;
'v_enum_gw.CRCStatus'('CRC_OK', _Path, _TrUserData) ->
    ok;
'v_enum_gw.CRCStatus'(V, _Path, _TrUserData) when
    -2147483648 =< V, V =< 2147483647, is_integer(V)
->
    ok;
'v_enum_gw.CRCStatus'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'gw.CRCStatus'}, X, Path).

-compile({nowarn_unused_function, 'v_enum_gw.TxAckStatus'/3}).
-dialyzer({nowarn_function, 'v_enum_gw.TxAckStatus'/3}).
'v_enum_gw.TxAckStatus'('IGNORED', _Path, _TrUserData) ->
    ok;
'v_enum_gw.TxAckStatus'('OK', _Path, _TrUserData) ->
    ok;
'v_enum_gw.TxAckStatus'('TOO_LATE', _Path, _TrUserData) ->
    ok;
'v_enum_gw.TxAckStatus'('TOO_EARLY', _Path, _TrUserData) ->
    ok;
'v_enum_gw.TxAckStatus'('COLLISION_PACKET', _Path, _TrUserData) ->
    ok;
'v_enum_gw.TxAckStatus'('COLLISION_BEACON', _Path, _TrUserData) ->
    ok;
'v_enum_gw.TxAckStatus'('TX_FREQ', _Path, _TrUserData) ->
    ok;
'v_enum_gw.TxAckStatus'('TX_POWER', _Path, _TrUserData) ->
    ok;
'v_enum_gw.TxAckStatus'('GPS_UNLOCKED', _Path, _TrUserData) ->
    ok;
'v_enum_gw.TxAckStatus'('QUEUE_FULL', _Path, _TrUserData) ->
    ok;
'v_enum_gw.TxAckStatus'('INTERNAL_ERROR', _Path, _TrUserData) ->
    ok;
'v_enum_gw.TxAckStatus'(V, _Path, _TrUserData) when
    -2147483648 =< V, V =< 2147483647, is_integer(V)
->
    ok;
'v_enum_gw.TxAckStatus'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'gw.TxAckStatus'}, X, Path).

-compile({nowarn_unused_function, 'v_enum_gw.ConnState.State'/3}).
-dialyzer({nowarn_function, 'v_enum_gw.ConnState.State'/3}).
'v_enum_gw.ConnState.State'('OFFLINE', _Path, _TrUserData) ->
    ok;
'v_enum_gw.ConnState.State'('ONLINE', _Path, _TrUserData) ->
    ok;
'v_enum_gw.ConnState.State'(V, _Path, _TrUserData) when
    -2147483648 =< V, V =< 2147483647, is_integer(V)
->
    ok;
'v_enum_gw.ConnState.State'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'gw.ConnState.State'}, X, Path).

-compile({nowarn_unused_function, 'v_enum_ns.RatePolicy'/3}).
-dialyzer({nowarn_function, 'v_enum_ns.RatePolicy'/3}).
'v_enum_ns.RatePolicy'('DROP', _Path, _TrUserData) ->
    ok;
'v_enum_ns.RatePolicy'('MARK', _Path, _TrUserData) ->
    ok;
'v_enum_ns.RatePolicy'(V, _Path, _TrUserData) when
    -2147483648 =< V, V =< 2147483647, is_integer(V)
->
    ok;
'v_enum_ns.RatePolicy'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'ns.RatePolicy'}, X, Path).

-compile({nowarn_unused_function, v_type_int32/3}).
-dialyzer({nowarn_function, v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData) when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32}, N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X, Path).

-compile({nowarn_unused_function, v_type_int64/3}).
-dialyzer({nowarn_function, v_type_int64/3}).
v_type_int64(N, _Path, _TrUserData) when -9223372036854775808 =< N, N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64}, N, Path);
v_type_int64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int64, signed, 64}, X, Path).

-compile({nowarn_unused_function, v_type_uint32/3}).
-dialyzer({nowarn_function, v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData) when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned, 32}, N, Path);
v_type_uint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X, Path).

-compile({nowarn_unused_function, v_type_bool/3}).
-dialyzer({nowarn_function, v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) -> mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function, v_type_double/3}).
-dialyzer({nowarn_function, v_type_double/3}).
v_type_double(N, _Path, _TrUserData) when is_float(N) -> ok;
v_type_double(N, _Path, _TrUserData) when is_integer(N) -> ok;
v_type_double(infinity, _Path, _TrUserData) -> ok;
v_type_double('-infinity', _Path, _TrUserData) -> ok;
v_type_double(nan, _Path, _TrUserData) -> ok;
v_type_double(X, Path, _TrUserData) -> mk_type_error(bad_double_value, X, Path).

-compile({nowarn_unused_function, v_type_string/3}).
-dialyzer({nowarn_function, v_type_string/3}).
v_type_string(S, Path, _TrUserData) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} -> mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg -> mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function, v_type_bytes/3}).
-dialyzer({nowarn_function, v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) -> ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) -> ok;
v_type_bytes(X, Path, _TrUserData) -> mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function, 'v_map<string,string>'/3}).
-dialyzer({nowarn_function, 'v_map<string,string>'/3}).
'v_map<string,string>'(KVs, Path, TrUserData) when is_list(KVs) ->
    [
        case X of
            {Key, Value} ->
                v_type_string(Key, [key | Path], TrUserData),
                v_type_string(Value, [value | Path], TrUserData);
            _ ->
                mk_type_error(invalid_key_value_tuple, X, Path)
        end
        || X <- KVs
    ],
    ok;
'v_map<string,string>'(X, Path, _TrUserData) ->
    mk_type_error(invalid_list_of_key_value_tuples, X, Path).

-compile({nowarn_unused_function, mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).

-compile({nowarn_unused_function, prettify_path/1}).
-dialyzer({nowarn_function, prettify_path/1}).
prettify_path([]) ->
    top_level;
prettify_path(PathR) ->
    lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR)))).

-compile({nowarn_unused_function, id/2}).
-compile({inline, id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function, v_ok/3}).
-compile({inline, v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function, m_overwrite/3}).
-compile({inline, m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function, cons/3}).
-compile({inline, cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function, lists_reverse/2}).
-compile({inline, lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function, 'erlang_++'/3}).
-compile({inline, 'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.
-compile({inline, 'tr_encode_gw.GatewayStats.meta_data[x]'/2}).
'tr_encode_gw.GatewayStats.meta_data[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_r(X, 'map<string,string>').

-compile({inline, 'tr_decode_init_default_gw.GatewayCommandExecRequest.environment'/2}).
'tr_decode_init_default_gw.GatewayCommandExecRequest.environment'(_, _) -> mt_empty_map_r().

-compile({inline, 'tr_merge_gw.GatewayCommandExecRequest.environment'/3}).
'tr_merge_gw.GatewayCommandExecRequest.environment'(X1, X2, _) -> mt_merge_maptuples_r(X1, X2).

-compile({inline, 'tr_decode_repeated_finalize_gw.GatewayCommandExecRequest.environment'/2}).
'tr_decode_repeated_finalize_gw.GatewayCommandExecRequest.environment'(L, _) ->
    mt_finalize_items_r(L).

-compile({inline, 'tr_decode_repeated_add_elem_gw.GatewayCommandExecRequest.environment'/3}).
'tr_decode_repeated_add_elem_gw.GatewayCommandExecRequest.environment'(Elem, L, _) ->
    mt_add_item_r(Elem, L).

-compile({inline, 'tr_decode_init_default_gw.GatewayStats.meta_data'/2}).
'tr_decode_init_default_gw.GatewayStats.meta_data'(_, _) -> mt_empty_map_r().

-compile({inline, 'tr_merge_gw.GatewayStats.meta_data'/3}).
'tr_merge_gw.GatewayStats.meta_data'(X1, X2, _) -> mt_merge_maptuples_r(X1, X2).

-compile({inline, 'tr_decode_repeated_finalize_gw.GatewayStats.meta_data'/2}).
'tr_decode_repeated_finalize_gw.GatewayStats.meta_data'(L, _) -> mt_finalize_items_r(L).

-compile({inline, 'tr_decode_repeated_add_elem_gw.GatewayStats.meta_data'/3}).
'tr_decode_repeated_add_elem_gw.GatewayStats.meta_data'(Elem, L, _) -> mt_add_item_r(Elem, L).

-compile({inline, 'tr_encode_gw.GatewayCommandExecRequest.environment[x]'/2}).
'tr_encode_gw.GatewayCommandExecRequest.environment[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_r(X, 'map<string,string>').

-compile({inline, mt_maptuple_to_pseudomsg_r/2}).
mt_maptuple_to_pseudomsg_r({K, V}, RName) -> {RName, K, V}.

-compile({inline, mt_empty_map_r/0}).
mt_empty_map_r() -> [].

-compile({inline, mt_add_item_r/2}).
mt_add_item_r({_RName, K, V}, Acc) -> [{K, V} | Acc].

-compile({inline, mt_finalize_items_r/1}).
mt_finalize_items_r(Acc) -> mt_finalize_items_r_aux(lists:reverse(Acc), dict:new()).

mt_finalize_items_r_aux([{K, V} | Tl], D) -> mt_finalize_items_r_aux(Tl, dict:store(K, V, D));
mt_finalize_items_r_aux([], D) -> dict:to_list(D).

-compile({inline, mt_merge_maptuples_r/2}).
mt_merge_maptuples_r(L1, L2) ->
    dict:to_list(dict:merge(fun(_Key, _V1, V2) -> V2 end, dict:from_list(L1), dict:from_list(L2))).

get_msg_defs() ->
    [
        {{enum, 'ns.RXWindow'}, [{'RX1', 0}, {'RX2', 1}]},
        {{enum, 'ns.AggregationInterval'}, [
            {'SECOND', 0},
            {'MINUTE', 1},
            {'HOUR', 2},
            {'DAY', 3},
            {'WEEK', 4},
            {'MONTH', 5},
            {'QUARTER', 6},
            {'YEAR', 7}
        ]},
        {{enum, 'ns.MulticastGroupType'}, [{'CLASS_C', 0}, {'CLASS_B', 1}]},
        {{enum, 'common.Modulation'}, [{'LORA', 0}, {'FSK', 1}]},
        {{enum, 'common.Region'}, [
            {'EU868', 0},
            {'US915', 2},
            {'CN779', 3},
            {'EU433', 4},
            {'AU915', 5},
            {'CN470', 6},
            {'AS923', 7},
            {'KR920', 8},
            {'IN865', 9},
            {'RU864', 10}
        ]},
        {{enum, 'common.MType'}, [
            {'JoinRequest', 0},
            {'JoinAccept', 1},
            {'UnconfirmedDataUp', 2},
            {'UnconfirmedDataDown', 3},
            {'ConfirmedDataUp', 4},
            {'ConfirmedDataDown', 5},
            {'RejoinRequest', 6},
            {'Proprietary', 7}
        ]},
        {{enum, 'common.LocationSource'}, [
            {'UNKNOWN', 0},
            {'GPS', 1},
            {'CONFIG', 2},
            {'GEO_RESOLVER_TDOA', 3},
            {'GEO_RESOLVER_RSSI', 4},
            {'GEO_RESOLVER_GNSS', 5},
            {'GEO_RESOLVER_WIFI', 6}
        ]},
        {{enum, 'gw.DownlinkTiming'}, [{'IMMEDIATELY', 0}, {'DELAY', 1}, {'GPS_EPOCH', 2}]},
        {{enum, 'gw.FineTimestampType'}, [{'NONE', 0}, {'ENCRYPTED', 1}, {'PLAIN', 2}]},
        {{enum, 'gw.CRCStatus'}, [{'NO_CRC', 0}, {'BAD_CRC', 1}, {'CRC_OK', 2}]},
        {{enum, 'gw.TxAckStatus'}, [
            {'IGNORED', 0},
            {'OK', 1},
            {'TOO_LATE', 2},
            {'TOO_EARLY', 3},
            {'COLLISION_PACKET', 4},
            {'COLLISION_BEACON', 5},
            {'TX_FREQ', 6},
            {'TX_POWER', 7},
            {'GPS_UNLOCKED', 8},
            {'QUEUE_FULL', 9},
            {'INTERNAL_ERROR', 10}
        ]},
        {{enum, 'gw.ConnState.State'}, [{'OFFLINE', 0}, {'ONLINE', 1}]},
        {{enum, 'ns.RatePolicy'}, [{'DROP', 0}, {'MARK', 1}]},
        {{msg, 'ns.CreateServiceProfileRequest'}, [
            #field{
                name = service_profile,
                fnum = 1,
                rnum = 2,
                type = {msg, 'ns.ServiceProfile'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.CreateServiceProfileResponse'}, [
            #field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}
        ]},
        {{msg, 'ns.GetServiceProfileRequest'}, [
            #field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}
        ]},
        {{msg, 'ns.GetServiceProfileResponse'}, [
            #field{
                name = service_profile,
                fnum = 1,
                rnum = 2,
                type = {msg, 'ns.ServiceProfile'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = created_at,
                fnum = 2,
                rnum = 3,
                type = {msg, 'google.protobuf.Timestamp'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = updated_at,
                fnum = 3,
                rnum = 4,
                type = {msg, 'google.protobuf.Timestamp'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.UpdateServiceProfileRequest'}, [
            #field{
                name = service_profile,
                fnum = 1,
                rnum = 2,
                type = {msg, 'ns.ServiceProfile'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.DeleteServiceProfileRequest'}, [
            #field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}
        ]},
        {{msg, 'ns.CreateRoutingProfileRequest'}, [
            #field{
                name = routing_profile,
                fnum = 1,
                rnum = 2,
                type = {msg, 'ns.RoutingProfile'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.CreateRoutingProfileResponse'}, [
            #field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}
        ]},
        {{msg, 'ns.GetRoutingProfileRequest'}, [
            #field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}
        ]},
        {{msg, 'ns.GetRoutingProfileResponse'}, [
            #field{
                name = routing_profile,
                fnum = 1,
                rnum = 2,
                type = {msg, 'ns.RoutingProfile'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = created_at,
                fnum = 2,
                rnum = 3,
                type = {msg, 'google.protobuf.Timestamp'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = updated_at,
                fnum = 3,
                rnum = 4,
                type = {msg, 'google.protobuf.Timestamp'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.UpdateRoutingProfileRequest'}, [
            #field{
                name = routing_profile,
                fnum = 1,
                rnum = 2,
                type = {msg, 'ns.RoutingProfile'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.DeleteRoutingProfileRequest'}, [
            #field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}
        ]},
        {{msg, 'ns.CreateDeviceProfileRequest'}, [
            #field{
                name = device_profile,
                fnum = 1,
                rnum = 2,
                type = {msg, 'ns.DeviceProfile'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.CreateDeviceProfileResponse'}, [
            #field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}
        ]},
        {{msg, 'ns.GetDeviceProfileRequest'}, [
            #field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}
        ]},
        {{msg, 'ns.GetDeviceProfileResponse'}, [
            #field{
                name = device_profile,
                fnum = 1,
                rnum = 2,
                type = {msg, 'ns.DeviceProfile'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = created_at,
                fnum = 2,
                rnum = 3,
                type = {msg, 'google.protobuf.Timestamp'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = updated_at,
                fnum = 3,
                rnum = 4,
                type = {msg, 'google.protobuf.Timestamp'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.UpdateDeviceProfileRequest'}, [
            #field{
                name = device_profile,
                fnum = 1,
                rnum = 2,
                type = {msg, 'ns.DeviceProfile'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.DeleteDeviceProfileRequest'}, [
            #field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}
        ]},
        {{msg, 'ns.Device'}, [
            #field{
                name = dev_eui,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = device_profile_id,
                fnum = 2,
                rnum = 3,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = service_profile_id,
                fnum = 3,
                rnum = 4,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = routing_profile_id,
                fnum = 4,
                rnum = 5,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = skip_f_cnt_check,
                fnum = 5,
                rnum = 6,
                type = bool,
                occurrence = optional,
                opts = []
            },
            #field{
                name = reference_altitude,
                fnum = 6,
                rnum = 7,
                type = double,
                occurrence = optional,
                opts = []
            },
            #field{
                name = is_disabled,
                fnum = 7,
                rnum = 8,
                type = bool,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.CreateDeviceRequest'}, [
            #field{
                name = device,
                fnum = 1,
                rnum = 2,
                type = {msg, 'ns.Device'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.GetDeviceRequest'}, [
            #field{
                name = dev_eui,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.GetDeviceResponse'}, [
            #field{
                name = device,
                fnum = 1,
                rnum = 2,
                type = {msg, 'ns.Device'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = created_at,
                fnum = 2,
                rnum = 3,
                type = {msg, 'google.protobuf.Timestamp'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = updated_at,
                fnum = 3,
                rnum = 4,
                type = {msg, 'google.protobuf.Timestamp'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.UpdateDeviceRequest'}, [
            #field{
                name = device,
                fnum = 1,
                rnum = 2,
                type = {msg, 'ns.Device'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.DeleteDeviceRequest'}, [
            #field{
                name = dev_eui,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.DeviceActivation'}, [
            #field{
                name = dev_eui,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = dev_addr,
                fnum = 2,
                rnum = 3,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = s_nwk_s_int_key,
                fnum = 3,
                rnum = 4,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = f_nwk_s_int_key,
                fnum = 4,
                rnum = 5,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = nwk_s_enc_key,
                fnum = 5,
                rnum = 6,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = f_cnt_up,
                fnum = 6,
                rnum = 7,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = n_f_cnt_down,
                fnum = 7,
                rnum = 8,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = a_f_cnt_down,
                fnum = 8,
                rnum = 9,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = skip_f_cnt_check,
                fnum = 9,
                rnum = 10,
                type = bool,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.ActivateDeviceRequest'}, [
            #field{
                name = device_activation,
                fnum = 1,
                rnum = 2,
                type = {msg, 'ns.DeviceActivation'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.DeactivateDeviceRequest'}, [
            #field{
                name = dev_eui,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.GetDeviceActivationRequest'}, [
            #field{
                name = dev_eui,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.GetDeviceActivationResponse'}, [
            #field{
                name = device_activation,
                fnum = 1,
                rnum = 2,
                type = {msg, 'ns.DeviceActivation'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.GetRandomDevAddrResponse'}, [
            #field{
                name = dev_addr,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.CreateMACCommandQueueItemRequest'}, [
            #field{
                name = dev_eui,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{name = cid, fnum = 4, rnum = 3, type = uint32, occurrence = optional, opts = []},
            #field{
                name = commands,
                fnum = 5,
                rnum = 4,
                type = bytes,
                occurrence = repeated,
                opts = []
            }
        ]},
        {{msg, 'ns.SendProprietaryPayloadRequest'}, [
            #field{
                name = mac_payload,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{name = mic, fnum = 2, rnum = 3, type = bytes, occurrence = optional, opts = []},
            #field{
                name = gateway_macs,
                fnum = 3,
                rnum = 4,
                type = bytes,
                occurrence = repeated,
                opts = []
            },
            #field{
                name = polarization_inversion,
                fnum = 4,
                rnum = 5,
                type = bool,
                occurrence = optional,
                opts = []
            },
            #field{
                name = frequency,
                fnum = 5,
                rnum = 6,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{name = dr, fnum = 6, rnum = 7, type = uint32, occurrence = optional, opts = []}
        ]},
        {{msg, 'ns.Gateway'}, [
            #field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []},
            #field{
                name = location,
                fnum = 2,
                rnum = 3,
                type = {msg, 'common.Location'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = gateway_profile_id,
                fnum = 3,
                rnum = 4,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = boards,
                fnum = 4,
                rnum = 5,
                type = {msg, 'ns.GatewayBoard'},
                occurrence = repeated,
                opts = []
            },
            #field{
                name = routing_profile_id,
                fnum = 5,
                rnum = 6,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = service_profile_id,
                fnum = 6,
                rnum = 7,
                type = bytes,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.GatewayBoard'}, [
            #field{
                name = fpga_id,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = fine_timestamp_key,
                fnum = 2,
                rnum = 3,
                type = bytes,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.CreateGatewayRequest'}, [
            #field{
                name = gateway,
                fnum = 1,
                rnum = 2,
                type = {msg, 'ns.Gateway'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.GetGatewayRequest'}, [
            #field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}
        ]},
        {{msg, 'ns.GetGatewayResponse'}, [
            #field{
                name = gateway,
                fnum = 1,
                rnum = 2,
                type = {msg, 'ns.Gateway'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = created_at,
                fnum = 2,
                rnum = 3,
                type = {msg, 'google.protobuf.Timestamp'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = updated_at,
                fnum = 3,
                rnum = 4,
                type = {msg, 'google.protobuf.Timestamp'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = first_seen_at,
                fnum = 4,
                rnum = 5,
                type = {msg, 'google.protobuf.Timestamp'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = last_seen_at,
                fnum = 5,
                rnum = 6,
                type = {msg, 'google.protobuf.Timestamp'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.UpdateGatewayRequest'}, [
            #field{
                name = gateway,
                fnum = 1,
                rnum = 2,
                type = {msg, 'ns.Gateway'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.DeleteGatewayRequest'}, [
            #field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}
        ]},
        {{msg, 'ns.GenerateGatewayClientCertificateRequest'}, [
            #field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}
        ]},
        {{msg, 'ns.GenerateGatewayClientCertificateResponse'}, [
            #field{
                name = tls_cert,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = tls_key,
                fnum = 2,
                rnum = 3,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = ca_cert,
                fnum = 3,
                rnum = 4,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = expires_at,
                fnum = 4,
                rnum = 5,
                type = {msg, 'google.protobuf.Timestamp'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.GatewayStats'}, [
            #field{
                name = timestamp,
                fnum = 1,
                rnum = 2,
                type = {msg, 'google.protobuf.Timestamp'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = rx_packets_received,
                fnum = 2,
                rnum = 3,
                type = int32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = rx_packets_received_ok,
                fnum = 3,
                rnum = 4,
                type = int32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = tx_packets_received,
                fnum = 4,
                rnum = 5,
                type = int32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = tx_packets_emitted,
                fnum = 5,
                rnum = 6,
                type = int32,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.GetGatewayStatsRequest'}, [
            #field{
                name = gateway_id,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = interval,
                fnum = 2,
                rnum = 3,
                type = {enum, 'ns.AggregationInterval'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = start_timestamp,
                fnum = 3,
                rnum = 4,
                type = {msg, 'google.protobuf.Timestamp'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = end_timestamp,
                fnum = 4,
                rnum = 5,
                type = {msg, 'google.protobuf.Timestamp'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.GetGatewayStatsResponse'}, [
            #field{
                name = result,
                fnum = 1,
                rnum = 2,
                type = {msg, 'ns.GatewayStats'},
                occurrence = repeated,
                opts = []
            }
        ]},
        {{msg, 'ns.DeviceQueueItem'}, [
            #field{
                name = dev_eui,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = frm_payload,
                fnum = 2,
                rnum = 3,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = f_cnt,
                fnum = 3,
                rnum = 4,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = f_port,
                fnum = 4,
                rnum = 5,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = confirmed,
                fnum = 5,
                rnum = 6,
                type = bool,
                occurrence = optional,
                opts = []
            },
            #field{
                name = dev_addr,
                fnum = 6,
                rnum = 7,
                type = bytes,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.CreateDeviceQueueItemRequest'}, [
            #field{
                name = item,
                fnum = 1,
                rnum = 2,
                type = {msg, 'ns.DeviceQueueItem'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.FlushDeviceQueueForDevEUIRequest'}, [
            #field{
                name = dev_eui,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.GetDeviceQueueItemsForDevEUIRequest'}, [
            #field{
                name = dev_eui,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = count_only,
                fnum = 2,
                rnum = 3,
                type = bool,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.GetDeviceQueueItemsForDevEUIResponse'}, [
            #field{
                name = items,
                fnum = 1,
                rnum = 2,
                type = {msg, 'ns.DeviceQueueItem'},
                occurrence = repeated,
                opts = []
            },
            #field{
                name = total_count,
                fnum = 2,
                rnum = 3,
                type = uint32,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.GetNextDownlinkFCntForDevEUIRequest'}, [
            #field{
                name = dev_eui,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.GetNextDownlinkFCntForDevEUIResponse'}, [
            #field{
                name = f_cnt,
                fnum = 1,
                rnum = 2,
                type = uint32,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.UplinkFrameLog'}, [
            #field{
                name = phy_payload,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = tx_info,
                fnum = 2,
                rnum = 3,
                type = {msg, 'gw.UplinkTXInfo'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = rx_info,
                fnum = 3,
                rnum = 4,
                type = {msg, 'gw.UplinkRXInfo'},
                occurrence = repeated,
                opts = []
            },
            #field{
                name = m_type,
                fnum = 4,
                rnum = 5,
                type = {enum, 'common.MType'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = dev_addr,
                fnum = 5,
                rnum = 6,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = dev_eui,
                fnum = 6,
                rnum = 7,
                type = bytes,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.DownlinkFrameLog'}, [
            #field{
                name = phy_payload,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = tx_info,
                fnum = 2,
                rnum = 3,
                type = {msg, 'gw.DownlinkTXInfo'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = token,
                fnum = 3,
                rnum = 4,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = downlink_id,
                fnum = 4,
                rnum = 5,
                type = bytes,
                occurrence = optional,
                opts = [{json_name, "downlinkID"}]
            },
            #field{
                name = gateway_id,
                fnum = 5,
                rnum = 6,
                type = bytes,
                occurrence = optional,
                opts = [{json_name, "gatewayID"}]
            },
            #field{
                name = m_type,
                fnum = 6,
                rnum = 7,
                type = {enum, 'common.MType'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = dev_addr,
                fnum = 7,
                rnum = 8,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = dev_eui,
                fnum = 8,
                rnum = 9,
                type = bytes,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.StreamFrameLogsForGatewayRequest'}, [
            #field{
                name = gateway_id,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.StreamFrameLogsForGatewayResponse'}, [
            #gpb_oneof{
                name = frame,
                rnum = 2,
                fields = [
                    #field{
                        name = uplink_frame_set,
                        fnum = 1,
                        rnum = 2,
                        type = {msg, 'ns.UplinkFrameLog'},
                        occurrence = optional,
                        opts = []
                    },
                    #field{
                        name = downlink_frame,
                        fnum = 2,
                        rnum = 2,
                        type = {msg, 'ns.DownlinkFrameLog'},
                        occurrence = optional,
                        opts = []
                    }
                ],
                opts = []
            }
        ]},
        {{msg, 'ns.StreamFrameLogsForDeviceRequest'}, [
            #field{
                name = dev_eui,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.StreamFrameLogsForDeviceResponse'}, [
            #gpb_oneof{
                name = frame,
                rnum = 2,
                fields = [
                    #field{
                        name = uplink_frame_set,
                        fnum = 1,
                        rnum = 2,
                        type = {msg, 'ns.UplinkFrameLog'},
                        occurrence = optional,
                        opts = []
                    },
                    #field{
                        name = downlink_frame,
                        fnum = 2,
                        rnum = 2,
                        type = {msg, 'ns.DownlinkFrameLog'},
                        occurrence = optional,
                        opts = []
                    }
                ],
                opts = []
            }
        ]},
        {{msg, 'ns.GetVersionResponse'}, [
            #field{
                name = version,
                fnum = 1,
                rnum = 2,
                type = string,
                occurrence = optional,
                opts = []
            },
            #field{
                name = region,
                fnum = 2,
                rnum = 3,
                type = {enum, 'common.Region'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.GatewayProfile'}, [
            #field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []},
            #field{
                name = channels,
                fnum = 2,
                rnum = 3,
                type = uint32,
                occurrence = repeated,
                opts = [packed]
            },
            #field{
                name = extra_channels,
                fnum = 3,
                rnum = 4,
                type = {msg, 'ns.GatewayProfileExtraChannel'},
                occurrence = repeated,
                opts = []
            },
            #field{
                name = stats_interval,
                fnum = 4,
                rnum = 5,
                type = {msg, 'google.protobuf.Duration'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.GatewayProfileExtraChannel'}, [
            #field{
                name = modulation,
                fnum = 1,
                rnum = 2,
                type = {enum, 'common.Modulation'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = frequency,
                fnum = 2,
                rnum = 3,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = bandwidth,
                fnum = 3,
                rnum = 4,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = bitrate,
                fnum = 4,
                rnum = 5,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = spreading_factors,
                fnum = 5,
                rnum = 6,
                type = uint32,
                occurrence = repeated,
                opts = [packed]
            }
        ]},
        {{msg, 'ns.CreateGatewayProfileRequest'}, [
            #field{
                name = gateway_profile,
                fnum = 1,
                rnum = 2,
                type = {msg, 'ns.GatewayProfile'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.CreateGatewayProfileResponse'}, [
            #field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}
        ]},
        {{msg, 'ns.GetGatewayProfileRequest'}, [
            #field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}
        ]},
        {{msg, 'ns.GetGatewayProfileResponse'}, [
            #field{
                name = gateway_profile,
                fnum = 1,
                rnum = 2,
                type = {msg, 'ns.GatewayProfile'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = created_at,
                fnum = 2,
                rnum = 3,
                type = {msg, 'google.protobuf.Timestamp'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = updated_at,
                fnum = 3,
                rnum = 4,
                type = {msg, 'google.protobuf.Timestamp'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.UpdateGatewayProfileRequest'}, [
            #field{
                name = gateway_profile,
                fnum = 1,
                rnum = 2,
                type = {msg, 'ns.GatewayProfile'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.DeleteGatewayProfileRequest'}, [
            #field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}
        ]},
        {{msg, 'ns.MulticastGroup'}, [
            #field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []},
            #field{
                name = mc_addr,
                fnum = 2,
                rnum = 3,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = mc_nwk_s_key,
                fnum = 3,
                rnum = 4,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = f_cnt,
                fnum = 4,
                rnum = 5,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = group_type,
                fnum = 5,
                rnum = 6,
                type = {enum, 'ns.MulticastGroupType'},
                occurrence = optional,
                opts = []
            },
            #field{name = dr, fnum = 6, rnum = 7, type = uint32, occurrence = optional, opts = []},
            #field{
                name = frequency,
                fnum = 7,
                rnum = 8,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = ping_slot_period,
                fnum = 8,
                rnum = 9,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = service_profile_id,
                fnum = 9,
                rnum = 10,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = routing_profile_id,
                fnum = 10,
                rnum = 11,
                type = bytes,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.CreateMulticastGroupRequest'}, [
            #field{
                name = multicast_group,
                fnum = 1,
                rnum = 2,
                type = {msg, 'ns.MulticastGroup'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.CreateMulticastGroupResponse'}, [
            #field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}
        ]},
        {{msg, 'ns.GetMulticastGroupRequest'}, [
            #field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}
        ]},
        {{msg, 'ns.GetMulticastGroupResponse'}, [
            #field{
                name = multicast_group,
                fnum = 1,
                rnum = 2,
                type = {msg, 'ns.MulticastGroup'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = created_at,
                fnum = 2,
                rnum = 3,
                type = {msg, 'google.protobuf.Timestamp'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = updated_at,
                fnum = 3,
                rnum = 4,
                type = {msg, 'google.protobuf.Timestamp'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.UpdateMulticastGroupRequest'}, [
            #field{
                name = multicast_group,
                fnum = 1,
                rnum = 2,
                type = {msg, 'ns.MulticastGroup'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.DeleteMulticastGroupRequest'}, [
            #field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}
        ]},
        {{msg, 'ns.AddDeviceToMulticastGroupRequest'}, [
            #field{
                name = dev_eui,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = multicast_group_id,
                fnum = 2,
                rnum = 3,
                type = bytes,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.RemoveDeviceFromMulticastGroupRequest'}, [
            #field{
                name = dev_eui,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = multicast_group_id,
                fnum = 2,
                rnum = 3,
                type = bytes,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.MulticastQueueItem'}, [
            #field{
                name = multicast_group_id,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = f_cnt,
                fnum = 2,
                rnum = 3,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = f_port,
                fnum = 3,
                rnum = 4,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = frm_payload,
                fnum = 4,
                rnum = 5,
                type = bytes,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.EnqueueMulticastQueueItemRequest'}, [
            #field{
                name = multicast_queue_item,
                fnum = 1,
                rnum = 2,
                type = {msg, 'ns.MulticastQueueItem'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.FlushMulticastQueueForMulticastGroupRequest'}, [
            #field{
                name = multicast_group_id,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.GetMulticastQueueItemsForMulticastGroupRequest'}, [
            #field{
                name = multicast_group_id,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.GetMulticastQueueItemsForMulticastGroupResponse'}, [
            #field{
                name = multicast_queue_items,
                fnum = 1,
                rnum = 2,
                type = {msg, 'ns.MulticastQueueItem'},
                occurrence = repeated,
                opts = []
            }
        ]},
        {{msg, 'ns.GetADRAlgorithmsResponse'}, [
            #field{
                name = adr_algorithms,
                fnum = 1,
                rnum = 2,
                type = {msg, 'ns.ADRAlgorithm'},
                occurrence = repeated,
                opts = []
            }
        ]},
        {{msg, 'ns.ADRAlgorithm'}, [
            #field{name = id, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
            #field{name = name, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []}
        ]},
        {{msg, 'google.protobuf.Timestamp'}, [
            #field{
                name = seconds,
                fnum = 1,
                rnum = 2,
                type = int64,
                occurrence = optional,
                opts = []
            },
            #field{name = nanos, fnum = 2, rnum = 3, type = int32, occurrence = optional, opts = []}
        ]},
        {{msg, 'google.protobuf.Duration'}, [
            #field{
                name = seconds,
                fnum = 1,
                rnum = 2,
                type = int64,
                occurrence = optional,
                opts = []
            },
            #field{name = nanos, fnum = 2, rnum = 3, type = int32, occurrence = optional, opts = []}
        ]},
        {{msg, 'google.protobuf.Empty'}, []},
        {{msg, 'common.KeyEnvelope'}, [
            #field{
                name = kek_label,
                fnum = 1,
                rnum = 2,
                type = string,
                occurrence = optional,
                opts = []
            },
            #field{
                name = aes_key,
                fnum = 2,
                rnum = 3,
                type = bytes,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'common.Location'}, [
            #field{
                name = latitude,
                fnum = 1,
                rnum = 2,
                type = double,
                occurrence = optional,
                opts = []
            },
            #field{
                name = longitude,
                fnum = 2,
                rnum = 3,
                type = double,
                occurrence = optional,
                opts = []
            },
            #field{
                name = altitude,
                fnum = 3,
                rnum = 4,
                type = double,
                occurrence = optional,
                opts = []
            },
            #field{
                name = source,
                fnum = 4,
                rnum = 5,
                type = {enum, 'common.LocationSource'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = accuracy,
                fnum = 5,
                rnum = 6,
                type = uint32,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'gw.UplinkTXInfo'}, [
            #field{
                name = frequency,
                fnum = 1,
                rnum = 2,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = modulation,
                fnum = 2,
                rnum = 3,
                type = {enum, 'common.Modulation'},
                occurrence = optional,
                opts = []
            },
            #gpb_oneof{
                name = modulation_info,
                rnum = 4,
                fields = [
                    #field{
                        name = lora_modulation_info,
                        fnum = 3,
                        rnum = 4,
                        type = {msg, 'gw.LoRaModulationInfo'},
                        occurrence = optional,
                        opts = [{json_name, "loRaModulationInfo"}]
                    },
                    #field{
                        name = fsk_modulation_info,
                        fnum = 4,
                        rnum = 4,
                        type = {msg, 'gw.FSKModulationInfo'},
                        occurrence = optional,
                        opts = []
                    }
                ],
                opts = []
            }
        ]},
        {{msg, 'gw.LoRaModulationInfo'}, [
            #field{
                name = bandwidth,
                fnum = 1,
                rnum = 2,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = spreading_factor,
                fnum = 2,
                rnum = 3,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = code_rate,
                fnum = 3,
                rnum = 4,
                type = string,
                occurrence = optional,
                opts = []
            },
            #field{
                name = polarization_inversion,
                fnum = 4,
                rnum = 5,
                type = bool,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'gw.FSKModulationInfo'}, [
            #field{
                name = frequency_deviation,
                fnum = 1,
                rnum = 2,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = datarate,
                fnum = 2,
                rnum = 3,
                type = uint32,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'gw.EncryptedFineTimestamp'}, [
            #field{
                name = aes_key_index,
                fnum = 1,
                rnum = 2,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = encrypted_ns,
                fnum = 2,
                rnum = 3,
                type = bytes,
                occurrence = optional,
                opts = [{json_name, "encryptedNS"}]
            },
            #field{
                name = fpga_id,
                fnum = 3,
                rnum = 4,
                type = bytes,
                occurrence = optional,
                opts = [{json_name, "fpgaID"}]
            }
        ]},
        {{msg, 'gw.PlainFineTimestamp'}, [
            #field{
                name = time,
                fnum = 1,
                rnum = 2,
                type = {msg, 'google.protobuf.Timestamp'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'gw.GatewayStats'}, [
            #field{
                name = gateway_id,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = [{json_name, "gatewayID"}]
            },
            #field{name = ip, fnum = 9, rnum = 3, type = string, occurrence = optional, opts = []},
            #field{
                name = time,
                fnum = 2,
                rnum = 4,
                type = {msg, 'google.protobuf.Timestamp'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = location,
                fnum = 3,
                rnum = 5,
                type = {msg, 'common.Location'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = config_version,
                fnum = 4,
                rnum = 6,
                type = string,
                occurrence = optional,
                opts = []
            },
            #field{
                name = rx_packets_received,
                fnum = 5,
                rnum = 7,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = rx_packets_received_ok,
                fnum = 6,
                rnum = 8,
                type = uint32,
                occurrence = optional,
                opts = [{json_name, "rxPacketsReceivedOK"}]
            },
            #field{
                name = tx_packets_received,
                fnum = 7,
                rnum = 9,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = tx_packets_emitted,
                fnum = 8,
                rnum = 10,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = meta_data,
                fnum = 10,
                rnum = 11,
                type = {map, string, string},
                occurrence = repeated,
                opts = []
            },
            #field{
                name = stats_id,
                fnum = 11,
                rnum = 12,
                type = bytes,
                occurrence = optional,
                opts = [{json_name, "statsID"}]
            }
        ]},
        {{msg, 'gw.UplinkRXInfo'}, [
            #field{
                name = gateway_id,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = [{json_name, "gatewayID"}]
            },
            #field{
                name = time,
                fnum = 2,
                rnum = 3,
                type = {msg, 'google.protobuf.Timestamp'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = time_since_gps_epoch,
                fnum = 3,
                rnum = 4,
                type = {msg, 'google.protobuf.Duration'},
                occurrence = optional,
                opts = [{json_name, "timeSinceGPSEpoch"}]
            },
            #field{name = rssi, fnum = 5, rnum = 5, type = int32, occurrence = optional, opts = []},
            #field{
                name = lora_snr,
                fnum = 6,
                rnum = 6,
                type = double,
                occurrence = optional,
                opts = [{json_name, "loRaSNR"}]
            },
            #field{
                name = channel,
                fnum = 7,
                rnum = 7,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = rf_chain,
                fnum = 8,
                rnum = 8,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = board,
                fnum = 9,
                rnum = 9,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = antenna,
                fnum = 10,
                rnum = 10,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = location,
                fnum = 11,
                rnum = 11,
                type = {msg, 'common.Location'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = fine_timestamp_type,
                fnum = 12,
                rnum = 12,
                type = {enum, 'gw.FineTimestampType'},
                occurrence = optional,
                opts = []
            },
            #gpb_oneof{
                name = fine_timestamp,
                rnum = 13,
                fields = [
                    #field{
                        name = encrypted_fine_timestamp,
                        fnum = 13,
                        rnum = 13,
                        type = {msg, 'gw.EncryptedFineTimestamp'},
                        occurrence = optional,
                        opts = []
                    },
                    #field{
                        name = plain_fine_timestamp,
                        fnum = 14,
                        rnum = 13,
                        type = {msg, 'gw.PlainFineTimestamp'},
                        occurrence = optional,
                        opts = []
                    }
                ],
                opts = []
            },
            #field{
                name = context,
                fnum = 15,
                rnum = 14,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = uplink_id,
                fnum = 16,
                rnum = 15,
                type = bytes,
                occurrence = optional,
                opts = [{json_name, "uplinkID"}]
            },
            #field{
                name = crc_status,
                fnum = 17,
                rnum = 16,
                type = {enum, 'gw.CRCStatus'},
                occurrence = optional,
                opts = [{json_name, "crcStatus"}]
            }
        ]},
        {{msg, 'gw.DownlinkTXInfo'}, [
            #field{
                name = gateway_id,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = [{json_name, "gatewayID"}]
            },
            #field{
                name = frequency,
                fnum = 5,
                rnum = 3,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = power,
                fnum = 6,
                rnum = 4,
                type = int32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = modulation,
                fnum = 7,
                rnum = 5,
                type = {enum, 'common.Modulation'},
                occurrence = optional,
                opts = []
            },
            #gpb_oneof{
                name = modulation_info,
                rnum = 6,
                fields = [
                    #field{
                        name = lora_modulation_info,
                        fnum = 8,
                        rnum = 6,
                        type = {msg, 'gw.LoRaModulationInfo'},
                        occurrence = optional,
                        opts = [{json_name, "loRaModulationInfo"}]
                    },
                    #field{
                        name = fsk_modulation_info,
                        fnum = 9,
                        rnum = 6,
                        type = {msg, 'gw.FSKModulationInfo'},
                        occurrence = optional,
                        opts = []
                    }
                ],
                opts = []
            },
            #field{
                name = board,
                fnum = 10,
                rnum = 7,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = antenna,
                fnum = 11,
                rnum = 8,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = timing,
                fnum = 12,
                rnum = 9,
                type = {enum, 'gw.DownlinkTiming'},
                occurrence = optional,
                opts = []
            },
            #gpb_oneof{
                name = timing_info,
                rnum = 10,
                fields = [
                    #field{
                        name = immediately_timing_info,
                        fnum = 13,
                        rnum = 10,
                        type = {msg, 'gw.ImmediatelyTimingInfo'},
                        occurrence = optional,
                        opts = []
                    },
                    #field{
                        name = delay_timing_info,
                        fnum = 14,
                        rnum = 10,
                        type = {msg, 'gw.DelayTimingInfo'},
                        occurrence = optional,
                        opts = []
                    },
                    #field{
                        name = gps_epoch_timing_info,
                        fnum = 15,
                        rnum = 10,
                        type = {msg, 'gw.GPSEpochTimingInfo'},
                        occurrence = optional,
                        opts = []
                    }
                ],
                opts = []
            },
            #field{
                name = context,
                fnum = 16,
                rnum = 11,
                type = bytes,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'gw.ImmediatelyTimingInfo'}, []},
        {{msg, 'gw.DelayTimingInfo'}, [
            #field{
                name = delay,
                fnum = 1,
                rnum = 2,
                type = {msg, 'google.protobuf.Duration'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'gw.GPSEpochTimingInfo'}, [
            #field{
                name = time_since_gps_epoch,
                fnum = 1,
                rnum = 2,
                type = {msg, 'google.protobuf.Duration'},
                occurrence = optional,
                opts = [{json_name, "timeSinceGPSEpoch"}]
            }
        ]},
        {{msg, 'gw.UplinkFrame'}, [
            #field{
                name = phy_payload,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = tx_info,
                fnum = 2,
                rnum = 3,
                type = {msg, 'gw.UplinkTXInfo'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = rx_info,
                fnum = 3,
                rnum = 4,
                type = {msg, 'gw.UplinkRXInfo'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'gw.UplinkFrameSet'}, [
            #field{
                name = phy_payload,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = tx_info,
                fnum = 2,
                rnum = 3,
                type = {msg, 'gw.UplinkTXInfo'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = rx_info,
                fnum = 3,
                rnum = 4,
                type = {msg, 'gw.UplinkRXInfo'},
                occurrence = repeated,
                opts = []
            }
        ]},
        {{msg, 'gw.DownlinkFrame'}, [
            #field{
                name = phy_payload,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = tx_info,
                fnum = 2,
                rnum = 3,
                type = {msg, 'gw.DownlinkTXInfo'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = token,
                fnum = 3,
                rnum = 4,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = downlink_id,
                fnum = 4,
                rnum = 5,
                type = bytes,
                occurrence = optional,
                opts = [{json_name, "downlinkID"}]
            },
            #field{
                name = items,
                fnum = 5,
                rnum = 6,
                type = {msg, 'gw.DownlinkFrameItem'},
                occurrence = repeated,
                opts = []
            },
            #field{
                name = gateway_id,
                fnum = 6,
                rnum = 7,
                type = bytes,
                occurrence = optional,
                opts = [{json_name, "gatewayID"}]
            }
        ]},
        {{msg, 'gw.DownlinkFrameItem'}, [
            #field{
                name = phy_payload,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = tx_info,
                fnum = 2,
                rnum = 3,
                type = {msg, 'gw.DownlinkTXInfo'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'gw.DownlinkTXAck'}, [
            #field{
                name = gateway_id,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = [{json_name, "gatewayID"}]
            },
            #field{
                name = token,
                fnum = 2,
                rnum = 3,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = error,
                fnum = 3,
                rnum = 4,
                type = string,
                occurrence = optional,
                opts = []
            },
            #field{
                name = downlink_id,
                fnum = 4,
                rnum = 5,
                type = bytes,
                occurrence = optional,
                opts = [{json_name, "downlinkID"}]
            },
            #field{
                name = items,
                fnum = 5,
                rnum = 6,
                type = {msg, 'gw.DownlinkTXAckItem'},
                occurrence = repeated,
                opts = []
            }
        ]},
        {{msg, 'gw.DownlinkTXAckItem'}, [
            #field{
                name = status,
                fnum = 1,
                rnum = 2,
                type = {enum, 'gw.TxAckStatus'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'gw.GatewayConfiguration'}, [
            #field{
                name = gateway_id,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = [{json_name, "gatewayID"}]
            },
            #field{
                name = version,
                fnum = 2,
                rnum = 3,
                type = string,
                occurrence = optional,
                opts = []
            },
            #field{
                name = channels,
                fnum = 3,
                rnum = 4,
                type = {msg, 'gw.ChannelConfiguration'},
                occurrence = repeated,
                opts = []
            },
            #field{
                name = stats_interval,
                fnum = 4,
                rnum = 5,
                type = {msg, 'google.protobuf.Duration'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'gw.ChannelConfiguration'}, [
            #field{
                name = frequency,
                fnum = 1,
                rnum = 2,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = modulation,
                fnum = 2,
                rnum = 3,
                type = {enum, 'common.Modulation'},
                occurrence = optional,
                opts = []
            },
            #gpb_oneof{
                name = modulation_config,
                rnum = 4,
                fields = [
                    #field{
                        name = lora_modulation_config,
                        fnum = 3,
                        rnum = 4,
                        type = {msg, 'gw.LoRaModulationConfig'},
                        occurrence = optional,
                        opts = [{json_name, "loRaModulationConfig"}]
                    },
                    #field{
                        name = fsk_modulation_config,
                        fnum = 4,
                        rnum = 4,
                        type = {msg, 'gw.FSKModulationConfig'},
                        occurrence = optional,
                        opts = []
                    }
                ],
                opts = []
            },
            #field{
                name = board,
                fnum = 5,
                rnum = 5,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = demodulator,
                fnum = 6,
                rnum = 6,
                type = uint32,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'gw.LoRaModulationConfig'}, [
            #field{
                name = bandwidth,
                fnum = 1,
                rnum = 2,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = spreading_factors,
                fnum = 2,
                rnum = 3,
                type = uint32,
                occurrence = repeated,
                opts = [packed]
            }
        ]},
        {{msg, 'gw.FSKModulationConfig'}, [
            #field{
                name = bandwidth,
                fnum = 1,
                rnum = 2,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = bitrate,
                fnum = 2,
                rnum = 3,
                type = uint32,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'gw.GatewayCommandExecRequest'}, [
            #field{
                name = gateway_id,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = [{json_name, "gatewayID"}]
            },
            #field{
                name = command,
                fnum = 2,
                rnum = 3,
                type = string,
                occurrence = optional,
                opts = []
            },
            #field{
                name = 'ExecId',
                fnum = 3,
                rnum = 4,
                type = bytes,
                occurrence = optional,
                opts = [{json_name, "execID"}]
            },
            #field{
                name = stdin,
                fnum = 4,
                rnum = 5,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = environment,
                fnum = 5,
                rnum = 6,
                type = {map, string, string},
                occurrence = repeated,
                opts = []
            }
        ]},
        {{msg, 'gw.GatewayCommandExecResponse'}, [
            #field{
                name = gateway_id,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = [{json_name, "gatewayID"}]
            },
            #field{
                name = exec_id,
                fnum = 2,
                rnum = 3,
                type = bytes,
                occurrence = optional,
                opts = [{json_name, "execID"}]
            },
            #field{
                name = stdout,
                fnum = 3,
                rnum = 4,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = stderr,
                fnum = 4,
                rnum = 5,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = error,
                fnum = 5,
                rnum = 6,
                type = string,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'gw.RawPacketForwarderEvent'}, [
            #field{
                name = gateway_id,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = [{json_name, "gatewayID"}]
            },
            #field{
                name = raw_id,
                fnum = 2,
                rnum = 3,
                type = bytes,
                occurrence = optional,
                opts = [{json_name, "rawID"}]
            },
            #field{
                name = payload,
                fnum = 3,
                rnum = 4,
                type = bytes,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'gw.RawPacketForwarderCommand'}, [
            #field{
                name = gateway_id,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = [{json_name, "gatewayID"}]
            },
            #field{
                name = raw_id,
                fnum = 2,
                rnum = 3,
                type = bytes,
                occurrence = optional,
                opts = [{json_name, "rawID"}]
            },
            #field{
                name = payload,
                fnum = 3,
                rnum = 4,
                type = bytes,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'gw.ConnState'}, [
            #field{
                name = gateway_id,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = [{json_name, "gatewayID"}]
            },
            #field{
                name = state,
                fnum = 2,
                rnum = 3,
                type = {enum, 'gw.ConnState.State'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.ServiceProfile'}, [
            #field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []},
            #field{
                name = ul_rate,
                fnum = 2,
                rnum = 3,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = ul_bucket_size,
                fnum = 3,
                rnum = 4,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = ul_rate_policy,
                fnum = 4,
                rnum = 5,
                type = {enum, 'ns.RatePolicy'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = dl_rate,
                fnum = 5,
                rnum = 6,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = dl_bucket_size,
                fnum = 6,
                rnum = 7,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = dl_rate_policy,
                fnum = 7,
                rnum = 8,
                type = {enum, 'ns.RatePolicy'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = add_gw_metadata,
                fnum = 8,
                rnum = 9,
                type = bool,
                occurrence = optional,
                opts = []
            },
            #field{
                name = dev_status_req_freq,
                fnum = 9,
                rnum = 10,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = report_dev_status_battery,
                fnum = 10,
                rnum = 11,
                type = bool,
                occurrence = optional,
                opts = []
            },
            #field{
                name = report_dev_status_margin,
                fnum = 11,
                rnum = 12,
                type = bool,
                occurrence = optional,
                opts = []
            },
            #field{
                name = dr_min,
                fnum = 12,
                rnum = 13,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = dr_max,
                fnum = 13,
                rnum = 14,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = channel_mask,
                fnum = 14,
                rnum = 15,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = pr_allowed,
                fnum = 15,
                rnum = 16,
                type = bool,
                occurrence = optional,
                opts = []
            },
            #field{
                name = hr_allowed,
                fnum = 16,
                rnum = 17,
                type = bool,
                occurrence = optional,
                opts = []
            },
            #field{
                name = ra_allowed,
                fnum = 17,
                rnum = 18,
                type = bool,
                occurrence = optional,
                opts = []
            },
            #field{
                name = nwk_geo_loc,
                fnum = 18,
                rnum = 19,
                type = bool,
                occurrence = optional,
                opts = []
            },
            #field{
                name = target_per,
                fnum = 19,
                rnum = 20,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = min_gw_diversity,
                fnum = 20,
                rnum = 21,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = gws_private,
                fnum = 21,
                rnum = 22,
                type = bool,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.DeviceProfile'}, [
            #field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []},
            #field{
                name = supports_class_b,
                fnum = 2,
                rnum = 3,
                type = bool,
                occurrence = optional,
                opts = []
            },
            #field{
                name = class_b_timeout,
                fnum = 3,
                rnum = 4,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = ping_slot_period,
                fnum = 4,
                rnum = 5,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = ping_slot_dr,
                fnum = 5,
                rnum = 6,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = ping_slot_freq,
                fnum = 6,
                rnum = 7,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = supports_class_c,
                fnum = 7,
                rnum = 8,
                type = bool,
                occurrence = optional,
                opts = []
            },
            #field{
                name = class_c_timeout,
                fnum = 8,
                rnum = 9,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = mac_version,
                fnum = 9,
                rnum = 10,
                type = string,
                occurrence = optional,
                opts = []
            },
            #field{
                name = reg_params_revision,
                fnum = 10,
                rnum = 11,
                type = string,
                occurrence = optional,
                opts = []
            },
            #field{
                name = rx_delay_1,
                fnum = 11,
                rnum = 12,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = rx_dr_offset_1,
                fnum = 12,
                rnum = 13,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = rx_datarate_2,
                fnum = 13,
                rnum = 14,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = rx_freq_2,
                fnum = 14,
                rnum = 15,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = factory_preset_freqs,
                fnum = 15,
                rnum = 16,
                type = uint32,
                occurrence = repeated,
                opts = [packed]
            },
            #field{
                name = max_eirp,
                fnum = 16,
                rnum = 17,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = max_duty_cycle,
                fnum = 17,
                rnum = 18,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = supports_join,
                fnum = 18,
                rnum = 19,
                type = bool,
                occurrence = optional,
                opts = []
            },
            #field{
                name = rf_region,
                fnum = 19,
                rnum = 20,
                type = string,
                occurrence = optional,
                opts = []
            },
            #field{
                name = supports_32bit_f_cnt,
                fnum = 20,
                rnum = 21,
                type = bool,
                occurrence = optional,
                opts = []
            },
            #field{
                name = adr_algorithm_id,
                fnum = 21,
                rnum = 22,
                type = string,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'ns.RoutingProfile'}, [
            #field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []},
            #field{
                name = as_id,
                fnum = 2,
                rnum = 3,
                type = string,
                occurrence = optional,
                opts = []
            },
            #field{
                name = ca_cert,
                fnum = 3,
                rnum = 4,
                type = string,
                occurrence = optional,
                opts = []
            },
            #field{
                name = tls_cert,
                fnum = 4,
                rnum = 5,
                type = string,
                occurrence = optional,
                opts = []
            },
            #field{
                name = tls_key,
                fnum = 5,
                rnum = 6,
                type = string,
                occurrence = optional,
                opts = []
            }
        ]}
    ].

get_msg_names() ->
    [
        'ns.CreateServiceProfileRequest',
        'ns.CreateServiceProfileResponse',
        'ns.GetServiceProfileRequest',
        'ns.GetServiceProfileResponse',
        'ns.UpdateServiceProfileRequest',
        'ns.DeleteServiceProfileRequest',
        'ns.CreateRoutingProfileRequest',
        'ns.CreateRoutingProfileResponse',
        'ns.GetRoutingProfileRequest',
        'ns.GetRoutingProfileResponse',
        'ns.UpdateRoutingProfileRequest',
        'ns.DeleteRoutingProfileRequest',
        'ns.CreateDeviceProfileRequest',
        'ns.CreateDeviceProfileResponse',
        'ns.GetDeviceProfileRequest',
        'ns.GetDeviceProfileResponse',
        'ns.UpdateDeviceProfileRequest',
        'ns.DeleteDeviceProfileRequest',
        'ns.Device',
        'ns.CreateDeviceRequest',
        'ns.GetDeviceRequest',
        'ns.GetDeviceResponse',
        'ns.UpdateDeviceRequest',
        'ns.DeleteDeviceRequest',
        'ns.DeviceActivation',
        'ns.ActivateDeviceRequest',
        'ns.DeactivateDeviceRequest',
        'ns.GetDeviceActivationRequest',
        'ns.GetDeviceActivationResponse',
        'ns.GetRandomDevAddrResponse',
        'ns.CreateMACCommandQueueItemRequest',
        'ns.SendProprietaryPayloadRequest',
        'ns.Gateway',
        'ns.GatewayBoard',
        'ns.CreateGatewayRequest',
        'ns.GetGatewayRequest',
        'ns.GetGatewayResponse',
        'ns.UpdateGatewayRequest',
        'ns.DeleteGatewayRequest',
        'ns.GenerateGatewayClientCertificateRequest',
        'ns.GenerateGatewayClientCertificateResponse',
        'ns.GatewayStats',
        'ns.GetGatewayStatsRequest',
        'ns.GetGatewayStatsResponse',
        'ns.DeviceQueueItem',
        'ns.CreateDeviceQueueItemRequest',
        'ns.FlushDeviceQueueForDevEUIRequest',
        'ns.GetDeviceQueueItemsForDevEUIRequest',
        'ns.GetDeviceQueueItemsForDevEUIResponse',
        'ns.GetNextDownlinkFCntForDevEUIRequest',
        'ns.GetNextDownlinkFCntForDevEUIResponse',
        'ns.UplinkFrameLog',
        'ns.DownlinkFrameLog',
        'ns.StreamFrameLogsForGatewayRequest',
        'ns.StreamFrameLogsForGatewayResponse',
        'ns.StreamFrameLogsForDeviceRequest',
        'ns.StreamFrameLogsForDeviceResponse',
        'ns.GetVersionResponse',
        'ns.GatewayProfile',
        'ns.GatewayProfileExtraChannel',
        'ns.CreateGatewayProfileRequest',
        'ns.CreateGatewayProfileResponse',
        'ns.GetGatewayProfileRequest',
        'ns.GetGatewayProfileResponse',
        'ns.UpdateGatewayProfileRequest',
        'ns.DeleteGatewayProfileRequest',
        'ns.MulticastGroup',
        'ns.CreateMulticastGroupRequest',
        'ns.CreateMulticastGroupResponse',
        'ns.GetMulticastGroupRequest',
        'ns.GetMulticastGroupResponse',
        'ns.UpdateMulticastGroupRequest',
        'ns.DeleteMulticastGroupRequest',
        'ns.AddDeviceToMulticastGroupRequest',
        'ns.RemoveDeviceFromMulticastGroupRequest',
        'ns.MulticastQueueItem',
        'ns.EnqueueMulticastQueueItemRequest',
        'ns.FlushMulticastQueueForMulticastGroupRequest',
        'ns.GetMulticastQueueItemsForMulticastGroupRequest',
        'ns.GetMulticastQueueItemsForMulticastGroupResponse',
        'ns.GetADRAlgorithmsResponse',
        'ns.ADRAlgorithm',
        'google.protobuf.Timestamp',
        'google.protobuf.Duration',
        'google.protobuf.Empty',
        'common.KeyEnvelope',
        'common.Location',
        'gw.UplinkTXInfo',
        'gw.LoRaModulationInfo',
        'gw.FSKModulationInfo',
        'gw.EncryptedFineTimestamp',
        'gw.PlainFineTimestamp',
        'gw.GatewayStats',
        'gw.UplinkRXInfo',
        'gw.DownlinkTXInfo',
        'gw.ImmediatelyTimingInfo',
        'gw.DelayTimingInfo',
        'gw.GPSEpochTimingInfo',
        'gw.UplinkFrame',
        'gw.UplinkFrameSet',
        'gw.DownlinkFrame',
        'gw.DownlinkFrameItem',
        'gw.DownlinkTXAck',
        'gw.DownlinkTXAckItem',
        'gw.GatewayConfiguration',
        'gw.ChannelConfiguration',
        'gw.LoRaModulationConfig',
        'gw.FSKModulationConfig',
        'gw.GatewayCommandExecRequest',
        'gw.GatewayCommandExecResponse',
        'gw.RawPacketForwarderEvent',
        'gw.RawPacketForwarderCommand',
        'gw.ConnState',
        'ns.ServiceProfile',
        'ns.DeviceProfile',
        'ns.RoutingProfile'
    ].

get_group_names() -> [].

get_msg_or_group_names() ->
    [
        'ns.CreateServiceProfileRequest',
        'ns.CreateServiceProfileResponse',
        'ns.GetServiceProfileRequest',
        'ns.GetServiceProfileResponse',
        'ns.UpdateServiceProfileRequest',
        'ns.DeleteServiceProfileRequest',
        'ns.CreateRoutingProfileRequest',
        'ns.CreateRoutingProfileResponse',
        'ns.GetRoutingProfileRequest',
        'ns.GetRoutingProfileResponse',
        'ns.UpdateRoutingProfileRequest',
        'ns.DeleteRoutingProfileRequest',
        'ns.CreateDeviceProfileRequest',
        'ns.CreateDeviceProfileResponse',
        'ns.GetDeviceProfileRequest',
        'ns.GetDeviceProfileResponse',
        'ns.UpdateDeviceProfileRequest',
        'ns.DeleteDeviceProfileRequest',
        'ns.Device',
        'ns.CreateDeviceRequest',
        'ns.GetDeviceRequest',
        'ns.GetDeviceResponse',
        'ns.UpdateDeviceRequest',
        'ns.DeleteDeviceRequest',
        'ns.DeviceActivation',
        'ns.ActivateDeviceRequest',
        'ns.DeactivateDeviceRequest',
        'ns.GetDeviceActivationRequest',
        'ns.GetDeviceActivationResponse',
        'ns.GetRandomDevAddrResponse',
        'ns.CreateMACCommandQueueItemRequest',
        'ns.SendProprietaryPayloadRequest',
        'ns.Gateway',
        'ns.GatewayBoard',
        'ns.CreateGatewayRequest',
        'ns.GetGatewayRequest',
        'ns.GetGatewayResponse',
        'ns.UpdateGatewayRequest',
        'ns.DeleteGatewayRequest',
        'ns.GenerateGatewayClientCertificateRequest',
        'ns.GenerateGatewayClientCertificateResponse',
        'ns.GatewayStats',
        'ns.GetGatewayStatsRequest',
        'ns.GetGatewayStatsResponse',
        'ns.DeviceQueueItem',
        'ns.CreateDeviceQueueItemRequest',
        'ns.FlushDeviceQueueForDevEUIRequest',
        'ns.GetDeviceQueueItemsForDevEUIRequest',
        'ns.GetDeviceQueueItemsForDevEUIResponse',
        'ns.GetNextDownlinkFCntForDevEUIRequest',
        'ns.GetNextDownlinkFCntForDevEUIResponse',
        'ns.UplinkFrameLog',
        'ns.DownlinkFrameLog',
        'ns.StreamFrameLogsForGatewayRequest',
        'ns.StreamFrameLogsForGatewayResponse',
        'ns.StreamFrameLogsForDeviceRequest',
        'ns.StreamFrameLogsForDeviceResponse',
        'ns.GetVersionResponse',
        'ns.GatewayProfile',
        'ns.GatewayProfileExtraChannel',
        'ns.CreateGatewayProfileRequest',
        'ns.CreateGatewayProfileResponse',
        'ns.GetGatewayProfileRequest',
        'ns.GetGatewayProfileResponse',
        'ns.UpdateGatewayProfileRequest',
        'ns.DeleteGatewayProfileRequest',
        'ns.MulticastGroup',
        'ns.CreateMulticastGroupRequest',
        'ns.CreateMulticastGroupResponse',
        'ns.GetMulticastGroupRequest',
        'ns.GetMulticastGroupResponse',
        'ns.UpdateMulticastGroupRequest',
        'ns.DeleteMulticastGroupRequest',
        'ns.AddDeviceToMulticastGroupRequest',
        'ns.RemoveDeviceFromMulticastGroupRequest',
        'ns.MulticastQueueItem',
        'ns.EnqueueMulticastQueueItemRequest',
        'ns.FlushMulticastQueueForMulticastGroupRequest',
        'ns.GetMulticastQueueItemsForMulticastGroupRequest',
        'ns.GetMulticastQueueItemsForMulticastGroupResponse',
        'ns.GetADRAlgorithmsResponse',
        'ns.ADRAlgorithm',
        'google.protobuf.Timestamp',
        'google.protobuf.Duration',
        'google.protobuf.Empty',
        'common.KeyEnvelope',
        'common.Location',
        'gw.UplinkTXInfo',
        'gw.LoRaModulationInfo',
        'gw.FSKModulationInfo',
        'gw.EncryptedFineTimestamp',
        'gw.PlainFineTimestamp',
        'gw.GatewayStats',
        'gw.UplinkRXInfo',
        'gw.DownlinkTXInfo',
        'gw.ImmediatelyTimingInfo',
        'gw.DelayTimingInfo',
        'gw.GPSEpochTimingInfo',
        'gw.UplinkFrame',
        'gw.UplinkFrameSet',
        'gw.DownlinkFrame',
        'gw.DownlinkFrameItem',
        'gw.DownlinkTXAck',
        'gw.DownlinkTXAckItem',
        'gw.GatewayConfiguration',
        'gw.ChannelConfiguration',
        'gw.LoRaModulationConfig',
        'gw.FSKModulationConfig',
        'gw.GatewayCommandExecRequest',
        'gw.GatewayCommandExecResponse',
        'gw.RawPacketForwarderEvent',
        'gw.RawPacketForwarderCommand',
        'gw.ConnState',
        'ns.ServiceProfile',
        'ns.DeviceProfile',
        'ns.RoutingProfile'
    ].

get_enum_names() ->
    [
        'ns.RXWindow',
        'ns.AggregationInterval',
        'ns.MulticastGroupType',
        'common.Modulation',
        'common.Region',
        'common.MType',
        'common.LocationSource',
        'gw.DownlinkTiming',
        'gw.FineTimestampType',
        'gw.CRCStatus',
        'gw.TxAckStatus',
        'gw.ConnState.State',
        'ns.RatePolicy'
    ].

fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.

fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
        Es when is_list(Es) -> Es;
        error -> erlang:error({no_such_enum, EnumName})
    end.

find_msg_def('ns.CreateServiceProfileRequest') ->
    [
        #field{
            name = service_profile,
            fnum = 1,
            rnum = 2,
            type = {msg, 'ns.ServiceProfile'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('ns.CreateServiceProfileResponse') ->
    [#field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}];
find_msg_def('ns.GetServiceProfileRequest') ->
    [#field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}];
find_msg_def('ns.GetServiceProfileResponse') ->
    [
        #field{
            name = service_profile,
            fnum = 1,
            rnum = 2,
            type = {msg, 'ns.ServiceProfile'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = created_at,
            fnum = 2,
            rnum = 3,
            type = {msg, 'google.protobuf.Timestamp'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = updated_at,
            fnum = 3,
            rnum = 4,
            type = {msg, 'google.protobuf.Timestamp'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('ns.UpdateServiceProfileRequest') ->
    [
        #field{
            name = service_profile,
            fnum = 1,
            rnum = 2,
            type = {msg, 'ns.ServiceProfile'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('ns.DeleteServiceProfileRequest') ->
    [#field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}];
find_msg_def('ns.CreateRoutingProfileRequest') ->
    [
        #field{
            name = routing_profile,
            fnum = 1,
            rnum = 2,
            type = {msg, 'ns.RoutingProfile'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('ns.CreateRoutingProfileResponse') ->
    [#field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}];
find_msg_def('ns.GetRoutingProfileRequest') ->
    [#field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}];
find_msg_def('ns.GetRoutingProfileResponse') ->
    [
        #field{
            name = routing_profile,
            fnum = 1,
            rnum = 2,
            type = {msg, 'ns.RoutingProfile'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = created_at,
            fnum = 2,
            rnum = 3,
            type = {msg, 'google.protobuf.Timestamp'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = updated_at,
            fnum = 3,
            rnum = 4,
            type = {msg, 'google.protobuf.Timestamp'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('ns.UpdateRoutingProfileRequest') ->
    [
        #field{
            name = routing_profile,
            fnum = 1,
            rnum = 2,
            type = {msg, 'ns.RoutingProfile'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('ns.DeleteRoutingProfileRequest') ->
    [#field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}];
find_msg_def('ns.CreateDeviceProfileRequest') ->
    [
        #field{
            name = device_profile,
            fnum = 1,
            rnum = 2,
            type = {msg, 'ns.DeviceProfile'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('ns.CreateDeviceProfileResponse') ->
    [#field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}];
find_msg_def('ns.GetDeviceProfileRequest') ->
    [#field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}];
find_msg_def('ns.GetDeviceProfileResponse') ->
    [
        #field{
            name = device_profile,
            fnum = 1,
            rnum = 2,
            type = {msg, 'ns.DeviceProfile'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = created_at,
            fnum = 2,
            rnum = 3,
            type = {msg, 'google.protobuf.Timestamp'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = updated_at,
            fnum = 3,
            rnum = 4,
            type = {msg, 'google.protobuf.Timestamp'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('ns.UpdateDeviceProfileRequest') ->
    [
        #field{
            name = device_profile,
            fnum = 1,
            rnum = 2,
            type = {msg, 'ns.DeviceProfile'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('ns.DeleteDeviceProfileRequest') ->
    [#field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}];
find_msg_def('ns.Device') ->
    [
        #field{name = dev_eui, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []},
        #field{
            name = device_profile_id,
            fnum = 2,
            rnum = 3,
            type = bytes,
            occurrence = optional,
            opts = []
        },
        #field{
            name = service_profile_id,
            fnum = 3,
            rnum = 4,
            type = bytes,
            occurrence = optional,
            opts = []
        },
        #field{
            name = routing_profile_id,
            fnum = 4,
            rnum = 5,
            type = bytes,
            occurrence = optional,
            opts = []
        },
        #field{
            name = skip_f_cnt_check,
            fnum = 5,
            rnum = 6,
            type = bool,
            occurrence = optional,
            opts = []
        },
        #field{
            name = reference_altitude,
            fnum = 6,
            rnum = 7,
            type = double,
            occurrence = optional,
            opts = []
        },
        #field{
            name = is_disabled,
            fnum = 7,
            rnum = 8,
            type = bool,
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('ns.CreateDeviceRequest') ->
    [
        #field{
            name = device,
            fnum = 1,
            rnum = 2,
            type = {msg, 'ns.Device'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('ns.GetDeviceRequest') ->
    [#field{name = dev_eui, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}];
find_msg_def('ns.GetDeviceResponse') ->
    [
        #field{
            name = device,
            fnum = 1,
            rnum = 2,
            type = {msg, 'ns.Device'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = created_at,
            fnum = 2,
            rnum = 3,
            type = {msg, 'google.protobuf.Timestamp'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = updated_at,
            fnum = 3,
            rnum = 4,
            type = {msg, 'google.protobuf.Timestamp'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('ns.UpdateDeviceRequest') ->
    [
        #field{
            name = device,
            fnum = 1,
            rnum = 2,
            type = {msg, 'ns.Device'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('ns.DeleteDeviceRequest') ->
    [#field{name = dev_eui, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}];
find_msg_def('ns.DeviceActivation') ->
    [
        #field{name = dev_eui, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []},
        #field{name = dev_addr, fnum = 2, rnum = 3, type = bytes, occurrence = optional, opts = []},
        #field{
            name = s_nwk_s_int_key,
            fnum = 3,
            rnum = 4,
            type = bytes,
            occurrence = optional,
            opts = []
        },
        #field{
            name = f_nwk_s_int_key,
            fnum = 4,
            rnum = 5,
            type = bytes,
            occurrence = optional,
            opts = []
        },
        #field{
            name = nwk_s_enc_key,
            fnum = 5,
            rnum = 6,
            type = bytes,
            occurrence = optional,
            opts = []
        },
        #field{
            name = f_cnt_up,
            fnum = 6,
            rnum = 7,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = n_f_cnt_down,
            fnum = 7,
            rnum = 8,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = a_f_cnt_down,
            fnum = 8,
            rnum = 9,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = skip_f_cnt_check,
            fnum = 9,
            rnum = 10,
            type = bool,
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('ns.ActivateDeviceRequest') ->
    [
        #field{
            name = device_activation,
            fnum = 1,
            rnum = 2,
            type = {msg, 'ns.DeviceActivation'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('ns.DeactivateDeviceRequest') ->
    [#field{name = dev_eui, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}];
find_msg_def('ns.GetDeviceActivationRequest') ->
    [#field{name = dev_eui, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}];
find_msg_def('ns.GetDeviceActivationResponse') ->
    [
        #field{
            name = device_activation,
            fnum = 1,
            rnum = 2,
            type = {msg, 'ns.DeviceActivation'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('ns.GetRandomDevAddrResponse') ->
    [#field{name = dev_addr, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}];
find_msg_def('ns.CreateMACCommandQueueItemRequest') ->
    [
        #field{name = dev_eui, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []},
        #field{name = cid, fnum = 4, rnum = 3, type = uint32, occurrence = optional, opts = []},
        #field{name = commands, fnum = 5, rnum = 4, type = bytes, occurrence = repeated, opts = []}
    ];
find_msg_def('ns.SendProprietaryPayloadRequest') ->
    [
        #field{
            name = mac_payload,
            fnum = 1,
            rnum = 2,
            type = bytes,
            occurrence = optional,
            opts = []
        },
        #field{name = mic, fnum = 2, rnum = 3, type = bytes, occurrence = optional, opts = []},
        #field{
            name = gateway_macs,
            fnum = 3,
            rnum = 4,
            type = bytes,
            occurrence = repeated,
            opts = []
        },
        #field{
            name = polarization_inversion,
            fnum = 4,
            rnum = 5,
            type = bool,
            occurrence = optional,
            opts = []
        },
        #field{
            name = frequency,
            fnum = 5,
            rnum = 6,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{name = dr, fnum = 6, rnum = 7, type = uint32, occurrence = optional, opts = []}
    ];
find_msg_def('ns.Gateway') ->
    [
        #field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []},
        #field{
            name = location,
            fnum = 2,
            rnum = 3,
            type = {msg, 'common.Location'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = gateway_profile_id,
            fnum = 3,
            rnum = 4,
            type = bytes,
            occurrence = optional,
            opts = []
        },
        #field{
            name = boards,
            fnum = 4,
            rnum = 5,
            type = {msg, 'ns.GatewayBoard'},
            occurrence = repeated,
            opts = []
        },
        #field{
            name = routing_profile_id,
            fnum = 5,
            rnum = 6,
            type = bytes,
            occurrence = optional,
            opts = []
        },
        #field{
            name = service_profile_id,
            fnum = 6,
            rnum = 7,
            type = bytes,
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('ns.GatewayBoard') ->
    [
        #field{name = fpga_id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []},
        #field{
            name = fine_timestamp_key,
            fnum = 2,
            rnum = 3,
            type = bytes,
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('ns.CreateGatewayRequest') ->
    [
        #field{
            name = gateway,
            fnum = 1,
            rnum = 2,
            type = {msg, 'ns.Gateway'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('ns.GetGatewayRequest') ->
    [#field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}];
find_msg_def('ns.GetGatewayResponse') ->
    [
        #field{
            name = gateway,
            fnum = 1,
            rnum = 2,
            type = {msg, 'ns.Gateway'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = created_at,
            fnum = 2,
            rnum = 3,
            type = {msg, 'google.protobuf.Timestamp'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = updated_at,
            fnum = 3,
            rnum = 4,
            type = {msg, 'google.protobuf.Timestamp'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = first_seen_at,
            fnum = 4,
            rnum = 5,
            type = {msg, 'google.protobuf.Timestamp'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = last_seen_at,
            fnum = 5,
            rnum = 6,
            type = {msg, 'google.protobuf.Timestamp'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('ns.UpdateGatewayRequest') ->
    [
        #field{
            name = gateway,
            fnum = 1,
            rnum = 2,
            type = {msg, 'ns.Gateway'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('ns.DeleteGatewayRequest') ->
    [#field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}];
find_msg_def('ns.GenerateGatewayClientCertificateRequest') ->
    [#field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}];
find_msg_def('ns.GenerateGatewayClientCertificateResponse') ->
    [
        #field{name = tls_cert, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []},
        #field{name = tls_key, fnum = 2, rnum = 3, type = bytes, occurrence = optional, opts = []},
        #field{name = ca_cert, fnum = 3, rnum = 4, type = bytes, occurrence = optional, opts = []},
        #field{
            name = expires_at,
            fnum = 4,
            rnum = 5,
            type = {msg, 'google.protobuf.Timestamp'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('ns.GatewayStats') ->
    [
        #field{
            name = timestamp,
            fnum = 1,
            rnum = 2,
            type = {msg, 'google.protobuf.Timestamp'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = rx_packets_received,
            fnum = 2,
            rnum = 3,
            type = int32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = rx_packets_received_ok,
            fnum = 3,
            rnum = 4,
            type = int32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = tx_packets_received,
            fnum = 4,
            rnum = 5,
            type = int32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = tx_packets_emitted,
            fnum = 5,
            rnum = 6,
            type = int32,
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('ns.GetGatewayStatsRequest') ->
    [
        #field{
            name = gateway_id,
            fnum = 1,
            rnum = 2,
            type = bytes,
            occurrence = optional,
            opts = []
        },
        #field{
            name = interval,
            fnum = 2,
            rnum = 3,
            type = {enum, 'ns.AggregationInterval'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = start_timestamp,
            fnum = 3,
            rnum = 4,
            type = {msg, 'google.protobuf.Timestamp'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = end_timestamp,
            fnum = 4,
            rnum = 5,
            type = {msg, 'google.protobuf.Timestamp'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('ns.GetGatewayStatsResponse') ->
    [
        #field{
            name = result,
            fnum = 1,
            rnum = 2,
            type = {msg, 'ns.GatewayStats'},
            occurrence = repeated,
            opts = []
        }
    ];
find_msg_def('ns.DeviceQueueItem') ->
    [
        #field{name = dev_eui, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []},
        #field{
            name = frm_payload,
            fnum = 2,
            rnum = 3,
            type = bytes,
            occurrence = optional,
            opts = []
        },
        #field{name = f_cnt, fnum = 3, rnum = 4, type = uint32, occurrence = optional, opts = []},
        #field{name = f_port, fnum = 4, rnum = 5, type = uint32, occurrence = optional, opts = []},
        #field{name = confirmed, fnum = 5, rnum = 6, type = bool, occurrence = optional, opts = []},
        #field{name = dev_addr, fnum = 6, rnum = 7, type = bytes, occurrence = optional, opts = []}
    ];
find_msg_def('ns.CreateDeviceQueueItemRequest') ->
    [
        #field{
            name = item,
            fnum = 1,
            rnum = 2,
            type = {msg, 'ns.DeviceQueueItem'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('ns.FlushDeviceQueueForDevEUIRequest') ->
    [#field{name = dev_eui, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}];
find_msg_def('ns.GetDeviceQueueItemsForDevEUIRequest') ->
    [
        #field{name = dev_eui, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []},
        #field{name = count_only, fnum = 2, rnum = 3, type = bool, occurrence = optional, opts = []}
    ];
find_msg_def('ns.GetDeviceQueueItemsForDevEUIResponse') ->
    [
        #field{
            name = items,
            fnum = 1,
            rnum = 2,
            type = {msg, 'ns.DeviceQueueItem'},
            occurrence = repeated,
            opts = []
        },
        #field{
            name = total_count,
            fnum = 2,
            rnum = 3,
            type = uint32,
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('ns.GetNextDownlinkFCntForDevEUIRequest') ->
    [#field{name = dev_eui, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}];
find_msg_def('ns.GetNextDownlinkFCntForDevEUIResponse') ->
    [#field{name = f_cnt, fnum = 1, rnum = 2, type = uint32, occurrence = optional, opts = []}];
find_msg_def('ns.UplinkFrameLog') ->
    [
        #field{
            name = phy_payload,
            fnum = 1,
            rnum = 2,
            type = bytes,
            occurrence = optional,
            opts = []
        },
        #field{
            name = tx_info,
            fnum = 2,
            rnum = 3,
            type = {msg, 'gw.UplinkTXInfo'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = rx_info,
            fnum = 3,
            rnum = 4,
            type = {msg, 'gw.UplinkRXInfo'},
            occurrence = repeated,
            opts = []
        },
        #field{
            name = m_type,
            fnum = 4,
            rnum = 5,
            type = {enum, 'common.MType'},
            occurrence = optional,
            opts = []
        },
        #field{name = dev_addr, fnum = 5, rnum = 6, type = bytes, occurrence = optional, opts = []},
        #field{name = dev_eui, fnum = 6, rnum = 7, type = bytes, occurrence = optional, opts = []}
    ];
find_msg_def('ns.DownlinkFrameLog') ->
    [
        #field{
            name = phy_payload,
            fnum = 1,
            rnum = 2,
            type = bytes,
            occurrence = optional,
            opts = []
        },
        #field{
            name = tx_info,
            fnum = 2,
            rnum = 3,
            type = {msg, 'gw.DownlinkTXInfo'},
            occurrence = optional,
            opts = []
        },
        #field{name = token, fnum = 3, rnum = 4, type = uint32, occurrence = optional, opts = []},
        #field{
            name = downlink_id,
            fnum = 4,
            rnum = 5,
            type = bytes,
            occurrence = optional,
            opts = [{json_name, "downlinkID"}]
        },
        #field{
            name = gateway_id,
            fnum = 5,
            rnum = 6,
            type = bytes,
            occurrence = optional,
            opts = [{json_name, "gatewayID"}]
        },
        #field{
            name = m_type,
            fnum = 6,
            rnum = 7,
            type = {enum, 'common.MType'},
            occurrence = optional,
            opts = []
        },
        #field{name = dev_addr, fnum = 7, rnum = 8, type = bytes, occurrence = optional, opts = []},
        #field{name = dev_eui, fnum = 8, rnum = 9, type = bytes, occurrence = optional, opts = []}
    ];
find_msg_def('ns.StreamFrameLogsForGatewayRequest') ->
    [#field{name = gateway_id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}];
find_msg_def('ns.StreamFrameLogsForGatewayResponse') ->
    [
        #gpb_oneof{
            name = frame,
            rnum = 2,
            fields = [
                #field{
                    name = uplink_frame_set,
                    fnum = 1,
                    rnum = 2,
                    type = {msg, 'ns.UplinkFrameLog'},
                    occurrence = optional,
                    opts = []
                },
                #field{
                    name = downlink_frame,
                    fnum = 2,
                    rnum = 2,
                    type = {msg, 'ns.DownlinkFrameLog'},
                    occurrence = optional,
                    opts = []
                }
            ],
            opts = []
        }
    ];
find_msg_def('ns.StreamFrameLogsForDeviceRequest') ->
    [#field{name = dev_eui, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}];
find_msg_def('ns.StreamFrameLogsForDeviceResponse') ->
    [
        #gpb_oneof{
            name = frame,
            rnum = 2,
            fields = [
                #field{
                    name = uplink_frame_set,
                    fnum = 1,
                    rnum = 2,
                    type = {msg, 'ns.UplinkFrameLog'},
                    occurrence = optional,
                    opts = []
                },
                #field{
                    name = downlink_frame,
                    fnum = 2,
                    rnum = 2,
                    type = {msg, 'ns.DownlinkFrameLog'},
                    occurrence = optional,
                    opts = []
                }
            ],
            opts = []
        }
    ];
find_msg_def('ns.GetVersionResponse') ->
    [
        #field{name = version, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
        #field{
            name = region,
            fnum = 2,
            rnum = 3,
            type = {enum, 'common.Region'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('ns.GatewayProfile') ->
    [
        #field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []},
        #field{
            name = channels,
            fnum = 2,
            rnum = 3,
            type = uint32,
            occurrence = repeated,
            opts = [packed]
        },
        #field{
            name = extra_channels,
            fnum = 3,
            rnum = 4,
            type = {msg, 'ns.GatewayProfileExtraChannel'},
            occurrence = repeated,
            opts = []
        },
        #field{
            name = stats_interval,
            fnum = 4,
            rnum = 5,
            type = {msg, 'google.protobuf.Duration'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('ns.GatewayProfileExtraChannel') ->
    [
        #field{
            name = modulation,
            fnum = 1,
            rnum = 2,
            type = {enum, 'common.Modulation'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = frequency,
            fnum = 2,
            rnum = 3,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = bandwidth,
            fnum = 3,
            rnum = 4,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{name = bitrate, fnum = 4, rnum = 5, type = uint32, occurrence = optional, opts = []},
        #field{
            name = spreading_factors,
            fnum = 5,
            rnum = 6,
            type = uint32,
            occurrence = repeated,
            opts = [packed]
        }
    ];
find_msg_def('ns.CreateGatewayProfileRequest') ->
    [
        #field{
            name = gateway_profile,
            fnum = 1,
            rnum = 2,
            type = {msg, 'ns.GatewayProfile'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('ns.CreateGatewayProfileResponse') ->
    [#field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}];
find_msg_def('ns.GetGatewayProfileRequest') ->
    [#field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}];
find_msg_def('ns.GetGatewayProfileResponse') ->
    [
        #field{
            name = gateway_profile,
            fnum = 1,
            rnum = 2,
            type = {msg, 'ns.GatewayProfile'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = created_at,
            fnum = 2,
            rnum = 3,
            type = {msg, 'google.protobuf.Timestamp'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = updated_at,
            fnum = 3,
            rnum = 4,
            type = {msg, 'google.protobuf.Timestamp'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('ns.UpdateGatewayProfileRequest') ->
    [
        #field{
            name = gateway_profile,
            fnum = 1,
            rnum = 2,
            type = {msg, 'ns.GatewayProfile'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('ns.DeleteGatewayProfileRequest') ->
    [#field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}];
find_msg_def('ns.MulticastGroup') ->
    [
        #field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []},
        #field{name = mc_addr, fnum = 2, rnum = 3, type = bytes, occurrence = optional, opts = []},
        #field{
            name = mc_nwk_s_key,
            fnum = 3,
            rnum = 4,
            type = bytes,
            occurrence = optional,
            opts = []
        },
        #field{name = f_cnt, fnum = 4, rnum = 5, type = uint32, occurrence = optional, opts = []},
        #field{
            name = group_type,
            fnum = 5,
            rnum = 6,
            type = {enum, 'ns.MulticastGroupType'},
            occurrence = optional,
            opts = []
        },
        #field{name = dr, fnum = 6, rnum = 7, type = uint32, occurrence = optional, opts = []},
        #field{
            name = frequency,
            fnum = 7,
            rnum = 8,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = ping_slot_period,
            fnum = 8,
            rnum = 9,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = service_profile_id,
            fnum = 9,
            rnum = 10,
            type = bytes,
            occurrence = optional,
            opts = []
        },
        #field{
            name = routing_profile_id,
            fnum = 10,
            rnum = 11,
            type = bytes,
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('ns.CreateMulticastGroupRequest') ->
    [
        #field{
            name = multicast_group,
            fnum = 1,
            rnum = 2,
            type = {msg, 'ns.MulticastGroup'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('ns.CreateMulticastGroupResponse') ->
    [#field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}];
find_msg_def('ns.GetMulticastGroupRequest') ->
    [#field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}];
find_msg_def('ns.GetMulticastGroupResponse') ->
    [
        #field{
            name = multicast_group,
            fnum = 1,
            rnum = 2,
            type = {msg, 'ns.MulticastGroup'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = created_at,
            fnum = 2,
            rnum = 3,
            type = {msg, 'google.protobuf.Timestamp'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = updated_at,
            fnum = 3,
            rnum = 4,
            type = {msg, 'google.protobuf.Timestamp'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('ns.UpdateMulticastGroupRequest') ->
    [
        #field{
            name = multicast_group,
            fnum = 1,
            rnum = 2,
            type = {msg, 'ns.MulticastGroup'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('ns.DeleteMulticastGroupRequest') ->
    [#field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}];
find_msg_def('ns.AddDeviceToMulticastGroupRequest') ->
    [
        #field{name = dev_eui, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []},
        #field{
            name = multicast_group_id,
            fnum = 2,
            rnum = 3,
            type = bytes,
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('ns.RemoveDeviceFromMulticastGroupRequest') ->
    [
        #field{name = dev_eui, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []},
        #field{
            name = multicast_group_id,
            fnum = 2,
            rnum = 3,
            type = bytes,
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('ns.MulticastQueueItem') ->
    [
        #field{
            name = multicast_group_id,
            fnum = 1,
            rnum = 2,
            type = bytes,
            occurrence = optional,
            opts = []
        },
        #field{name = f_cnt, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []},
        #field{name = f_port, fnum = 3, rnum = 4, type = uint32, occurrence = optional, opts = []},
        #field{
            name = frm_payload,
            fnum = 4,
            rnum = 5,
            type = bytes,
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('ns.EnqueueMulticastQueueItemRequest') ->
    [
        #field{
            name = multicast_queue_item,
            fnum = 1,
            rnum = 2,
            type = {msg, 'ns.MulticastQueueItem'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('ns.FlushMulticastQueueForMulticastGroupRequest') ->
    [
        #field{
            name = multicast_group_id,
            fnum = 1,
            rnum = 2,
            type = bytes,
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('ns.GetMulticastQueueItemsForMulticastGroupRequest') ->
    [
        #field{
            name = multicast_group_id,
            fnum = 1,
            rnum = 2,
            type = bytes,
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('ns.GetMulticastQueueItemsForMulticastGroupResponse') ->
    [
        #field{
            name = multicast_queue_items,
            fnum = 1,
            rnum = 2,
            type = {msg, 'ns.MulticastQueueItem'},
            occurrence = repeated,
            opts = []
        }
    ];
find_msg_def('ns.GetADRAlgorithmsResponse') ->
    [
        #field{
            name = adr_algorithms,
            fnum = 1,
            rnum = 2,
            type = {msg, 'ns.ADRAlgorithm'},
            occurrence = repeated,
            opts = []
        }
    ];
find_msg_def('ns.ADRAlgorithm') ->
    [
        #field{name = id, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
        #field{name = name, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []}
    ];
find_msg_def('google.protobuf.Timestamp') ->
    [
        #field{name = seconds, fnum = 1, rnum = 2, type = int64, occurrence = optional, opts = []},
        #field{name = nanos, fnum = 2, rnum = 3, type = int32, occurrence = optional, opts = []}
    ];
find_msg_def('google.protobuf.Duration') ->
    [
        #field{name = seconds, fnum = 1, rnum = 2, type = int64, occurrence = optional, opts = []},
        #field{name = nanos, fnum = 2, rnum = 3, type = int32, occurrence = optional, opts = []}
    ];
find_msg_def('google.protobuf.Empty') ->
    [];
find_msg_def('common.KeyEnvelope') ->
    [
        #field{
            name = kek_label,
            fnum = 1,
            rnum = 2,
            type = string,
            occurrence = optional,
            opts = []
        },
        #field{name = aes_key, fnum = 2, rnum = 3, type = bytes, occurrence = optional, opts = []}
    ];
find_msg_def('common.Location') ->
    [
        #field{
            name = latitude,
            fnum = 1,
            rnum = 2,
            type = double,
            occurrence = optional,
            opts = []
        },
        #field{
            name = longitude,
            fnum = 2,
            rnum = 3,
            type = double,
            occurrence = optional,
            opts = []
        },
        #field{
            name = altitude,
            fnum = 3,
            rnum = 4,
            type = double,
            occurrence = optional,
            opts = []
        },
        #field{
            name = source,
            fnum = 4,
            rnum = 5,
            type = {enum, 'common.LocationSource'},
            occurrence = optional,
            opts = []
        },
        #field{name = accuracy, fnum = 5, rnum = 6, type = uint32, occurrence = optional, opts = []}
    ];
find_msg_def('gw.UplinkTXInfo') ->
    [
        #field{
            name = frequency,
            fnum = 1,
            rnum = 2,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = modulation,
            fnum = 2,
            rnum = 3,
            type = {enum, 'common.Modulation'},
            occurrence = optional,
            opts = []
        },
        #gpb_oneof{
            name = modulation_info,
            rnum = 4,
            fields = [
                #field{
                    name = lora_modulation_info,
                    fnum = 3,
                    rnum = 4,
                    type = {msg, 'gw.LoRaModulationInfo'},
                    occurrence = optional,
                    opts = [{json_name, "loRaModulationInfo"}]
                },
                #field{
                    name = fsk_modulation_info,
                    fnum = 4,
                    rnum = 4,
                    type = {msg, 'gw.FSKModulationInfo'},
                    occurrence = optional,
                    opts = []
                }
            ],
            opts = []
        }
    ];
find_msg_def('gw.LoRaModulationInfo') ->
    [
        #field{
            name = bandwidth,
            fnum = 1,
            rnum = 2,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = spreading_factor,
            fnum = 2,
            rnum = 3,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = code_rate,
            fnum = 3,
            rnum = 4,
            type = string,
            occurrence = optional,
            opts = []
        },
        #field{
            name = polarization_inversion,
            fnum = 4,
            rnum = 5,
            type = bool,
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('gw.FSKModulationInfo') ->
    [
        #field{
            name = frequency_deviation,
            fnum = 1,
            rnum = 2,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{name = datarate, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []}
    ];
find_msg_def('gw.EncryptedFineTimestamp') ->
    [
        #field{
            name = aes_key_index,
            fnum = 1,
            rnum = 2,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = encrypted_ns,
            fnum = 2,
            rnum = 3,
            type = bytes,
            occurrence = optional,
            opts = [{json_name, "encryptedNS"}]
        },
        #field{
            name = fpga_id,
            fnum = 3,
            rnum = 4,
            type = bytes,
            occurrence = optional,
            opts = [{json_name, "fpgaID"}]
        }
    ];
find_msg_def('gw.PlainFineTimestamp') ->
    [
        #field{
            name = time,
            fnum = 1,
            rnum = 2,
            type = {msg, 'google.protobuf.Timestamp'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('gw.GatewayStats') ->
    [
        #field{
            name = gateway_id,
            fnum = 1,
            rnum = 2,
            type = bytes,
            occurrence = optional,
            opts = [{json_name, "gatewayID"}]
        },
        #field{name = ip, fnum = 9, rnum = 3, type = string, occurrence = optional, opts = []},
        #field{
            name = time,
            fnum = 2,
            rnum = 4,
            type = {msg, 'google.protobuf.Timestamp'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = location,
            fnum = 3,
            rnum = 5,
            type = {msg, 'common.Location'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = config_version,
            fnum = 4,
            rnum = 6,
            type = string,
            occurrence = optional,
            opts = []
        },
        #field{
            name = rx_packets_received,
            fnum = 5,
            rnum = 7,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = rx_packets_received_ok,
            fnum = 6,
            rnum = 8,
            type = uint32,
            occurrence = optional,
            opts = [{json_name, "rxPacketsReceivedOK"}]
        },
        #field{
            name = tx_packets_received,
            fnum = 7,
            rnum = 9,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = tx_packets_emitted,
            fnum = 8,
            rnum = 10,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = meta_data,
            fnum = 10,
            rnum = 11,
            type = {map, string, string},
            occurrence = repeated,
            opts = []
        },
        #field{
            name = stats_id,
            fnum = 11,
            rnum = 12,
            type = bytes,
            occurrence = optional,
            opts = [{json_name, "statsID"}]
        }
    ];
find_msg_def('gw.UplinkRXInfo') ->
    [
        #field{
            name = gateway_id,
            fnum = 1,
            rnum = 2,
            type = bytes,
            occurrence = optional,
            opts = [{json_name, "gatewayID"}]
        },
        #field{
            name = time,
            fnum = 2,
            rnum = 3,
            type = {msg, 'google.protobuf.Timestamp'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = time_since_gps_epoch,
            fnum = 3,
            rnum = 4,
            type = {msg, 'google.protobuf.Duration'},
            occurrence = optional,
            opts = [{json_name, "timeSinceGPSEpoch"}]
        },
        #field{name = rssi, fnum = 5, rnum = 5, type = int32, occurrence = optional, opts = []},
        #field{
            name = lora_snr,
            fnum = 6,
            rnum = 6,
            type = double,
            occurrence = optional,
            opts = [{json_name, "loRaSNR"}]
        },
        #field{name = channel, fnum = 7, rnum = 7, type = uint32, occurrence = optional, opts = []},
        #field{
            name = rf_chain,
            fnum = 8,
            rnum = 8,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{name = board, fnum = 9, rnum = 9, type = uint32, occurrence = optional, opts = []},
        #field{
            name = antenna,
            fnum = 10,
            rnum = 10,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = location,
            fnum = 11,
            rnum = 11,
            type = {msg, 'common.Location'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = fine_timestamp_type,
            fnum = 12,
            rnum = 12,
            type = {enum, 'gw.FineTimestampType'},
            occurrence = optional,
            opts = []
        },
        #gpb_oneof{
            name = fine_timestamp,
            rnum = 13,
            fields = [
                #field{
                    name = encrypted_fine_timestamp,
                    fnum = 13,
                    rnum = 13,
                    type = {msg, 'gw.EncryptedFineTimestamp'},
                    occurrence = optional,
                    opts = []
                },
                #field{
                    name = plain_fine_timestamp,
                    fnum = 14,
                    rnum = 13,
                    type = {msg, 'gw.PlainFineTimestamp'},
                    occurrence = optional,
                    opts = []
                }
            ],
            opts = []
        },
        #field{
            name = context,
            fnum = 15,
            rnum = 14,
            type = bytes,
            occurrence = optional,
            opts = []
        },
        #field{
            name = uplink_id,
            fnum = 16,
            rnum = 15,
            type = bytes,
            occurrence = optional,
            opts = [{json_name, "uplinkID"}]
        },
        #field{
            name = crc_status,
            fnum = 17,
            rnum = 16,
            type = {enum, 'gw.CRCStatus'},
            occurrence = optional,
            opts = [{json_name, "crcStatus"}]
        }
    ];
find_msg_def('gw.DownlinkTXInfo') ->
    [
        #field{
            name = gateway_id,
            fnum = 1,
            rnum = 2,
            type = bytes,
            occurrence = optional,
            opts = [{json_name, "gatewayID"}]
        },
        #field{
            name = frequency,
            fnum = 5,
            rnum = 3,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{name = power, fnum = 6, rnum = 4, type = int32, occurrence = optional, opts = []},
        #field{
            name = modulation,
            fnum = 7,
            rnum = 5,
            type = {enum, 'common.Modulation'},
            occurrence = optional,
            opts = []
        },
        #gpb_oneof{
            name = modulation_info,
            rnum = 6,
            fields = [
                #field{
                    name = lora_modulation_info,
                    fnum = 8,
                    rnum = 6,
                    type = {msg, 'gw.LoRaModulationInfo'},
                    occurrence = optional,
                    opts = [{json_name, "loRaModulationInfo"}]
                },
                #field{
                    name = fsk_modulation_info,
                    fnum = 9,
                    rnum = 6,
                    type = {msg, 'gw.FSKModulationInfo'},
                    occurrence = optional,
                    opts = []
                }
            ],
            opts = []
        },
        #field{name = board, fnum = 10, rnum = 7, type = uint32, occurrence = optional, opts = []},
        #field{
            name = antenna,
            fnum = 11,
            rnum = 8,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = timing,
            fnum = 12,
            rnum = 9,
            type = {enum, 'gw.DownlinkTiming'},
            occurrence = optional,
            opts = []
        },
        #gpb_oneof{
            name = timing_info,
            rnum = 10,
            fields = [
                #field{
                    name = immediately_timing_info,
                    fnum = 13,
                    rnum = 10,
                    type = {msg, 'gw.ImmediatelyTimingInfo'},
                    occurrence = optional,
                    opts = []
                },
                #field{
                    name = delay_timing_info,
                    fnum = 14,
                    rnum = 10,
                    type = {msg, 'gw.DelayTimingInfo'},
                    occurrence = optional,
                    opts = []
                },
                #field{
                    name = gps_epoch_timing_info,
                    fnum = 15,
                    rnum = 10,
                    type = {msg, 'gw.GPSEpochTimingInfo'},
                    occurrence = optional,
                    opts = []
                }
            ],
            opts = []
        },
        #field{name = context, fnum = 16, rnum = 11, type = bytes, occurrence = optional, opts = []}
    ];
find_msg_def('gw.ImmediatelyTimingInfo') ->
    [];
find_msg_def('gw.DelayTimingInfo') ->
    [
        #field{
            name = delay,
            fnum = 1,
            rnum = 2,
            type = {msg, 'google.protobuf.Duration'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('gw.GPSEpochTimingInfo') ->
    [
        #field{
            name = time_since_gps_epoch,
            fnum = 1,
            rnum = 2,
            type = {msg, 'google.protobuf.Duration'},
            occurrence = optional,
            opts = [{json_name, "timeSinceGPSEpoch"}]
        }
    ];
find_msg_def('gw.UplinkFrame') ->
    [
        #field{
            name = phy_payload,
            fnum = 1,
            rnum = 2,
            type = bytes,
            occurrence = optional,
            opts = []
        },
        #field{
            name = tx_info,
            fnum = 2,
            rnum = 3,
            type = {msg, 'gw.UplinkTXInfo'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = rx_info,
            fnum = 3,
            rnum = 4,
            type = {msg, 'gw.UplinkRXInfo'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('gw.UplinkFrameSet') ->
    [
        #field{
            name = phy_payload,
            fnum = 1,
            rnum = 2,
            type = bytes,
            occurrence = optional,
            opts = []
        },
        #field{
            name = tx_info,
            fnum = 2,
            rnum = 3,
            type = {msg, 'gw.UplinkTXInfo'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = rx_info,
            fnum = 3,
            rnum = 4,
            type = {msg, 'gw.UplinkRXInfo'},
            occurrence = repeated,
            opts = []
        }
    ];
find_msg_def('gw.DownlinkFrame') ->
    [
        #field{
            name = phy_payload,
            fnum = 1,
            rnum = 2,
            type = bytes,
            occurrence = optional,
            opts = []
        },
        #field{
            name = tx_info,
            fnum = 2,
            rnum = 3,
            type = {msg, 'gw.DownlinkTXInfo'},
            occurrence = optional,
            opts = []
        },
        #field{name = token, fnum = 3, rnum = 4, type = uint32, occurrence = optional, opts = []},
        #field{
            name = downlink_id,
            fnum = 4,
            rnum = 5,
            type = bytes,
            occurrence = optional,
            opts = [{json_name, "downlinkID"}]
        },
        #field{
            name = items,
            fnum = 5,
            rnum = 6,
            type = {msg, 'gw.DownlinkFrameItem'},
            occurrence = repeated,
            opts = []
        },
        #field{
            name = gateway_id,
            fnum = 6,
            rnum = 7,
            type = bytes,
            occurrence = optional,
            opts = [{json_name, "gatewayID"}]
        }
    ];
find_msg_def('gw.DownlinkFrameItem') ->
    [
        #field{
            name = phy_payload,
            fnum = 1,
            rnum = 2,
            type = bytes,
            occurrence = optional,
            opts = []
        },
        #field{
            name = tx_info,
            fnum = 2,
            rnum = 3,
            type = {msg, 'gw.DownlinkTXInfo'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('gw.DownlinkTXAck') ->
    [
        #field{
            name = gateway_id,
            fnum = 1,
            rnum = 2,
            type = bytes,
            occurrence = optional,
            opts = [{json_name, "gatewayID"}]
        },
        #field{name = token, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []},
        #field{name = error, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []},
        #field{
            name = downlink_id,
            fnum = 4,
            rnum = 5,
            type = bytes,
            occurrence = optional,
            opts = [{json_name, "downlinkID"}]
        },
        #field{
            name = items,
            fnum = 5,
            rnum = 6,
            type = {msg, 'gw.DownlinkTXAckItem'},
            occurrence = repeated,
            opts = []
        }
    ];
find_msg_def('gw.DownlinkTXAckItem') ->
    [
        #field{
            name = status,
            fnum = 1,
            rnum = 2,
            type = {enum, 'gw.TxAckStatus'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('gw.GatewayConfiguration') ->
    [
        #field{
            name = gateway_id,
            fnum = 1,
            rnum = 2,
            type = bytes,
            occurrence = optional,
            opts = [{json_name, "gatewayID"}]
        },
        #field{name = version, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
        #field{
            name = channels,
            fnum = 3,
            rnum = 4,
            type = {msg, 'gw.ChannelConfiguration'},
            occurrence = repeated,
            opts = []
        },
        #field{
            name = stats_interval,
            fnum = 4,
            rnum = 5,
            type = {msg, 'google.protobuf.Duration'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('gw.ChannelConfiguration') ->
    [
        #field{
            name = frequency,
            fnum = 1,
            rnum = 2,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = modulation,
            fnum = 2,
            rnum = 3,
            type = {enum, 'common.Modulation'},
            occurrence = optional,
            opts = []
        },
        #gpb_oneof{
            name = modulation_config,
            rnum = 4,
            fields = [
                #field{
                    name = lora_modulation_config,
                    fnum = 3,
                    rnum = 4,
                    type = {msg, 'gw.LoRaModulationConfig'},
                    occurrence = optional,
                    opts = [{json_name, "loRaModulationConfig"}]
                },
                #field{
                    name = fsk_modulation_config,
                    fnum = 4,
                    rnum = 4,
                    type = {msg, 'gw.FSKModulationConfig'},
                    occurrence = optional,
                    opts = []
                }
            ],
            opts = []
        },
        #field{name = board, fnum = 5, rnum = 5, type = uint32, occurrence = optional, opts = []},
        #field{
            name = demodulator,
            fnum = 6,
            rnum = 6,
            type = uint32,
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('gw.LoRaModulationConfig') ->
    [
        #field{
            name = bandwidth,
            fnum = 1,
            rnum = 2,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = spreading_factors,
            fnum = 2,
            rnum = 3,
            type = uint32,
            occurrence = repeated,
            opts = [packed]
        }
    ];
find_msg_def('gw.FSKModulationConfig') ->
    [
        #field{
            name = bandwidth,
            fnum = 1,
            rnum = 2,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{name = bitrate, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []}
    ];
find_msg_def('gw.GatewayCommandExecRequest') ->
    [
        #field{
            name = gateway_id,
            fnum = 1,
            rnum = 2,
            type = bytes,
            occurrence = optional,
            opts = [{json_name, "gatewayID"}]
        },
        #field{name = command, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
        #field{
            name = 'ExecId',
            fnum = 3,
            rnum = 4,
            type = bytes,
            occurrence = optional,
            opts = [{json_name, "execID"}]
        },
        #field{name = stdin, fnum = 4, rnum = 5, type = bytes, occurrence = optional, opts = []},
        #field{
            name = environment,
            fnum = 5,
            rnum = 6,
            type = {map, string, string},
            occurrence = repeated,
            opts = []
        }
    ];
find_msg_def('gw.GatewayCommandExecResponse') ->
    [
        #field{
            name = gateway_id,
            fnum = 1,
            rnum = 2,
            type = bytes,
            occurrence = optional,
            opts = [{json_name, "gatewayID"}]
        },
        #field{
            name = exec_id,
            fnum = 2,
            rnum = 3,
            type = bytes,
            occurrence = optional,
            opts = [{json_name, "execID"}]
        },
        #field{name = stdout, fnum = 3, rnum = 4, type = bytes, occurrence = optional, opts = []},
        #field{name = stderr, fnum = 4, rnum = 5, type = bytes, occurrence = optional, opts = []},
        #field{name = error, fnum = 5, rnum = 6, type = string, occurrence = optional, opts = []}
    ];
find_msg_def('gw.RawPacketForwarderEvent') ->
    [
        #field{
            name = gateway_id,
            fnum = 1,
            rnum = 2,
            type = bytes,
            occurrence = optional,
            opts = [{json_name, "gatewayID"}]
        },
        #field{
            name = raw_id,
            fnum = 2,
            rnum = 3,
            type = bytes,
            occurrence = optional,
            opts = [{json_name, "rawID"}]
        },
        #field{name = payload, fnum = 3, rnum = 4, type = bytes, occurrence = optional, opts = []}
    ];
find_msg_def('gw.RawPacketForwarderCommand') ->
    [
        #field{
            name = gateway_id,
            fnum = 1,
            rnum = 2,
            type = bytes,
            occurrence = optional,
            opts = [{json_name, "gatewayID"}]
        },
        #field{
            name = raw_id,
            fnum = 2,
            rnum = 3,
            type = bytes,
            occurrence = optional,
            opts = [{json_name, "rawID"}]
        },
        #field{name = payload, fnum = 3, rnum = 4, type = bytes, occurrence = optional, opts = []}
    ];
find_msg_def('gw.ConnState') ->
    [
        #field{
            name = gateway_id,
            fnum = 1,
            rnum = 2,
            type = bytes,
            occurrence = optional,
            opts = [{json_name, "gatewayID"}]
        },
        #field{
            name = state,
            fnum = 2,
            rnum = 3,
            type = {enum, 'gw.ConnState.State'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('ns.ServiceProfile') ->
    [
        #field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []},
        #field{name = ul_rate, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []},
        #field{
            name = ul_bucket_size,
            fnum = 3,
            rnum = 4,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = ul_rate_policy,
            fnum = 4,
            rnum = 5,
            type = {enum, 'ns.RatePolicy'},
            occurrence = optional,
            opts = []
        },
        #field{name = dl_rate, fnum = 5, rnum = 6, type = uint32, occurrence = optional, opts = []},
        #field{
            name = dl_bucket_size,
            fnum = 6,
            rnum = 7,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = dl_rate_policy,
            fnum = 7,
            rnum = 8,
            type = {enum, 'ns.RatePolicy'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = add_gw_metadata,
            fnum = 8,
            rnum = 9,
            type = bool,
            occurrence = optional,
            opts = []
        },
        #field{
            name = dev_status_req_freq,
            fnum = 9,
            rnum = 10,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = report_dev_status_battery,
            fnum = 10,
            rnum = 11,
            type = bool,
            occurrence = optional,
            opts = []
        },
        #field{
            name = report_dev_status_margin,
            fnum = 11,
            rnum = 12,
            type = bool,
            occurrence = optional,
            opts = []
        },
        #field{
            name = dr_min,
            fnum = 12,
            rnum = 13,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = dr_max,
            fnum = 13,
            rnum = 14,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = channel_mask,
            fnum = 14,
            rnum = 15,
            type = bytes,
            occurrence = optional,
            opts = []
        },
        #field{
            name = pr_allowed,
            fnum = 15,
            rnum = 16,
            type = bool,
            occurrence = optional,
            opts = []
        },
        #field{
            name = hr_allowed,
            fnum = 16,
            rnum = 17,
            type = bool,
            occurrence = optional,
            opts = []
        },
        #field{
            name = ra_allowed,
            fnum = 17,
            rnum = 18,
            type = bool,
            occurrence = optional,
            opts = []
        },
        #field{
            name = nwk_geo_loc,
            fnum = 18,
            rnum = 19,
            type = bool,
            occurrence = optional,
            opts = []
        },
        #field{
            name = target_per,
            fnum = 19,
            rnum = 20,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = min_gw_diversity,
            fnum = 20,
            rnum = 21,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = gws_private,
            fnum = 21,
            rnum = 22,
            type = bool,
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('ns.DeviceProfile') ->
    [
        #field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []},
        #field{
            name = supports_class_b,
            fnum = 2,
            rnum = 3,
            type = bool,
            occurrence = optional,
            opts = []
        },
        #field{
            name = class_b_timeout,
            fnum = 3,
            rnum = 4,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = ping_slot_period,
            fnum = 4,
            rnum = 5,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = ping_slot_dr,
            fnum = 5,
            rnum = 6,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = ping_slot_freq,
            fnum = 6,
            rnum = 7,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = supports_class_c,
            fnum = 7,
            rnum = 8,
            type = bool,
            occurrence = optional,
            opts = []
        },
        #field{
            name = class_c_timeout,
            fnum = 8,
            rnum = 9,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = mac_version,
            fnum = 9,
            rnum = 10,
            type = string,
            occurrence = optional,
            opts = []
        },
        #field{
            name = reg_params_revision,
            fnum = 10,
            rnum = 11,
            type = string,
            occurrence = optional,
            opts = []
        },
        #field{
            name = rx_delay_1,
            fnum = 11,
            rnum = 12,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = rx_dr_offset_1,
            fnum = 12,
            rnum = 13,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = rx_datarate_2,
            fnum = 13,
            rnum = 14,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = rx_freq_2,
            fnum = 14,
            rnum = 15,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = factory_preset_freqs,
            fnum = 15,
            rnum = 16,
            type = uint32,
            occurrence = repeated,
            opts = [packed]
        },
        #field{
            name = max_eirp,
            fnum = 16,
            rnum = 17,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = max_duty_cycle,
            fnum = 17,
            rnum = 18,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = supports_join,
            fnum = 18,
            rnum = 19,
            type = bool,
            occurrence = optional,
            opts = []
        },
        #field{
            name = rf_region,
            fnum = 19,
            rnum = 20,
            type = string,
            occurrence = optional,
            opts = []
        },
        #field{
            name = supports_32bit_f_cnt,
            fnum = 20,
            rnum = 21,
            type = bool,
            occurrence = optional,
            opts = []
        },
        #field{
            name = adr_algorithm_id,
            fnum = 21,
            rnum = 22,
            type = string,
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('ns.RoutingProfile') ->
    [
        #field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []},
        #field{name = as_id, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
        #field{name = ca_cert, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []},
        #field{
            name = tls_cert,
            fnum = 4,
            rnum = 5,
            type = string,
            occurrence = optional,
            opts = []
        },
        #field{name = tls_key, fnum = 5, rnum = 6, type = string, occurrence = optional, opts = []}
    ];
find_msg_def(_) ->
    error.

find_enum_def('ns.RXWindow') ->
    [{'RX1', 0}, {'RX2', 1}];
find_enum_def('ns.AggregationInterval') ->
    [
        {'SECOND', 0},
        {'MINUTE', 1},
        {'HOUR', 2},
        {'DAY', 3},
        {'WEEK', 4},
        {'MONTH', 5},
        {'QUARTER', 6},
        {'YEAR', 7}
    ];
find_enum_def('ns.MulticastGroupType') ->
    [{'CLASS_C', 0}, {'CLASS_B', 1}];
find_enum_def('common.Modulation') ->
    [{'LORA', 0}, {'FSK', 1}];
find_enum_def('common.Region') ->
    [
        {'EU868', 0},
        {'US915', 2},
        {'CN779', 3},
        {'EU433', 4},
        {'AU915', 5},
        {'CN470', 6},
        {'AS923', 7},
        {'KR920', 8},
        {'IN865', 9},
        {'RU864', 10}
    ];
find_enum_def('common.MType') ->
    [
        {'JoinRequest', 0},
        {'JoinAccept', 1},
        {'UnconfirmedDataUp', 2},
        {'UnconfirmedDataDown', 3},
        {'ConfirmedDataUp', 4},
        {'ConfirmedDataDown', 5},
        {'RejoinRequest', 6},
        {'Proprietary', 7}
    ];
find_enum_def('common.LocationSource') ->
    [
        {'UNKNOWN', 0},
        {'GPS', 1},
        {'CONFIG', 2},
        {'GEO_RESOLVER_TDOA', 3},
        {'GEO_RESOLVER_RSSI', 4},
        {'GEO_RESOLVER_GNSS', 5},
        {'GEO_RESOLVER_WIFI', 6}
    ];
find_enum_def('gw.DownlinkTiming') ->
    [{'IMMEDIATELY', 0}, {'DELAY', 1}, {'GPS_EPOCH', 2}];
find_enum_def('gw.FineTimestampType') ->
    [{'NONE', 0}, {'ENCRYPTED', 1}, {'PLAIN', 2}];
find_enum_def('gw.CRCStatus') ->
    [{'NO_CRC', 0}, {'BAD_CRC', 1}, {'CRC_OK', 2}];
find_enum_def('gw.TxAckStatus') ->
    [
        {'IGNORED', 0},
        {'OK', 1},
        {'TOO_LATE', 2},
        {'TOO_EARLY', 3},
        {'COLLISION_PACKET', 4},
        {'COLLISION_BEACON', 5},
        {'TX_FREQ', 6},
        {'TX_POWER', 7},
        {'GPS_UNLOCKED', 8},
        {'QUEUE_FULL', 9},
        {'INTERNAL_ERROR', 10}
    ];
find_enum_def('gw.ConnState.State') ->
    [{'OFFLINE', 0}, {'ONLINE', 1}];
find_enum_def('ns.RatePolicy') ->
    [{'DROP', 0}, {'MARK', 1}];
find_enum_def(_) ->
    error.

enum_symbol_by_value('ns.RXWindow', Value) ->
    'enum_symbol_by_value_ns.RXWindow'(Value);
enum_symbol_by_value('ns.AggregationInterval', Value) ->
    'enum_symbol_by_value_ns.AggregationInterval'(Value);
enum_symbol_by_value('ns.MulticastGroupType', Value) ->
    'enum_symbol_by_value_ns.MulticastGroupType'(Value);
enum_symbol_by_value('common.Modulation', Value) ->
    'enum_symbol_by_value_common.Modulation'(Value);
enum_symbol_by_value('common.Region', Value) ->
    'enum_symbol_by_value_common.Region'(Value);
enum_symbol_by_value('common.MType', Value) ->
    'enum_symbol_by_value_common.MType'(Value);
enum_symbol_by_value('common.LocationSource', Value) ->
    'enum_symbol_by_value_common.LocationSource'(Value);
enum_symbol_by_value('gw.DownlinkTiming', Value) ->
    'enum_symbol_by_value_gw.DownlinkTiming'(Value);
enum_symbol_by_value('gw.FineTimestampType', Value) ->
    'enum_symbol_by_value_gw.FineTimestampType'(Value);
enum_symbol_by_value('gw.CRCStatus', Value) ->
    'enum_symbol_by_value_gw.CRCStatus'(Value);
enum_symbol_by_value('gw.TxAckStatus', Value) ->
    'enum_symbol_by_value_gw.TxAckStatus'(Value);
enum_symbol_by_value('gw.ConnState.State', Value) ->
    'enum_symbol_by_value_gw.ConnState.State'(Value);
enum_symbol_by_value('ns.RatePolicy', Value) ->
    'enum_symbol_by_value_ns.RatePolicy'(Value).

enum_value_by_symbol('ns.RXWindow', Sym) ->
    'enum_value_by_symbol_ns.RXWindow'(Sym);
enum_value_by_symbol('ns.AggregationInterval', Sym) ->
    'enum_value_by_symbol_ns.AggregationInterval'(Sym);
enum_value_by_symbol('ns.MulticastGroupType', Sym) ->
    'enum_value_by_symbol_ns.MulticastGroupType'(Sym);
enum_value_by_symbol('common.Modulation', Sym) ->
    'enum_value_by_symbol_common.Modulation'(Sym);
enum_value_by_symbol('common.Region', Sym) ->
    'enum_value_by_symbol_common.Region'(Sym);
enum_value_by_symbol('common.MType', Sym) ->
    'enum_value_by_symbol_common.MType'(Sym);
enum_value_by_symbol('common.LocationSource', Sym) ->
    'enum_value_by_symbol_common.LocationSource'(Sym);
enum_value_by_symbol('gw.DownlinkTiming', Sym) ->
    'enum_value_by_symbol_gw.DownlinkTiming'(Sym);
enum_value_by_symbol('gw.FineTimestampType', Sym) ->
    'enum_value_by_symbol_gw.FineTimestampType'(Sym);
enum_value_by_symbol('gw.CRCStatus', Sym) ->
    'enum_value_by_symbol_gw.CRCStatus'(Sym);
enum_value_by_symbol('gw.TxAckStatus', Sym) ->
    'enum_value_by_symbol_gw.TxAckStatus'(Sym);
enum_value_by_symbol('gw.ConnState.State', Sym) ->
    'enum_value_by_symbol_gw.ConnState.State'(Sym);
enum_value_by_symbol('ns.RatePolicy', Sym) ->
    'enum_value_by_symbol_ns.RatePolicy'(Sym).

'enum_symbol_by_value_ns.RXWindow'(0) -> 'RX1';
'enum_symbol_by_value_ns.RXWindow'(1) -> 'RX2'.

'enum_value_by_symbol_ns.RXWindow'('RX1') -> 0;
'enum_value_by_symbol_ns.RXWindow'('RX2') -> 1.

'enum_symbol_by_value_ns.AggregationInterval'(0) -> 'SECOND';
'enum_symbol_by_value_ns.AggregationInterval'(1) -> 'MINUTE';
'enum_symbol_by_value_ns.AggregationInterval'(2) -> 'HOUR';
'enum_symbol_by_value_ns.AggregationInterval'(3) -> 'DAY';
'enum_symbol_by_value_ns.AggregationInterval'(4) -> 'WEEK';
'enum_symbol_by_value_ns.AggregationInterval'(5) -> 'MONTH';
'enum_symbol_by_value_ns.AggregationInterval'(6) -> 'QUARTER';
'enum_symbol_by_value_ns.AggregationInterval'(7) -> 'YEAR'.

'enum_value_by_symbol_ns.AggregationInterval'('SECOND') -> 0;
'enum_value_by_symbol_ns.AggregationInterval'('MINUTE') -> 1;
'enum_value_by_symbol_ns.AggregationInterval'('HOUR') -> 2;
'enum_value_by_symbol_ns.AggregationInterval'('DAY') -> 3;
'enum_value_by_symbol_ns.AggregationInterval'('WEEK') -> 4;
'enum_value_by_symbol_ns.AggregationInterval'('MONTH') -> 5;
'enum_value_by_symbol_ns.AggregationInterval'('QUARTER') -> 6;
'enum_value_by_symbol_ns.AggregationInterval'('YEAR') -> 7.

'enum_symbol_by_value_ns.MulticastGroupType'(0) -> 'CLASS_C';
'enum_symbol_by_value_ns.MulticastGroupType'(1) -> 'CLASS_B'.

'enum_value_by_symbol_ns.MulticastGroupType'('CLASS_C') -> 0;
'enum_value_by_symbol_ns.MulticastGroupType'('CLASS_B') -> 1.

'enum_symbol_by_value_common.Modulation'(0) -> 'LORA';
'enum_symbol_by_value_common.Modulation'(1) -> 'FSK'.

'enum_value_by_symbol_common.Modulation'('LORA') -> 0;
'enum_value_by_symbol_common.Modulation'('FSK') -> 1.

'enum_symbol_by_value_common.Region'(0) -> 'EU868';
'enum_symbol_by_value_common.Region'(2) -> 'US915';
'enum_symbol_by_value_common.Region'(3) -> 'CN779';
'enum_symbol_by_value_common.Region'(4) -> 'EU433';
'enum_symbol_by_value_common.Region'(5) -> 'AU915';
'enum_symbol_by_value_common.Region'(6) -> 'CN470';
'enum_symbol_by_value_common.Region'(7) -> 'AS923';
'enum_symbol_by_value_common.Region'(8) -> 'KR920';
'enum_symbol_by_value_common.Region'(9) -> 'IN865';
'enum_symbol_by_value_common.Region'(10) -> 'RU864'.

'enum_value_by_symbol_common.Region'('EU868') -> 0;
'enum_value_by_symbol_common.Region'('US915') -> 2;
'enum_value_by_symbol_common.Region'('CN779') -> 3;
'enum_value_by_symbol_common.Region'('EU433') -> 4;
'enum_value_by_symbol_common.Region'('AU915') -> 5;
'enum_value_by_symbol_common.Region'('CN470') -> 6;
'enum_value_by_symbol_common.Region'('AS923') -> 7;
'enum_value_by_symbol_common.Region'('KR920') -> 8;
'enum_value_by_symbol_common.Region'('IN865') -> 9;
'enum_value_by_symbol_common.Region'('RU864') -> 10.

'enum_symbol_by_value_common.MType'(0) -> 'JoinRequest';
'enum_symbol_by_value_common.MType'(1) -> 'JoinAccept';
'enum_symbol_by_value_common.MType'(2) -> 'UnconfirmedDataUp';
'enum_symbol_by_value_common.MType'(3) -> 'UnconfirmedDataDown';
'enum_symbol_by_value_common.MType'(4) -> 'ConfirmedDataUp';
'enum_symbol_by_value_common.MType'(5) -> 'ConfirmedDataDown';
'enum_symbol_by_value_common.MType'(6) -> 'RejoinRequest';
'enum_symbol_by_value_common.MType'(7) -> 'Proprietary'.

'enum_value_by_symbol_common.MType'('JoinRequest') -> 0;
'enum_value_by_symbol_common.MType'('JoinAccept') -> 1;
'enum_value_by_symbol_common.MType'('UnconfirmedDataUp') -> 2;
'enum_value_by_symbol_common.MType'('UnconfirmedDataDown') -> 3;
'enum_value_by_symbol_common.MType'('ConfirmedDataUp') -> 4;
'enum_value_by_symbol_common.MType'('ConfirmedDataDown') -> 5;
'enum_value_by_symbol_common.MType'('RejoinRequest') -> 6;
'enum_value_by_symbol_common.MType'('Proprietary') -> 7.

'enum_symbol_by_value_common.LocationSource'(0) -> 'UNKNOWN';
'enum_symbol_by_value_common.LocationSource'(1) -> 'GPS';
'enum_symbol_by_value_common.LocationSource'(2) -> 'CONFIG';
'enum_symbol_by_value_common.LocationSource'(3) -> 'GEO_RESOLVER_TDOA';
'enum_symbol_by_value_common.LocationSource'(4) -> 'GEO_RESOLVER_RSSI';
'enum_symbol_by_value_common.LocationSource'(5) -> 'GEO_RESOLVER_GNSS';
'enum_symbol_by_value_common.LocationSource'(6) -> 'GEO_RESOLVER_WIFI'.

'enum_value_by_symbol_common.LocationSource'('UNKNOWN') -> 0;
'enum_value_by_symbol_common.LocationSource'('GPS') -> 1;
'enum_value_by_symbol_common.LocationSource'('CONFIG') -> 2;
'enum_value_by_symbol_common.LocationSource'('GEO_RESOLVER_TDOA') -> 3;
'enum_value_by_symbol_common.LocationSource'('GEO_RESOLVER_RSSI') -> 4;
'enum_value_by_symbol_common.LocationSource'('GEO_RESOLVER_GNSS') -> 5;
'enum_value_by_symbol_common.LocationSource'('GEO_RESOLVER_WIFI') -> 6.

'enum_symbol_by_value_gw.DownlinkTiming'(0) -> 'IMMEDIATELY';
'enum_symbol_by_value_gw.DownlinkTiming'(1) -> 'DELAY';
'enum_symbol_by_value_gw.DownlinkTiming'(2) -> 'GPS_EPOCH'.

'enum_value_by_symbol_gw.DownlinkTiming'('IMMEDIATELY') -> 0;
'enum_value_by_symbol_gw.DownlinkTiming'('DELAY') -> 1;
'enum_value_by_symbol_gw.DownlinkTiming'('GPS_EPOCH') -> 2.

'enum_symbol_by_value_gw.FineTimestampType'(0) -> 'NONE';
'enum_symbol_by_value_gw.FineTimestampType'(1) -> 'ENCRYPTED';
'enum_symbol_by_value_gw.FineTimestampType'(2) -> 'PLAIN'.

'enum_value_by_symbol_gw.FineTimestampType'('NONE') -> 0;
'enum_value_by_symbol_gw.FineTimestampType'('ENCRYPTED') -> 1;
'enum_value_by_symbol_gw.FineTimestampType'('PLAIN') -> 2.

'enum_symbol_by_value_gw.CRCStatus'(0) -> 'NO_CRC';
'enum_symbol_by_value_gw.CRCStatus'(1) -> 'BAD_CRC';
'enum_symbol_by_value_gw.CRCStatus'(2) -> 'CRC_OK'.

'enum_value_by_symbol_gw.CRCStatus'('NO_CRC') -> 0;
'enum_value_by_symbol_gw.CRCStatus'('BAD_CRC') -> 1;
'enum_value_by_symbol_gw.CRCStatus'('CRC_OK') -> 2.

'enum_symbol_by_value_gw.TxAckStatus'(0) -> 'IGNORED';
'enum_symbol_by_value_gw.TxAckStatus'(1) -> 'OK';
'enum_symbol_by_value_gw.TxAckStatus'(2) -> 'TOO_LATE';
'enum_symbol_by_value_gw.TxAckStatus'(3) -> 'TOO_EARLY';
'enum_symbol_by_value_gw.TxAckStatus'(4) -> 'COLLISION_PACKET';
'enum_symbol_by_value_gw.TxAckStatus'(5) -> 'COLLISION_BEACON';
'enum_symbol_by_value_gw.TxAckStatus'(6) -> 'TX_FREQ';
'enum_symbol_by_value_gw.TxAckStatus'(7) -> 'TX_POWER';
'enum_symbol_by_value_gw.TxAckStatus'(8) -> 'GPS_UNLOCKED';
'enum_symbol_by_value_gw.TxAckStatus'(9) -> 'QUEUE_FULL';
'enum_symbol_by_value_gw.TxAckStatus'(10) -> 'INTERNAL_ERROR'.

'enum_value_by_symbol_gw.TxAckStatus'('IGNORED') -> 0;
'enum_value_by_symbol_gw.TxAckStatus'('OK') -> 1;
'enum_value_by_symbol_gw.TxAckStatus'('TOO_LATE') -> 2;
'enum_value_by_symbol_gw.TxAckStatus'('TOO_EARLY') -> 3;
'enum_value_by_symbol_gw.TxAckStatus'('COLLISION_PACKET') -> 4;
'enum_value_by_symbol_gw.TxAckStatus'('COLLISION_BEACON') -> 5;
'enum_value_by_symbol_gw.TxAckStatus'('TX_FREQ') -> 6;
'enum_value_by_symbol_gw.TxAckStatus'('TX_POWER') -> 7;
'enum_value_by_symbol_gw.TxAckStatus'('GPS_UNLOCKED') -> 8;
'enum_value_by_symbol_gw.TxAckStatus'('QUEUE_FULL') -> 9;
'enum_value_by_symbol_gw.TxAckStatus'('INTERNAL_ERROR') -> 10.

'enum_symbol_by_value_gw.ConnState.State'(0) -> 'OFFLINE';
'enum_symbol_by_value_gw.ConnState.State'(1) -> 'ONLINE'.

'enum_value_by_symbol_gw.ConnState.State'('OFFLINE') -> 0;
'enum_value_by_symbol_gw.ConnState.State'('ONLINE') -> 1.

'enum_symbol_by_value_ns.RatePolicy'(0) -> 'DROP';
'enum_symbol_by_value_ns.RatePolicy'(1) -> 'MARK'.

'enum_value_by_symbol_ns.RatePolicy'('DROP') -> 0;
'enum_value_by_symbol_ns.RatePolicy'('MARK') -> 1.

get_service_names() -> ['ns.NetworkServerService'].

get_service_def('ns.NetworkServerService') ->
    {{service, 'ns.NetworkServerService'}, [
        #rpc{
            name = 'CreateServiceProfile',
            input = 'ns.CreateServiceProfileRequest',
            output = 'ns.CreateServiceProfileResponse',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'GetServiceProfile',
            input = 'ns.GetServiceProfileRequest',
            output = 'ns.GetServiceProfileResponse',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'UpdateServiceProfile',
            input = 'ns.UpdateServiceProfileRequest',
            output = 'google.protobuf.Empty',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'DeleteServiceProfile',
            input = 'ns.DeleteServiceProfileRequest',
            output = 'google.protobuf.Empty',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'CreateRoutingProfile',
            input = 'ns.CreateRoutingProfileRequest',
            output = 'ns.CreateRoutingProfileResponse',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'GetRoutingProfile',
            input = 'ns.GetRoutingProfileRequest',
            output = 'ns.GetRoutingProfileResponse',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'UpdateRoutingProfile',
            input = 'ns.UpdateRoutingProfileRequest',
            output = 'google.protobuf.Empty',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'DeleteRoutingProfile',
            input = 'ns.DeleteRoutingProfileRequest',
            output = 'google.protobuf.Empty',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'CreateDeviceProfile',
            input = 'ns.CreateDeviceProfileRequest',
            output = 'ns.CreateDeviceProfileResponse',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'GetDeviceProfile',
            input = 'ns.GetDeviceProfileRequest',
            output = 'ns.GetDeviceProfileResponse',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'UpdateDeviceProfile',
            input = 'ns.UpdateDeviceProfileRequest',
            output = 'google.protobuf.Empty',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'DeleteDeviceProfile',
            input = 'ns.DeleteDeviceProfileRequest',
            output = 'google.protobuf.Empty',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'CreateDevice',
            input = 'ns.CreateDeviceRequest',
            output = 'google.protobuf.Empty',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'GetDevice',
            input = 'ns.GetDeviceRequest',
            output = 'ns.GetDeviceResponse',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'UpdateDevice',
            input = 'ns.UpdateDeviceRequest',
            output = 'google.protobuf.Empty',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'DeleteDevice',
            input = 'ns.DeleteDeviceRequest',
            output = 'google.protobuf.Empty',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'ActivateDevice',
            input = 'ns.ActivateDeviceRequest',
            output = 'google.protobuf.Empty',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'DeactivateDevice',
            input = 'ns.DeactivateDeviceRequest',
            output = 'google.protobuf.Empty',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'GetDeviceActivation',
            input = 'ns.GetDeviceActivationRequest',
            output = 'ns.GetDeviceActivationResponse',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'CreateDeviceQueueItem',
            input = 'ns.CreateDeviceQueueItemRequest',
            output = 'google.protobuf.Empty',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'FlushDeviceQueueForDevEUI',
            input = 'ns.FlushDeviceQueueForDevEUIRequest',
            output = 'google.protobuf.Empty',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'GetDeviceQueueItemsForDevEUI',
            input = 'ns.GetDeviceQueueItemsForDevEUIRequest',
            output = 'ns.GetDeviceQueueItemsForDevEUIResponse',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'GetNextDownlinkFCntForDevEUI',
            input = 'ns.GetNextDownlinkFCntForDevEUIRequest',
            output = 'ns.GetNextDownlinkFCntForDevEUIResponse',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'GetRandomDevAddr',
            input = 'google.protobuf.Empty',
            output = 'ns.GetRandomDevAddrResponse',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'CreateMACCommandQueueItem',
            input = 'ns.CreateMACCommandQueueItemRequest',
            output = 'google.protobuf.Empty',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'SendProprietaryPayload',
            input = 'ns.SendProprietaryPayloadRequest',
            output = 'google.protobuf.Empty',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'CreateGateway',
            input = 'ns.CreateGatewayRequest',
            output = 'google.protobuf.Empty',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'GetGateway',
            input = 'ns.GetGatewayRequest',
            output = 'ns.GetGatewayResponse',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'UpdateGateway',
            input = 'ns.UpdateGatewayRequest',
            output = 'google.protobuf.Empty',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'DeleteGateway',
            input = 'ns.DeleteGatewayRequest',
            output = 'google.protobuf.Empty',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'GenerateGatewayClientCertificate',
            input = 'ns.GenerateGatewayClientCertificateRequest',
            output = 'ns.GenerateGatewayClientCertificateResponse',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'CreateGatewayProfile',
            input = 'ns.CreateGatewayProfileRequest',
            output = 'ns.CreateGatewayProfileResponse',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'GetGatewayProfile',
            input = 'ns.GetGatewayProfileRequest',
            output = 'ns.GetGatewayProfileResponse',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'UpdateGatewayProfile',
            input = 'ns.UpdateGatewayProfileRequest',
            output = 'google.protobuf.Empty',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'DeleteGatewayProfile',
            input = 'ns.DeleteGatewayProfileRequest',
            output = 'google.protobuf.Empty',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'GetGatewayStats',
            input = 'ns.GetGatewayStatsRequest',
            output = 'ns.GetGatewayStatsResponse',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'StreamFrameLogsForGateway',
            input = 'ns.StreamFrameLogsForGatewayRequest',
            output = 'ns.StreamFrameLogsForGatewayResponse',
            input_stream = false,
            output_stream = true,
            opts = []
        },
        #rpc{
            name = 'StreamFrameLogsForDevice',
            input = 'ns.StreamFrameLogsForDeviceRequest',
            output = 'ns.StreamFrameLogsForDeviceResponse',
            input_stream = false,
            output_stream = true,
            opts = []
        },
        #rpc{
            name = 'CreateMulticastGroup',
            input = 'ns.CreateMulticastGroupRequest',
            output = 'ns.CreateMulticastGroupResponse',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'GetMulticastGroup',
            input = 'ns.GetMulticastGroupRequest',
            output = 'ns.GetMulticastGroupResponse',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'UpdateMulticastGroup',
            input = 'ns.UpdateMulticastGroupRequest',
            output = 'google.protobuf.Empty',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'DeleteMulticastGroup',
            input = 'ns.DeleteMulticastGroupRequest',
            output = 'google.protobuf.Empty',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'AddDeviceToMulticastGroup',
            input = 'ns.AddDeviceToMulticastGroupRequest',
            output = 'google.protobuf.Empty',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'RemoveDeviceFromMulticastGroup',
            input = 'ns.RemoveDeviceFromMulticastGroupRequest',
            output = 'google.protobuf.Empty',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'EnqueueMulticastQueueItem',
            input = 'ns.EnqueueMulticastQueueItemRequest',
            output = 'google.protobuf.Empty',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'FlushMulticastQueueForMulticastGroup',
            input = 'ns.FlushMulticastQueueForMulticastGroupRequest',
            output = 'google.protobuf.Empty',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'GetMulticastQueueItemsForMulticastGroup',
            input = 'ns.GetMulticastQueueItemsForMulticastGroupRequest',
            output = 'ns.GetMulticastQueueItemsForMulticastGroupResponse',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'GetVersion',
            input = 'google.protobuf.Empty',
            output = 'ns.GetVersionResponse',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'GetADRAlgorithms',
            input = 'google.protobuf.Empty',
            output = 'ns.GetADRAlgorithmsResponse',
            input_stream = false,
            output_stream = false,
            opts = []
        }
    ]};
get_service_def(_) ->
    error.

get_rpc_names('ns.NetworkServerService') ->
    [
        'CreateServiceProfile',
        'GetServiceProfile',
        'UpdateServiceProfile',
        'DeleteServiceProfile',
        'CreateRoutingProfile',
        'GetRoutingProfile',
        'UpdateRoutingProfile',
        'DeleteRoutingProfile',
        'CreateDeviceProfile',
        'GetDeviceProfile',
        'UpdateDeviceProfile',
        'DeleteDeviceProfile',
        'CreateDevice',
        'GetDevice',
        'UpdateDevice',
        'DeleteDevice',
        'ActivateDevice',
        'DeactivateDevice',
        'GetDeviceActivation',
        'CreateDeviceQueueItem',
        'FlushDeviceQueueForDevEUI',
        'GetDeviceQueueItemsForDevEUI',
        'GetNextDownlinkFCntForDevEUI',
        'GetRandomDevAddr',
        'CreateMACCommandQueueItem',
        'SendProprietaryPayload',
        'CreateGateway',
        'GetGateway',
        'UpdateGateway',
        'DeleteGateway',
        'GenerateGatewayClientCertificate',
        'CreateGatewayProfile',
        'GetGatewayProfile',
        'UpdateGatewayProfile',
        'DeleteGatewayProfile',
        'GetGatewayStats',
        'StreamFrameLogsForGateway',
        'StreamFrameLogsForDevice',
        'CreateMulticastGroup',
        'GetMulticastGroup',
        'UpdateMulticastGroup',
        'DeleteMulticastGroup',
        'AddDeviceToMulticastGroup',
        'RemoveDeviceFromMulticastGroup',
        'EnqueueMulticastQueueItem',
        'FlushMulticastQueueForMulticastGroup',
        'GetMulticastQueueItemsForMulticastGroup',
        'GetVersion',
        'GetADRAlgorithms'
    ];
get_rpc_names(_) ->
    error.

find_rpc_def('ns.NetworkServerService', RpcName) ->
    'find_rpc_def_ns.NetworkServerService'(RpcName);
find_rpc_def(_, _) ->
    error.

'find_rpc_def_ns.NetworkServerService'('CreateServiceProfile') ->
    #rpc{
        name = 'CreateServiceProfile',
        input = 'ns.CreateServiceProfileRequest',
        output = 'ns.CreateServiceProfileResponse',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('GetServiceProfile') ->
    #rpc{
        name = 'GetServiceProfile',
        input = 'ns.GetServiceProfileRequest',
        output = 'ns.GetServiceProfileResponse',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('UpdateServiceProfile') ->
    #rpc{
        name = 'UpdateServiceProfile',
        input = 'ns.UpdateServiceProfileRequest',
        output = 'google.protobuf.Empty',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('DeleteServiceProfile') ->
    #rpc{
        name = 'DeleteServiceProfile',
        input = 'ns.DeleteServiceProfileRequest',
        output = 'google.protobuf.Empty',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('CreateRoutingProfile') ->
    #rpc{
        name = 'CreateRoutingProfile',
        input = 'ns.CreateRoutingProfileRequest',
        output = 'ns.CreateRoutingProfileResponse',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('GetRoutingProfile') ->
    #rpc{
        name = 'GetRoutingProfile',
        input = 'ns.GetRoutingProfileRequest',
        output = 'ns.GetRoutingProfileResponse',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('UpdateRoutingProfile') ->
    #rpc{
        name = 'UpdateRoutingProfile',
        input = 'ns.UpdateRoutingProfileRequest',
        output = 'google.protobuf.Empty',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('DeleteRoutingProfile') ->
    #rpc{
        name = 'DeleteRoutingProfile',
        input = 'ns.DeleteRoutingProfileRequest',
        output = 'google.protobuf.Empty',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('CreateDeviceProfile') ->
    #rpc{
        name = 'CreateDeviceProfile',
        input = 'ns.CreateDeviceProfileRequest',
        output = 'ns.CreateDeviceProfileResponse',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('GetDeviceProfile') ->
    #rpc{
        name = 'GetDeviceProfile',
        input = 'ns.GetDeviceProfileRequest',
        output = 'ns.GetDeviceProfileResponse',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('UpdateDeviceProfile') ->
    #rpc{
        name = 'UpdateDeviceProfile',
        input = 'ns.UpdateDeviceProfileRequest',
        output = 'google.protobuf.Empty',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('DeleteDeviceProfile') ->
    #rpc{
        name = 'DeleteDeviceProfile',
        input = 'ns.DeleteDeviceProfileRequest',
        output = 'google.protobuf.Empty',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('CreateDevice') ->
    #rpc{
        name = 'CreateDevice',
        input = 'ns.CreateDeviceRequest',
        output = 'google.protobuf.Empty',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('GetDevice') ->
    #rpc{
        name = 'GetDevice',
        input = 'ns.GetDeviceRequest',
        output = 'ns.GetDeviceResponse',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('UpdateDevice') ->
    #rpc{
        name = 'UpdateDevice',
        input = 'ns.UpdateDeviceRequest',
        output = 'google.protobuf.Empty',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('DeleteDevice') ->
    #rpc{
        name = 'DeleteDevice',
        input = 'ns.DeleteDeviceRequest',
        output = 'google.protobuf.Empty',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('ActivateDevice') ->
    #rpc{
        name = 'ActivateDevice',
        input = 'ns.ActivateDeviceRequest',
        output = 'google.protobuf.Empty',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('DeactivateDevice') ->
    #rpc{
        name = 'DeactivateDevice',
        input = 'ns.DeactivateDeviceRequest',
        output = 'google.protobuf.Empty',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('GetDeviceActivation') ->
    #rpc{
        name = 'GetDeviceActivation',
        input = 'ns.GetDeviceActivationRequest',
        output = 'ns.GetDeviceActivationResponse',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('CreateDeviceQueueItem') ->
    #rpc{
        name = 'CreateDeviceQueueItem',
        input = 'ns.CreateDeviceQueueItemRequest',
        output = 'google.protobuf.Empty',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('FlushDeviceQueueForDevEUI') ->
    #rpc{
        name = 'FlushDeviceQueueForDevEUI',
        input = 'ns.FlushDeviceQueueForDevEUIRequest',
        output = 'google.protobuf.Empty',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('GetDeviceQueueItemsForDevEUI') ->
    #rpc{
        name = 'GetDeviceQueueItemsForDevEUI',
        input = 'ns.GetDeviceQueueItemsForDevEUIRequest',
        output = 'ns.GetDeviceQueueItemsForDevEUIResponse',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('GetNextDownlinkFCntForDevEUI') ->
    #rpc{
        name = 'GetNextDownlinkFCntForDevEUI',
        input = 'ns.GetNextDownlinkFCntForDevEUIRequest',
        output = 'ns.GetNextDownlinkFCntForDevEUIResponse',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('GetRandomDevAddr') ->
    #rpc{
        name = 'GetRandomDevAddr',
        input = 'google.protobuf.Empty',
        output = 'ns.GetRandomDevAddrResponse',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('CreateMACCommandQueueItem') ->
    #rpc{
        name = 'CreateMACCommandQueueItem',
        input = 'ns.CreateMACCommandQueueItemRequest',
        output = 'google.protobuf.Empty',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('SendProprietaryPayload') ->
    #rpc{
        name = 'SendProprietaryPayload',
        input = 'ns.SendProprietaryPayloadRequest',
        output = 'google.protobuf.Empty',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('CreateGateway') ->
    #rpc{
        name = 'CreateGateway',
        input = 'ns.CreateGatewayRequest',
        output = 'google.protobuf.Empty',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('GetGateway') ->
    #rpc{
        name = 'GetGateway',
        input = 'ns.GetGatewayRequest',
        output = 'ns.GetGatewayResponse',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('UpdateGateway') ->
    #rpc{
        name = 'UpdateGateway',
        input = 'ns.UpdateGatewayRequest',
        output = 'google.protobuf.Empty',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('DeleteGateway') ->
    #rpc{
        name = 'DeleteGateway',
        input = 'ns.DeleteGatewayRequest',
        output = 'google.protobuf.Empty',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('GenerateGatewayClientCertificate') ->
    #rpc{
        name = 'GenerateGatewayClientCertificate',
        input = 'ns.GenerateGatewayClientCertificateRequest',
        output = 'ns.GenerateGatewayClientCertificateResponse',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('CreateGatewayProfile') ->
    #rpc{
        name = 'CreateGatewayProfile',
        input = 'ns.CreateGatewayProfileRequest',
        output = 'ns.CreateGatewayProfileResponse',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('GetGatewayProfile') ->
    #rpc{
        name = 'GetGatewayProfile',
        input = 'ns.GetGatewayProfileRequest',
        output = 'ns.GetGatewayProfileResponse',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('UpdateGatewayProfile') ->
    #rpc{
        name = 'UpdateGatewayProfile',
        input = 'ns.UpdateGatewayProfileRequest',
        output = 'google.protobuf.Empty',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('DeleteGatewayProfile') ->
    #rpc{
        name = 'DeleteGatewayProfile',
        input = 'ns.DeleteGatewayProfileRequest',
        output = 'google.protobuf.Empty',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('GetGatewayStats') ->
    #rpc{
        name = 'GetGatewayStats',
        input = 'ns.GetGatewayStatsRequest',
        output = 'ns.GetGatewayStatsResponse',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('StreamFrameLogsForGateway') ->
    #rpc{
        name = 'StreamFrameLogsForGateway',
        input = 'ns.StreamFrameLogsForGatewayRequest',
        output = 'ns.StreamFrameLogsForGatewayResponse',
        input_stream = false,
        output_stream = true,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('StreamFrameLogsForDevice') ->
    #rpc{
        name = 'StreamFrameLogsForDevice',
        input = 'ns.StreamFrameLogsForDeviceRequest',
        output = 'ns.StreamFrameLogsForDeviceResponse',
        input_stream = false,
        output_stream = true,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('CreateMulticastGroup') ->
    #rpc{
        name = 'CreateMulticastGroup',
        input = 'ns.CreateMulticastGroupRequest',
        output = 'ns.CreateMulticastGroupResponse',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('GetMulticastGroup') ->
    #rpc{
        name = 'GetMulticastGroup',
        input = 'ns.GetMulticastGroupRequest',
        output = 'ns.GetMulticastGroupResponse',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('UpdateMulticastGroup') ->
    #rpc{
        name = 'UpdateMulticastGroup',
        input = 'ns.UpdateMulticastGroupRequest',
        output = 'google.protobuf.Empty',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('DeleteMulticastGroup') ->
    #rpc{
        name = 'DeleteMulticastGroup',
        input = 'ns.DeleteMulticastGroupRequest',
        output = 'google.protobuf.Empty',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('AddDeviceToMulticastGroup') ->
    #rpc{
        name = 'AddDeviceToMulticastGroup',
        input = 'ns.AddDeviceToMulticastGroupRequest',
        output = 'google.protobuf.Empty',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('RemoveDeviceFromMulticastGroup') ->
    #rpc{
        name = 'RemoveDeviceFromMulticastGroup',
        input = 'ns.RemoveDeviceFromMulticastGroupRequest',
        output = 'google.protobuf.Empty',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('EnqueueMulticastQueueItem') ->
    #rpc{
        name = 'EnqueueMulticastQueueItem',
        input = 'ns.EnqueueMulticastQueueItemRequest',
        output = 'google.protobuf.Empty',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('FlushMulticastQueueForMulticastGroup') ->
    #rpc{
        name = 'FlushMulticastQueueForMulticastGroup',
        input = 'ns.FlushMulticastQueueForMulticastGroupRequest',
        output = 'google.protobuf.Empty',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('GetMulticastQueueItemsForMulticastGroup') ->
    #rpc{
        name = 'GetMulticastQueueItemsForMulticastGroup',
        input = 'ns.GetMulticastQueueItemsForMulticastGroupRequest',
        output = 'ns.GetMulticastQueueItemsForMulticastGroupResponse',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('GetVersion') ->
    #rpc{
        name = 'GetVersion',
        input = 'google.protobuf.Empty',
        output = 'ns.GetVersionResponse',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'('GetADRAlgorithms') ->
    #rpc{
        name = 'GetADRAlgorithms',
        input = 'google.protobuf.Empty',
        output = 'ns.GetADRAlgorithmsResponse',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_ns.NetworkServerService'(_) ->
    error.

fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
        Def when is_tuple(Def) -> Def;
        error -> erlang:error({no_such_rpc, ServiceName, RpcName})
    end.

%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
fqbin_to_service_name(<<"ns.NetworkServerService">>) -> 'ns.NetworkServerService';
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).

%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
service_name_to_fqbin('ns.NetworkServerService') -> <<"ns.NetworkServerService">>;
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).

%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
fqbins_to_service_and_rpc_name(<<"ns.NetworkServerService">>, <<"CreateServiceProfile">>) ->
    {'ns.NetworkServerService', 'CreateServiceProfile'};
fqbins_to_service_and_rpc_name(<<"ns.NetworkServerService">>, <<"GetServiceProfile">>) ->
    {'ns.NetworkServerService', 'GetServiceProfile'};
fqbins_to_service_and_rpc_name(<<"ns.NetworkServerService">>, <<"UpdateServiceProfile">>) ->
    {'ns.NetworkServerService', 'UpdateServiceProfile'};
fqbins_to_service_and_rpc_name(<<"ns.NetworkServerService">>, <<"DeleteServiceProfile">>) ->
    {'ns.NetworkServerService', 'DeleteServiceProfile'};
fqbins_to_service_and_rpc_name(<<"ns.NetworkServerService">>, <<"CreateRoutingProfile">>) ->
    {'ns.NetworkServerService', 'CreateRoutingProfile'};
fqbins_to_service_and_rpc_name(<<"ns.NetworkServerService">>, <<"GetRoutingProfile">>) ->
    {'ns.NetworkServerService', 'GetRoutingProfile'};
fqbins_to_service_and_rpc_name(<<"ns.NetworkServerService">>, <<"UpdateRoutingProfile">>) ->
    {'ns.NetworkServerService', 'UpdateRoutingProfile'};
fqbins_to_service_and_rpc_name(<<"ns.NetworkServerService">>, <<"DeleteRoutingProfile">>) ->
    {'ns.NetworkServerService', 'DeleteRoutingProfile'};
fqbins_to_service_and_rpc_name(<<"ns.NetworkServerService">>, <<"CreateDeviceProfile">>) ->
    {'ns.NetworkServerService', 'CreateDeviceProfile'};
fqbins_to_service_and_rpc_name(<<"ns.NetworkServerService">>, <<"GetDeviceProfile">>) ->
    {'ns.NetworkServerService', 'GetDeviceProfile'};
fqbins_to_service_and_rpc_name(<<"ns.NetworkServerService">>, <<"UpdateDeviceProfile">>) ->
    {'ns.NetworkServerService', 'UpdateDeviceProfile'};
fqbins_to_service_and_rpc_name(<<"ns.NetworkServerService">>, <<"DeleteDeviceProfile">>) ->
    {'ns.NetworkServerService', 'DeleteDeviceProfile'};
fqbins_to_service_and_rpc_name(<<"ns.NetworkServerService">>, <<"CreateDevice">>) ->
    {'ns.NetworkServerService', 'CreateDevice'};
fqbins_to_service_and_rpc_name(<<"ns.NetworkServerService">>, <<"GetDevice">>) ->
    {'ns.NetworkServerService', 'GetDevice'};
fqbins_to_service_and_rpc_name(<<"ns.NetworkServerService">>, <<"UpdateDevice">>) ->
    {'ns.NetworkServerService', 'UpdateDevice'};
fqbins_to_service_and_rpc_name(<<"ns.NetworkServerService">>, <<"DeleteDevice">>) ->
    {'ns.NetworkServerService', 'DeleteDevice'};
fqbins_to_service_and_rpc_name(<<"ns.NetworkServerService">>, <<"ActivateDevice">>) ->
    {'ns.NetworkServerService', 'ActivateDevice'};
fqbins_to_service_and_rpc_name(<<"ns.NetworkServerService">>, <<"DeactivateDevice">>) ->
    {'ns.NetworkServerService', 'DeactivateDevice'};
fqbins_to_service_and_rpc_name(<<"ns.NetworkServerService">>, <<"GetDeviceActivation">>) ->
    {'ns.NetworkServerService', 'GetDeviceActivation'};
fqbins_to_service_and_rpc_name(<<"ns.NetworkServerService">>, <<"CreateDeviceQueueItem">>) ->
    {'ns.NetworkServerService', 'CreateDeviceQueueItem'};
fqbins_to_service_and_rpc_name(<<"ns.NetworkServerService">>, <<"FlushDeviceQueueForDevEUI">>) ->
    {'ns.NetworkServerService', 'FlushDeviceQueueForDevEUI'};
fqbins_to_service_and_rpc_name(<<"ns.NetworkServerService">>, <<"GetDeviceQueueItemsForDevEUI">>) ->
    {'ns.NetworkServerService', 'GetDeviceQueueItemsForDevEUI'};
fqbins_to_service_and_rpc_name(<<"ns.NetworkServerService">>, <<"GetNextDownlinkFCntForDevEUI">>) ->
    {'ns.NetworkServerService', 'GetNextDownlinkFCntForDevEUI'};
fqbins_to_service_and_rpc_name(<<"ns.NetworkServerService">>, <<"GetRandomDevAddr">>) ->
    {'ns.NetworkServerService', 'GetRandomDevAddr'};
fqbins_to_service_and_rpc_name(<<"ns.NetworkServerService">>, <<"CreateMACCommandQueueItem">>) ->
    {'ns.NetworkServerService', 'CreateMACCommandQueueItem'};
fqbins_to_service_and_rpc_name(<<"ns.NetworkServerService">>, <<"SendProprietaryPayload">>) ->
    {'ns.NetworkServerService', 'SendProprietaryPayload'};
fqbins_to_service_and_rpc_name(<<"ns.NetworkServerService">>, <<"CreateGateway">>) ->
    {'ns.NetworkServerService', 'CreateGateway'};
fqbins_to_service_and_rpc_name(<<"ns.NetworkServerService">>, <<"GetGateway">>) ->
    {'ns.NetworkServerService', 'GetGateway'};
fqbins_to_service_and_rpc_name(<<"ns.NetworkServerService">>, <<"UpdateGateway">>) ->
    {'ns.NetworkServerService', 'UpdateGateway'};
fqbins_to_service_and_rpc_name(<<"ns.NetworkServerService">>, <<"DeleteGateway">>) ->
    {'ns.NetworkServerService', 'DeleteGateway'};
fqbins_to_service_and_rpc_name(
    <<"ns.NetworkServerService">>,
    <<"GenerateGatewayClientCertificate">>
) ->
    {'ns.NetworkServerService', 'GenerateGatewayClientCertificate'};
fqbins_to_service_and_rpc_name(<<"ns.NetworkServerService">>, <<"CreateGatewayProfile">>) ->
    {'ns.NetworkServerService', 'CreateGatewayProfile'};
fqbins_to_service_and_rpc_name(<<"ns.NetworkServerService">>, <<"GetGatewayProfile">>) ->
    {'ns.NetworkServerService', 'GetGatewayProfile'};
fqbins_to_service_and_rpc_name(<<"ns.NetworkServerService">>, <<"UpdateGatewayProfile">>) ->
    {'ns.NetworkServerService', 'UpdateGatewayProfile'};
fqbins_to_service_and_rpc_name(<<"ns.NetworkServerService">>, <<"DeleteGatewayProfile">>) ->
    {'ns.NetworkServerService', 'DeleteGatewayProfile'};
fqbins_to_service_and_rpc_name(<<"ns.NetworkServerService">>, <<"GetGatewayStats">>) ->
    {'ns.NetworkServerService', 'GetGatewayStats'};
fqbins_to_service_and_rpc_name(<<"ns.NetworkServerService">>, <<"StreamFrameLogsForGateway">>) ->
    {'ns.NetworkServerService', 'StreamFrameLogsForGateway'};
fqbins_to_service_and_rpc_name(<<"ns.NetworkServerService">>, <<"StreamFrameLogsForDevice">>) ->
    {'ns.NetworkServerService', 'StreamFrameLogsForDevice'};
fqbins_to_service_and_rpc_name(<<"ns.NetworkServerService">>, <<"CreateMulticastGroup">>) ->
    {'ns.NetworkServerService', 'CreateMulticastGroup'};
fqbins_to_service_and_rpc_name(<<"ns.NetworkServerService">>, <<"GetMulticastGroup">>) ->
    {'ns.NetworkServerService', 'GetMulticastGroup'};
fqbins_to_service_and_rpc_name(<<"ns.NetworkServerService">>, <<"UpdateMulticastGroup">>) ->
    {'ns.NetworkServerService', 'UpdateMulticastGroup'};
fqbins_to_service_and_rpc_name(<<"ns.NetworkServerService">>, <<"DeleteMulticastGroup">>) ->
    {'ns.NetworkServerService', 'DeleteMulticastGroup'};
fqbins_to_service_and_rpc_name(<<"ns.NetworkServerService">>, <<"AddDeviceToMulticastGroup">>) ->
    {'ns.NetworkServerService', 'AddDeviceToMulticastGroup'};
fqbins_to_service_and_rpc_name(<<"ns.NetworkServerService">>, <<"RemoveDeviceFromMulticastGroup">>) ->
    {'ns.NetworkServerService', 'RemoveDeviceFromMulticastGroup'};
fqbins_to_service_and_rpc_name(<<"ns.NetworkServerService">>, <<"EnqueueMulticastQueueItem">>) ->
    {'ns.NetworkServerService', 'EnqueueMulticastQueueItem'};
fqbins_to_service_and_rpc_name(
    <<"ns.NetworkServerService">>,
    <<"FlushMulticastQueueForMulticastGroup">>
) ->
    {'ns.NetworkServerService', 'FlushMulticastQueueForMulticastGroup'};
fqbins_to_service_and_rpc_name(
    <<"ns.NetworkServerService">>,
    <<"GetMulticastQueueItemsForMulticastGroup">>
) ->
    {'ns.NetworkServerService', 'GetMulticastQueueItemsForMulticastGroup'};
fqbins_to_service_and_rpc_name(<<"ns.NetworkServerService">>, <<"GetVersion">>) ->
    {'ns.NetworkServerService', 'GetVersion'};
fqbins_to_service_and_rpc_name(<<"ns.NetworkServerService">>, <<"GetADRAlgorithms">>) ->
    {'ns.NetworkServerService', 'GetADRAlgorithms'};
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).

%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'CreateServiceProfile') ->
    {<<"ns.NetworkServerService">>, <<"CreateServiceProfile">>};
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'GetServiceProfile') ->
    {<<"ns.NetworkServerService">>, <<"GetServiceProfile">>};
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'UpdateServiceProfile') ->
    {<<"ns.NetworkServerService">>, <<"UpdateServiceProfile">>};
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'DeleteServiceProfile') ->
    {<<"ns.NetworkServerService">>, <<"DeleteServiceProfile">>};
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'CreateRoutingProfile') ->
    {<<"ns.NetworkServerService">>, <<"CreateRoutingProfile">>};
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'GetRoutingProfile') ->
    {<<"ns.NetworkServerService">>, <<"GetRoutingProfile">>};
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'UpdateRoutingProfile') ->
    {<<"ns.NetworkServerService">>, <<"UpdateRoutingProfile">>};
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'DeleteRoutingProfile') ->
    {<<"ns.NetworkServerService">>, <<"DeleteRoutingProfile">>};
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'CreateDeviceProfile') ->
    {<<"ns.NetworkServerService">>, <<"CreateDeviceProfile">>};
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'GetDeviceProfile') ->
    {<<"ns.NetworkServerService">>, <<"GetDeviceProfile">>};
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'UpdateDeviceProfile') ->
    {<<"ns.NetworkServerService">>, <<"UpdateDeviceProfile">>};
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'DeleteDeviceProfile') ->
    {<<"ns.NetworkServerService">>, <<"DeleteDeviceProfile">>};
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'CreateDevice') ->
    {<<"ns.NetworkServerService">>, <<"CreateDevice">>};
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'GetDevice') ->
    {<<"ns.NetworkServerService">>, <<"GetDevice">>};
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'UpdateDevice') ->
    {<<"ns.NetworkServerService">>, <<"UpdateDevice">>};
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'DeleteDevice') ->
    {<<"ns.NetworkServerService">>, <<"DeleteDevice">>};
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'ActivateDevice') ->
    {<<"ns.NetworkServerService">>, <<"ActivateDevice">>};
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'DeactivateDevice') ->
    {<<"ns.NetworkServerService">>, <<"DeactivateDevice">>};
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'GetDeviceActivation') ->
    {<<"ns.NetworkServerService">>, <<"GetDeviceActivation">>};
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'CreateDeviceQueueItem') ->
    {<<"ns.NetworkServerService">>, <<"CreateDeviceQueueItem">>};
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'FlushDeviceQueueForDevEUI') ->
    {<<"ns.NetworkServerService">>, <<"FlushDeviceQueueForDevEUI">>};
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'GetDeviceQueueItemsForDevEUI') ->
    {<<"ns.NetworkServerService">>, <<"GetDeviceQueueItemsForDevEUI">>};
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'GetNextDownlinkFCntForDevEUI') ->
    {<<"ns.NetworkServerService">>, <<"GetNextDownlinkFCntForDevEUI">>};
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'GetRandomDevAddr') ->
    {<<"ns.NetworkServerService">>, <<"GetRandomDevAddr">>};
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'CreateMACCommandQueueItem') ->
    {<<"ns.NetworkServerService">>, <<"CreateMACCommandQueueItem">>};
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'SendProprietaryPayload') ->
    {<<"ns.NetworkServerService">>, <<"SendProprietaryPayload">>};
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'CreateGateway') ->
    {<<"ns.NetworkServerService">>, <<"CreateGateway">>};
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'GetGateway') ->
    {<<"ns.NetworkServerService">>, <<"GetGateway">>};
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'UpdateGateway') ->
    {<<"ns.NetworkServerService">>, <<"UpdateGateway">>};
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'DeleteGateway') ->
    {<<"ns.NetworkServerService">>, <<"DeleteGateway">>};
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'GenerateGatewayClientCertificate') ->
    {<<"ns.NetworkServerService">>, <<"GenerateGatewayClientCertificate">>};
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'CreateGatewayProfile') ->
    {<<"ns.NetworkServerService">>, <<"CreateGatewayProfile">>};
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'GetGatewayProfile') ->
    {<<"ns.NetworkServerService">>, <<"GetGatewayProfile">>};
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'UpdateGatewayProfile') ->
    {<<"ns.NetworkServerService">>, <<"UpdateGatewayProfile">>};
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'DeleteGatewayProfile') ->
    {<<"ns.NetworkServerService">>, <<"DeleteGatewayProfile">>};
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'GetGatewayStats') ->
    {<<"ns.NetworkServerService">>, <<"GetGatewayStats">>};
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'StreamFrameLogsForGateway') ->
    {<<"ns.NetworkServerService">>, <<"StreamFrameLogsForGateway">>};
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'StreamFrameLogsForDevice') ->
    {<<"ns.NetworkServerService">>, <<"StreamFrameLogsForDevice">>};
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'CreateMulticastGroup') ->
    {<<"ns.NetworkServerService">>, <<"CreateMulticastGroup">>};
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'GetMulticastGroup') ->
    {<<"ns.NetworkServerService">>, <<"GetMulticastGroup">>};
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'UpdateMulticastGroup') ->
    {<<"ns.NetworkServerService">>, <<"UpdateMulticastGroup">>};
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'DeleteMulticastGroup') ->
    {<<"ns.NetworkServerService">>, <<"DeleteMulticastGroup">>};
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'AddDeviceToMulticastGroup') ->
    {<<"ns.NetworkServerService">>, <<"AddDeviceToMulticastGroup">>};
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'RemoveDeviceFromMulticastGroup') ->
    {<<"ns.NetworkServerService">>, <<"RemoveDeviceFromMulticastGroup">>};
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'EnqueueMulticastQueueItem') ->
    {<<"ns.NetworkServerService">>, <<"EnqueueMulticastQueueItem">>};
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'FlushMulticastQueueForMulticastGroup') ->
    {<<"ns.NetworkServerService">>, <<"FlushMulticastQueueForMulticastGroup">>};
service_and_rpc_name_to_fqbins(
    'ns.NetworkServerService',
    'GetMulticastQueueItemsForMulticastGroup'
) ->
    {<<"ns.NetworkServerService">>, <<"GetMulticastQueueItemsForMulticastGroup">>};
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'GetVersion') ->
    {<<"ns.NetworkServerService">>, <<"GetVersion">>};
service_and_rpc_name_to_fqbins('ns.NetworkServerService', 'GetADRAlgorithms') ->
    {<<"ns.NetworkServerService">>, <<"GetADRAlgorithms">>};
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).

fqbin_to_msg_name(<<"ns.CreateServiceProfileRequest">>) ->
    'ns.CreateServiceProfileRequest';
fqbin_to_msg_name(<<"ns.CreateServiceProfileResponse">>) ->
    'ns.CreateServiceProfileResponse';
fqbin_to_msg_name(<<"ns.GetServiceProfileRequest">>) ->
    'ns.GetServiceProfileRequest';
fqbin_to_msg_name(<<"ns.GetServiceProfileResponse">>) ->
    'ns.GetServiceProfileResponse';
fqbin_to_msg_name(<<"ns.UpdateServiceProfileRequest">>) ->
    'ns.UpdateServiceProfileRequest';
fqbin_to_msg_name(<<"ns.DeleteServiceProfileRequest">>) ->
    'ns.DeleteServiceProfileRequest';
fqbin_to_msg_name(<<"ns.CreateRoutingProfileRequest">>) ->
    'ns.CreateRoutingProfileRequest';
fqbin_to_msg_name(<<"ns.CreateRoutingProfileResponse">>) ->
    'ns.CreateRoutingProfileResponse';
fqbin_to_msg_name(<<"ns.GetRoutingProfileRequest">>) ->
    'ns.GetRoutingProfileRequest';
fqbin_to_msg_name(<<"ns.GetRoutingProfileResponse">>) ->
    'ns.GetRoutingProfileResponse';
fqbin_to_msg_name(<<"ns.UpdateRoutingProfileRequest">>) ->
    'ns.UpdateRoutingProfileRequest';
fqbin_to_msg_name(<<"ns.DeleteRoutingProfileRequest">>) ->
    'ns.DeleteRoutingProfileRequest';
fqbin_to_msg_name(<<"ns.CreateDeviceProfileRequest">>) ->
    'ns.CreateDeviceProfileRequest';
fqbin_to_msg_name(<<"ns.CreateDeviceProfileResponse">>) ->
    'ns.CreateDeviceProfileResponse';
fqbin_to_msg_name(<<"ns.GetDeviceProfileRequest">>) ->
    'ns.GetDeviceProfileRequest';
fqbin_to_msg_name(<<"ns.GetDeviceProfileResponse">>) ->
    'ns.GetDeviceProfileResponse';
fqbin_to_msg_name(<<"ns.UpdateDeviceProfileRequest">>) ->
    'ns.UpdateDeviceProfileRequest';
fqbin_to_msg_name(<<"ns.DeleteDeviceProfileRequest">>) ->
    'ns.DeleteDeviceProfileRequest';
fqbin_to_msg_name(<<"ns.Device">>) ->
    'ns.Device';
fqbin_to_msg_name(<<"ns.CreateDeviceRequest">>) ->
    'ns.CreateDeviceRequest';
fqbin_to_msg_name(<<"ns.GetDeviceRequest">>) ->
    'ns.GetDeviceRequest';
fqbin_to_msg_name(<<"ns.GetDeviceResponse">>) ->
    'ns.GetDeviceResponse';
fqbin_to_msg_name(<<"ns.UpdateDeviceRequest">>) ->
    'ns.UpdateDeviceRequest';
fqbin_to_msg_name(<<"ns.DeleteDeviceRequest">>) ->
    'ns.DeleteDeviceRequest';
fqbin_to_msg_name(<<"ns.DeviceActivation">>) ->
    'ns.DeviceActivation';
fqbin_to_msg_name(<<"ns.ActivateDeviceRequest">>) ->
    'ns.ActivateDeviceRequest';
fqbin_to_msg_name(<<"ns.DeactivateDeviceRequest">>) ->
    'ns.DeactivateDeviceRequest';
fqbin_to_msg_name(<<"ns.GetDeviceActivationRequest">>) ->
    'ns.GetDeviceActivationRequest';
fqbin_to_msg_name(<<"ns.GetDeviceActivationResponse">>) ->
    'ns.GetDeviceActivationResponse';
fqbin_to_msg_name(<<"ns.GetRandomDevAddrResponse">>) ->
    'ns.GetRandomDevAddrResponse';
fqbin_to_msg_name(<<"ns.CreateMACCommandQueueItemRequest">>) ->
    'ns.CreateMACCommandQueueItemRequest';
fqbin_to_msg_name(<<"ns.SendProprietaryPayloadRequest">>) ->
    'ns.SendProprietaryPayloadRequest';
fqbin_to_msg_name(<<"ns.Gateway">>) ->
    'ns.Gateway';
fqbin_to_msg_name(<<"ns.GatewayBoard">>) ->
    'ns.GatewayBoard';
fqbin_to_msg_name(<<"ns.CreateGatewayRequest">>) ->
    'ns.CreateGatewayRequest';
fqbin_to_msg_name(<<"ns.GetGatewayRequest">>) ->
    'ns.GetGatewayRequest';
fqbin_to_msg_name(<<"ns.GetGatewayResponse">>) ->
    'ns.GetGatewayResponse';
fqbin_to_msg_name(<<"ns.UpdateGatewayRequest">>) ->
    'ns.UpdateGatewayRequest';
fqbin_to_msg_name(<<"ns.DeleteGatewayRequest">>) ->
    'ns.DeleteGatewayRequest';
fqbin_to_msg_name(<<"ns.GenerateGatewayClientCertificateRequest">>) ->
    'ns.GenerateGatewayClientCertificateRequest';
fqbin_to_msg_name(<<"ns.GenerateGatewayClientCertificateResponse">>) ->
    'ns.GenerateGatewayClientCertificateResponse';
fqbin_to_msg_name(<<"ns.GatewayStats">>) ->
    'ns.GatewayStats';
fqbin_to_msg_name(<<"ns.GetGatewayStatsRequest">>) ->
    'ns.GetGatewayStatsRequest';
fqbin_to_msg_name(<<"ns.GetGatewayStatsResponse">>) ->
    'ns.GetGatewayStatsResponse';
fqbin_to_msg_name(<<"ns.DeviceQueueItem">>) ->
    'ns.DeviceQueueItem';
fqbin_to_msg_name(<<"ns.CreateDeviceQueueItemRequest">>) ->
    'ns.CreateDeviceQueueItemRequest';
fqbin_to_msg_name(<<"ns.FlushDeviceQueueForDevEUIRequest">>) ->
    'ns.FlushDeviceQueueForDevEUIRequest';
fqbin_to_msg_name(<<"ns.GetDeviceQueueItemsForDevEUIRequest">>) ->
    'ns.GetDeviceQueueItemsForDevEUIRequest';
fqbin_to_msg_name(<<"ns.GetDeviceQueueItemsForDevEUIResponse">>) ->
    'ns.GetDeviceQueueItemsForDevEUIResponse';
fqbin_to_msg_name(<<"ns.GetNextDownlinkFCntForDevEUIRequest">>) ->
    'ns.GetNextDownlinkFCntForDevEUIRequest';
fqbin_to_msg_name(<<"ns.GetNextDownlinkFCntForDevEUIResponse">>) ->
    'ns.GetNextDownlinkFCntForDevEUIResponse';
fqbin_to_msg_name(<<"ns.UplinkFrameLog">>) ->
    'ns.UplinkFrameLog';
fqbin_to_msg_name(<<"ns.DownlinkFrameLog">>) ->
    'ns.DownlinkFrameLog';
fqbin_to_msg_name(<<"ns.StreamFrameLogsForGatewayRequest">>) ->
    'ns.StreamFrameLogsForGatewayRequest';
fqbin_to_msg_name(<<"ns.StreamFrameLogsForGatewayResponse">>) ->
    'ns.StreamFrameLogsForGatewayResponse';
fqbin_to_msg_name(<<"ns.StreamFrameLogsForDeviceRequest">>) ->
    'ns.StreamFrameLogsForDeviceRequest';
fqbin_to_msg_name(<<"ns.StreamFrameLogsForDeviceResponse">>) ->
    'ns.StreamFrameLogsForDeviceResponse';
fqbin_to_msg_name(<<"ns.GetVersionResponse">>) ->
    'ns.GetVersionResponse';
fqbin_to_msg_name(<<"ns.GatewayProfile">>) ->
    'ns.GatewayProfile';
fqbin_to_msg_name(<<"ns.GatewayProfileExtraChannel">>) ->
    'ns.GatewayProfileExtraChannel';
fqbin_to_msg_name(<<"ns.CreateGatewayProfileRequest">>) ->
    'ns.CreateGatewayProfileRequest';
fqbin_to_msg_name(<<"ns.CreateGatewayProfileResponse">>) ->
    'ns.CreateGatewayProfileResponse';
fqbin_to_msg_name(<<"ns.GetGatewayProfileRequest">>) ->
    'ns.GetGatewayProfileRequest';
fqbin_to_msg_name(<<"ns.GetGatewayProfileResponse">>) ->
    'ns.GetGatewayProfileResponse';
fqbin_to_msg_name(<<"ns.UpdateGatewayProfileRequest">>) ->
    'ns.UpdateGatewayProfileRequest';
fqbin_to_msg_name(<<"ns.DeleteGatewayProfileRequest">>) ->
    'ns.DeleteGatewayProfileRequest';
fqbin_to_msg_name(<<"ns.MulticastGroup">>) ->
    'ns.MulticastGroup';
fqbin_to_msg_name(<<"ns.CreateMulticastGroupRequest">>) ->
    'ns.CreateMulticastGroupRequest';
fqbin_to_msg_name(<<"ns.CreateMulticastGroupResponse">>) ->
    'ns.CreateMulticastGroupResponse';
fqbin_to_msg_name(<<"ns.GetMulticastGroupRequest">>) ->
    'ns.GetMulticastGroupRequest';
fqbin_to_msg_name(<<"ns.GetMulticastGroupResponse">>) ->
    'ns.GetMulticastGroupResponse';
fqbin_to_msg_name(<<"ns.UpdateMulticastGroupRequest">>) ->
    'ns.UpdateMulticastGroupRequest';
fqbin_to_msg_name(<<"ns.DeleteMulticastGroupRequest">>) ->
    'ns.DeleteMulticastGroupRequest';
fqbin_to_msg_name(<<"ns.AddDeviceToMulticastGroupRequest">>) ->
    'ns.AddDeviceToMulticastGroupRequest';
fqbin_to_msg_name(<<"ns.RemoveDeviceFromMulticastGroupRequest">>) ->
    'ns.RemoveDeviceFromMulticastGroupRequest';
fqbin_to_msg_name(<<"ns.MulticastQueueItem">>) ->
    'ns.MulticastQueueItem';
fqbin_to_msg_name(<<"ns.EnqueueMulticastQueueItemRequest">>) ->
    'ns.EnqueueMulticastQueueItemRequest';
fqbin_to_msg_name(<<"ns.FlushMulticastQueueForMulticastGroupRequest">>) ->
    'ns.FlushMulticastQueueForMulticastGroupRequest';
fqbin_to_msg_name(<<"ns.GetMulticastQueueItemsForMulticastGroupRequest">>) ->
    'ns.GetMulticastQueueItemsForMulticastGroupRequest';
fqbin_to_msg_name(<<"ns.GetMulticastQueueItemsForMulticastGroupResponse">>) ->
    'ns.GetMulticastQueueItemsForMulticastGroupResponse';
fqbin_to_msg_name(<<"ns.GetADRAlgorithmsResponse">>) ->
    'ns.GetADRAlgorithmsResponse';
fqbin_to_msg_name(<<"ns.ADRAlgorithm">>) ->
    'ns.ADRAlgorithm';
fqbin_to_msg_name(<<"google.protobuf.Timestamp">>) ->
    'google.protobuf.Timestamp';
fqbin_to_msg_name(<<"google.protobuf.Duration">>) ->
    'google.protobuf.Duration';
fqbin_to_msg_name(<<"google.protobuf.Empty">>) ->
    'google.protobuf.Empty';
fqbin_to_msg_name(<<"common.KeyEnvelope">>) ->
    'common.KeyEnvelope';
fqbin_to_msg_name(<<"common.Location">>) ->
    'common.Location';
fqbin_to_msg_name(<<"gw.UplinkTXInfo">>) ->
    'gw.UplinkTXInfo';
fqbin_to_msg_name(<<"gw.LoRaModulationInfo">>) ->
    'gw.LoRaModulationInfo';
fqbin_to_msg_name(<<"gw.FSKModulationInfo">>) ->
    'gw.FSKModulationInfo';
fqbin_to_msg_name(<<"gw.EncryptedFineTimestamp">>) ->
    'gw.EncryptedFineTimestamp';
fqbin_to_msg_name(<<"gw.PlainFineTimestamp">>) ->
    'gw.PlainFineTimestamp';
fqbin_to_msg_name(<<"gw.GatewayStats">>) ->
    'gw.GatewayStats';
fqbin_to_msg_name(<<"gw.UplinkRXInfo">>) ->
    'gw.UplinkRXInfo';
fqbin_to_msg_name(<<"gw.DownlinkTXInfo">>) ->
    'gw.DownlinkTXInfo';
fqbin_to_msg_name(<<"gw.ImmediatelyTimingInfo">>) ->
    'gw.ImmediatelyTimingInfo';
fqbin_to_msg_name(<<"gw.DelayTimingInfo">>) ->
    'gw.DelayTimingInfo';
fqbin_to_msg_name(<<"gw.GPSEpochTimingInfo">>) ->
    'gw.GPSEpochTimingInfo';
fqbin_to_msg_name(<<"gw.UplinkFrame">>) ->
    'gw.UplinkFrame';
fqbin_to_msg_name(<<"gw.UplinkFrameSet">>) ->
    'gw.UplinkFrameSet';
fqbin_to_msg_name(<<"gw.DownlinkFrame">>) ->
    'gw.DownlinkFrame';
fqbin_to_msg_name(<<"gw.DownlinkFrameItem">>) ->
    'gw.DownlinkFrameItem';
fqbin_to_msg_name(<<"gw.DownlinkTXAck">>) ->
    'gw.DownlinkTXAck';
fqbin_to_msg_name(<<"gw.DownlinkTXAckItem">>) ->
    'gw.DownlinkTXAckItem';
fqbin_to_msg_name(<<"gw.GatewayConfiguration">>) ->
    'gw.GatewayConfiguration';
fqbin_to_msg_name(<<"gw.ChannelConfiguration">>) ->
    'gw.ChannelConfiguration';
fqbin_to_msg_name(<<"gw.LoRaModulationConfig">>) ->
    'gw.LoRaModulationConfig';
fqbin_to_msg_name(<<"gw.FSKModulationConfig">>) ->
    'gw.FSKModulationConfig';
fqbin_to_msg_name(<<"gw.GatewayCommandExecRequest">>) ->
    'gw.GatewayCommandExecRequest';
fqbin_to_msg_name(<<"gw.GatewayCommandExecResponse">>) ->
    'gw.GatewayCommandExecResponse';
fqbin_to_msg_name(<<"gw.RawPacketForwarderEvent">>) ->
    'gw.RawPacketForwarderEvent';
fqbin_to_msg_name(<<"gw.RawPacketForwarderCommand">>) ->
    'gw.RawPacketForwarderCommand';
fqbin_to_msg_name(<<"gw.ConnState">>) ->
    'gw.ConnState';
fqbin_to_msg_name(<<"ns.ServiceProfile">>) ->
    'ns.ServiceProfile';
fqbin_to_msg_name(<<"ns.DeviceProfile">>) ->
    'ns.DeviceProfile';
fqbin_to_msg_name(<<"ns.RoutingProfile">>) ->
    'ns.RoutingProfile';
fqbin_to_msg_name(E) ->
    error({gpb_error, {badmsg, E}}).

msg_name_to_fqbin('ns.CreateServiceProfileRequest') ->
    <<"ns.CreateServiceProfileRequest">>;
msg_name_to_fqbin('ns.CreateServiceProfileResponse') ->
    <<"ns.CreateServiceProfileResponse">>;
msg_name_to_fqbin('ns.GetServiceProfileRequest') ->
    <<"ns.GetServiceProfileRequest">>;
msg_name_to_fqbin('ns.GetServiceProfileResponse') ->
    <<"ns.GetServiceProfileResponse">>;
msg_name_to_fqbin('ns.UpdateServiceProfileRequest') ->
    <<"ns.UpdateServiceProfileRequest">>;
msg_name_to_fqbin('ns.DeleteServiceProfileRequest') ->
    <<"ns.DeleteServiceProfileRequest">>;
msg_name_to_fqbin('ns.CreateRoutingProfileRequest') ->
    <<"ns.CreateRoutingProfileRequest">>;
msg_name_to_fqbin('ns.CreateRoutingProfileResponse') ->
    <<"ns.CreateRoutingProfileResponse">>;
msg_name_to_fqbin('ns.GetRoutingProfileRequest') ->
    <<"ns.GetRoutingProfileRequest">>;
msg_name_to_fqbin('ns.GetRoutingProfileResponse') ->
    <<"ns.GetRoutingProfileResponse">>;
msg_name_to_fqbin('ns.UpdateRoutingProfileRequest') ->
    <<"ns.UpdateRoutingProfileRequest">>;
msg_name_to_fqbin('ns.DeleteRoutingProfileRequest') ->
    <<"ns.DeleteRoutingProfileRequest">>;
msg_name_to_fqbin('ns.CreateDeviceProfileRequest') ->
    <<"ns.CreateDeviceProfileRequest">>;
msg_name_to_fqbin('ns.CreateDeviceProfileResponse') ->
    <<"ns.CreateDeviceProfileResponse">>;
msg_name_to_fqbin('ns.GetDeviceProfileRequest') ->
    <<"ns.GetDeviceProfileRequest">>;
msg_name_to_fqbin('ns.GetDeviceProfileResponse') ->
    <<"ns.GetDeviceProfileResponse">>;
msg_name_to_fqbin('ns.UpdateDeviceProfileRequest') ->
    <<"ns.UpdateDeviceProfileRequest">>;
msg_name_to_fqbin('ns.DeleteDeviceProfileRequest') ->
    <<"ns.DeleteDeviceProfileRequest">>;
msg_name_to_fqbin('ns.Device') ->
    <<"ns.Device">>;
msg_name_to_fqbin('ns.CreateDeviceRequest') ->
    <<"ns.CreateDeviceRequest">>;
msg_name_to_fqbin('ns.GetDeviceRequest') ->
    <<"ns.GetDeviceRequest">>;
msg_name_to_fqbin('ns.GetDeviceResponse') ->
    <<"ns.GetDeviceResponse">>;
msg_name_to_fqbin('ns.UpdateDeviceRequest') ->
    <<"ns.UpdateDeviceRequest">>;
msg_name_to_fqbin('ns.DeleteDeviceRequest') ->
    <<"ns.DeleteDeviceRequest">>;
msg_name_to_fqbin('ns.DeviceActivation') ->
    <<"ns.DeviceActivation">>;
msg_name_to_fqbin('ns.ActivateDeviceRequest') ->
    <<"ns.ActivateDeviceRequest">>;
msg_name_to_fqbin('ns.DeactivateDeviceRequest') ->
    <<"ns.DeactivateDeviceRequest">>;
msg_name_to_fqbin('ns.GetDeviceActivationRequest') ->
    <<"ns.GetDeviceActivationRequest">>;
msg_name_to_fqbin('ns.GetDeviceActivationResponse') ->
    <<"ns.GetDeviceActivationResponse">>;
msg_name_to_fqbin('ns.GetRandomDevAddrResponse') ->
    <<"ns.GetRandomDevAddrResponse">>;
msg_name_to_fqbin('ns.CreateMACCommandQueueItemRequest') ->
    <<"ns.CreateMACCommandQueueItemRequest">>;
msg_name_to_fqbin('ns.SendProprietaryPayloadRequest') ->
    <<"ns.SendProprietaryPayloadRequest">>;
msg_name_to_fqbin('ns.Gateway') ->
    <<"ns.Gateway">>;
msg_name_to_fqbin('ns.GatewayBoard') ->
    <<"ns.GatewayBoard">>;
msg_name_to_fqbin('ns.CreateGatewayRequest') ->
    <<"ns.CreateGatewayRequest">>;
msg_name_to_fqbin('ns.GetGatewayRequest') ->
    <<"ns.GetGatewayRequest">>;
msg_name_to_fqbin('ns.GetGatewayResponse') ->
    <<"ns.GetGatewayResponse">>;
msg_name_to_fqbin('ns.UpdateGatewayRequest') ->
    <<"ns.UpdateGatewayRequest">>;
msg_name_to_fqbin('ns.DeleteGatewayRequest') ->
    <<"ns.DeleteGatewayRequest">>;
msg_name_to_fqbin('ns.GenerateGatewayClientCertificateRequest') ->
    <<"ns.GenerateGatewayClientCertificateRequest">>;
msg_name_to_fqbin('ns.GenerateGatewayClientCertificateResponse') ->
    <<"ns.GenerateGatewayClientCertificateResponse">>;
msg_name_to_fqbin('ns.GatewayStats') ->
    <<"ns.GatewayStats">>;
msg_name_to_fqbin('ns.GetGatewayStatsRequest') ->
    <<"ns.GetGatewayStatsRequest">>;
msg_name_to_fqbin('ns.GetGatewayStatsResponse') ->
    <<"ns.GetGatewayStatsResponse">>;
msg_name_to_fqbin('ns.DeviceQueueItem') ->
    <<"ns.DeviceQueueItem">>;
msg_name_to_fqbin('ns.CreateDeviceQueueItemRequest') ->
    <<"ns.CreateDeviceQueueItemRequest">>;
msg_name_to_fqbin('ns.FlushDeviceQueueForDevEUIRequest') ->
    <<"ns.FlushDeviceQueueForDevEUIRequest">>;
msg_name_to_fqbin('ns.GetDeviceQueueItemsForDevEUIRequest') ->
    <<"ns.GetDeviceQueueItemsForDevEUIRequest">>;
msg_name_to_fqbin('ns.GetDeviceQueueItemsForDevEUIResponse') ->
    <<"ns.GetDeviceQueueItemsForDevEUIResponse">>;
msg_name_to_fqbin('ns.GetNextDownlinkFCntForDevEUIRequest') ->
    <<"ns.GetNextDownlinkFCntForDevEUIRequest">>;
msg_name_to_fqbin('ns.GetNextDownlinkFCntForDevEUIResponse') ->
    <<"ns.GetNextDownlinkFCntForDevEUIResponse">>;
msg_name_to_fqbin('ns.UplinkFrameLog') ->
    <<"ns.UplinkFrameLog">>;
msg_name_to_fqbin('ns.DownlinkFrameLog') ->
    <<"ns.DownlinkFrameLog">>;
msg_name_to_fqbin('ns.StreamFrameLogsForGatewayRequest') ->
    <<"ns.StreamFrameLogsForGatewayRequest">>;
msg_name_to_fqbin('ns.StreamFrameLogsForGatewayResponse') ->
    <<"ns.StreamFrameLogsForGatewayResponse">>;
msg_name_to_fqbin('ns.StreamFrameLogsForDeviceRequest') ->
    <<"ns.StreamFrameLogsForDeviceRequest">>;
msg_name_to_fqbin('ns.StreamFrameLogsForDeviceResponse') ->
    <<"ns.StreamFrameLogsForDeviceResponse">>;
msg_name_to_fqbin('ns.GetVersionResponse') ->
    <<"ns.GetVersionResponse">>;
msg_name_to_fqbin('ns.GatewayProfile') ->
    <<"ns.GatewayProfile">>;
msg_name_to_fqbin('ns.GatewayProfileExtraChannel') ->
    <<"ns.GatewayProfileExtraChannel">>;
msg_name_to_fqbin('ns.CreateGatewayProfileRequest') ->
    <<"ns.CreateGatewayProfileRequest">>;
msg_name_to_fqbin('ns.CreateGatewayProfileResponse') ->
    <<"ns.CreateGatewayProfileResponse">>;
msg_name_to_fqbin('ns.GetGatewayProfileRequest') ->
    <<"ns.GetGatewayProfileRequest">>;
msg_name_to_fqbin('ns.GetGatewayProfileResponse') ->
    <<"ns.GetGatewayProfileResponse">>;
msg_name_to_fqbin('ns.UpdateGatewayProfileRequest') ->
    <<"ns.UpdateGatewayProfileRequest">>;
msg_name_to_fqbin('ns.DeleteGatewayProfileRequest') ->
    <<"ns.DeleteGatewayProfileRequest">>;
msg_name_to_fqbin('ns.MulticastGroup') ->
    <<"ns.MulticastGroup">>;
msg_name_to_fqbin('ns.CreateMulticastGroupRequest') ->
    <<"ns.CreateMulticastGroupRequest">>;
msg_name_to_fqbin('ns.CreateMulticastGroupResponse') ->
    <<"ns.CreateMulticastGroupResponse">>;
msg_name_to_fqbin('ns.GetMulticastGroupRequest') ->
    <<"ns.GetMulticastGroupRequest">>;
msg_name_to_fqbin('ns.GetMulticastGroupResponse') ->
    <<"ns.GetMulticastGroupResponse">>;
msg_name_to_fqbin('ns.UpdateMulticastGroupRequest') ->
    <<"ns.UpdateMulticastGroupRequest">>;
msg_name_to_fqbin('ns.DeleteMulticastGroupRequest') ->
    <<"ns.DeleteMulticastGroupRequest">>;
msg_name_to_fqbin('ns.AddDeviceToMulticastGroupRequest') ->
    <<"ns.AddDeviceToMulticastGroupRequest">>;
msg_name_to_fqbin('ns.RemoveDeviceFromMulticastGroupRequest') ->
    <<"ns.RemoveDeviceFromMulticastGroupRequest">>;
msg_name_to_fqbin('ns.MulticastQueueItem') ->
    <<"ns.MulticastQueueItem">>;
msg_name_to_fqbin('ns.EnqueueMulticastQueueItemRequest') ->
    <<"ns.EnqueueMulticastQueueItemRequest">>;
msg_name_to_fqbin('ns.FlushMulticastQueueForMulticastGroupRequest') ->
    <<"ns.FlushMulticastQueueForMulticastGroupRequest">>;
msg_name_to_fqbin('ns.GetMulticastQueueItemsForMulticastGroupRequest') ->
    <<"ns.GetMulticastQueueItemsForMulticastGroupRequest">>;
msg_name_to_fqbin('ns.GetMulticastQueueItemsForMulticastGroupResponse') ->
    <<"ns.GetMulticastQueueItemsForMulticastGroupResponse">>;
msg_name_to_fqbin('ns.GetADRAlgorithmsResponse') ->
    <<"ns.GetADRAlgorithmsResponse">>;
msg_name_to_fqbin('ns.ADRAlgorithm') ->
    <<"ns.ADRAlgorithm">>;
msg_name_to_fqbin('google.protobuf.Timestamp') ->
    <<"google.protobuf.Timestamp">>;
msg_name_to_fqbin('google.protobuf.Duration') ->
    <<"google.protobuf.Duration">>;
msg_name_to_fqbin('google.protobuf.Empty') ->
    <<"google.protobuf.Empty">>;
msg_name_to_fqbin('common.KeyEnvelope') ->
    <<"common.KeyEnvelope">>;
msg_name_to_fqbin('common.Location') ->
    <<"common.Location">>;
msg_name_to_fqbin('gw.UplinkTXInfo') ->
    <<"gw.UplinkTXInfo">>;
msg_name_to_fqbin('gw.LoRaModulationInfo') ->
    <<"gw.LoRaModulationInfo">>;
msg_name_to_fqbin('gw.FSKModulationInfo') ->
    <<"gw.FSKModulationInfo">>;
msg_name_to_fqbin('gw.EncryptedFineTimestamp') ->
    <<"gw.EncryptedFineTimestamp">>;
msg_name_to_fqbin('gw.PlainFineTimestamp') ->
    <<"gw.PlainFineTimestamp">>;
msg_name_to_fqbin('gw.GatewayStats') ->
    <<"gw.GatewayStats">>;
msg_name_to_fqbin('gw.UplinkRXInfo') ->
    <<"gw.UplinkRXInfo">>;
msg_name_to_fqbin('gw.DownlinkTXInfo') ->
    <<"gw.DownlinkTXInfo">>;
msg_name_to_fqbin('gw.ImmediatelyTimingInfo') ->
    <<"gw.ImmediatelyTimingInfo">>;
msg_name_to_fqbin('gw.DelayTimingInfo') ->
    <<"gw.DelayTimingInfo">>;
msg_name_to_fqbin('gw.GPSEpochTimingInfo') ->
    <<"gw.GPSEpochTimingInfo">>;
msg_name_to_fqbin('gw.UplinkFrame') ->
    <<"gw.UplinkFrame">>;
msg_name_to_fqbin('gw.UplinkFrameSet') ->
    <<"gw.UplinkFrameSet">>;
msg_name_to_fqbin('gw.DownlinkFrame') ->
    <<"gw.DownlinkFrame">>;
msg_name_to_fqbin('gw.DownlinkFrameItem') ->
    <<"gw.DownlinkFrameItem">>;
msg_name_to_fqbin('gw.DownlinkTXAck') ->
    <<"gw.DownlinkTXAck">>;
msg_name_to_fqbin('gw.DownlinkTXAckItem') ->
    <<"gw.DownlinkTXAckItem">>;
msg_name_to_fqbin('gw.GatewayConfiguration') ->
    <<"gw.GatewayConfiguration">>;
msg_name_to_fqbin('gw.ChannelConfiguration') ->
    <<"gw.ChannelConfiguration">>;
msg_name_to_fqbin('gw.LoRaModulationConfig') ->
    <<"gw.LoRaModulationConfig">>;
msg_name_to_fqbin('gw.FSKModulationConfig') ->
    <<"gw.FSKModulationConfig">>;
msg_name_to_fqbin('gw.GatewayCommandExecRequest') ->
    <<"gw.GatewayCommandExecRequest">>;
msg_name_to_fqbin('gw.GatewayCommandExecResponse') ->
    <<"gw.GatewayCommandExecResponse">>;
msg_name_to_fqbin('gw.RawPacketForwarderEvent') ->
    <<"gw.RawPacketForwarderEvent">>;
msg_name_to_fqbin('gw.RawPacketForwarderCommand') ->
    <<"gw.RawPacketForwarderCommand">>;
msg_name_to_fqbin('gw.ConnState') ->
    <<"gw.ConnState">>;
msg_name_to_fqbin('ns.ServiceProfile') ->
    <<"ns.ServiceProfile">>;
msg_name_to_fqbin('ns.DeviceProfile') ->
    <<"ns.DeviceProfile">>;
msg_name_to_fqbin('ns.RoutingProfile') ->
    <<"ns.RoutingProfile">>;
msg_name_to_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).

fqbin_to_enum_name(<<"ns.RXWindow">>) -> 'ns.RXWindow';
fqbin_to_enum_name(<<"ns.AggregationInterval">>) -> 'ns.AggregationInterval';
fqbin_to_enum_name(<<"ns.MulticastGroupType">>) -> 'ns.MulticastGroupType';
fqbin_to_enum_name(<<"common.Modulation">>) -> 'common.Modulation';
fqbin_to_enum_name(<<"common.Region">>) -> 'common.Region';
fqbin_to_enum_name(<<"common.MType">>) -> 'common.MType';
fqbin_to_enum_name(<<"common.LocationSource">>) -> 'common.LocationSource';
fqbin_to_enum_name(<<"gw.DownlinkTiming">>) -> 'gw.DownlinkTiming';
fqbin_to_enum_name(<<"gw.FineTimestampType">>) -> 'gw.FineTimestampType';
fqbin_to_enum_name(<<"gw.CRCStatus">>) -> 'gw.CRCStatus';
fqbin_to_enum_name(<<"gw.TxAckStatus">>) -> 'gw.TxAckStatus';
fqbin_to_enum_name(<<"gw.ConnState.State">>) -> 'gw.ConnState.State';
fqbin_to_enum_name(<<"ns.RatePolicy">>) -> 'ns.RatePolicy';
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).

enum_name_to_fqbin('ns.RXWindow') -> <<"ns.RXWindow">>;
enum_name_to_fqbin('ns.AggregationInterval') -> <<"ns.AggregationInterval">>;
enum_name_to_fqbin('ns.MulticastGroupType') -> <<"ns.MulticastGroupType">>;
enum_name_to_fqbin('common.Modulation') -> <<"common.Modulation">>;
enum_name_to_fqbin('common.Region') -> <<"common.Region">>;
enum_name_to_fqbin('common.MType') -> <<"common.MType">>;
enum_name_to_fqbin('common.LocationSource') -> <<"common.LocationSource">>;
enum_name_to_fqbin('gw.DownlinkTiming') -> <<"gw.DownlinkTiming">>;
enum_name_to_fqbin('gw.FineTimestampType') -> <<"gw.FineTimestampType">>;
enum_name_to_fqbin('gw.CRCStatus') -> <<"gw.CRCStatus">>;
enum_name_to_fqbin('gw.TxAckStatus') -> <<"gw.TxAckStatus">>;
enum_name_to_fqbin('gw.ConnState.State') -> <<"gw.ConnState.State">>;
enum_name_to_fqbin('ns.RatePolicy') -> <<"ns.RatePolicy">>;
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).

get_package_name() -> ns.

%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> true.

source_basename() -> "ns.proto".

%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() ->
    [
        "ns.proto",
        "timestamp.proto",
        "duration.proto",
        "empty.proto",
        "common.proto",
        "gw.proto",
        "profiles.proto"
    ].

%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["ns", "timestamp", "duration", "empty", "common", "gw", "profiles"].

get_msg_containment("ns") ->
    [
        'ns.ADRAlgorithm',
        'ns.ActivateDeviceRequest',
        'ns.AddDeviceToMulticastGroupRequest',
        'ns.CreateDeviceProfileRequest',
        'ns.CreateDeviceProfileResponse',
        'ns.CreateDeviceQueueItemRequest',
        'ns.CreateDeviceRequest',
        'ns.CreateGatewayProfileRequest',
        'ns.CreateGatewayProfileResponse',
        'ns.CreateGatewayRequest',
        'ns.CreateMACCommandQueueItemRequest',
        'ns.CreateMulticastGroupRequest',
        'ns.CreateMulticastGroupResponse',
        'ns.CreateRoutingProfileRequest',
        'ns.CreateRoutingProfileResponse',
        'ns.CreateServiceProfileRequest',
        'ns.CreateServiceProfileResponse',
        'ns.DeactivateDeviceRequest',
        'ns.DeleteDeviceProfileRequest',
        'ns.DeleteDeviceRequest',
        'ns.DeleteGatewayProfileRequest',
        'ns.DeleteGatewayRequest',
        'ns.DeleteMulticastGroupRequest',
        'ns.DeleteRoutingProfileRequest',
        'ns.DeleteServiceProfileRequest',
        'ns.Device',
        'ns.DeviceActivation',
        'ns.DeviceQueueItem',
        'ns.DownlinkFrameLog',
        'ns.EnqueueMulticastQueueItemRequest',
        'ns.FlushDeviceQueueForDevEUIRequest',
        'ns.FlushMulticastQueueForMulticastGroupRequest',
        'ns.Gateway',
        'ns.GatewayBoard',
        'ns.GatewayProfile',
        'ns.GatewayProfileExtraChannel',
        'ns.GatewayStats',
        'ns.GenerateGatewayClientCertificateRequest',
        'ns.GenerateGatewayClientCertificateResponse',
        'ns.GetADRAlgorithmsResponse',
        'ns.GetDeviceActivationRequest',
        'ns.GetDeviceActivationResponse',
        'ns.GetDeviceProfileRequest',
        'ns.GetDeviceProfileResponse',
        'ns.GetDeviceQueueItemsForDevEUIRequest',
        'ns.GetDeviceQueueItemsForDevEUIResponse',
        'ns.GetDeviceRequest',
        'ns.GetDeviceResponse',
        'ns.GetGatewayProfileRequest',
        'ns.GetGatewayProfileResponse',
        'ns.GetGatewayRequest',
        'ns.GetGatewayResponse',
        'ns.GetGatewayStatsRequest',
        'ns.GetGatewayStatsResponse',
        'ns.GetMulticastGroupRequest',
        'ns.GetMulticastGroupResponse',
        'ns.GetMulticastQueueItemsForMulticastGroupRequest',
        'ns.GetMulticastQueueItemsForMulticastGroupResponse',
        'ns.GetNextDownlinkFCntForDevEUIRequest',
        'ns.GetNextDownlinkFCntForDevEUIResponse',
        'ns.GetRandomDevAddrResponse',
        'ns.GetRoutingProfileRequest',
        'ns.GetRoutingProfileResponse',
        'ns.GetServiceProfileRequest',
        'ns.GetServiceProfileResponse',
        'ns.GetVersionResponse',
        'ns.MulticastGroup',
        'ns.MulticastQueueItem',
        'ns.RemoveDeviceFromMulticastGroupRequest',
        'ns.SendProprietaryPayloadRequest',
        'ns.StreamFrameLogsForDeviceRequest',
        'ns.StreamFrameLogsForDeviceResponse',
        'ns.StreamFrameLogsForGatewayRequest',
        'ns.StreamFrameLogsForGatewayResponse',
        'ns.UpdateDeviceProfileRequest',
        'ns.UpdateDeviceRequest',
        'ns.UpdateGatewayProfileRequest',
        'ns.UpdateGatewayRequest',
        'ns.UpdateMulticastGroupRequest',
        'ns.UpdateRoutingProfileRequest',
        'ns.UpdateServiceProfileRequest',
        'ns.UplinkFrameLog'
    ];
get_msg_containment("timestamp") ->
    ['google.protobuf.Timestamp'];
get_msg_containment("duration") ->
    ['google.protobuf.Duration'];
get_msg_containment("empty") ->
    ['google.protobuf.Empty'];
get_msg_containment("common") ->
    ['common.KeyEnvelope', 'common.Location'];
get_msg_containment("gw") ->
    [
        'gw.ChannelConfiguration',
        'gw.ConnState',
        'gw.DelayTimingInfo',
        'gw.DownlinkFrame',
        'gw.DownlinkFrameItem',
        'gw.DownlinkTXAck',
        'gw.DownlinkTXAckItem',
        'gw.DownlinkTXInfo',
        'gw.EncryptedFineTimestamp',
        'gw.FSKModulationConfig',
        'gw.FSKModulationInfo',
        'gw.GPSEpochTimingInfo',
        'gw.GatewayCommandExecRequest',
        'gw.GatewayCommandExecResponse',
        'gw.GatewayConfiguration',
        'gw.GatewayStats',
        'gw.ImmediatelyTimingInfo',
        'gw.LoRaModulationConfig',
        'gw.LoRaModulationInfo',
        'gw.PlainFineTimestamp',
        'gw.RawPacketForwarderCommand',
        'gw.RawPacketForwarderEvent',
        'gw.UplinkFrame',
        'gw.UplinkFrameSet',
        'gw.UplinkRXInfo',
        'gw.UplinkTXInfo'
    ];
get_msg_containment("profiles") ->
    ['ns.DeviceProfile', 'ns.RoutingProfile', 'ns.ServiceProfile'];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).

get_pkg_containment("ns") -> ns;
get_pkg_containment("timestamp") -> 'google.protobuf';
get_pkg_containment("duration") -> 'google.protobuf';
get_pkg_containment("empty") -> 'google.protobuf';
get_pkg_containment("common") -> common;
get_pkg_containment("gw") -> gw;
get_pkg_containment("profiles") -> ns;
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).

get_service_containment("ns") -> ['ns.NetworkServerService'];
get_service_containment("timestamp") -> [];
get_service_containment("duration") -> [];
get_service_containment("empty") -> [];
get_service_containment("common") -> [];
get_service_containment("gw") -> [];
get_service_containment("profiles") -> [];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).

get_rpc_containment("ns") ->
    [
        {'ns.NetworkServerService', 'CreateServiceProfile'},
        {'ns.NetworkServerService', 'GetServiceProfile'},
        {'ns.NetworkServerService', 'UpdateServiceProfile'},
        {'ns.NetworkServerService', 'DeleteServiceProfile'},
        {'ns.NetworkServerService', 'CreateRoutingProfile'},
        {'ns.NetworkServerService', 'GetRoutingProfile'},
        {'ns.NetworkServerService', 'UpdateRoutingProfile'},
        {'ns.NetworkServerService', 'DeleteRoutingProfile'},
        {'ns.NetworkServerService', 'CreateDeviceProfile'},
        {'ns.NetworkServerService', 'GetDeviceProfile'},
        {'ns.NetworkServerService', 'UpdateDeviceProfile'},
        {'ns.NetworkServerService', 'DeleteDeviceProfile'},
        {'ns.NetworkServerService', 'CreateDevice'},
        {'ns.NetworkServerService', 'GetDevice'},
        {'ns.NetworkServerService', 'UpdateDevice'},
        {'ns.NetworkServerService', 'DeleteDevice'},
        {'ns.NetworkServerService', 'ActivateDevice'},
        {'ns.NetworkServerService', 'DeactivateDevice'},
        {'ns.NetworkServerService', 'GetDeviceActivation'},
        {'ns.NetworkServerService', 'CreateDeviceQueueItem'},
        {'ns.NetworkServerService', 'FlushDeviceQueueForDevEUI'},
        {'ns.NetworkServerService', 'GetDeviceQueueItemsForDevEUI'},
        {'ns.NetworkServerService', 'GetNextDownlinkFCntForDevEUI'},
        {'ns.NetworkServerService', 'GetRandomDevAddr'},
        {'ns.NetworkServerService', 'CreateMACCommandQueueItem'},
        {'ns.NetworkServerService', 'SendProprietaryPayload'},
        {'ns.NetworkServerService', 'CreateGateway'},
        {'ns.NetworkServerService', 'GetGateway'},
        {'ns.NetworkServerService', 'UpdateGateway'},
        {'ns.NetworkServerService', 'DeleteGateway'},
        {'ns.NetworkServerService', 'GenerateGatewayClientCertificate'},
        {'ns.NetworkServerService', 'CreateGatewayProfile'},
        {'ns.NetworkServerService', 'GetGatewayProfile'},
        {'ns.NetworkServerService', 'UpdateGatewayProfile'},
        {'ns.NetworkServerService', 'DeleteGatewayProfile'},
        {'ns.NetworkServerService', 'GetGatewayStats'},
        {'ns.NetworkServerService', 'StreamFrameLogsForGateway'},
        {'ns.NetworkServerService', 'StreamFrameLogsForDevice'},
        {'ns.NetworkServerService', 'CreateMulticastGroup'},
        {'ns.NetworkServerService', 'GetMulticastGroup'},
        {'ns.NetworkServerService', 'UpdateMulticastGroup'},
        {'ns.NetworkServerService', 'DeleteMulticastGroup'},
        {'ns.NetworkServerService', 'AddDeviceToMulticastGroup'},
        {'ns.NetworkServerService', 'RemoveDeviceFromMulticastGroup'},
        {'ns.NetworkServerService', 'EnqueueMulticastQueueItem'},
        {'ns.NetworkServerService', 'FlushMulticastQueueForMulticastGroup'},
        {'ns.NetworkServerService', 'GetMulticastQueueItemsForMulticastGroup'},
        {'ns.NetworkServerService', 'GetVersion'},
        {'ns.NetworkServerService', 'GetADRAlgorithms'}
    ];
get_rpc_containment("timestamp") ->
    [];
get_rpc_containment("duration") ->
    [];
get_rpc_containment("empty") ->
    [];
get_rpc_containment("common") ->
    [];
get_rpc_containment("gw") ->
    [];
get_rpc_containment("profiles") ->
    [];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).

get_enum_containment("ns") ->
    ['ns.AggregationInterval', 'ns.MulticastGroupType', 'ns.RXWindow'];
get_enum_containment("timestamp") ->
    [];
get_enum_containment("duration") ->
    [];
get_enum_containment("empty") ->
    [];
get_enum_containment("common") ->
    ['common.LocationSource', 'common.MType', 'common.Modulation', 'common.Region'];
get_enum_containment("gw") ->
    [
        'gw.CRCStatus',
        'gw.ConnState.State',
        'gw.DownlinkTiming',
        'gw.FineTimestampType',
        'gw.TxAckStatus'
    ];
get_enum_containment("profiles") ->
    ['ns.RatePolicy'];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).

get_proto_by_msg_name_as_fqbin(<<"gw.PlainFineTimestamp">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"gw.EncryptedFineTimestamp">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"ns.MulticastGroup">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"gw.GatewayStats">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"ns.GatewayStats">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"gw.RawPacketForwarderEvent">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"gw.RawPacketForwarderCommand">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"gw.GatewayCommandExecRequest">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"ns.UpdateGatewayProfileRequest">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.UpdateDeviceRequest">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.SendProprietaryPayloadRequest">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.RemoveDeviceFromMulticastGroupRequest">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.GetMulticastQueueItemsForMulticastGroupRequest">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.GetGatewayRequest">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.GetDeviceProfileRequest">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.FlushMulticastQueueForMulticastGroupRequest">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.FlushDeviceQueueForDevEUIRequest">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.DeactivateDeviceRequest">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.CreateMACCommandQueueItemRequest">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.CreateDeviceQueueItemRequest">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.DeviceProfile">>) -> "profiles";
get_proto_by_msg_name_as_fqbin(<<"gw.ConnState">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"common.KeyEnvelope">>) -> "common";
get_proto_by_msg_name_as_fqbin(<<"ns.StreamFrameLogsForGatewayResponse">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.GetRoutingProfileResponse">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.GetNextDownlinkFCntForDevEUIResponse">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.GetMulticastGroupResponse">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.GetGatewayProfileResponse">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.GetDeviceResponse">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.GetDeviceQueueItemsForDevEUIResponse">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.GetDeviceProfileResponse">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.GetDeviceActivationResponse">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.GenerateGatewayClientCertificateResponse">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.CreateRoutingProfileResponse">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.CreateMulticastGroupResponse">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.CreateGatewayProfileResponse">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.CreateDeviceProfileResponse">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"gw.LoRaModulationConfig">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"gw.FSKModulationConfig">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"ns.UplinkFrameLog">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"google.protobuf.Empty">>) -> "empty";
get_proto_by_msg_name_as_fqbin(<<"ns.Gateway">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"gw.DownlinkTXAck">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"ns.GatewayProfileExtraChannel">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"gw.DownlinkTXAckItem">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"gw.DownlinkFrameItem">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"ns.MulticastQueueItem">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.DeviceQueueItem">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.ADRAlgorithm">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"gw.GatewayConfiguration">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"gw.ChannelConfiguration">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"common.Location">>) -> "common";
get_proto_by_msg_name_as_fqbin(<<"google.protobuf.Duration">>) -> "duration";
get_proto_by_msg_name_as_fqbin(<<"ns.DeviceActivation">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"gw.UplinkTXInfo">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"gw.UplinkRXInfo">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"gw.LoRaModulationInfo">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"gw.ImmediatelyTimingInfo">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"gw.GPSEpochTimingInfo">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"gw.FSKModulationInfo">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"gw.DownlinkTXInfo">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"gw.DelayTimingInfo">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"google.protobuf.Timestamp">>) -> "timestamp";
get_proto_by_msg_name_as_fqbin(<<"gw.UplinkFrameSet">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"ns.UpdateServiceProfileRequest">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.UpdateRoutingProfileRequest">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.UpdateMulticastGroupRequest">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.UpdateGatewayRequest">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.UpdateDeviceProfileRequest">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.StreamFrameLogsForGatewayRequest">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.StreamFrameLogsForDeviceRequest">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.GetServiceProfileRequest">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.GetRoutingProfileRequest">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.GetNextDownlinkFCntForDevEUIRequest">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.GetMulticastGroupRequest">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.GetGatewayStatsRequest">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.GetGatewayProfileRequest">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.GetDeviceRequest">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.GetDeviceQueueItemsForDevEUIRequest">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.GetDeviceActivationRequest">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.GenerateGatewayClientCertificateRequest">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.GatewayBoard">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.EnqueueMulticastQueueItemRequest">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.DeleteServiceProfileRequest">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.DeleteRoutingProfileRequest">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.DeleteMulticastGroupRequest">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.DeleteGatewayRequest">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.DeleteGatewayProfileRequest">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.DeleteDeviceRequest">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.DeleteDeviceProfileRequest">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.CreateServiceProfileRequest">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.CreateRoutingProfileRequest">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.CreateMulticastGroupRequest">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.CreateGatewayRequest">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.CreateGatewayProfileRequest">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.CreateDeviceRequest">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.CreateDeviceProfileRequest">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.AddDeviceToMulticastGroupRequest">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.ActivateDeviceRequest">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.ServiceProfile">>) -> "profiles";
get_proto_by_msg_name_as_fqbin(<<"ns.RoutingProfile">>) -> "profiles";
get_proto_by_msg_name_as_fqbin(<<"gw.UplinkFrame">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"gw.GatewayCommandExecResponse">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"gw.DownlinkFrame">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"ns.StreamFrameLogsForDeviceResponse">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.GetVersionResponse">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.GetServiceProfileResponse">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.GetRandomDevAddrResponse">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.GetMulticastQueueItemsForMulticastGroupResponse">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.GetGatewayStatsResponse">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.GetGatewayResponse">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.GetADRAlgorithmsResponse">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.GatewayProfile">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.Device">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.CreateServiceProfileResponse">>) -> "ns";
get_proto_by_msg_name_as_fqbin(<<"ns.DownlinkFrameLog">>) -> "ns";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).

get_proto_by_service_name_as_fqbin(<<"ns.NetworkServerService">>) -> "ns";
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).

get_proto_by_enum_name_as_fqbin(<<"gw.TxAckStatus">>) -> "gw";
get_proto_by_enum_name_as_fqbin(<<"gw.CRCStatus">>) -> "gw";
get_proto_by_enum_name_as_fqbin(<<"gw.FineTimestampType">>) -> "gw";
get_proto_by_enum_name_as_fqbin(<<"gw.ConnState.State">>) -> "gw";
get_proto_by_enum_name_as_fqbin(<<"common.MType">>) -> "common";
get_proto_by_enum_name_as_fqbin(<<"common.LocationSource">>) -> "common";
get_proto_by_enum_name_as_fqbin(<<"ns.MulticastGroupType">>) -> "ns";
get_proto_by_enum_name_as_fqbin(<<"gw.DownlinkTiming">>) -> "gw";
get_proto_by_enum_name_as_fqbin(<<"ns.RXWindow">>) -> "ns";
get_proto_by_enum_name_as_fqbin(<<"ns.RatePolicy">>) -> "profiles";
get_proto_by_enum_name_as_fqbin(<<"ns.AggregationInterval">>) -> "ns";
get_proto_by_enum_name_as_fqbin(<<"common.Region">>) -> "common";
get_proto_by_enum_name_as_fqbin(<<"common.Modulation">>) -> "common";
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).

get_protos_by_pkg_name_as_fqbin(<<"ns">>) -> ["ns", "profiles"];
get_protos_by_pkg_name_as_fqbin(<<"google.protobuf">>) -> ["duration", "empty", "timestamp"];
get_protos_by_pkg_name_as_fqbin(<<"gw">>) -> ["gw"];
get_protos_by_pkg_name_as_fqbin(<<"common">>) -> ["common"];
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).

gpb_version_as_string() ->
    "4.17.0".

gpb_version_as_list() ->
    [4, 17, 0].
