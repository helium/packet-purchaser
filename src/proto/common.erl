%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.17.0
-module(common).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_common.Modulation'/1, 'enum_value_by_symbol_common.Modulation'/1]).
-export(['enum_symbol_by_value_common.Region'/1, 'enum_value_by_symbol_common.Region'/1]).
-export(['enum_symbol_by_value_common.MType'/1, 'enum_value_by_symbol_common.MType'/1]).
-export([
    'enum_symbol_by_value_common.LocationSource'/1,
    'enum_value_by_symbol_common.LocationSource'/1
]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("common.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'common.Modulation'() :: 'LORA' | 'FSK'.
-type 'common.Region'() ::
    'EU868'
    | 'US915'
    | 'CN779'
    | 'EU433'
    | 'AU915'
    | 'CN470'
    | 'AS923'
    | 'KR920'
    | 'IN865'
    | 'RU864'.
-type 'common.MType'() ::
    'JoinRequest'
    | 'JoinAccept'
    | 'UnconfirmedDataUp'
    | 'UnconfirmedDataDown'
    | 'ConfirmedDataUp'
    | 'ConfirmedDataDown'
    | 'RejoinRequest'
    | 'Proprietary'.
-type 'common.LocationSource'() ::
    'UNKNOWN'
    | 'GPS'
    | 'CONFIG'
    | 'GEO_RESOLVER_TDOA'
    | 'GEO_RESOLVER_RSSI'
    | 'GEO_RESOLVER_GNSS'
    | 'GEO_RESOLVER_WIFI'.
-export_type(['common.Modulation'/0, 'common.Region'/0, 'common.MType'/0, 'common.LocationSource'/0]).

%% message types
-type 'common.KeyEnvelope'() :: #'common.KeyEnvelope'{}.

-type 'common.Location'() :: #'common.Location'{}.

-export_type(['common.KeyEnvelope'/0, 'common.Location'/0]).
-type '$msg_name'() :: 'common.KeyEnvelope' | 'common.Location'.
-type '$msg'() :: 'common.KeyEnvelope'() | 'common.Location'().
-export_type(['$msg_name'/0, '$msg'/0]).

-spec encode_msg('$msg'()) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 -> encode_msg(Msg, element(1, Msg), []).

-spec encode_msg('$msg'(), '$msg_name'() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts) when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg('$msg'(), '$msg_name'(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'common.KeyEnvelope' -> 'encode_msg_common.KeyEnvelope'(id(Msg, TrUserData), TrUserData);
        'common.Location' -> 'encode_msg_common.Location'(id(Msg, TrUserData), TrUserData)
    end.

'encode_msg_common.KeyEnvelope'(Msg, TrUserData) ->
    'encode_msg_common.KeyEnvelope'(Msg, <<>>, TrUserData).

'encode_msg_common.KeyEnvelope'(
    #'common.KeyEnvelope'{kek_label = F1, aes_key = F2},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    if
        F2 == undefined ->
            B1;
        true ->
            begin
                TrF2 = id(F2, TrUserData),
                case iolist_size(TrF2) of
                    0 -> B1;
                    _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                end
            end
    end.

'encode_msg_common.Location'(Msg, TrUserData) ->
    'encode_msg_common.Location'(Msg, <<>>, TrUserData).

'encode_msg_common.Location'(
    #'common.Location'{latitude = F1, longitude = F2, altitude = F3, source = F4, accuracy = F5},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= 0.0 -> Bin;
                        true -> e_type_double(TrF1, <<Bin/binary, 9>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= 0.0 -> B1;
                        true -> e_type_double(TrF2, <<B1/binary, 17>>, TrUserData)
                    end
                end
        end,
    B3 =
        if
            F3 == undefined ->
                B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    if
                        TrF3 =:= 0.0 -> B2;
                        true -> e_type_double(TrF3, <<B2/binary, 25>>, TrUserData)
                    end
                end
        end,
    B4 =
        if
            F4 == undefined ->
                B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    if
                        TrF4 =:= 'UNKNOWN'; TrF4 =:= 0 -> B3;
                        true -> 'e_enum_common.LocationSource'(TrF4, <<B3/binary, 32>>, TrUserData)
                    end
                end
        end,
    if
        F5 == undefined ->
            B4;
        true ->
            begin
                TrF5 = id(F5, TrUserData),
                if
                    TrF5 =:= 0 -> B4;
                    true -> e_varint(TrF5, <<B4/binary, 40>>, TrUserData)
                end
            end
    end.

'e_enum_common.LocationSource'('UNKNOWN', Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_common.LocationSource'('GPS', Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_common.LocationSource'('CONFIG', Bin, _TrUserData) -> <<Bin/binary, 2>>;
'e_enum_common.LocationSource'('GEO_RESOLVER_TDOA', Bin, _TrUserData) -> <<Bin/binary, 3>>;
'e_enum_common.LocationSource'('GEO_RESOLVER_RSSI', Bin, _TrUserData) -> <<Bin/binary, 4>>;
'e_enum_common.LocationSource'('GEO_RESOLVER_GNSS', Bin, _TrUserData) -> <<Bin/binary, 5>>;
'e_enum_common.LocationSource'('GEO_RESOLVER_WIFI', Bin, _TrUserData) -> <<Bin/binary, 6>>;
'e_enum_common.LocationSource'(V, Bin, _TrUserData) -> e_varint(V, Bin).

-compile({nowarn_unused_function, e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function, e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function, e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function, e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function, e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function, e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function, e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function, e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function, e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function, e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function, e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function, e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function, e_unknown_elems/2}).
e_unknown_elems([Elem | Rest], Bin) ->
    BinR =
        case Elem of
            {varint, FNum, N} ->
                BinF = e_varint(FNum bsl 3, Bin),
                e_varint(N, BinF);
            {length_delimited, FNum, Data} ->
                BinF = e_varint(FNum bsl 3 bor 2, Bin),
                BinL = e_varint(byte_size(Data), BinF),
                <<BinL/binary, Data/binary>>;
            {group, FNum, GroupFields} ->
                Bin1 = e_varint(FNum bsl 3 bor 3, Bin),
                Bin2 = e_unknown_elems(GroupFields, Bin1),
                e_varint(FNum bsl 3 bor 4, Bin2);
            {fixed32, FNum, V} ->
                BinF = e_varint(FNum bsl 3 bor 5, Bin),
                <<BinF/binary, V:32/little>>;
            {fixed64, FNum, V} ->
                BinF = e_varint(FNum bsl 3 bor 1, Bin),
                <<BinF/binary, V:64/little>>
        end,
    e_unknown_elems(Rest, BinR);
e_unknown_elems([], Bin) ->
    Bin.

-compile({nowarn_unused_function, e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function, e_varint/2}).
e_varint(N, Bin) when N =< 127 ->
    <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) -> not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) ->
    true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
        true -> true;
        false -> string_has_chars(T)
    end;
string_has_chars(B) when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) ->
    true;
string_has_chars(<<>>) ->
    false;
string_has_chars([]) ->
    false.

decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try
        decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        Class:Reason:StackTrace ->
            error({gpb_error, {decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try
        decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        Class:Reason ->
            StackTrace = erlang:get_stacktrace(),
            error({gpb_error, {decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('common.KeyEnvelope', Bin, TrUserData) ->
    id('decode_msg_common.KeyEnvelope'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('common.Location', Bin, TrUserData) ->
    id('decode_msg_common.Location'(Bin, TrUserData), TrUserData).

'decode_msg_common.KeyEnvelope'(Bin, TrUserData) ->
    'dfp_read_field_def_common.KeyEnvelope'(
        Bin,
        0,
        0,
        0,
        id([], TrUserData),
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_common.KeyEnvelope'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'd_field_common.KeyEnvelope_kek_label'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_common.KeyEnvelope'(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'd_field_common.KeyEnvelope_aes_key'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_common.KeyEnvelope'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'common.KeyEnvelope'{kek_label = F@_1, aes_key = F@_2};
'dfp_read_field_def_common.KeyEnvelope'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_common.KeyEnvelope'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_common.KeyEnvelope'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_common.KeyEnvelope'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'dg_read_field_def_common.KeyEnvelope'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_common.KeyEnvelope_kek_label'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 ->
            'd_field_common.KeyEnvelope_aes_key'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_common.KeyEnvelope'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 ->
                    'skip_64_common.KeyEnvelope'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 ->
                    'skip_length_delimited_common.KeyEnvelope'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                3 ->
                    'skip_group_common.KeyEnvelope'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 ->
                    'skip_32_common.KeyEnvelope'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_common.KeyEnvelope'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'common.KeyEnvelope'{kek_label = F@_1, aes_key = F@_2}.

'd_field_common.KeyEnvelope_kek_label'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_common.KeyEnvelope_kek_label'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_common.KeyEnvelope_kek_label'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Utf8:Len/binary, Rest2/binary>> = Rest,
        {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2}
    end,
    'dfp_read_field_def_common.KeyEnvelope'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_common.KeyEnvelope_aes_key'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_common.KeyEnvelope_aes_key'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_common.KeyEnvelope_aes_key'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_common.KeyEnvelope'(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

'skip_varint_common.KeyEnvelope'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'skip_varint_common.KeyEnvelope'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_common.KeyEnvelope'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_common.KeyEnvelope'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_common.KeyEnvelope'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_common.KeyEnvelope'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'skip_length_delimited_common.KeyEnvelope'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_common.KeyEnvelope'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_common.KeyEnvelope'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_common.KeyEnvelope'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_common.KeyEnvelope'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_common.KeyEnvelope'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_common.KeyEnvelope'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_common.KeyEnvelope'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'decode_msg_common.Location'(Bin, TrUserData) ->
    'dfp_read_field_def_common.Location'(
        Bin,
        0,
        0,
        0,
        id(0.0, TrUserData),
        id(0.0, TrUserData),
        id(0.0, TrUserData),
        id('UNKNOWN', TrUserData),
        id(0, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_common.Location'(
    <<9, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_common.Location_latitude'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_common.Location'(
    <<17, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_common.Location_longitude'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_common.Location'(
    <<25, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_common.Location_altitude'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_common.Location'(
    <<32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_common.Location_source'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_common.Location'(
    <<40, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_common.Location_accuracy'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_common.Location'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    #'common.Location'{
        latitude = F@_1,
        longitude = F@_2,
        altitude = F@_3,
        source = F@_4,
        accuracy = F@_5
    };
'dfp_read_field_def_common.Location'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    'dg_read_field_def_common.Location'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'dg_read_field_def_common.Location'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_common.Location'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dg_read_field_def_common.Location'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        9 ->
            'd_field_common.Location_latitude'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        17 ->
            'd_field_common.Location_longitude'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        25 ->
            'd_field_common.Location_altitude'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        32 ->
            'd_field_common.Location_source'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        40 ->
            'd_field_common.Location_accuracy'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_common.Location'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                1 ->
                    'skip_64_common.Location'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_common.Location'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                3 ->
                    'skip_group_common.Location'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                5 ->
                    'skip_32_common.Location'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_common.Location'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    #'common.Location'{
        latitude = F@_1,
        longitude = F@_2,
        altitude = F@_3,
        source = F@_4,
        accuracy = F@_5
    }.

'd_field_common.Location_latitude'(
    <<0:48, 240, 127, Rest/binary>>,
    Z1,
    Z2,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_common.Location'(
        Rest,
        Z1,
        Z2,
        F,
        id(infinity, TrUserData),
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_common.Location_latitude'(
    <<0:48, 240, 255, Rest/binary>>,
    Z1,
    Z2,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_common.Location'(
        Rest,
        Z1,
        Z2,
        F,
        id('-infinity', TrUserData),
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_common.Location_latitude'(
    <<_:48, 15:4, _:4, _:1, 127:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_common.Location'(
        Rest,
        Z1,
        Z2,
        F,
        id(nan, TrUserData),
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_common.Location_latitude'(
    <<Value:64/little-float, Rest/binary>>,
    Z1,
    Z2,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_common.Location'(
        Rest,
        Z1,
        Z2,
        F,
        id(Value, TrUserData),
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'd_field_common.Location_longitude'(
    <<0:48, 240, 127, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    _,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_common.Location'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        id(infinity, TrUserData),
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_common.Location_longitude'(
    <<0:48, 240, 255, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    _,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_common.Location'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        id('-infinity', TrUserData),
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_common.Location_longitude'(
    <<_:48, 15:4, _:4, _:1, 127:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    _,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_common.Location'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        id(nan, TrUserData),
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_common.Location_longitude'(
    <<Value:64/little-float, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    _,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_common.Location'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        id(Value, TrUserData),
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'd_field_common.Location_altitude'(
    <<0:48, 240, 127, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    _,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_common.Location'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        id(infinity, TrUserData),
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_common.Location_altitude'(
    <<0:48, 240, 255, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    _,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_common.Location'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        id('-infinity', TrUserData),
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_common.Location_altitude'(
    <<_:48, 15:4, _:4, _:1, 127:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    _,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_common.Location'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        id(nan, TrUserData),
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_common.Location_altitude'(
    <<Value:64/little-float, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    _,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_common.Location'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        id(Value, TrUserData),
        F@_4,
        F@_5,
        TrUserData
    ).

'd_field_common.Location_source'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_common.Location_source'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_common.Location_source'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    _,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} =
        {id(
                'd_enum_common.LocationSource'(begin
                    <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>,
                    id(Res, TrUserData)
                end),
                TrUserData
            ),
            Rest},
    'dfp_read_field_def_common.Location'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        NewFValue,
        F@_5,
        TrUserData
    ).

'd_field_common.Location_accuracy'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_common.Location_accuracy'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_common.Location_accuracy'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_common.Location'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        NewFValue,
        TrUserData
    ).

'skip_varint_common.Location'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'skip_varint_common.Location'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'skip_varint_common.Location'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_common.Location'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'skip_length_delimited_common.Location'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_common.Location'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'skip_length_delimited_common.Location'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_common.Location'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'skip_group_common.Location'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_common.Location'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'skip_32_common.Location'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_common.Location'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'skip_64_common.Location'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_common.Location'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'd_enum_common.LocationSource'(0) -> 'UNKNOWN';
'd_enum_common.LocationSource'(1) -> 'GPS';
'd_enum_common.LocationSource'(2) -> 'CONFIG';
'd_enum_common.LocationSource'(3) -> 'GEO_RESOLVER_TDOA';
'd_enum_common.LocationSource'(4) -> 'GEO_RESOLVER_RSSI';
'd_enum_common.LocationSource'(5) -> 'GEO_RESOLVER_GNSS';
'd_enum_common.LocationSource'(6) -> 'GEO_RESOLVER_WIFI';
'd_enum_common.LocationSource'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum) when N < (32 - 7) ->
    read_gr_b(Tl, N + 7, X bsl N + Acc, NumBytes, TagLen + 1, FieldNum);
read_gr_b(
    <<0:1, X:7, Tl/binary>>,
    N,
    Acc,
    NumBytes,
    TagLen,
    FieldNum
) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        % 4 = group_end
        {FieldNum, 4} ->
            {NumBytes, TagLen1};
        % 0 = varint
        {_, 0} ->
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        % 1 = bits64
        {_, 1} ->
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        % 2 = length_delimited
        {_, 2} ->
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        % 3 = group_start
        {_, 3} ->
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        % 4 = group_end
        {_, 4} ->
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        % 5 = bits32
        {_, 5} ->
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum) when N < (64 - 7) ->
    read_gr_vi(Tl, N + 7, NumBytes + 1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes + 1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) when N < (64 - 7) ->
    read_gr_ld(Tl, N + 7, X bsl N + Acc, NumBytes + 1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts) when element(1, Prev) =:= element(1, New), is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'common.KeyEnvelope' -> 'merge_msg_common.KeyEnvelope'(Prev, New, TrUserData);
        'common.Location' -> 'merge_msg_common.Location'(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function, 'merge_msg_common.KeyEnvelope'/3}).
'merge_msg_common.KeyEnvelope'(
    #'common.KeyEnvelope'{kek_label = PFkek_label, aes_key = PFaes_key},
    #'common.KeyEnvelope'{kek_label = NFkek_label, aes_key = NFaes_key},
    _
) ->
    #'common.KeyEnvelope'{
        kek_label =
            if
                NFkek_label =:= undefined -> PFkek_label;
                true -> NFkek_label
            end,
        aes_key =
            if
                NFaes_key =:= undefined -> PFaes_key;
                true -> NFaes_key
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_common.Location'/3}).
'merge_msg_common.Location'(
    #'common.Location'{
        latitude = PFlatitude,
        longitude = PFlongitude,
        altitude = PFaltitude,
        source = PFsource,
        accuracy = PFaccuracy
    },
    #'common.Location'{
        latitude = NFlatitude,
        longitude = NFlongitude,
        altitude = NFaltitude,
        source = NFsource,
        accuracy = NFaccuracy
    },
    _
) ->
    #'common.Location'{
        latitude =
            if
                NFlatitude =:= undefined -> PFlatitude;
                true -> NFlatitude
            end,
        longitude =
            if
                NFlongitude =:= undefined -> PFlongitude;
                true -> NFlongitude
            end,
        altitude =
            if
                NFaltitude =:= undefined -> PFaltitude;
                true -> NFaltitude
            end,
        source =
            if
                NFsource =:= undefined -> PFsource;
                true -> NFsource
            end,
        accuracy =
            if
                NFaccuracy =:= undefined -> PFaccuracy;
                true -> NFaccuracy
            end
    }.

verify_msg(Msg) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), []);
verify_msg(X) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'common.KeyEnvelope' -> 'v_msg_common.KeyEnvelope'(Msg, [MsgName], TrUserData);
        'common.Location' -> 'v_msg_common.Location'(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.

-compile({nowarn_unused_function, 'v_msg_common.KeyEnvelope'/3}).
-dialyzer({nowarn_function, 'v_msg_common.KeyEnvelope'/3}).
'v_msg_common.KeyEnvelope'(#'common.KeyEnvelope'{kek_label = F1, aes_key = F2}, Path, TrUserData) ->
    if
        F1 == undefined -> ok;
        true -> v_type_string(F1, [kek_label | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_bytes(F2, [aes_key | Path], TrUserData)
    end,
    ok;
'v_msg_common.KeyEnvelope'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'common.KeyEnvelope'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_common.Location'/3}).
-dialyzer({nowarn_function, 'v_msg_common.Location'/3}).
'v_msg_common.Location'(
    #'common.Location'{latitude = F1, longitude = F2, altitude = F3, source = F4, accuracy = F5},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_double(F1, [latitude | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_double(F2, [longitude | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_double(F3, [altitude | Path], TrUserData)
    end,
    if
        F4 == undefined -> ok;
        true -> 'v_enum_common.LocationSource'(F4, [source | Path], TrUserData)
    end,
    if
        F5 == undefined -> ok;
        true -> v_type_uint32(F5, [accuracy | Path], TrUserData)
    end,
    ok;
'v_msg_common.Location'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'common.Location'}, X, Path).

-compile({nowarn_unused_function, 'v_enum_common.LocationSource'/3}).
-dialyzer({nowarn_function, 'v_enum_common.LocationSource'/3}).
'v_enum_common.LocationSource'('UNKNOWN', _Path, _TrUserData) ->
    ok;
'v_enum_common.LocationSource'('GPS', _Path, _TrUserData) ->
    ok;
'v_enum_common.LocationSource'('CONFIG', _Path, _TrUserData) ->
    ok;
'v_enum_common.LocationSource'('GEO_RESOLVER_TDOA', _Path, _TrUserData) ->
    ok;
'v_enum_common.LocationSource'('GEO_RESOLVER_RSSI', _Path, _TrUserData) ->
    ok;
'v_enum_common.LocationSource'('GEO_RESOLVER_GNSS', _Path, _TrUserData) ->
    ok;
'v_enum_common.LocationSource'('GEO_RESOLVER_WIFI', _Path, _TrUserData) ->
    ok;
'v_enum_common.LocationSource'(V, _Path, _TrUserData) when
    -2147483648 =< V, V =< 2147483647, is_integer(V)
->
    ok;
'v_enum_common.LocationSource'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'common.LocationSource'}, X, Path).

-compile({nowarn_unused_function, v_type_uint32/3}).
-dialyzer({nowarn_function, v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData) when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned, 32}, N, Path);
v_type_uint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X, Path).

-compile({nowarn_unused_function, v_type_double/3}).
-dialyzer({nowarn_function, v_type_double/3}).
v_type_double(N, _Path, _TrUserData) when is_float(N) -> ok;
v_type_double(N, _Path, _TrUserData) when is_integer(N) -> ok;
v_type_double(infinity, _Path, _TrUserData) -> ok;
v_type_double('-infinity', _Path, _TrUserData) -> ok;
v_type_double(nan, _Path, _TrUserData) -> ok;
v_type_double(X, Path, _TrUserData) -> mk_type_error(bad_double_value, X, Path).

-compile({nowarn_unused_function, v_type_string/3}).
-dialyzer({nowarn_function, v_type_string/3}).
v_type_string(S, Path, _TrUserData) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} -> mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg -> mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function, v_type_bytes/3}).
-dialyzer({nowarn_function, v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) -> ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) -> ok;
v_type_bytes(X, Path, _TrUserData) -> mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function, mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).

-compile({nowarn_unused_function, prettify_path/1}).
-dialyzer({nowarn_function, prettify_path/1}).
prettify_path([]) ->
    top_level;
prettify_path(PathR) ->
    lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR)))).

-compile({nowarn_unused_function, id/2}).
-compile({inline, id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function, v_ok/3}).
-compile({inline, v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function, m_overwrite/3}).
-compile({inline, m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function, cons/3}).
-compile({inline, cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function, lists_reverse/2}).
-compile({inline, lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function, 'erlang_++'/3}).
-compile({inline, 'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [
        {{enum, 'common.Modulation'}, [{'LORA', 0}, {'FSK', 1}]},
        {{enum, 'common.Region'}, [
            {'EU868', 0},
            {'US915', 2},
            {'CN779', 3},
            {'EU433', 4},
            {'AU915', 5},
            {'CN470', 6},
            {'AS923', 7},
            {'KR920', 8},
            {'IN865', 9},
            {'RU864', 10}
        ]},
        {{enum, 'common.MType'}, [
            {'JoinRequest', 0},
            {'JoinAccept', 1},
            {'UnconfirmedDataUp', 2},
            {'UnconfirmedDataDown', 3},
            {'ConfirmedDataUp', 4},
            {'ConfirmedDataDown', 5},
            {'RejoinRequest', 6},
            {'Proprietary', 7}
        ]},
        {{enum, 'common.LocationSource'}, [
            {'UNKNOWN', 0},
            {'GPS', 1},
            {'CONFIG', 2},
            {'GEO_RESOLVER_TDOA', 3},
            {'GEO_RESOLVER_RSSI', 4},
            {'GEO_RESOLVER_GNSS', 5},
            {'GEO_RESOLVER_WIFI', 6}
        ]},
        {{msg, 'common.KeyEnvelope'}, [
            #field{
                name = kek_label,
                fnum = 1,
                rnum = 2,
                type = string,
                occurrence = optional,
                opts = []
            },
            #field{
                name = aes_key,
                fnum = 2,
                rnum = 3,
                type = bytes,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'common.Location'}, [
            #field{
                name = latitude,
                fnum = 1,
                rnum = 2,
                type = double,
                occurrence = optional,
                opts = []
            },
            #field{
                name = longitude,
                fnum = 2,
                rnum = 3,
                type = double,
                occurrence = optional,
                opts = []
            },
            #field{
                name = altitude,
                fnum = 3,
                rnum = 4,
                type = double,
                occurrence = optional,
                opts = []
            },
            #field{
                name = source,
                fnum = 4,
                rnum = 5,
                type = {enum, 'common.LocationSource'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = accuracy,
                fnum = 5,
                rnum = 6,
                type = uint32,
                occurrence = optional,
                opts = []
            }
        ]}
    ].

get_msg_names() -> ['common.KeyEnvelope', 'common.Location'].

get_group_names() -> [].

get_msg_or_group_names() -> ['common.KeyEnvelope', 'common.Location'].

get_enum_names() -> ['common.Modulation', 'common.Region', 'common.MType', 'common.LocationSource'].

fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.

fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
        Es when is_list(Es) -> Es;
        error -> erlang:error({no_such_enum, EnumName})
    end.

find_msg_def('common.KeyEnvelope') ->
    [
        #field{
            name = kek_label,
            fnum = 1,
            rnum = 2,
            type = string,
            occurrence = optional,
            opts = []
        },
        #field{name = aes_key, fnum = 2, rnum = 3, type = bytes, occurrence = optional, opts = []}
    ];
find_msg_def('common.Location') ->
    [
        #field{
            name = latitude,
            fnum = 1,
            rnum = 2,
            type = double,
            occurrence = optional,
            opts = []
        },
        #field{
            name = longitude,
            fnum = 2,
            rnum = 3,
            type = double,
            occurrence = optional,
            opts = []
        },
        #field{
            name = altitude,
            fnum = 3,
            rnum = 4,
            type = double,
            occurrence = optional,
            opts = []
        },
        #field{
            name = source,
            fnum = 4,
            rnum = 5,
            type = {enum, 'common.LocationSource'},
            occurrence = optional,
            opts = []
        },
        #field{name = accuracy, fnum = 5, rnum = 6, type = uint32, occurrence = optional, opts = []}
    ];
find_msg_def(_) ->
    error.

find_enum_def('common.Modulation') ->
    [{'LORA', 0}, {'FSK', 1}];
find_enum_def('common.Region') ->
    [
        {'EU868', 0},
        {'US915', 2},
        {'CN779', 3},
        {'EU433', 4},
        {'AU915', 5},
        {'CN470', 6},
        {'AS923', 7},
        {'KR920', 8},
        {'IN865', 9},
        {'RU864', 10}
    ];
find_enum_def('common.MType') ->
    [
        {'JoinRequest', 0},
        {'JoinAccept', 1},
        {'UnconfirmedDataUp', 2},
        {'UnconfirmedDataDown', 3},
        {'ConfirmedDataUp', 4},
        {'ConfirmedDataDown', 5},
        {'RejoinRequest', 6},
        {'Proprietary', 7}
    ];
find_enum_def('common.LocationSource') ->
    [
        {'UNKNOWN', 0},
        {'GPS', 1},
        {'CONFIG', 2},
        {'GEO_RESOLVER_TDOA', 3},
        {'GEO_RESOLVER_RSSI', 4},
        {'GEO_RESOLVER_GNSS', 5},
        {'GEO_RESOLVER_WIFI', 6}
    ];
find_enum_def(_) ->
    error.

enum_symbol_by_value('common.Modulation', Value) ->
    'enum_symbol_by_value_common.Modulation'(Value);
enum_symbol_by_value('common.Region', Value) ->
    'enum_symbol_by_value_common.Region'(Value);
enum_symbol_by_value('common.MType', Value) ->
    'enum_symbol_by_value_common.MType'(Value);
enum_symbol_by_value('common.LocationSource', Value) ->
    'enum_symbol_by_value_common.LocationSource'(Value).

enum_value_by_symbol('common.Modulation', Sym) ->
    'enum_value_by_symbol_common.Modulation'(Sym);
enum_value_by_symbol('common.Region', Sym) ->
    'enum_value_by_symbol_common.Region'(Sym);
enum_value_by_symbol('common.MType', Sym) ->
    'enum_value_by_symbol_common.MType'(Sym);
enum_value_by_symbol('common.LocationSource', Sym) ->
    'enum_value_by_symbol_common.LocationSource'(Sym).

'enum_symbol_by_value_common.Modulation'(0) -> 'LORA';
'enum_symbol_by_value_common.Modulation'(1) -> 'FSK'.

'enum_value_by_symbol_common.Modulation'('LORA') -> 0;
'enum_value_by_symbol_common.Modulation'('FSK') -> 1.

'enum_symbol_by_value_common.Region'(0) -> 'EU868';
'enum_symbol_by_value_common.Region'(2) -> 'US915';
'enum_symbol_by_value_common.Region'(3) -> 'CN779';
'enum_symbol_by_value_common.Region'(4) -> 'EU433';
'enum_symbol_by_value_common.Region'(5) -> 'AU915';
'enum_symbol_by_value_common.Region'(6) -> 'CN470';
'enum_symbol_by_value_common.Region'(7) -> 'AS923';
'enum_symbol_by_value_common.Region'(8) -> 'KR920';
'enum_symbol_by_value_common.Region'(9) -> 'IN865';
'enum_symbol_by_value_common.Region'(10) -> 'RU864'.

'enum_value_by_symbol_common.Region'('EU868') -> 0;
'enum_value_by_symbol_common.Region'('US915') -> 2;
'enum_value_by_symbol_common.Region'('CN779') -> 3;
'enum_value_by_symbol_common.Region'('EU433') -> 4;
'enum_value_by_symbol_common.Region'('AU915') -> 5;
'enum_value_by_symbol_common.Region'('CN470') -> 6;
'enum_value_by_symbol_common.Region'('AS923') -> 7;
'enum_value_by_symbol_common.Region'('KR920') -> 8;
'enum_value_by_symbol_common.Region'('IN865') -> 9;
'enum_value_by_symbol_common.Region'('RU864') -> 10.

'enum_symbol_by_value_common.MType'(0) -> 'JoinRequest';
'enum_symbol_by_value_common.MType'(1) -> 'JoinAccept';
'enum_symbol_by_value_common.MType'(2) -> 'UnconfirmedDataUp';
'enum_symbol_by_value_common.MType'(3) -> 'UnconfirmedDataDown';
'enum_symbol_by_value_common.MType'(4) -> 'ConfirmedDataUp';
'enum_symbol_by_value_common.MType'(5) -> 'ConfirmedDataDown';
'enum_symbol_by_value_common.MType'(6) -> 'RejoinRequest';
'enum_symbol_by_value_common.MType'(7) -> 'Proprietary'.

'enum_value_by_symbol_common.MType'('JoinRequest') -> 0;
'enum_value_by_symbol_common.MType'('JoinAccept') -> 1;
'enum_value_by_symbol_common.MType'('UnconfirmedDataUp') -> 2;
'enum_value_by_symbol_common.MType'('UnconfirmedDataDown') -> 3;
'enum_value_by_symbol_common.MType'('ConfirmedDataUp') -> 4;
'enum_value_by_symbol_common.MType'('ConfirmedDataDown') -> 5;
'enum_value_by_symbol_common.MType'('RejoinRequest') -> 6;
'enum_value_by_symbol_common.MType'('Proprietary') -> 7.

'enum_symbol_by_value_common.LocationSource'(0) -> 'UNKNOWN';
'enum_symbol_by_value_common.LocationSource'(1) -> 'GPS';
'enum_symbol_by_value_common.LocationSource'(2) -> 'CONFIG';
'enum_symbol_by_value_common.LocationSource'(3) -> 'GEO_RESOLVER_TDOA';
'enum_symbol_by_value_common.LocationSource'(4) -> 'GEO_RESOLVER_RSSI';
'enum_symbol_by_value_common.LocationSource'(5) -> 'GEO_RESOLVER_GNSS';
'enum_symbol_by_value_common.LocationSource'(6) -> 'GEO_RESOLVER_WIFI'.

'enum_value_by_symbol_common.LocationSource'('UNKNOWN') -> 0;
'enum_value_by_symbol_common.LocationSource'('GPS') -> 1;
'enum_value_by_symbol_common.LocationSource'('CONFIG') -> 2;
'enum_value_by_symbol_common.LocationSource'('GEO_RESOLVER_TDOA') -> 3;
'enum_value_by_symbol_common.LocationSource'('GEO_RESOLVER_RSSI') -> 4;
'enum_value_by_symbol_common.LocationSource'('GEO_RESOLVER_GNSS') -> 5;
'enum_value_by_symbol_common.LocationSource'('GEO_RESOLVER_WIFI') -> 6.

get_service_names() -> [].

get_service_def(_) -> error.

get_rpc_names(_) -> error.

find_rpc_def(_, _) -> error.

-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) -> erlang:error({no_such_rpc, ServiceName, RpcName}).

%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).

%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).

%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).

%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).

fqbin_to_msg_name(<<"common.KeyEnvelope">>) -> 'common.KeyEnvelope';
fqbin_to_msg_name(<<"common.Location">>) -> 'common.Location';
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).

msg_name_to_fqbin('common.KeyEnvelope') -> <<"common.KeyEnvelope">>;
msg_name_to_fqbin('common.Location') -> <<"common.Location">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).

fqbin_to_enum_name(<<"common.Modulation">>) -> 'common.Modulation';
fqbin_to_enum_name(<<"common.Region">>) -> 'common.Region';
fqbin_to_enum_name(<<"common.MType">>) -> 'common.MType';
fqbin_to_enum_name(<<"common.LocationSource">>) -> 'common.LocationSource';
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).

enum_name_to_fqbin('common.Modulation') -> <<"common.Modulation">>;
enum_name_to_fqbin('common.Region') -> <<"common.Region">>;
enum_name_to_fqbin('common.MType') -> <<"common.MType">>;
enum_name_to_fqbin('common.LocationSource') -> <<"common.LocationSource">>;
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).

get_package_name() -> common.

%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> true.

source_basename() -> "common.proto".

%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["common.proto"].

%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["common"].

get_msg_containment("common") -> ['common.KeyEnvelope', 'common.Location'];
get_msg_containment(P) -> error({gpb_error, {badproto, P}}).

get_pkg_containment("common") -> common;
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).

get_service_containment("common") -> [];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).

get_rpc_containment("common") -> [];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).

get_enum_containment("common") ->
    ['common.LocationSource', 'common.MType', 'common.Modulation', 'common.Region'];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).

get_proto_by_msg_name_as_fqbin(<<"common.KeyEnvelope">>) -> "common";
get_proto_by_msg_name_as_fqbin(<<"common.Location">>) -> "common";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).

-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).

get_proto_by_enum_name_as_fqbin(<<"common.MType">>) -> "common";
get_proto_by_enum_name_as_fqbin(<<"common.LocationSource">>) -> "common";
get_proto_by_enum_name_as_fqbin(<<"common.Region">>) -> "common";
get_proto_by_enum_name_as_fqbin(<<"common.Modulation">>) -> "common";
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).

get_protos_by_pkg_name_as_fqbin(<<"common">>) -> ["common"];
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).

gpb_version_as_string() ->
    "4.17.0".

gpb_version_as_list() ->
    [4, 17, 0].
