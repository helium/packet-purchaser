%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.17.0
-module(geo).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_gw.DownlinkTiming'/1, 'enum_value_by_symbol_gw.DownlinkTiming'/1]).
-export([
    'enum_symbol_by_value_gw.FineTimestampType'/1,
    'enum_value_by_symbol_gw.FineTimestampType'/1
]).
-export(['enum_symbol_by_value_gw.CRCStatus'/1, 'enum_value_by_symbol_gw.CRCStatus'/1]).
-export(['enum_symbol_by_value_gw.TxAckStatus'/1, 'enum_value_by_symbol_gw.TxAckStatus'/1]).
-export(['enum_symbol_by_value_gw.ConnState.State'/1, 'enum_value_by_symbol_gw.ConnState.State'/1]).
-export(['enum_symbol_by_value_common.Modulation'/1, 'enum_value_by_symbol_common.Modulation'/1]).
-export(['enum_symbol_by_value_common.Region'/1, 'enum_value_by_symbol_common.Region'/1]).
-export(['enum_symbol_by_value_common.MType'/1, 'enum_value_by_symbol_common.MType'/1]).
-export([
    'enum_symbol_by_value_common.LocationSource'/1,
    'enum_value_by_symbol_common.LocationSource'/1
]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("geo.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'gw.DownlinkTiming'() :: 'IMMEDIATELY' | 'DELAY' | 'GPS_EPOCH'.
-type 'gw.FineTimestampType'() :: 'NONE' | 'ENCRYPTED' | 'PLAIN'.
-type 'gw.CRCStatus'() :: 'NO_CRC' | 'BAD_CRC' | 'CRC_OK'.
-type 'gw.TxAckStatus'() ::
    'IGNORED'
    | 'OK'
    | 'TOO_LATE'
    | 'TOO_EARLY'
    | 'COLLISION_PACKET'
    | 'COLLISION_BEACON'
    | 'TX_FREQ'
    | 'TX_POWER'
    | 'GPS_UNLOCKED'
    | 'QUEUE_FULL'
    | 'INTERNAL_ERROR'.
-type 'gw.ConnState.State'() :: 'OFFLINE' | 'ONLINE'.
-type 'common.Modulation'() :: 'LORA' | 'FSK'.
-type 'common.Region'() ::
    'EU868'
    | 'US915'
    | 'CN779'
    | 'EU433'
    | 'AU915'
    | 'CN470'
    | 'AS923'
    | 'KR920'
    | 'IN865'
    | 'RU864'.
-type 'common.MType'() ::
    'JoinRequest'
    | 'JoinAccept'
    | 'UnconfirmedDataUp'
    | 'UnconfirmedDataDown'
    | 'ConfirmedDataUp'
    | 'ConfirmedDataDown'
    | 'RejoinRequest'
    | 'Proprietary'.
-type 'common.LocationSource'() ::
    'UNKNOWN'
    | 'GPS'
    | 'CONFIG'
    | 'GEO_RESOLVER_TDOA'
    | 'GEO_RESOLVER_RSSI'
    | 'GEO_RESOLVER_GNSS'
    | 'GEO_RESOLVER_WIFI'.
-export_type([
    'gw.DownlinkTiming'/0,
    'gw.FineTimestampType'/0,
    'gw.CRCStatus'/0,
    'gw.TxAckStatus'/0,
    'gw.ConnState.State'/0,
    'common.Modulation'/0,
    'common.Region'/0,
    'common.MType'/0,
    'common.LocationSource'/0
]).

%% message types
-type 'geo.ResolveResult'() :: #'geo.ResolveResult'{}.

-type 'geo.FrameRXInfo'() :: #'geo.FrameRXInfo'{}.

-type 'geo.ResolveTDOARequest'() :: #'geo.ResolveTDOARequest'{}.

-type 'geo.ResolveMultiFrameTDOARequest'() :: #'geo.ResolveMultiFrameTDOARequest'{}.

-type 'geo.ResolveTDOAResponse'() :: #'geo.ResolveTDOAResponse'{}.

-type 'geo.ResolveMultiFrameTDOAResponse'() :: #'geo.ResolveMultiFrameTDOAResponse'{}.

-type 'gw.UplinkTXInfo'() :: #'gw.UplinkTXInfo'{}.

-type 'gw.LoRaModulationInfo'() :: #'gw.LoRaModulationInfo'{}.

-type 'gw.FSKModulationInfo'() :: #'gw.FSKModulationInfo'{}.

-type 'gw.EncryptedFineTimestamp'() :: #'gw.EncryptedFineTimestamp'{}.

-type 'gw.PlainFineTimestamp'() :: #'gw.PlainFineTimestamp'{}.

-type 'gw.GatewayStats'() :: #'gw.GatewayStats'{}.

-type 'gw.UplinkRXInfo'() :: #'gw.UplinkRXInfo'{}.

-type 'gw.DownlinkTXInfo'() :: #'gw.DownlinkTXInfo'{}.

-type 'gw.ImmediatelyTimingInfo'() :: #'gw.ImmediatelyTimingInfo'{}.

-type 'gw.DelayTimingInfo'() :: #'gw.DelayTimingInfo'{}.

-type 'gw.GPSEpochTimingInfo'() :: #'gw.GPSEpochTimingInfo'{}.

-type 'gw.UplinkFrame'() :: #'gw.UplinkFrame'{}.

-type 'gw.UplinkFrameSet'() :: #'gw.UplinkFrameSet'{}.

-type 'gw.DownlinkFrame'() :: #'gw.DownlinkFrame'{}.

-type 'gw.DownlinkFrameItem'() :: #'gw.DownlinkFrameItem'{}.

-type 'gw.DownlinkTXAck'() :: #'gw.DownlinkTXAck'{}.

-type 'gw.DownlinkTXAckItem'() :: #'gw.DownlinkTXAckItem'{}.

-type 'gw.GatewayConfiguration'() :: #'gw.GatewayConfiguration'{}.

-type 'gw.ChannelConfiguration'() :: #'gw.ChannelConfiguration'{}.

-type 'gw.LoRaModulationConfig'() :: #'gw.LoRaModulationConfig'{}.

-type 'gw.FSKModulationConfig'() :: #'gw.FSKModulationConfig'{}.

-type 'gw.GatewayCommandExecRequest'() :: #'gw.GatewayCommandExecRequest'{}.

-type 'gw.GatewayCommandExecResponse'() :: #'gw.GatewayCommandExecResponse'{}.

-type 'gw.RawPacketForwarderEvent'() :: #'gw.RawPacketForwarderEvent'{}.

-type 'gw.RawPacketForwarderCommand'() :: #'gw.RawPacketForwarderCommand'{}.

-type 'gw.ConnState'() :: #'gw.ConnState'{}.

-type 'common.KeyEnvelope'() :: #'common.KeyEnvelope'{}.

-type 'common.Location'() :: #'common.Location'{}.

-type 'google.protobuf.Timestamp'() :: #'google.protobuf.Timestamp'{}.

-type 'google.protobuf.Duration'() :: #'google.protobuf.Duration'{}.

-export_type([
    'geo.ResolveResult'/0,
    'geo.FrameRXInfo'/0,
    'geo.ResolveTDOARequest'/0,
    'geo.ResolveMultiFrameTDOARequest'/0,
    'geo.ResolveTDOAResponse'/0,
    'geo.ResolveMultiFrameTDOAResponse'/0,
    'gw.UplinkTXInfo'/0,
    'gw.LoRaModulationInfo'/0,
    'gw.FSKModulationInfo'/0,
    'gw.EncryptedFineTimestamp'/0,
    'gw.PlainFineTimestamp'/0,
    'gw.GatewayStats'/0,
    'gw.UplinkRXInfo'/0,
    'gw.DownlinkTXInfo'/0,
    'gw.ImmediatelyTimingInfo'/0,
    'gw.DelayTimingInfo'/0,
    'gw.GPSEpochTimingInfo'/0,
    'gw.UplinkFrame'/0,
    'gw.UplinkFrameSet'/0,
    'gw.DownlinkFrame'/0,
    'gw.DownlinkFrameItem'/0,
    'gw.DownlinkTXAck'/0,
    'gw.DownlinkTXAckItem'/0,
    'gw.GatewayConfiguration'/0,
    'gw.ChannelConfiguration'/0,
    'gw.LoRaModulationConfig'/0,
    'gw.FSKModulationConfig'/0,
    'gw.GatewayCommandExecRequest'/0,
    'gw.GatewayCommandExecResponse'/0,
    'gw.RawPacketForwarderEvent'/0,
    'gw.RawPacketForwarderCommand'/0,
    'gw.ConnState'/0,
    'common.KeyEnvelope'/0,
    'common.Location'/0,
    'google.protobuf.Timestamp'/0,
    'google.protobuf.Duration'/0
]).
-type '$msg_name'() ::
    'geo.ResolveResult'
    | 'geo.FrameRXInfo'
    | 'geo.ResolveTDOARequest'
    | 'geo.ResolveMultiFrameTDOARequest'
    | 'geo.ResolveTDOAResponse'
    | 'geo.ResolveMultiFrameTDOAResponse'
    | 'gw.UplinkTXInfo'
    | 'gw.LoRaModulationInfo'
    | 'gw.FSKModulationInfo'
    | 'gw.EncryptedFineTimestamp'
    | 'gw.PlainFineTimestamp'
    | 'gw.GatewayStats'
    | 'gw.UplinkRXInfo'
    | 'gw.DownlinkTXInfo'
    | 'gw.ImmediatelyTimingInfo'
    | 'gw.DelayTimingInfo'
    | 'gw.GPSEpochTimingInfo'
    | 'gw.UplinkFrame'
    | 'gw.UplinkFrameSet'
    | 'gw.DownlinkFrame'
    | 'gw.DownlinkFrameItem'
    | 'gw.DownlinkTXAck'
    | 'gw.DownlinkTXAckItem'
    | 'gw.GatewayConfiguration'
    | 'gw.ChannelConfiguration'
    | 'gw.LoRaModulationConfig'
    | 'gw.FSKModulationConfig'
    | 'gw.GatewayCommandExecRequest'
    | 'gw.GatewayCommandExecResponse'
    | 'gw.RawPacketForwarderEvent'
    | 'gw.RawPacketForwarderCommand'
    | 'gw.ConnState'
    | 'common.KeyEnvelope'
    | 'common.Location'
    | 'google.protobuf.Timestamp'
    | 'google.protobuf.Duration'.
-type '$msg'() ::
    'geo.ResolveResult'()
    | 'geo.FrameRXInfo'()
    | 'geo.ResolveTDOARequest'()
    | 'geo.ResolveMultiFrameTDOARequest'()
    | 'geo.ResolveTDOAResponse'()
    | 'geo.ResolveMultiFrameTDOAResponse'()
    | 'gw.UplinkTXInfo'()
    | 'gw.LoRaModulationInfo'()
    | 'gw.FSKModulationInfo'()
    | 'gw.EncryptedFineTimestamp'()
    | 'gw.PlainFineTimestamp'()
    | 'gw.GatewayStats'()
    | 'gw.UplinkRXInfo'()
    | 'gw.DownlinkTXInfo'()
    | 'gw.ImmediatelyTimingInfo'()
    | 'gw.DelayTimingInfo'()
    | 'gw.GPSEpochTimingInfo'()
    | 'gw.UplinkFrame'()
    | 'gw.UplinkFrameSet'()
    | 'gw.DownlinkFrame'()
    | 'gw.DownlinkFrameItem'()
    | 'gw.DownlinkTXAck'()
    | 'gw.DownlinkTXAckItem'()
    | 'gw.GatewayConfiguration'()
    | 'gw.ChannelConfiguration'()
    | 'gw.LoRaModulationConfig'()
    | 'gw.FSKModulationConfig'()
    | 'gw.GatewayCommandExecRequest'()
    | 'gw.GatewayCommandExecResponse'()
    | 'gw.RawPacketForwarderEvent'()
    | 'gw.RawPacketForwarderCommand'()
    | 'gw.ConnState'()
    | 'common.KeyEnvelope'()
    | 'common.Location'()
    | 'google.protobuf.Timestamp'()
    | 'google.protobuf.Duration'().
-export_type(['$msg_name'/0, '$msg'/0]).

-record('map<string,string>', {key, value}).
-spec encode_msg('$msg'()) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 -> encode_msg(Msg, element(1, Msg), []).

-spec encode_msg('$msg'(), '$msg_name'() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts) when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg('$msg'(), '$msg_name'(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'geo.ResolveResult' ->
            'encode_msg_geo.ResolveResult'(id(Msg, TrUserData), TrUserData);
        'geo.FrameRXInfo' ->
            'encode_msg_geo.FrameRXInfo'(id(Msg, TrUserData), TrUserData);
        'geo.ResolveTDOARequest' ->
            'encode_msg_geo.ResolveTDOARequest'(id(Msg, TrUserData), TrUserData);
        'geo.ResolveMultiFrameTDOARequest' ->
            'encode_msg_geo.ResolveMultiFrameTDOARequest'(id(Msg, TrUserData), TrUserData);
        'geo.ResolveTDOAResponse' ->
            'encode_msg_geo.ResolveTDOAResponse'(id(Msg, TrUserData), TrUserData);
        'geo.ResolveMultiFrameTDOAResponse' ->
            'encode_msg_geo.ResolveMultiFrameTDOAResponse'(id(Msg, TrUserData), TrUserData);
        'gw.UplinkTXInfo' ->
            'encode_msg_gw.UplinkTXInfo'(id(Msg, TrUserData), TrUserData);
        'gw.LoRaModulationInfo' ->
            'encode_msg_gw.LoRaModulationInfo'(id(Msg, TrUserData), TrUserData);
        'gw.FSKModulationInfo' ->
            'encode_msg_gw.FSKModulationInfo'(id(Msg, TrUserData), TrUserData);
        'gw.EncryptedFineTimestamp' ->
            'encode_msg_gw.EncryptedFineTimestamp'(id(Msg, TrUserData), TrUserData);
        'gw.PlainFineTimestamp' ->
            'encode_msg_gw.PlainFineTimestamp'(id(Msg, TrUserData), TrUserData);
        'gw.GatewayStats' ->
            'encode_msg_gw.GatewayStats'(id(Msg, TrUserData), TrUserData);
        'gw.UplinkRXInfo' ->
            'encode_msg_gw.UplinkRXInfo'(id(Msg, TrUserData), TrUserData);
        'gw.DownlinkTXInfo' ->
            'encode_msg_gw.DownlinkTXInfo'(id(Msg, TrUserData), TrUserData);
        'gw.ImmediatelyTimingInfo' ->
            'encode_msg_gw.ImmediatelyTimingInfo'(id(Msg, TrUserData), TrUserData);
        'gw.DelayTimingInfo' ->
            'encode_msg_gw.DelayTimingInfo'(id(Msg, TrUserData), TrUserData);
        'gw.GPSEpochTimingInfo' ->
            'encode_msg_gw.GPSEpochTimingInfo'(id(Msg, TrUserData), TrUserData);
        'gw.UplinkFrame' ->
            'encode_msg_gw.UplinkFrame'(id(Msg, TrUserData), TrUserData);
        'gw.UplinkFrameSet' ->
            'encode_msg_gw.UplinkFrameSet'(id(Msg, TrUserData), TrUserData);
        'gw.DownlinkFrame' ->
            'encode_msg_gw.DownlinkFrame'(id(Msg, TrUserData), TrUserData);
        'gw.DownlinkFrameItem' ->
            'encode_msg_gw.DownlinkFrameItem'(id(Msg, TrUserData), TrUserData);
        'gw.DownlinkTXAck' ->
            'encode_msg_gw.DownlinkTXAck'(id(Msg, TrUserData), TrUserData);
        'gw.DownlinkTXAckItem' ->
            'encode_msg_gw.DownlinkTXAckItem'(id(Msg, TrUserData), TrUserData);
        'gw.GatewayConfiguration' ->
            'encode_msg_gw.GatewayConfiguration'(id(Msg, TrUserData), TrUserData);
        'gw.ChannelConfiguration' ->
            'encode_msg_gw.ChannelConfiguration'(id(Msg, TrUserData), TrUserData);
        'gw.LoRaModulationConfig' ->
            'encode_msg_gw.LoRaModulationConfig'(id(Msg, TrUserData), TrUserData);
        'gw.FSKModulationConfig' ->
            'encode_msg_gw.FSKModulationConfig'(id(Msg, TrUserData), TrUserData);
        'gw.GatewayCommandExecRequest' ->
            'encode_msg_gw.GatewayCommandExecRequest'(id(Msg, TrUserData), TrUserData);
        'gw.GatewayCommandExecResponse' ->
            'encode_msg_gw.GatewayCommandExecResponse'(id(Msg, TrUserData), TrUserData);
        'gw.RawPacketForwarderEvent' ->
            'encode_msg_gw.RawPacketForwarderEvent'(id(Msg, TrUserData), TrUserData);
        'gw.RawPacketForwarderCommand' ->
            'encode_msg_gw.RawPacketForwarderCommand'(id(Msg, TrUserData), TrUserData);
        'gw.ConnState' ->
            'encode_msg_gw.ConnState'(id(Msg, TrUserData), TrUserData);
        'common.KeyEnvelope' ->
            'encode_msg_common.KeyEnvelope'(id(Msg, TrUserData), TrUserData);
        'common.Location' ->
            'encode_msg_common.Location'(id(Msg, TrUserData), TrUserData);
        'google.protobuf.Timestamp' ->
            'encode_msg_google.protobuf.Timestamp'(id(Msg, TrUserData), TrUserData);
        'google.protobuf.Duration' ->
            'encode_msg_google.protobuf.Duration'(id(Msg, TrUserData), TrUserData)
    end.

'encode_msg_geo.ResolveResult'(Msg, TrUserData) ->
    'encode_msg_geo.ResolveResult'(Msg, <<>>, TrUserData).

'encode_msg_geo.ResolveResult'(#'geo.ResolveResult'{location = F1}, Bin, TrUserData) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                if
                    TrF1 =:= undefined ->
                        Bin;
                    true ->
                        'e_mfield_geo.ResolveResult_location'(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end
    end.

'encode_msg_geo.FrameRXInfo'(Msg, TrUserData) ->
    'encode_msg_geo.FrameRXInfo'(Msg, <<>>, TrUserData).

'encode_msg_geo.FrameRXInfo'(#'geo.FrameRXInfo'{rx_info = F1}, Bin, TrUserData) ->
    begin
        TrF1 = id(F1, TrUserData),
        if
            TrF1 == [] -> Bin;
            true -> 'e_field_geo.FrameRXInfo_rx_info'(TrF1, Bin, TrUserData)
        end
    end.

'encode_msg_geo.ResolveTDOARequest'(Msg, TrUserData) ->
    'encode_msg_geo.ResolveTDOARequest'(Msg, <<>>, TrUserData).

'encode_msg_geo.ResolveTDOARequest'(
    #'geo.ResolveTDOARequest'{dev_eui = F1, frame_rx_info = F2, device_reference_altitude = F3},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= undefined ->
                            B1;
                        true ->
                            'e_mfield_geo.ResolveTDOARequest_frame_rx_info'(
                                TrF2,
                                <<B1/binary, 18>>,
                                TrUserData
                            )
                    end
                end
        end,
    if
        F3 == undefined ->
            B2;
        true ->
            begin
                TrF3 = id(F3, TrUserData),
                if
                    TrF3 =:= 0.0 -> B2;
                    true -> e_type_double(TrF3, <<B2/binary, 25>>, TrUserData)
                end
            end
    end.

'encode_msg_geo.ResolveMultiFrameTDOARequest'(Msg, TrUserData) ->
    'encode_msg_geo.ResolveMultiFrameTDOARequest'(Msg, <<>>, TrUserData).

'encode_msg_geo.ResolveMultiFrameTDOARequest'(
    #'geo.ResolveMultiFrameTDOARequest'{
        dev_eui = F1,
        frame_rx_info_set = F2,
        device_reference_altitude = F3
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    B2 = begin
        TrF2 = id(F2, TrUserData),
        if
            TrF2 == [] ->
                B1;
            true ->
                'e_field_geo.ResolveMultiFrameTDOARequest_frame_rx_info_set'(TrF2, B1, TrUserData)
        end
    end,
    if
        F3 == undefined ->
            B2;
        true ->
            begin
                TrF3 = id(F3, TrUserData),
                if
                    TrF3 =:= 0.0 -> B2;
                    true -> e_type_double(TrF3, <<B2/binary, 25>>, TrUserData)
                end
            end
    end.

'encode_msg_geo.ResolveTDOAResponse'(Msg, TrUserData) ->
    'encode_msg_geo.ResolveTDOAResponse'(Msg, <<>>, TrUserData).

'encode_msg_geo.ResolveTDOAResponse'(#'geo.ResolveTDOAResponse'{result = F1}, Bin, TrUserData) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                if
                    TrF1 =:= undefined ->
                        Bin;
                    true ->
                        'e_mfield_geo.ResolveTDOAResponse_result'(
                            TrF1,
                            <<Bin/binary, 10>>,
                            TrUserData
                        )
                end
            end
    end.

'encode_msg_geo.ResolveMultiFrameTDOAResponse'(Msg, TrUserData) ->
    'encode_msg_geo.ResolveMultiFrameTDOAResponse'(Msg, <<>>, TrUserData).

'encode_msg_geo.ResolveMultiFrameTDOAResponse'(
    #'geo.ResolveMultiFrameTDOAResponse'{result = F1},
    Bin,
    TrUserData
) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                if
                    TrF1 =:= undefined ->
                        Bin;
                    true ->
                        'e_mfield_geo.ResolveMultiFrameTDOAResponse_result'(
                            TrF1,
                            <<Bin/binary, 10>>,
                            TrUserData
                        )
                end
            end
    end.

'encode_msg_gw.UplinkTXInfo'(Msg, TrUserData) ->
    'encode_msg_gw.UplinkTXInfo'(Msg, <<>>, TrUserData).

'encode_msg_gw.UplinkTXInfo'(
    #'gw.UplinkTXInfo'{frequency = F1, modulation = F2, modulation_info = F3},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= 'LORA'; TrF2 =:= 0 -> B1;
                        true -> 'e_enum_common.Modulation'(TrF2, <<B1/binary, 16>>, TrUserData)
                    end
                end
        end,
    if
        F3 =:= undefined ->
            B2;
        true ->
            case id(F3, TrUserData) of
                {lora_modulation_info, TF3} ->
                    begin
                        TrTF3 = id(TF3, TrUserData),
                        'e_mfield_gw.UplinkTXInfo_lora_modulation_info'(
                            TrTF3,
                            <<B2/binary, 26>>,
                            TrUserData
                        )
                    end;
                {fsk_modulation_info, TF3} ->
                    begin
                        TrTF3 = id(TF3, TrUserData),
                        'e_mfield_gw.UplinkTXInfo_fsk_modulation_info'(
                            TrTF3,
                            <<B2/binary, 34>>,
                            TrUserData
                        )
                    end
            end
    end.

'encode_msg_gw.LoRaModulationInfo'(Msg, TrUserData) ->
    'encode_msg_gw.LoRaModulationInfo'(Msg, <<>>, TrUserData).

'encode_msg_gw.LoRaModulationInfo'(
    #'gw.LoRaModulationInfo'{
        bandwidth = F1,
        spreading_factor = F2,
        code_rate = F3,
        polarization_inversion = F4
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= 0 -> B1;
                        true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                    end
                end
        end,
    B3 =
        if
            F3 == undefined ->
                B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    case is_empty_string(TrF3) of
                        true -> B2;
                        false -> e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
                    end
                end
        end,
    if
        F4 == undefined ->
            B3;
        true ->
            begin
                TrF4 = id(F4, TrUserData),
                if
                    TrF4 =:= false -> B3;
                    true -> e_type_bool(TrF4, <<B3/binary, 32>>, TrUserData)
                end
            end
    end.

'encode_msg_gw.FSKModulationInfo'(Msg, TrUserData) ->
    'encode_msg_gw.FSKModulationInfo'(Msg, <<>>, TrUserData).

'encode_msg_gw.FSKModulationInfo'(
    #'gw.FSKModulationInfo'{frequency_deviation = F1, datarate = F2},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
        end,
    if
        F2 == undefined ->
            B1;
        true ->
            begin
                TrF2 = id(F2, TrUserData),
                if
                    TrF2 =:= 0 -> B1;
                    true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                end
            end
    end.

'encode_msg_gw.EncryptedFineTimestamp'(Msg, TrUserData) ->
    'encode_msg_gw.EncryptedFineTimestamp'(Msg, <<>>, TrUserData).

'encode_msg_gw.EncryptedFineTimestamp'(
    #'gw.EncryptedFineTimestamp'{aes_key_index = F1, encrypted_ns = F2, fpga_id = F3},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
        end,
    if
        F3 == undefined ->
            B2;
        true ->
            begin
                TrF3 = id(F3, TrUserData),
                case iolist_size(TrF3) of
                    0 -> B2;
                    _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
                end
            end
    end.

'encode_msg_gw.PlainFineTimestamp'(Msg, TrUserData) ->
    'encode_msg_gw.PlainFineTimestamp'(Msg, <<>>, TrUserData).

'encode_msg_gw.PlainFineTimestamp'(#'gw.PlainFineTimestamp'{time = F1}, Bin, TrUserData) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                if
                    TrF1 =:= undefined ->
                        Bin;
                    true ->
                        'e_mfield_gw.PlainFineTimestamp_time'(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end
    end.

'encode_msg_gw.GatewayStats'(Msg, TrUserData) ->
    'encode_msg_gw.GatewayStats'(Msg, <<>>, TrUserData).

'encode_msg_gw.GatewayStats'(
    #'gw.GatewayStats'{
        gateway_id = F1,
        ip = F2,
        time = F3,
        location = F4,
        config_version = F5,
        rx_packets_received = F6,
        rx_packets_received_ok = F7,
        tx_packets_received = F8,
        tx_packets_emitted = F9,
        meta_data = F10,
        stats_id = F11
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case is_empty_string(TrF2) of
                        true -> B1;
                        false -> e_type_string(TrF2, <<B1/binary, 74>>, TrUserData)
                    end
                end
        end,
    B3 =
        if
            F3 == undefined ->
                B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    if
                        TrF3 =:= undefined -> B2;
                        true -> 'e_mfield_gw.GatewayStats_time'(TrF3, <<B2/binary, 18>>, TrUserData)
                    end
                end
        end,
    B4 =
        if
            F4 == undefined ->
                B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    if
                        TrF4 =:= undefined ->
                            B3;
                        true ->
                            'e_mfield_gw.GatewayStats_location'(TrF4, <<B3/binary, 26>>, TrUserData)
                    end
                end
        end,
    B5 =
        if
            F5 == undefined ->
                B4;
            true ->
                begin
                    TrF5 = id(F5, TrUserData),
                    case is_empty_string(TrF5) of
                        true -> B4;
                        false -> e_type_string(TrF5, <<B4/binary, 34>>, TrUserData)
                    end
                end
        end,
    B6 =
        if
            F6 == undefined ->
                B5;
            true ->
                begin
                    TrF6 = id(F6, TrUserData),
                    if
                        TrF6 =:= 0 -> B5;
                        true -> e_varint(TrF6, <<B5/binary, 40>>, TrUserData)
                    end
                end
        end,
    B7 =
        if
            F7 == undefined ->
                B6;
            true ->
                begin
                    TrF7 = id(F7, TrUserData),
                    if
                        TrF7 =:= 0 -> B6;
                        true -> e_varint(TrF7, <<B6/binary, 48>>, TrUserData)
                    end
                end
        end,
    B8 =
        if
            F8 == undefined ->
                B7;
            true ->
                begin
                    TrF8 = id(F8, TrUserData),
                    if
                        TrF8 =:= 0 -> B7;
                        true -> e_varint(TrF8, <<B7/binary, 56>>, TrUserData)
                    end
                end
        end,
    B9 =
        if
            F9 == undefined ->
                B8;
            true ->
                begin
                    TrF9 = id(F9, TrUserData),
                    if
                        TrF9 =:= 0 -> B8;
                        true -> e_varint(TrF9, <<B8/binary, 64>>, TrUserData)
                    end
                end
        end,
    B10 = begin
        TrF10 = id(F10, TrUserData),
        if
            TrF10 == [] -> B9;
            true -> 'e_field_gw.GatewayStats_meta_data'(TrF10, B9, TrUserData)
        end
    end,
    if
        F11 == undefined ->
            B10;
        true ->
            begin
                TrF11 = id(F11, TrUserData),
                case iolist_size(TrF11) of
                    0 -> B10;
                    _ -> e_type_bytes(TrF11, <<B10/binary, 90>>, TrUserData)
                end
            end
    end.

'encode_msg_gw.UplinkRXInfo'(Msg, TrUserData) ->
    'encode_msg_gw.UplinkRXInfo'(Msg, <<>>, TrUserData).

'encode_msg_gw.UplinkRXInfo'(
    #'gw.UplinkRXInfo'{
        gateway_id = F1,
        time = F2,
        time_since_gps_epoch = F3,
        rssi = F4,
        lora_snr = F5,
        channel = F6,
        rf_chain = F7,
        board = F8,
        antenna = F9,
        location = F10,
        fine_timestamp_type = F11,
        fine_timestamp = F12,
        context = F13,
        uplink_id = F14,
        crc_status = F15
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= undefined -> B1;
                        true -> 'e_mfield_gw.UplinkRXInfo_time'(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
        end,
    B3 =
        if
            F3 == undefined ->
                B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    if
                        TrF3 =:= undefined ->
                            B2;
                        true ->
                            'e_mfield_gw.UplinkRXInfo_time_since_gps_epoch'(
                                TrF3,
                                <<B2/binary, 26>>,
                                TrUserData
                            )
                    end
                end
        end,
    B4 =
        if
            F4 == undefined ->
                B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    if
                        TrF4 =:= 0 -> B3;
                        true -> e_type_int32(TrF4, <<B3/binary, 40>>, TrUserData)
                    end
                end
        end,
    B5 =
        if
            F5 == undefined ->
                B4;
            true ->
                begin
                    TrF5 = id(F5, TrUserData),
                    if
                        TrF5 =:= 0.0 -> B4;
                        true -> e_type_double(TrF5, <<B4/binary, 49>>, TrUserData)
                    end
                end
        end,
    B6 =
        if
            F6 == undefined ->
                B5;
            true ->
                begin
                    TrF6 = id(F6, TrUserData),
                    if
                        TrF6 =:= 0 -> B5;
                        true -> e_varint(TrF6, <<B5/binary, 56>>, TrUserData)
                    end
                end
        end,
    B7 =
        if
            F7 == undefined ->
                B6;
            true ->
                begin
                    TrF7 = id(F7, TrUserData),
                    if
                        TrF7 =:= 0 -> B6;
                        true -> e_varint(TrF7, <<B6/binary, 64>>, TrUserData)
                    end
                end
        end,
    B8 =
        if
            F8 == undefined ->
                B7;
            true ->
                begin
                    TrF8 = id(F8, TrUserData),
                    if
                        TrF8 =:= 0 -> B7;
                        true -> e_varint(TrF8, <<B7/binary, 72>>, TrUserData)
                    end
                end
        end,
    B9 =
        if
            F9 == undefined ->
                B8;
            true ->
                begin
                    TrF9 = id(F9, TrUserData),
                    if
                        TrF9 =:= 0 -> B8;
                        true -> e_varint(TrF9, <<B8/binary, 80>>, TrUserData)
                    end
                end
        end,
    B10 =
        if
            F10 == undefined ->
                B9;
            true ->
                begin
                    TrF10 = id(F10, TrUserData),
                    if
                        TrF10 =:= undefined ->
                            B9;
                        true ->
                            'e_mfield_gw.UplinkRXInfo_location'(
                                TrF10,
                                <<B9/binary, 90>>,
                                TrUserData
                            )
                    end
                end
        end,
    B11 =
        if
            F11 == undefined ->
                B10;
            true ->
                begin
                    TrF11 = id(F11, TrUserData),
                    if
                        TrF11 =:= 'NONE'; TrF11 =:= 0 -> B10;
                        true -> 'e_enum_gw.FineTimestampType'(TrF11, <<B10/binary, 96>>, TrUserData)
                    end
                end
        end,
    B12 =
        if
            F12 =:= undefined ->
                B11;
            true ->
                case id(F12, TrUserData) of
                    {encrypted_fine_timestamp, TF12} ->
                        begin
                            TrTF12 = id(TF12, TrUserData),
                            'e_mfield_gw.UplinkRXInfo_encrypted_fine_timestamp'(
                                TrTF12,
                                <<B11/binary, 106>>,
                                TrUserData
                            )
                        end;
                    {plain_fine_timestamp, TF12} ->
                        begin
                            TrTF12 = id(TF12, TrUserData),
                            'e_mfield_gw.UplinkRXInfo_plain_fine_timestamp'(
                                TrTF12,
                                <<B11/binary, 114>>,
                                TrUserData
                            )
                        end
                end
        end,
    B13 =
        if
            F13 == undefined ->
                B12;
            true ->
                begin
                    TrF13 = id(F13, TrUserData),
                    case iolist_size(TrF13) of
                        0 -> B12;
                        _ -> e_type_bytes(TrF13, <<B12/binary, 122>>, TrUserData)
                    end
                end
        end,
    B14 =
        if
            F14 == undefined ->
                B13;
            true ->
                begin
                    TrF14 = id(F14, TrUserData),
                    case iolist_size(TrF14) of
                        0 -> B13;
                        _ -> e_type_bytes(TrF14, <<B13/binary, 130, 1>>, TrUserData)
                    end
                end
        end,
    if
        F15 == undefined ->
            B14;
        true ->
            begin
                TrF15 = id(F15, TrUserData),
                if
                    TrF15 =:= 'NO_CRC'; TrF15 =:= 0 -> B14;
                    true -> 'e_enum_gw.CRCStatus'(TrF15, <<B14/binary, 136, 1>>, TrUserData)
                end
            end
    end.

'encode_msg_gw.DownlinkTXInfo'(Msg, TrUserData) ->
    'encode_msg_gw.DownlinkTXInfo'(Msg, <<>>, TrUserData).

'encode_msg_gw.DownlinkTXInfo'(
    #'gw.DownlinkTXInfo'{
        gateway_id = F1,
        frequency = F2,
        power = F3,
        modulation = F4,
        modulation_info = F5,
        board = F6,
        antenna = F7,
        timing = F8,
        timing_info = F9,
        context = F10
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= 0 -> B1;
                        true -> e_varint(TrF2, <<B1/binary, 40>>, TrUserData)
                    end
                end
        end,
    B3 =
        if
            F3 == undefined ->
                B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    if
                        TrF3 =:= 0 -> B2;
                        true -> e_type_int32(TrF3, <<B2/binary, 48>>, TrUserData)
                    end
                end
        end,
    B4 =
        if
            F4 == undefined ->
                B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    if
                        TrF4 =:= 'LORA'; TrF4 =:= 0 -> B3;
                        true -> 'e_enum_common.Modulation'(TrF4, <<B3/binary, 56>>, TrUserData)
                    end
                end
        end,
    B5 =
        if
            F5 =:= undefined ->
                B4;
            true ->
                case id(F5, TrUserData) of
                    {lora_modulation_info, TF5} ->
                        begin
                            TrTF5 = id(TF5, TrUserData),
                            'e_mfield_gw.DownlinkTXInfo_lora_modulation_info'(
                                TrTF5,
                                <<B4/binary, 66>>,
                                TrUserData
                            )
                        end;
                    {fsk_modulation_info, TF5} ->
                        begin
                            TrTF5 = id(TF5, TrUserData),
                            'e_mfield_gw.DownlinkTXInfo_fsk_modulation_info'(
                                TrTF5,
                                <<B4/binary, 74>>,
                                TrUserData
                            )
                        end
                end
        end,
    B6 =
        if
            F6 == undefined ->
                B5;
            true ->
                begin
                    TrF6 = id(F6, TrUserData),
                    if
                        TrF6 =:= 0 -> B5;
                        true -> e_varint(TrF6, <<B5/binary, 80>>, TrUserData)
                    end
                end
        end,
    B7 =
        if
            F7 == undefined ->
                B6;
            true ->
                begin
                    TrF7 = id(F7, TrUserData),
                    if
                        TrF7 =:= 0 -> B6;
                        true -> e_varint(TrF7, <<B6/binary, 88>>, TrUserData)
                    end
                end
        end,
    B8 =
        if
            F8 == undefined ->
                B7;
            true ->
                begin
                    TrF8 = id(F8, TrUserData),
                    if
                        TrF8 =:= 'IMMEDIATELY'; TrF8 =:= 0 -> B7;
                        true -> 'e_enum_gw.DownlinkTiming'(TrF8, <<B7/binary, 96>>, TrUserData)
                    end
                end
        end,
    B9 =
        if
            F9 =:= undefined ->
                B8;
            true ->
                case id(F9, TrUserData) of
                    {immediately_timing_info, TF9} ->
                        begin
                            TrTF9 = id(TF9, TrUserData),
                            'e_mfield_gw.DownlinkTXInfo_immediately_timing_info'(
                                TrTF9,
                                <<B8/binary, 106>>,
                                TrUserData
                            )
                        end;
                    {delay_timing_info, TF9} ->
                        begin
                            TrTF9 = id(TF9, TrUserData),
                            'e_mfield_gw.DownlinkTXInfo_delay_timing_info'(
                                TrTF9,
                                <<B8/binary, 114>>,
                                TrUserData
                            )
                        end;
                    {gps_epoch_timing_info, TF9} ->
                        begin
                            TrTF9 = id(TF9, TrUserData),
                            'e_mfield_gw.DownlinkTXInfo_gps_epoch_timing_info'(
                                TrTF9,
                                <<B8/binary, 122>>,
                                TrUserData
                            )
                        end
                end
        end,
    if
        F10 == undefined ->
            B9;
        true ->
            begin
                TrF10 = id(F10, TrUserData),
                case iolist_size(TrF10) of
                    0 -> B9;
                    _ -> e_type_bytes(TrF10, <<B9/binary, 130, 1>>, TrUserData)
                end
            end
    end.

'encode_msg_gw.ImmediatelyTimingInfo'(_Msg, _TrUserData) -> <<>>.

'encode_msg_gw.DelayTimingInfo'(Msg, TrUserData) ->
    'encode_msg_gw.DelayTimingInfo'(Msg, <<>>, TrUserData).

'encode_msg_gw.DelayTimingInfo'(#'gw.DelayTimingInfo'{delay = F1}, Bin, TrUserData) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                if
                    TrF1 =:= undefined ->
                        Bin;
                    true ->
                        'e_mfield_gw.DelayTimingInfo_delay'(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end
    end.

'encode_msg_gw.GPSEpochTimingInfo'(Msg, TrUserData) ->
    'encode_msg_gw.GPSEpochTimingInfo'(Msg, <<>>, TrUserData).

'encode_msg_gw.GPSEpochTimingInfo'(
    #'gw.GPSEpochTimingInfo'{time_since_gps_epoch = F1},
    Bin,
    TrUserData
) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                if
                    TrF1 =:= undefined ->
                        Bin;
                    true ->
                        'e_mfield_gw.GPSEpochTimingInfo_time_since_gps_epoch'(
                            TrF1,
                            <<Bin/binary, 10>>,
                            TrUserData
                        )
                end
            end
    end.

'encode_msg_gw.UplinkFrame'(Msg, TrUserData) -> 'encode_msg_gw.UplinkFrame'(Msg, <<>>, TrUserData).

'encode_msg_gw.UplinkFrame'(
    #'gw.UplinkFrame'{phy_payload = F1, tx_info = F2, rx_info = F3},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= undefined ->
                            B1;
                        true ->
                            'e_mfield_gw.UplinkFrame_tx_info'(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
        end,
    if
        F3 == undefined ->
            B2;
        true ->
            begin
                TrF3 = id(F3, TrUserData),
                if
                    TrF3 =:= undefined -> B2;
                    true -> 'e_mfield_gw.UplinkFrame_rx_info'(TrF3, <<B2/binary, 26>>, TrUserData)
                end
            end
    end.

'encode_msg_gw.UplinkFrameSet'(Msg, TrUserData) ->
    'encode_msg_gw.UplinkFrameSet'(Msg, <<>>, TrUserData).

'encode_msg_gw.UplinkFrameSet'(
    #'gw.UplinkFrameSet'{phy_payload = F1, tx_info = F2, rx_info = F3},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= undefined ->
                            B1;
                        true ->
                            'e_mfield_gw.UplinkFrameSet_tx_info'(
                                TrF2,
                                <<B1/binary, 18>>,
                                TrUserData
                            )
                    end
                end
        end,
    begin
        TrF3 = id(F3, TrUserData),
        if
            TrF3 == [] -> B2;
            true -> 'e_field_gw.UplinkFrameSet_rx_info'(TrF3, B2, TrUserData)
        end
    end.

'encode_msg_gw.DownlinkFrame'(Msg, TrUserData) ->
    'encode_msg_gw.DownlinkFrame'(Msg, <<>>, TrUserData).

'encode_msg_gw.DownlinkFrame'(
    #'gw.DownlinkFrame'{
        phy_payload = F1,
        tx_info = F2,
        token = F3,
        downlink_id = F4,
        items = F5,
        gateway_id = F6
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= undefined ->
                            B1;
                        true ->
                            'e_mfield_gw.DownlinkFrame_tx_info'(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
        end,
    B3 =
        if
            F3 == undefined ->
                B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    if
                        TrF3 =:= 0 -> B2;
                        true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                    end
                end
        end,
    B4 =
        if
            F4 == undefined ->
                B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    case iolist_size(TrF4) of
                        0 -> B3;
                        _ -> e_type_bytes(TrF4, <<B3/binary, 34>>, TrUserData)
                    end
                end
        end,
    B5 = begin
        TrF5 = id(F5, TrUserData),
        if
            TrF5 == [] -> B4;
            true -> 'e_field_gw.DownlinkFrame_items'(TrF5, B4, TrUserData)
        end
    end,
    if
        F6 == undefined ->
            B5;
        true ->
            begin
                TrF6 = id(F6, TrUserData),
                case iolist_size(TrF6) of
                    0 -> B5;
                    _ -> e_type_bytes(TrF6, <<B5/binary, 50>>, TrUserData)
                end
            end
    end.

'encode_msg_gw.DownlinkFrameItem'(Msg, TrUserData) ->
    'encode_msg_gw.DownlinkFrameItem'(Msg, <<>>, TrUserData).

'encode_msg_gw.DownlinkFrameItem'(
    #'gw.DownlinkFrameItem'{phy_payload = F1, tx_info = F2},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    if
        F2 == undefined ->
            B1;
        true ->
            begin
                TrF2 = id(F2, TrUserData),
                if
                    TrF2 =:= undefined ->
                        B1;
                    true ->
                        'e_mfield_gw.DownlinkFrameItem_tx_info'(TrF2, <<B1/binary, 18>>, TrUserData)
                end
            end
    end.

'encode_msg_gw.DownlinkTXAck'(Msg, TrUserData) ->
    'encode_msg_gw.DownlinkTXAck'(Msg, <<>>, TrUserData).

'encode_msg_gw.DownlinkTXAck'(
    #'gw.DownlinkTXAck'{gateway_id = F1, token = F2, error = F3, downlink_id = F4, items = F5},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= 0 -> B1;
                        true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                    end
                end
        end,
    B3 =
        if
            F3 == undefined ->
                B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    case is_empty_string(TrF3) of
                        true -> B2;
                        false -> e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
                    end
                end
        end,
    B4 =
        if
            F4 == undefined ->
                B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    case iolist_size(TrF4) of
                        0 -> B3;
                        _ -> e_type_bytes(TrF4, <<B3/binary, 34>>, TrUserData)
                    end
                end
        end,
    begin
        TrF5 = id(F5, TrUserData),
        if
            TrF5 == [] -> B4;
            true -> 'e_field_gw.DownlinkTXAck_items'(TrF5, B4, TrUserData)
        end
    end.

'encode_msg_gw.DownlinkTXAckItem'(Msg, TrUserData) ->
    'encode_msg_gw.DownlinkTXAckItem'(Msg, <<>>, TrUserData).

'encode_msg_gw.DownlinkTXAckItem'(#'gw.DownlinkTXAckItem'{status = F1}, Bin, TrUserData) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                if
                    TrF1 =:= 'IGNORED'; TrF1 =:= 0 -> Bin;
                    true -> 'e_enum_gw.TxAckStatus'(TrF1, <<Bin/binary, 8>>, TrUserData)
                end
            end
    end.

'encode_msg_gw.GatewayConfiguration'(Msg, TrUserData) ->
    'encode_msg_gw.GatewayConfiguration'(Msg, <<>>, TrUserData).

'encode_msg_gw.GatewayConfiguration'(
    #'gw.GatewayConfiguration'{gateway_id = F1, version = F2, channels = F3, stats_interval = F4},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case is_empty_string(TrF2) of
                        true -> B1;
                        false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
        end,
    B3 = begin
        TrF3 = id(F3, TrUserData),
        if
            TrF3 == [] -> B2;
            true -> 'e_field_gw.GatewayConfiguration_channels'(TrF3, B2, TrUserData)
        end
    end,
    if
        F4 == undefined ->
            B3;
        true ->
            begin
                TrF4 = id(F4, TrUserData),
                if
                    TrF4 =:= undefined ->
                        B3;
                    true ->
                        'e_mfield_gw.GatewayConfiguration_stats_interval'(
                            TrF4,
                            <<B3/binary, 34>>,
                            TrUserData
                        )
                end
            end
    end.

'encode_msg_gw.ChannelConfiguration'(Msg, TrUserData) ->
    'encode_msg_gw.ChannelConfiguration'(Msg, <<>>, TrUserData).

'encode_msg_gw.ChannelConfiguration'(
    #'gw.ChannelConfiguration'{
        frequency = F1,
        modulation = F2,
        modulation_config = F3,
        board = F4,
        demodulator = F5
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= 'LORA'; TrF2 =:= 0 -> B1;
                        true -> 'e_enum_common.Modulation'(TrF2, <<B1/binary, 16>>, TrUserData)
                    end
                end
        end,
    B3 =
        if
            F3 =:= undefined ->
                B2;
            true ->
                case id(F3, TrUserData) of
                    {lora_modulation_config, TF3} ->
                        begin
                            TrTF3 = id(TF3, TrUserData),
                            'e_mfield_gw.ChannelConfiguration_lora_modulation_config'(
                                TrTF3,
                                <<B2/binary, 26>>,
                                TrUserData
                            )
                        end;
                    {fsk_modulation_config, TF3} ->
                        begin
                            TrTF3 = id(TF3, TrUserData),
                            'e_mfield_gw.ChannelConfiguration_fsk_modulation_config'(
                                TrTF3,
                                <<B2/binary, 34>>,
                                TrUserData
                            )
                        end
                end
        end,
    B4 =
        if
            F4 == undefined ->
                B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    if
                        TrF4 =:= 0 -> B3;
                        true -> e_varint(TrF4, <<B3/binary, 40>>, TrUserData)
                    end
                end
        end,
    if
        F5 == undefined ->
            B4;
        true ->
            begin
                TrF5 = id(F5, TrUserData),
                if
                    TrF5 =:= 0 -> B4;
                    true -> e_varint(TrF5, <<B4/binary, 48>>, TrUserData)
                end
            end
    end.

'encode_msg_gw.LoRaModulationConfig'(Msg, TrUserData) ->
    'encode_msg_gw.LoRaModulationConfig'(Msg, <<>>, TrUserData).

'encode_msg_gw.LoRaModulationConfig'(
    #'gw.LoRaModulationConfig'{bandwidth = F1, spreading_factors = F2},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
        end,
    begin
        TrF2 = id(F2, TrUserData),
        if
            TrF2 == [] -> B1;
            true -> 'e_field_gw.LoRaModulationConfig_spreading_factors'(TrF2, B1, TrUserData)
        end
    end.

'encode_msg_gw.FSKModulationConfig'(Msg, TrUserData) ->
    'encode_msg_gw.FSKModulationConfig'(Msg, <<>>, TrUserData).

'encode_msg_gw.FSKModulationConfig'(
    #'gw.FSKModulationConfig'{bandwidth = F1, bitrate = F2},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
        end,
    if
        F2 == undefined ->
            B1;
        true ->
            begin
                TrF2 = id(F2, TrUserData),
                if
                    TrF2 =:= 0 -> B1;
                    true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                end
            end
    end.

'encode_msg_gw.GatewayCommandExecRequest'(Msg, TrUserData) ->
    'encode_msg_gw.GatewayCommandExecRequest'(Msg, <<>>, TrUserData).

'encode_msg_gw.GatewayCommandExecRequest'(
    #'gw.GatewayCommandExecRequest'{
        gateway_id = F1,
        command = F2,
        'ExecId' = F3,
        stdin = F4,
        environment = F5
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case is_empty_string(TrF2) of
                        true -> B1;
                        false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
        end,
    B3 =
        if
            F3 == undefined ->
                B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    case iolist_size(TrF3) of
                        0 -> B2;
                        _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
                    end
                end
        end,
    B4 =
        if
            F4 == undefined ->
                B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    case iolist_size(TrF4) of
                        0 -> B3;
                        _ -> e_type_bytes(TrF4, <<B3/binary, 34>>, TrUserData)
                    end
                end
        end,
    begin
        TrF5 = id(F5, TrUserData),
        if
            TrF5 == [] -> B4;
            true -> 'e_field_gw.GatewayCommandExecRequest_environment'(TrF5, B4, TrUserData)
        end
    end.

'encode_msg_gw.GatewayCommandExecResponse'(Msg, TrUserData) ->
    'encode_msg_gw.GatewayCommandExecResponse'(Msg, <<>>, TrUserData).

'encode_msg_gw.GatewayCommandExecResponse'(
    #'gw.GatewayCommandExecResponse'{
        gateway_id = F1,
        exec_id = F2,
        stdout = F3,
        stderr = F4,
        error = F5
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
        end,
    B3 =
        if
            F3 == undefined ->
                B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    case iolist_size(TrF3) of
                        0 -> B2;
                        _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
                    end
                end
        end,
    B4 =
        if
            F4 == undefined ->
                B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    case iolist_size(TrF4) of
                        0 -> B3;
                        _ -> e_type_bytes(TrF4, <<B3/binary, 34>>, TrUserData)
                    end
                end
        end,
    if
        F5 == undefined ->
            B4;
        true ->
            begin
                TrF5 = id(F5, TrUserData),
                case is_empty_string(TrF5) of
                    true -> B4;
                    false -> e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
                end
            end
    end.

'encode_msg_gw.RawPacketForwarderEvent'(Msg, TrUserData) ->
    'encode_msg_gw.RawPacketForwarderEvent'(Msg, <<>>, TrUserData).

'encode_msg_gw.RawPacketForwarderEvent'(
    #'gw.RawPacketForwarderEvent'{gateway_id = F1, raw_id = F2, payload = F3},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
        end,
    if
        F3 == undefined ->
            B2;
        true ->
            begin
                TrF3 = id(F3, TrUserData),
                case iolist_size(TrF3) of
                    0 -> B2;
                    _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
                end
            end
    end.

'encode_msg_gw.RawPacketForwarderCommand'(Msg, TrUserData) ->
    'encode_msg_gw.RawPacketForwarderCommand'(Msg, <<>>, TrUserData).

'encode_msg_gw.RawPacketForwarderCommand'(
    #'gw.RawPacketForwarderCommand'{gateway_id = F1, raw_id = F2, payload = F3},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
        end,
    if
        F3 == undefined ->
            B2;
        true ->
            begin
                TrF3 = id(F3, TrUserData),
                case iolist_size(TrF3) of
                    0 -> B2;
                    _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
                end
            end
    end.

'encode_msg_gw.ConnState'(Msg, TrUserData) -> 'encode_msg_gw.ConnState'(Msg, <<>>, TrUserData).

'encode_msg_gw.ConnState'(#'gw.ConnState'{gateway_id = F1, state = F2}, Bin, TrUserData) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    if
        F2 == undefined ->
            B1;
        true ->
            begin
                TrF2 = id(F2, TrUserData),
                if
                    TrF2 =:= 'OFFLINE'; TrF2 =:= 0 -> B1;
                    true -> 'e_enum_gw.ConnState.State'(TrF2, <<B1/binary, 16>>, TrUserData)
                end
            end
    end.

'encode_msg_common.KeyEnvelope'(Msg, TrUserData) ->
    'encode_msg_common.KeyEnvelope'(Msg, <<>>, TrUserData).

'encode_msg_common.KeyEnvelope'(
    #'common.KeyEnvelope'{kek_label = F1, aes_key = F2},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    if
        F2 == undefined ->
            B1;
        true ->
            begin
                TrF2 = id(F2, TrUserData),
                case iolist_size(TrF2) of
                    0 -> B1;
                    _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                end
            end
    end.

'encode_msg_common.Location'(Msg, TrUserData) ->
    'encode_msg_common.Location'(Msg, <<>>, TrUserData).

'encode_msg_common.Location'(
    #'common.Location'{latitude = F1, longitude = F2, altitude = F3, source = F4, accuracy = F5},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= 0.0 -> Bin;
                        true -> e_type_double(TrF1, <<Bin/binary, 9>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= 0.0 -> B1;
                        true -> e_type_double(TrF2, <<B1/binary, 17>>, TrUserData)
                    end
                end
        end,
    B3 =
        if
            F3 == undefined ->
                B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    if
                        TrF3 =:= 0.0 -> B2;
                        true -> e_type_double(TrF3, <<B2/binary, 25>>, TrUserData)
                    end
                end
        end,
    B4 =
        if
            F4 == undefined ->
                B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    if
                        TrF4 =:= 'UNKNOWN'; TrF4 =:= 0 -> B3;
                        true -> 'e_enum_common.LocationSource'(TrF4, <<B3/binary, 32>>, TrUserData)
                    end
                end
        end,
    if
        F5 == undefined ->
            B4;
        true ->
            begin
                TrF5 = id(F5, TrUserData),
                if
                    TrF5 =:= 0 -> B4;
                    true -> e_varint(TrF5, <<B4/binary, 40>>, TrUserData)
                end
            end
    end.

'encode_msg_google.protobuf.Timestamp'(Msg, TrUserData) ->
    'encode_msg_google.protobuf.Timestamp'(Msg, <<>>, TrUserData).

'encode_msg_google.protobuf.Timestamp'(
    #'google.protobuf.Timestamp'{seconds = F1, nanos = F2},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= 0 -> Bin;
                        true -> e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
        end,
    if
        F2 == undefined ->
            B1;
        true ->
            begin
                TrF2 = id(F2, TrUserData),
                if
                    TrF2 =:= 0 -> B1;
                    true -> e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
                end
            end
    end.

'encode_msg_google.protobuf.Duration'(Msg, TrUserData) ->
    'encode_msg_google.protobuf.Duration'(Msg, <<>>, TrUserData).

'encode_msg_google.protobuf.Duration'(
    #'google.protobuf.Duration'{seconds = F1, nanos = F2},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= 0 -> Bin;
                        true -> e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
        end,
    if
        F2 == undefined ->
            B1;
        true ->
            begin
                TrF2 = id(F2, TrUserData),
                if
                    TrF2 =:= 0 -> B1;
                    true -> e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
                end
            end
    end.

'e_mfield_geo.ResolveResult_location'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_common.Location'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_geo.FrameRXInfo_rx_info'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_gw.UplinkRXInfo'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_geo.FrameRXInfo_rx_info'([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = 'e_mfield_geo.FrameRXInfo_rx_info'(id(Elem, TrUserData), Bin2, TrUserData),
    'e_field_geo.FrameRXInfo_rx_info'(Rest, Bin3, TrUserData);
'e_field_geo.FrameRXInfo_rx_info'([], Bin, _TrUserData) ->
    Bin.

'e_mfield_geo.ResolveTDOARequest_frame_rx_info'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_geo.FrameRXInfo'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_geo.ResolveMultiFrameTDOARequest_frame_rx_info_set'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_geo.FrameRXInfo'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_geo.ResolveMultiFrameTDOARequest_frame_rx_info_set'([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = 'e_mfield_geo.ResolveMultiFrameTDOARequest_frame_rx_info_set'(
        id(Elem, TrUserData),
        Bin2,
        TrUserData
    ),
    'e_field_geo.ResolveMultiFrameTDOARequest_frame_rx_info_set'(Rest, Bin3, TrUserData);
'e_field_geo.ResolveMultiFrameTDOARequest_frame_rx_info_set'([], Bin, _TrUserData) ->
    Bin.

'e_mfield_geo.ResolveTDOAResponse_result'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_geo.ResolveResult'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_geo.ResolveMultiFrameTDOAResponse_result'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_geo.ResolveResult'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_gw.UplinkTXInfo_lora_modulation_info'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_gw.LoRaModulationInfo'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_gw.UplinkTXInfo_fsk_modulation_info'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_gw.FSKModulationInfo'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_gw.PlainFineTimestamp_time'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Timestamp'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_gw.GatewayStats_time'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Timestamp'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_gw.GatewayStats_location'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_common.Location'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_gw.GatewayStats_meta_data'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_map<string,string>'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_gw.GatewayStats_meta_data'([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 82>>,
    Bin3 = 'e_mfield_gw.GatewayStats_meta_data'(
        'tr_encode_gw.GatewayStats.meta_data[x]'(Elem, TrUserData),
        Bin2,
        TrUserData
    ),
    'e_field_gw.GatewayStats_meta_data'(Rest, Bin3, TrUserData);
'e_field_gw.GatewayStats_meta_data'([], Bin, _TrUserData) ->
    Bin.

'e_mfield_gw.UplinkRXInfo_time'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Timestamp'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_gw.UplinkRXInfo_time_since_gps_epoch'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Duration'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_gw.UplinkRXInfo_location'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_common.Location'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_gw.UplinkRXInfo_encrypted_fine_timestamp'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_gw.EncryptedFineTimestamp'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_gw.UplinkRXInfo_plain_fine_timestamp'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_gw.PlainFineTimestamp'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_gw.DownlinkTXInfo_lora_modulation_info'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_gw.LoRaModulationInfo'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_gw.DownlinkTXInfo_fsk_modulation_info'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_gw.FSKModulationInfo'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_gw.DownlinkTXInfo_immediately_timing_info'(_Msg, Bin, _TrUserData) -> <<Bin/binary, 0>>.

'e_mfield_gw.DownlinkTXInfo_delay_timing_info'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_gw.DelayTimingInfo'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_gw.DownlinkTXInfo_gps_epoch_timing_info'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_gw.GPSEpochTimingInfo'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_gw.DelayTimingInfo_delay'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Duration'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_gw.GPSEpochTimingInfo_time_since_gps_epoch'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Duration'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_gw.UplinkFrame_tx_info'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_gw.UplinkTXInfo'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_gw.UplinkFrame_rx_info'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_gw.UplinkRXInfo'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_gw.UplinkFrameSet_tx_info'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_gw.UplinkTXInfo'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_gw.UplinkFrameSet_rx_info'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_gw.UplinkRXInfo'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_gw.UplinkFrameSet_rx_info'([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = 'e_mfield_gw.UplinkFrameSet_rx_info'(id(Elem, TrUserData), Bin2, TrUserData),
    'e_field_gw.UplinkFrameSet_rx_info'(Rest, Bin3, TrUserData);
'e_field_gw.UplinkFrameSet_rx_info'([], Bin, _TrUserData) ->
    Bin.

'e_mfield_gw.DownlinkFrame_tx_info'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_gw.DownlinkTXInfo'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_gw.DownlinkFrame_items'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_gw.DownlinkFrameItem'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_gw.DownlinkFrame_items'([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = 'e_mfield_gw.DownlinkFrame_items'(id(Elem, TrUserData), Bin2, TrUserData),
    'e_field_gw.DownlinkFrame_items'(Rest, Bin3, TrUserData);
'e_field_gw.DownlinkFrame_items'([], Bin, _TrUserData) ->
    Bin.

'e_mfield_gw.DownlinkFrameItem_tx_info'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_gw.DownlinkTXInfo'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_gw.DownlinkTXAck_items'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_gw.DownlinkTXAckItem'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_gw.DownlinkTXAck_items'([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = 'e_mfield_gw.DownlinkTXAck_items'(id(Elem, TrUserData), Bin2, TrUserData),
    'e_field_gw.DownlinkTXAck_items'(Rest, Bin3, TrUserData);
'e_field_gw.DownlinkTXAck_items'([], Bin, _TrUserData) ->
    Bin.

'e_mfield_gw.GatewayConfiguration_channels'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_gw.ChannelConfiguration'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_gw.GatewayConfiguration_channels'([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = 'e_mfield_gw.GatewayConfiguration_channels'(id(Elem, TrUserData), Bin2, TrUserData),
    'e_field_gw.GatewayConfiguration_channels'(Rest, Bin3, TrUserData);
'e_field_gw.GatewayConfiguration_channels'([], Bin, _TrUserData) ->
    Bin.

'e_mfield_gw.GatewayConfiguration_stats_interval'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Duration'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_gw.ChannelConfiguration_lora_modulation_config'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_gw.LoRaModulationConfig'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_gw.ChannelConfiguration_fsk_modulation_config'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_gw.FSKModulationConfig'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_gw.LoRaModulationConfig_spreading_factors'(Elems, Bin, TrUserData) when Elems =/= [] ->
    SubBin = 'e_pfield_gw.LoRaModulationConfig_spreading_factors'(Elems, <<>>, TrUserData),
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_varint(byte_size(SubBin), Bin2),
    <<Bin3/binary, SubBin/binary>>;
'e_field_gw.LoRaModulationConfig_spreading_factors'([], Bin, _TrUserData) ->
    Bin.

'e_pfield_gw.LoRaModulationConfig_spreading_factors'([Value | Rest], Bin, TrUserData) ->
    Bin2 = e_varint(id(Value, TrUserData), Bin, TrUserData),
    'e_pfield_gw.LoRaModulationConfig_spreading_factors'(Rest, Bin2, TrUserData);
'e_pfield_gw.LoRaModulationConfig_spreading_factors'([], Bin, _TrUserData) ->
    Bin.

'e_mfield_gw.GatewayCommandExecRequest_environment'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_map<string,string>'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_gw.GatewayCommandExecRequest_environment'([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = 'e_mfield_gw.GatewayCommandExecRequest_environment'(
        'tr_encode_gw.GatewayCommandExecRequest.environment[x]'(Elem, TrUserData),
        Bin2,
        TrUserData
    ),
    'e_field_gw.GatewayCommandExecRequest_environment'(Rest, Bin3, TrUserData);
'e_field_gw.GatewayCommandExecRequest_environment'([], Bin, _TrUserData) ->
    Bin.

'encode_msg_map<string,string>'(#'map<string,string>'{key = F1, value = F2}, Bin, TrUserData) ->
    B1 = begin
        TrF1 = id(F1, TrUserData),
        e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
    end,
    begin
        TrF2 = id(F2, TrUserData),
        e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
    end.

'e_enum_gw.DownlinkTiming'('IMMEDIATELY', Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_gw.DownlinkTiming'('DELAY', Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_gw.DownlinkTiming'('GPS_EPOCH', Bin, _TrUserData) -> <<Bin/binary, 2>>;
'e_enum_gw.DownlinkTiming'(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_gw.FineTimestampType'('NONE', Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_gw.FineTimestampType'('ENCRYPTED', Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_gw.FineTimestampType'('PLAIN', Bin, _TrUserData) -> <<Bin/binary, 2>>;
'e_enum_gw.FineTimestampType'(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_gw.CRCStatus'('NO_CRC', Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_gw.CRCStatus'('BAD_CRC', Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_gw.CRCStatus'('CRC_OK', Bin, _TrUserData) -> <<Bin/binary, 2>>;
'e_enum_gw.CRCStatus'(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_gw.TxAckStatus'('IGNORED', Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_gw.TxAckStatus'('OK', Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_gw.TxAckStatus'('TOO_LATE', Bin, _TrUserData) -> <<Bin/binary, 2>>;
'e_enum_gw.TxAckStatus'('TOO_EARLY', Bin, _TrUserData) -> <<Bin/binary, 3>>;
'e_enum_gw.TxAckStatus'('COLLISION_PACKET', Bin, _TrUserData) -> <<Bin/binary, 4>>;
'e_enum_gw.TxAckStatus'('COLLISION_BEACON', Bin, _TrUserData) -> <<Bin/binary, 5>>;
'e_enum_gw.TxAckStatus'('TX_FREQ', Bin, _TrUserData) -> <<Bin/binary, 6>>;
'e_enum_gw.TxAckStatus'('TX_POWER', Bin, _TrUserData) -> <<Bin/binary, 7>>;
'e_enum_gw.TxAckStatus'('GPS_UNLOCKED', Bin, _TrUserData) -> <<Bin/binary, 8>>;
'e_enum_gw.TxAckStatus'('QUEUE_FULL', Bin, _TrUserData) -> <<Bin/binary, 9>>;
'e_enum_gw.TxAckStatus'('INTERNAL_ERROR', Bin, _TrUserData) -> <<Bin/binary, 10>>;
'e_enum_gw.TxAckStatus'(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_gw.ConnState.State'('OFFLINE', Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_gw.ConnState.State'('ONLINE', Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_gw.ConnState.State'(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_common.Modulation'('LORA', Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_common.Modulation'('FSK', Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_common.Modulation'(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_common.LocationSource'('UNKNOWN', Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_common.LocationSource'('GPS', Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_common.LocationSource'('CONFIG', Bin, _TrUserData) -> <<Bin/binary, 2>>;
'e_enum_common.LocationSource'('GEO_RESOLVER_TDOA', Bin, _TrUserData) -> <<Bin/binary, 3>>;
'e_enum_common.LocationSource'('GEO_RESOLVER_RSSI', Bin, _TrUserData) -> <<Bin/binary, 4>>;
'e_enum_common.LocationSource'('GEO_RESOLVER_GNSS', Bin, _TrUserData) -> <<Bin/binary, 5>>;
'e_enum_common.LocationSource'('GEO_RESOLVER_WIFI', Bin, _TrUserData) -> <<Bin/binary, 6>>;
'e_enum_common.LocationSource'(V, Bin, _TrUserData) -> e_varint(V, Bin).

-compile({nowarn_unused_function, e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function, e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function, e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function, e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function, e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function, e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function, e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function, e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function, e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function, e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function, e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function, e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function, e_unknown_elems/2}).
e_unknown_elems([Elem | Rest], Bin) ->
    BinR =
        case Elem of
            {varint, FNum, N} ->
                BinF = e_varint(FNum bsl 3, Bin),
                e_varint(N, BinF);
            {length_delimited, FNum, Data} ->
                BinF = e_varint(FNum bsl 3 bor 2, Bin),
                BinL = e_varint(byte_size(Data), BinF),
                <<BinL/binary, Data/binary>>;
            {group, FNum, GroupFields} ->
                Bin1 = e_varint(FNum bsl 3 bor 3, Bin),
                Bin2 = e_unknown_elems(GroupFields, Bin1),
                e_varint(FNum bsl 3 bor 4, Bin2);
            {fixed32, FNum, V} ->
                BinF = e_varint(FNum bsl 3 bor 5, Bin),
                <<BinF/binary, V:32/little>>;
            {fixed64, FNum, V} ->
                BinF = e_varint(FNum bsl 3 bor 1, Bin),
                <<BinF/binary, V:64/little>>
        end,
    e_unknown_elems(Rest, BinR);
e_unknown_elems([], Bin) ->
    Bin.

-compile({nowarn_unused_function, e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function, e_varint/2}).
e_varint(N, Bin) when N =< 127 ->
    <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) -> not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) ->
    true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
        true -> true;
        false -> string_has_chars(T)
    end;
string_has_chars(B) when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) ->
    true;
string_has_chars(<<>>) ->
    false;
string_has_chars([]) ->
    false.

decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try
        decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        Class:Reason:StackTrace ->
            error({gpb_error, {decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try
        decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        Class:Reason ->
            StackTrace = erlang:get_stacktrace(),
            error({gpb_error, {decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('geo.ResolveResult', Bin, TrUserData) ->
    id('decode_msg_geo.ResolveResult'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('geo.FrameRXInfo', Bin, TrUserData) ->
    id('decode_msg_geo.FrameRXInfo'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('geo.ResolveTDOARequest', Bin, TrUserData) ->
    id('decode_msg_geo.ResolveTDOARequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('geo.ResolveMultiFrameTDOARequest', Bin, TrUserData) ->
    id('decode_msg_geo.ResolveMultiFrameTDOARequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('geo.ResolveTDOAResponse', Bin, TrUserData) ->
    id('decode_msg_geo.ResolveTDOAResponse'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('geo.ResolveMultiFrameTDOAResponse', Bin, TrUserData) ->
    id('decode_msg_geo.ResolveMultiFrameTDOAResponse'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.UplinkTXInfo', Bin, TrUserData) ->
    id('decode_msg_gw.UplinkTXInfo'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.LoRaModulationInfo', Bin, TrUserData) ->
    id('decode_msg_gw.LoRaModulationInfo'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.FSKModulationInfo', Bin, TrUserData) ->
    id('decode_msg_gw.FSKModulationInfo'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.EncryptedFineTimestamp', Bin, TrUserData) ->
    id('decode_msg_gw.EncryptedFineTimestamp'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.PlainFineTimestamp', Bin, TrUserData) ->
    id('decode_msg_gw.PlainFineTimestamp'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.GatewayStats', Bin, TrUserData) ->
    id('decode_msg_gw.GatewayStats'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.UplinkRXInfo', Bin, TrUserData) ->
    id('decode_msg_gw.UplinkRXInfo'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.DownlinkTXInfo', Bin, TrUserData) ->
    id('decode_msg_gw.DownlinkTXInfo'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.ImmediatelyTimingInfo', Bin, TrUserData) ->
    id('decode_msg_gw.ImmediatelyTimingInfo'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.DelayTimingInfo', Bin, TrUserData) ->
    id('decode_msg_gw.DelayTimingInfo'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.GPSEpochTimingInfo', Bin, TrUserData) ->
    id('decode_msg_gw.GPSEpochTimingInfo'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.UplinkFrame', Bin, TrUserData) ->
    id('decode_msg_gw.UplinkFrame'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.UplinkFrameSet', Bin, TrUserData) ->
    id('decode_msg_gw.UplinkFrameSet'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.DownlinkFrame', Bin, TrUserData) ->
    id('decode_msg_gw.DownlinkFrame'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.DownlinkFrameItem', Bin, TrUserData) ->
    id('decode_msg_gw.DownlinkFrameItem'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.DownlinkTXAck', Bin, TrUserData) ->
    id('decode_msg_gw.DownlinkTXAck'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.DownlinkTXAckItem', Bin, TrUserData) ->
    id('decode_msg_gw.DownlinkTXAckItem'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.GatewayConfiguration', Bin, TrUserData) ->
    id('decode_msg_gw.GatewayConfiguration'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.ChannelConfiguration', Bin, TrUserData) ->
    id('decode_msg_gw.ChannelConfiguration'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.LoRaModulationConfig', Bin, TrUserData) ->
    id('decode_msg_gw.LoRaModulationConfig'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.FSKModulationConfig', Bin, TrUserData) ->
    id('decode_msg_gw.FSKModulationConfig'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.GatewayCommandExecRequest', Bin, TrUserData) ->
    id('decode_msg_gw.GatewayCommandExecRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.GatewayCommandExecResponse', Bin, TrUserData) ->
    id('decode_msg_gw.GatewayCommandExecResponse'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.RawPacketForwarderEvent', Bin, TrUserData) ->
    id('decode_msg_gw.RawPacketForwarderEvent'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.RawPacketForwarderCommand', Bin, TrUserData) ->
    id('decode_msg_gw.RawPacketForwarderCommand'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('gw.ConnState', Bin, TrUserData) ->
    id('decode_msg_gw.ConnState'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('common.KeyEnvelope', Bin, TrUserData) ->
    id('decode_msg_common.KeyEnvelope'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('common.Location', Bin, TrUserData) ->
    id('decode_msg_common.Location'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('google.protobuf.Timestamp', Bin, TrUserData) ->
    id('decode_msg_google.protobuf.Timestamp'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('google.protobuf.Duration', Bin, TrUserData) ->
    id('decode_msg_google.protobuf.Duration'(Bin, TrUserData), TrUserData).

'decode_msg_geo.ResolveResult'(Bin, TrUserData) ->
    'dfp_read_field_def_geo.ResolveResult'(Bin, 0, 0, 0, id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_geo.ResolveResult'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'd_field_geo.ResolveResult_location'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_geo.ResolveResult'(<<>>, 0, 0, _, F@_1, _) ->
    #'geo.ResolveResult'{location = F@_1};
'dfp_read_field_def_geo.ResolveResult'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_geo.ResolveResult'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_geo.ResolveResult'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when
    N < 32 - 7
->
    'dg_read_field_def_geo.ResolveResult'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'dg_read_field_def_geo.ResolveResult'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_geo.ResolveResult_location'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_geo.ResolveResult'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 ->
                    'skip_64_geo.ResolveResult'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 ->
                    'skip_length_delimited_geo.ResolveResult'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_geo.ResolveResult'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 ->
                    'skip_32_geo.ResolveResult'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
'dg_read_field_def_geo.ResolveResult'(<<>>, 0, 0, _, F@_1, _) ->
    #'geo.ResolveResult'{location = F@_1}.

'd_field_geo.ResolveResult_location'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when
    N < 57
->
    'd_field_geo.ResolveResult_location'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'd_field_geo.ResolveResult_location'(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_common.Location'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_geo.ResolveResult'(
        RestF,
        0,
        0,
        F,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_common.Location'(Prev, NewFValue, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_geo.ResolveResult'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'skip_varint_geo.ResolveResult'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_geo.ResolveResult'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_geo.ResolveResult'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_geo.ResolveResult'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_geo.ResolveResult'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'skip_length_delimited_geo.ResolveResult'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_geo.ResolveResult'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_geo.ResolveResult'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_geo.ResolveResult'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_geo.ResolveResult'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_geo.ResolveResult'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_geo.ResolveResult'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_geo.ResolveResult'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_geo.FrameRXInfo'(Bin, TrUserData) ->
    'dfp_read_field_def_geo.FrameRXInfo'(Bin, 0, 0, 0, id([], TrUserData), TrUserData).

'dfp_read_field_def_geo.FrameRXInfo'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'd_field_geo.FrameRXInfo_rx_info'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_geo.FrameRXInfo'(<<>>, 0, 0, _, R1, TrUserData) ->
    #'geo.FrameRXInfo'{rx_info = lists_reverse(R1, TrUserData)};
'dfp_read_field_def_geo.FrameRXInfo'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_geo.FrameRXInfo'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_geo.FrameRXInfo'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when
    N < 32 - 7
->
    'dg_read_field_def_geo.FrameRXInfo'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'dg_read_field_def_geo.FrameRXInfo'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_geo.FrameRXInfo_rx_info'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_geo.FrameRXInfo'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 ->
                    'skip_64_geo.FrameRXInfo'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 ->
                    'skip_length_delimited_geo.FrameRXInfo'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_geo.FrameRXInfo'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 ->
                    'skip_32_geo.FrameRXInfo'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
'dg_read_field_def_geo.FrameRXInfo'(<<>>, 0, 0, _, R1, TrUserData) ->
    #'geo.FrameRXInfo'{rx_info = lists_reverse(R1, TrUserData)}.

'd_field_geo.FrameRXInfo_rx_info'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when
    N < 57
->
    'd_field_geo.FrameRXInfo_rx_info'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'd_field_geo.FrameRXInfo_rx_info'(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_gw.UplinkRXInfo'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_geo.FrameRXInfo'(
        RestF,
        0,
        0,
        F,
        cons(NewFValue, Prev, TrUserData),
        TrUserData
    ).

'skip_varint_geo.FrameRXInfo'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'skip_varint_geo.FrameRXInfo'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_geo.FrameRXInfo'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_geo.FrameRXInfo'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_geo.FrameRXInfo'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when
    N < 57
->
    'skip_length_delimited_geo.FrameRXInfo'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'skip_length_delimited_geo.FrameRXInfo'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_geo.FrameRXInfo'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_geo.FrameRXInfo'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_geo.FrameRXInfo'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_geo.FrameRXInfo'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_geo.FrameRXInfo'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_geo.FrameRXInfo'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_geo.FrameRXInfo'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_geo.ResolveTDOARequest'(Bin, TrUserData) ->
    'dfp_read_field_def_geo.ResolveTDOARequest'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id(undefined, TrUserData),
        id(0.0, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_geo.ResolveTDOARequest'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_geo.ResolveTDOARequest_dev_eui'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_geo.ResolveTDOARequest'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_geo.ResolveTDOARequest_frame_rx_info'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_geo.ResolveTDOARequest'(
    <<25, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_geo.ResolveTDOARequest_device_reference_altitude'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'dfp_read_field_def_geo.ResolveTDOARequest'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) ->
    #'geo.ResolveTDOARequest'{
        dev_eui = F@_1,
        frame_rx_info = F@_2,
        device_reference_altitude = F@_3
    };
'dfp_read_field_def_geo.ResolveTDOARequest'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'dg_read_field_def_geo.ResolveTDOARequest'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'dg_read_field_def_geo.ResolveTDOARequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_geo.ResolveTDOARequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'dg_read_field_def_geo.ResolveTDOARequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_geo.ResolveTDOARequest_dev_eui'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 ->
            'd_field_geo.ResolveTDOARequest_frame_rx_info'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        25 ->
            'd_field_geo.ResolveTDOARequest_device_reference_altitude'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_geo.ResolveTDOARequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                1 ->
                    'skip_64_geo.ResolveTDOARequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_geo.ResolveTDOARequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                3 ->
                    'skip_group_geo.ResolveTDOARequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                5 ->
                    'skip_32_geo.ResolveTDOARequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_geo.ResolveTDOARequest'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) ->
    #'geo.ResolveTDOARequest'{
        dev_eui = F@_1,
        frame_rx_info = F@_2,
        device_reference_altitude = F@_3
    }.

'd_field_geo.ResolveTDOARequest_dev_eui'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_geo.ResolveTDOARequest_dev_eui'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_geo.ResolveTDOARequest_dev_eui'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_geo.ResolveTDOARequest'(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

'd_field_geo.ResolveTDOARequest_frame_rx_info'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_geo.ResolveTDOARequest_frame_rx_info'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_geo.ResolveTDOARequest_frame_rx_info'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    Prev,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_geo.FrameRXInfo'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_geo.ResolveTDOARequest'(
        RestF,
        0,
        0,
        F,
        F@_1,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_geo.FrameRXInfo'(Prev, NewFValue, TrUserData)
        end,
        F@_3,
        TrUserData
    ).

'd_field_geo.ResolveTDOARequest_device_reference_altitude'(
    <<0:48, 240, 127, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    _,
    TrUserData
) ->
    'dfp_read_field_def_geo.ResolveTDOARequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        id(infinity, TrUserData),
        TrUserData
    );
'd_field_geo.ResolveTDOARequest_device_reference_altitude'(
    <<0:48, 240, 255, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    _,
    TrUserData
) ->
    'dfp_read_field_def_geo.ResolveTDOARequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        id('-infinity', TrUserData),
        TrUserData
    );
'd_field_geo.ResolveTDOARequest_device_reference_altitude'(
    <<_:48, 15:4, _:4, _:1, 127:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    _,
    TrUserData
) ->
    'dfp_read_field_def_geo.ResolveTDOARequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        id(nan, TrUserData),
        TrUserData
    );
'd_field_geo.ResolveTDOARequest_device_reference_altitude'(
    <<Value:64/little-float, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    _,
    TrUserData
) ->
    'dfp_read_field_def_geo.ResolveTDOARequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        id(Value, TrUserData),
        TrUserData
    ).

'skip_varint_geo.ResolveTDOARequest'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'skip_varint_geo.ResolveTDOARequest'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'skip_varint_geo.ResolveTDOARequest'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'dfp_read_field_def_geo.ResolveTDOARequest'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'skip_length_delimited_geo.ResolveTDOARequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_geo.ResolveTDOARequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'skip_length_delimited_geo.ResolveTDOARequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_geo.ResolveTDOARequest'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

'skip_group_geo.ResolveTDOARequest'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_geo.ResolveTDOARequest'(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

'skip_32_geo.ResolveTDOARequest'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_geo.ResolveTDOARequest'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'skip_64_geo.ResolveTDOARequest'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_geo.ResolveTDOARequest'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'decode_msg_geo.ResolveMultiFrameTDOARequest'(Bin, TrUserData) ->
    'dfp_read_field_def_geo.ResolveMultiFrameTDOARequest'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id([], TrUserData),
        id(0.0, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_geo.ResolveMultiFrameTDOARequest'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_geo.ResolveMultiFrameTDOARequest_dev_eui'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'dfp_read_field_def_geo.ResolveMultiFrameTDOARequest'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_geo.ResolveMultiFrameTDOARequest_frame_rx_info_set'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'dfp_read_field_def_geo.ResolveMultiFrameTDOARequest'(
    <<25, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_geo.ResolveMultiFrameTDOARequest_device_reference_altitude'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'dfp_read_field_def_geo.ResolveMultiFrameTDOARequest'(<<>>, 0, 0, _, F@_1, R1, F@_3, TrUserData) ->
    #'geo.ResolveMultiFrameTDOARequest'{
        dev_eui = F@_1,
        frame_rx_info_set = lists_reverse(R1, TrUserData),
        device_reference_altitude = F@_3
    };
'dfp_read_field_def_geo.ResolveMultiFrameTDOARequest'(
    Other,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'dg_read_field_def_geo.ResolveMultiFrameTDOARequest'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

'dg_read_field_def_geo.ResolveMultiFrameTDOARequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_geo.ResolveMultiFrameTDOARequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'dg_read_field_def_geo.ResolveMultiFrameTDOARequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_geo.ResolveMultiFrameTDOARequest_dev_eui'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        18 ->
            'd_field_geo.ResolveMultiFrameTDOARequest_frame_rx_info_set'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        25 ->
            'd_field_geo.ResolveMultiFrameTDOARequest_device_reference_altitude'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_geo.ResolveMultiFrameTDOARequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                1 ->
                    'skip_64_geo.ResolveMultiFrameTDOARequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_geo.ResolveMultiFrameTDOARequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                3 ->
                    'skip_group_geo.ResolveMultiFrameTDOARequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                5 ->
                    'skip_32_geo.ResolveMultiFrameTDOARequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_geo.ResolveMultiFrameTDOARequest'(<<>>, 0, 0, _, F@_1, R1, F@_3, TrUserData) ->
    #'geo.ResolveMultiFrameTDOARequest'{
        dev_eui = F@_1,
        frame_rx_info_set = lists_reverse(R1, TrUserData),
        device_reference_altitude = F@_3
    }.

'd_field_geo.ResolveMultiFrameTDOARequest_dev_eui'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_geo.ResolveMultiFrameTDOARequest_dev_eui'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_geo.ResolveMultiFrameTDOARequest_dev_eui'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_geo.ResolveMultiFrameTDOARequest'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        F@_3,
        TrUserData
    ).

'd_field_geo.ResolveMultiFrameTDOARequest_frame_rx_info_set'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_geo.ResolveMultiFrameTDOARequest_frame_rx_info_set'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_geo.ResolveMultiFrameTDOARequest_frame_rx_info_set'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    Prev,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_geo.FrameRXInfo'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_geo.ResolveMultiFrameTDOARequest'(
        RestF,
        0,
        0,
        F,
        F@_1,
        cons(NewFValue, Prev, TrUserData),
        F@_3,
        TrUserData
    ).

'd_field_geo.ResolveMultiFrameTDOARequest_device_reference_altitude'(
    <<0:48, 240, 127, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    _,
    TrUserData
) ->
    'dfp_read_field_def_geo.ResolveMultiFrameTDOARequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        id(infinity, TrUserData),
        TrUserData
    );
'd_field_geo.ResolveMultiFrameTDOARequest_device_reference_altitude'(
    <<0:48, 240, 255, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    _,
    TrUserData
) ->
    'dfp_read_field_def_geo.ResolveMultiFrameTDOARequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        id('-infinity', TrUserData),
        TrUserData
    );
'd_field_geo.ResolveMultiFrameTDOARequest_device_reference_altitude'(
    <<_:48, 15:4, _:4, _:1, 127:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    _,
    TrUserData
) ->
    'dfp_read_field_def_geo.ResolveMultiFrameTDOARequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        id(nan, TrUserData),
        TrUserData
    );
'd_field_geo.ResolveMultiFrameTDOARequest_device_reference_altitude'(
    <<Value:64/little-float, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    _,
    TrUserData
) ->
    'dfp_read_field_def_geo.ResolveMultiFrameTDOARequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        id(Value, TrUserData),
        TrUserData
    ).

'skip_varint_geo.ResolveMultiFrameTDOARequest'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'skip_varint_geo.ResolveMultiFrameTDOARequest'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'skip_varint_geo.ResolveMultiFrameTDOARequest'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'dfp_read_field_def_geo.ResolveMultiFrameTDOARequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

'skip_length_delimited_geo.ResolveMultiFrameTDOARequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_geo.ResolveMultiFrameTDOARequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'skip_length_delimited_geo.ResolveMultiFrameTDOARequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_geo.ResolveMultiFrameTDOARequest'(
        Rest2,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

'skip_group_geo.ResolveMultiFrameTDOARequest'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_geo.ResolveMultiFrameTDOARequest'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

'skip_32_geo.ResolveMultiFrameTDOARequest'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'dfp_read_field_def_geo.ResolveMultiFrameTDOARequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

'skip_64_geo.ResolveMultiFrameTDOARequest'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'dfp_read_field_def_geo.ResolveMultiFrameTDOARequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

'decode_msg_geo.ResolveTDOAResponse'(Bin, TrUserData) ->
    'dfp_read_field_def_geo.ResolveTDOAResponse'(
        Bin,
        0,
        0,
        0,
        id(undefined, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_geo.ResolveTDOAResponse'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'd_field_geo.ResolveTDOAResponse_result'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_geo.ResolveTDOAResponse'(<<>>, 0, 0, _, F@_1, _) ->
    #'geo.ResolveTDOAResponse'{result = F@_1};
'dfp_read_field_def_geo.ResolveTDOAResponse'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_geo.ResolveTDOAResponse'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_geo.ResolveTDOAResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_geo.ResolveTDOAResponse'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'dg_read_field_def_geo.ResolveTDOAResponse'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_geo.ResolveTDOAResponse_result'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_geo.ResolveTDOAResponse'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 ->
                    'skip_64_geo.ResolveTDOAResponse'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 ->
                    'skip_length_delimited_geo.ResolveTDOAResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_geo.ResolveTDOAResponse'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 ->
                    'skip_32_geo.ResolveTDOAResponse'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
'dg_read_field_def_geo.ResolveTDOAResponse'(<<>>, 0, 0, _, F@_1, _) ->
    #'geo.ResolveTDOAResponse'{result = F@_1}.

'd_field_geo.ResolveTDOAResponse_result'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_geo.ResolveTDOAResponse_result'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'd_field_geo.ResolveTDOAResponse_result'(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_geo.ResolveResult'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_geo.ResolveTDOAResponse'(
        RestF,
        0,
        0,
        F,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_geo.ResolveResult'(Prev, NewFValue, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_geo.ResolveTDOAResponse'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'skip_varint_geo.ResolveTDOAResponse'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_geo.ResolveTDOAResponse'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_geo.ResolveTDOAResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_geo.ResolveTDOAResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_geo.ResolveTDOAResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_geo.ResolveTDOAResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_geo.ResolveTDOAResponse'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_geo.ResolveTDOAResponse'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_geo.ResolveTDOAResponse'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_geo.ResolveTDOAResponse'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_geo.ResolveTDOAResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_geo.ResolveTDOAResponse'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_geo.ResolveTDOAResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_geo.ResolveMultiFrameTDOAResponse'(Bin, TrUserData) ->
    'dfp_read_field_def_geo.ResolveMultiFrameTDOAResponse'(
        Bin,
        0,
        0,
        0,
        id(undefined, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_geo.ResolveMultiFrameTDOAResponse'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'd_field_geo.ResolveMultiFrameTDOAResponse_result'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_geo.ResolveMultiFrameTDOAResponse'(<<>>, 0, 0, _, F@_1, _) ->
    #'geo.ResolveMultiFrameTDOAResponse'{result = F@_1};
'dfp_read_field_def_geo.ResolveMultiFrameTDOAResponse'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_geo.ResolveMultiFrameTDOAResponse'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_geo.ResolveMultiFrameTDOAResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_geo.ResolveMultiFrameTDOAResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'dg_read_field_def_geo.ResolveMultiFrameTDOAResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_geo.ResolveMultiFrameTDOAResponse_result'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_geo.ResolveMultiFrameTDOAResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_geo.ResolveMultiFrameTDOAResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_geo.ResolveMultiFrameTDOAResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_geo.ResolveMultiFrameTDOAResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_geo.ResolveMultiFrameTDOAResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_geo.ResolveMultiFrameTDOAResponse'(<<>>, 0, 0, _, F@_1, _) ->
    #'geo.ResolveMultiFrameTDOAResponse'{result = F@_1}.

'd_field_geo.ResolveMultiFrameTDOAResponse_result'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_geo.ResolveMultiFrameTDOAResponse_result'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'd_field_geo.ResolveMultiFrameTDOAResponse_result'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_geo.ResolveResult'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_geo.ResolveMultiFrameTDOAResponse'(
        RestF,
        0,
        0,
        F,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_geo.ResolveResult'(Prev, NewFValue, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_geo.ResolveMultiFrameTDOAResponse'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'skip_varint_geo.ResolveMultiFrameTDOAResponse'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_geo.ResolveMultiFrameTDOAResponse'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_geo.ResolveMultiFrameTDOAResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_geo.ResolveMultiFrameTDOAResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_geo.ResolveMultiFrameTDOAResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_geo.ResolveMultiFrameTDOAResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_geo.ResolveMultiFrameTDOAResponse'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_geo.ResolveMultiFrameTDOAResponse'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_geo.ResolveMultiFrameTDOAResponse'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_geo.ResolveMultiFrameTDOAResponse'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_geo.ResolveMultiFrameTDOAResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_geo.ResolveMultiFrameTDOAResponse'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_geo.ResolveMultiFrameTDOAResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_gw.UplinkTXInfo'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.UplinkTXInfo'(
        Bin,
        0,
        0,
        0,
        id(0, TrUserData),
        id('LORA', TrUserData),
        id(undefined, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_gw.UplinkTXInfo'(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'd_field_gw.UplinkTXInfo_frequency'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_gw.UplinkTXInfo'(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'd_field_gw.UplinkTXInfo_modulation'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_gw.UplinkTXInfo'(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'd_field_gw.UplinkTXInfo_lora_modulation_info'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_gw.UplinkTXInfo'(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'd_field_gw.UplinkTXInfo_fsk_modulation_info'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_gw.UplinkTXInfo'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) ->
    #'gw.UplinkTXInfo'{frequency = F@_1, modulation = F@_2, modulation_info = F@_3};
'dfp_read_field_def_gw.UplinkTXInfo'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'dg_read_field_def_gw.UplinkTXInfo'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'dg_read_field_def_gw.UplinkTXInfo'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_gw.UplinkTXInfo'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'dg_read_field_def_gw.UplinkTXInfo'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            'd_field_gw.UplinkTXInfo_frequency'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        16 ->
            'd_field_gw.UplinkTXInfo_modulation'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 ->
            'd_field_gw.UplinkTXInfo_lora_modulation_info'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        34 ->
            'd_field_gw.UplinkTXInfo_fsk_modulation_info'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.UplinkTXInfo'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                1 ->
                    'skip_64_gw.UplinkTXInfo'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 ->
                    'skip_length_delimited_gw.UplinkTXInfo'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.UplinkTXInfo'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                5 ->
                    'skip_32_gw.UplinkTXInfo'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
'dg_read_field_def_gw.UplinkTXInfo'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) ->
    #'gw.UplinkTXInfo'{frequency = F@_1, modulation = F@_2, modulation_info = F@_3}.

'd_field_gw.UplinkTXInfo_frequency'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkTXInfo_frequency'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_gw.UplinkTXInfo_frequency'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.UplinkTXInfo'(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

'd_field_gw.UplinkTXInfo_modulation'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkTXInfo_modulation'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_gw.UplinkTXInfo_modulation'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} =
        {id(
                'd_enum_common.Modulation'(begin
                    <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>,
                    id(Res, TrUserData)
                end),
                TrUserData
            ),
            Rest},
    'dfp_read_field_def_gw.UplinkTXInfo'(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

'd_field_gw.UplinkTXInfo_lora_modulation_info'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkTXInfo_lora_modulation_info'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_gw.UplinkTXInfo_lora_modulation_info'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_gw.LoRaModulationInfo'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.UplinkTXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        case Prev of
            undefined ->
                id({lora_modulation_info, NewFValue}, TrUserData);
            {lora_modulation_info, MVPrev} ->
                id(
                    {lora_modulation_info,
                        'merge_msg_gw.LoRaModulationInfo'(MVPrev, NewFValue, TrUserData)},
                    TrUserData
                );
            _ ->
                id({lora_modulation_info, NewFValue}, TrUserData)
        end,
        TrUserData
    ).

'd_field_gw.UplinkTXInfo_fsk_modulation_info'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkTXInfo_fsk_modulation_info'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_gw.UplinkTXInfo_fsk_modulation_info'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_gw.FSKModulationInfo'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.UplinkTXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        case Prev of
            undefined ->
                id({fsk_modulation_info, NewFValue}, TrUserData);
            {fsk_modulation_info, MVPrev} ->
                id(
                    {fsk_modulation_info,
                        'merge_msg_gw.FSKModulationInfo'(MVPrev, NewFValue, TrUserData)},
                    TrUserData
                );
            _ ->
                id({fsk_modulation_info, NewFValue}, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_gw.UplinkTXInfo'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'skip_varint_gw.UplinkTXInfo'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'skip_varint_gw.UplinkTXInfo'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_gw.UplinkTXInfo'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'skip_length_delimited_gw.UplinkTXInfo'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.UplinkTXInfo'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'skip_length_delimited_gw.UplinkTXInfo'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.UplinkTXInfo'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

'skip_group_gw.UplinkTXInfo'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.UplinkTXInfo'(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

'skip_32_gw.UplinkTXInfo'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_gw.UplinkTXInfo'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'skip_64_gw.UplinkTXInfo'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_gw.UplinkTXInfo'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'decode_msg_gw.LoRaModulationInfo'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.LoRaModulationInfo'(
        Bin,
        0,
        0,
        0,
        id(0, TrUserData),
        id(0, TrUserData),
        id([], TrUserData),
        id(false, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_gw.LoRaModulationInfo'(
    <<8, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'd_field_gw.LoRaModulationInfo_bandwidth'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'dfp_read_field_def_gw.LoRaModulationInfo'(
    <<16, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'd_field_gw.LoRaModulationInfo_spreading_factor'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'dfp_read_field_def_gw.LoRaModulationInfo'(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'd_field_gw.LoRaModulationInfo_code_rate'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'dfp_read_field_def_gw.LoRaModulationInfo'(
    <<32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'd_field_gw.LoRaModulationInfo_polarization_inversion'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'dfp_read_field_def_gw.LoRaModulationInfo'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) ->
    #'gw.LoRaModulationInfo'{
        bandwidth = F@_1,
        spreading_factor = F@_2,
        code_rate = F@_3,
        polarization_inversion = F@_4
    };
'dfp_read_field_def_gw.LoRaModulationInfo'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    'dg_read_field_def_gw.LoRaModulationInfo'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

'dg_read_field_def_gw.LoRaModulationInfo'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_gw.LoRaModulationInfo'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'dg_read_field_def_gw.LoRaModulationInfo'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            'd_field_gw.LoRaModulationInfo_bandwidth'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        16 ->
            'd_field_gw.LoRaModulationInfo_spreading_factor'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        26 ->
            'd_field_gw.LoRaModulationInfo_code_rate'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        32 ->
            'd_field_gw.LoRaModulationInfo_polarization_inversion'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.LoRaModulationInfo'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                1 ->
                    'skip_64_gw.LoRaModulationInfo'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_gw.LoRaModulationInfo'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.LoRaModulationInfo'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                5 ->
                    'skip_32_gw.LoRaModulationInfo'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_gw.LoRaModulationInfo'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) ->
    #'gw.LoRaModulationInfo'{
        bandwidth = F@_1,
        spreading_factor = F@_2,
        code_rate = F@_3,
        polarization_inversion = F@_4
    }.

'd_field_gw.LoRaModulationInfo_bandwidth'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    'd_field_gw.LoRaModulationInfo_bandwidth'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'd_field_gw.LoRaModulationInfo_bandwidth'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.LoRaModulationInfo'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

'd_field_gw.LoRaModulationInfo_spreading_factor'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    'd_field_gw.LoRaModulationInfo_spreading_factor'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'd_field_gw.LoRaModulationInfo_spreading_factor'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    F@_3,
    F@_4,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.LoRaModulationInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        NewFValue,
        F@_3,
        F@_4,
        TrUserData
    ).

'd_field_gw.LoRaModulationInfo_code_rate'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    'd_field_gw.LoRaModulationInfo_code_rate'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'd_field_gw.LoRaModulationInfo_code_rate'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    _,
    F@_4,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Utf8:Len/binary, Rest2/binary>> = Rest,
        {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.LoRaModulationInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        NewFValue,
        F@_4,
        TrUserData
    ).

'd_field_gw.LoRaModulationInfo_polarization_inversion'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    'd_field_gw.LoRaModulationInfo_polarization_inversion'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'd_field_gw.LoRaModulationInfo_polarization_inversion'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_gw.LoRaModulationInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        NewFValue,
        TrUserData
    ).

'skip_varint_gw.LoRaModulationInfo'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'skip_varint_gw.LoRaModulationInfo'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'skip_varint_gw.LoRaModulationInfo'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'dfp_read_field_def_gw.LoRaModulationInfo'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

'skip_length_delimited_gw.LoRaModulationInfo'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.LoRaModulationInfo'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'skip_length_delimited_gw.LoRaModulationInfo'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.LoRaModulationInfo'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

'skip_group_gw.LoRaModulationInfo'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.LoRaModulationInfo'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

'skip_32_gw.LoRaModulationInfo'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'dfp_read_field_def_gw.LoRaModulationInfo'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

'skip_64_gw.LoRaModulationInfo'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'dfp_read_field_def_gw.LoRaModulationInfo'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

'decode_msg_gw.FSKModulationInfo'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.FSKModulationInfo'(
        Bin,
        0,
        0,
        0,
        id(0, TrUserData),
        id(0, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_gw.FSKModulationInfo'(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'd_field_gw.FSKModulationInfo_frequency_deviation'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_gw.FSKModulationInfo'(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'd_field_gw.FSKModulationInfo_datarate'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_gw.FSKModulationInfo'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'gw.FSKModulationInfo'{frequency_deviation = F@_1, datarate = F@_2};
'dfp_read_field_def_gw.FSKModulationInfo'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_gw.FSKModulationInfo'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_gw.FSKModulationInfo'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_gw.FSKModulationInfo'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'dg_read_field_def_gw.FSKModulationInfo'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            'd_field_gw.FSKModulationInfo_frequency_deviation'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                TrUserData
            );
        16 ->
            'd_field_gw.FSKModulationInfo_datarate'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.FSKModulationInfo'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                1 ->
                    'skip_64_gw.FSKModulationInfo'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 ->
                    'skip_length_delimited_gw.FSKModulationInfo'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.FSKModulationInfo'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                5 ->
                    'skip_32_gw.FSKModulationInfo'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_gw.FSKModulationInfo'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'gw.FSKModulationInfo'{frequency_deviation = F@_1, datarate = F@_2}.

'd_field_gw.FSKModulationInfo_frequency_deviation'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_gw.FSKModulationInfo_frequency_deviation'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'd_field_gw.FSKModulationInfo_frequency_deviation'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.FSKModulationInfo'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_gw.FSKModulationInfo_datarate'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_gw.FSKModulationInfo_datarate'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_gw.FSKModulationInfo_datarate'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.FSKModulationInfo'(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

'skip_varint_gw.FSKModulationInfo'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'skip_varint_gw.FSKModulationInfo'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_gw.FSKModulationInfo'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_gw.FSKModulationInfo'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_gw.FSKModulationInfo'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.FSKModulationInfo'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'skip_length_delimited_gw.FSKModulationInfo'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.FSKModulationInfo'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_gw.FSKModulationInfo'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.FSKModulationInfo'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_gw.FSKModulationInfo'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_gw.FSKModulationInfo'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_gw.FSKModulationInfo'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_gw.FSKModulationInfo'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'decode_msg_gw.EncryptedFineTimestamp'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.EncryptedFineTimestamp'(
        Bin,
        0,
        0,
        0,
        id(0, TrUserData),
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_gw.EncryptedFineTimestamp'(
    <<8, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_gw.EncryptedFineTimestamp_aes_key_index'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'dfp_read_field_def_gw.EncryptedFineTimestamp'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_gw.EncryptedFineTimestamp_encrypted_ns'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_gw.EncryptedFineTimestamp'(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_gw.EncryptedFineTimestamp_fpga_id'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_gw.EncryptedFineTimestamp'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) ->
    #'gw.EncryptedFineTimestamp'{aes_key_index = F@_1, encrypted_ns = F@_2, fpga_id = F@_3};
'dfp_read_field_def_gw.EncryptedFineTimestamp'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'dg_read_field_def_gw.EncryptedFineTimestamp'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'dg_read_field_def_gw.EncryptedFineTimestamp'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_gw.EncryptedFineTimestamp'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'dg_read_field_def_gw.EncryptedFineTimestamp'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            'd_field_gw.EncryptedFineTimestamp_aes_key_index'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        18 ->
            'd_field_gw.EncryptedFineTimestamp_encrypted_ns'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        26 ->
            'd_field_gw.EncryptedFineTimestamp_fpga_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.EncryptedFineTimestamp'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                1 ->
                    'skip_64_gw.EncryptedFineTimestamp'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_gw.EncryptedFineTimestamp'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.EncryptedFineTimestamp'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                5 ->
                    'skip_32_gw.EncryptedFineTimestamp'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_gw.EncryptedFineTimestamp'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) ->
    #'gw.EncryptedFineTimestamp'{aes_key_index = F@_1, encrypted_ns = F@_2, fpga_id = F@_3}.

'd_field_gw.EncryptedFineTimestamp_aes_key_index'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_gw.EncryptedFineTimestamp_aes_key_index'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_gw.EncryptedFineTimestamp_aes_key_index'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.EncryptedFineTimestamp'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        F@_3,
        TrUserData
    ).

'd_field_gw.EncryptedFineTimestamp_encrypted_ns'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_gw.EncryptedFineTimestamp_encrypted_ns'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_gw.EncryptedFineTimestamp_encrypted_ns'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.EncryptedFineTimestamp'(
        RestF,
        0,
        0,
        F,
        F@_1,
        NewFValue,
        F@_3,
        TrUserData
    ).

'd_field_gw.EncryptedFineTimestamp_fpga_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_gw.EncryptedFineTimestamp_fpga_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_gw.EncryptedFineTimestamp_fpga_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.EncryptedFineTimestamp'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        NewFValue,
        TrUserData
    ).

'skip_varint_gw.EncryptedFineTimestamp'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'skip_varint_gw.EncryptedFineTimestamp'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'skip_varint_gw.EncryptedFineTimestamp'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'dfp_read_field_def_gw.EncryptedFineTimestamp'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'skip_length_delimited_gw.EncryptedFineTimestamp'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.EncryptedFineTimestamp'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'skip_length_delimited_gw.EncryptedFineTimestamp'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.EncryptedFineTimestamp'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

'skip_group_gw.EncryptedFineTimestamp'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.EncryptedFineTimestamp'(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

'skip_32_gw.EncryptedFineTimestamp'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_gw.EncryptedFineTimestamp'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'skip_64_gw.EncryptedFineTimestamp'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_gw.EncryptedFineTimestamp'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'decode_msg_gw.PlainFineTimestamp'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.PlainFineTimestamp'(Bin, 0, 0, 0, id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_gw.PlainFineTimestamp'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'd_field_gw.PlainFineTimestamp_time'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_gw.PlainFineTimestamp'(<<>>, 0, 0, _, F@_1, _) ->
    #'gw.PlainFineTimestamp'{time = F@_1};
'dfp_read_field_def_gw.PlainFineTimestamp'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_gw.PlainFineTimestamp'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_gw.PlainFineTimestamp'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_gw.PlainFineTimestamp'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'dg_read_field_def_gw.PlainFineTimestamp'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_gw.PlainFineTimestamp_time'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.PlainFineTimestamp'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 ->
                    'skip_64_gw.PlainFineTimestamp'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 ->
                    'skip_length_delimited_gw.PlainFineTimestamp'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.PlainFineTimestamp'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 ->
                    'skip_32_gw.PlainFineTimestamp'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
'dg_read_field_def_gw.PlainFineTimestamp'(<<>>, 0, 0, _, F@_1, _) ->
    #'gw.PlainFineTimestamp'{time = F@_1}.

'd_field_gw.PlainFineTimestamp_time'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when
    N < 57
->
    'd_field_gw.PlainFineTimestamp_time'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'd_field_gw.PlainFineTimestamp_time'(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Timestamp'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.PlainFineTimestamp'(
        RestF,
        0,
        0,
        F,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Timestamp'(Prev, NewFValue, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_gw.PlainFineTimestamp'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'skip_varint_gw.PlainFineTimestamp'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_gw.PlainFineTimestamp'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_gw.PlainFineTimestamp'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_gw.PlainFineTimestamp'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.PlainFineTimestamp'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'skip_length_delimited_gw.PlainFineTimestamp'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.PlainFineTimestamp'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_gw.PlainFineTimestamp'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.PlainFineTimestamp'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_gw.PlainFineTimestamp'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_gw.PlainFineTimestamp'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_gw.PlainFineTimestamp'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_gw.PlainFineTimestamp'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_gw.GatewayStats'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.GatewayStats'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id([], TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        id([], TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        'tr_decode_init_default_gw.GatewayStats.meta_data'([], TrUserData),
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_gw.GatewayStats'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    'd_field_gw.GatewayStats_gateway_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'dfp_read_field_def_gw.GatewayStats'(
    <<74, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    'd_field_gw.GatewayStats_ip'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'dfp_read_field_def_gw.GatewayStats'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    'd_field_gw.GatewayStats_time'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'dfp_read_field_def_gw.GatewayStats'(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    'd_field_gw.GatewayStats_location'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'dfp_read_field_def_gw.GatewayStats'(
    <<34, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    'd_field_gw.GatewayStats_config_version'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'dfp_read_field_def_gw.GatewayStats'(
    <<40, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    'd_field_gw.GatewayStats_rx_packets_received'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'dfp_read_field_def_gw.GatewayStats'(
    <<48, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    'd_field_gw.GatewayStats_rx_packets_received_ok'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'dfp_read_field_def_gw.GatewayStats'(
    <<56, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    'd_field_gw.GatewayStats_tx_packets_received'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'dfp_read_field_def_gw.GatewayStats'(
    <<64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    'd_field_gw.GatewayStats_tx_packets_emitted'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'dfp_read_field_def_gw.GatewayStats'(
    <<82, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    'd_field_gw.GatewayStats_meta_data'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'dfp_read_field_def_gw.GatewayStats'(
    <<90, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    'd_field_gw.GatewayStats_stats_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'dfp_read_field_def_gw.GatewayStats'(
    <<>>,
    0,
    0,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    R1,
    F@_11,
    TrUserData
) ->
    #'gw.GatewayStats'{
        gateway_id = F@_1,
        ip = F@_2,
        time = F@_3,
        location = F@_4,
        config_version = F@_5,
        rx_packets_received = F@_6,
        rx_packets_received_ok = F@_7,
        tx_packets_received = F@_8,
        tx_packets_emitted = F@_9,
        meta_data = 'tr_decode_repeated_finalize_gw.GatewayStats.meta_data'(R1, TrUserData),
        stats_id = F@_11
    };
'dfp_read_field_def_gw.GatewayStats'(
    Other,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    'dg_read_field_def_gw.GatewayStats'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    ).

'dg_read_field_def_gw.GatewayStats'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_gw.GatewayStats'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'dg_read_field_def_gw.GatewayStats'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_gw.GatewayStats_gateway_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                TrUserData
            );
        74 ->
            'd_field_gw.GatewayStats_ip'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                TrUserData
            );
        18 ->
            'd_field_gw.GatewayStats_time'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                TrUserData
            );
        26 ->
            'd_field_gw.GatewayStats_location'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                TrUserData
            );
        34 ->
            'd_field_gw.GatewayStats_config_version'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                TrUserData
            );
        40 ->
            'd_field_gw.GatewayStats_rx_packets_received'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                TrUserData
            );
        48 ->
            'd_field_gw.GatewayStats_rx_packets_received_ok'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                TrUserData
            );
        56 ->
            'd_field_gw.GatewayStats_tx_packets_received'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                TrUserData
            );
        64 ->
            'd_field_gw.GatewayStats_tx_packets_emitted'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                TrUserData
            );
        82 ->
            'd_field_gw.GatewayStats_meta_data'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                TrUserData
            );
        90 ->
            'd_field_gw.GatewayStats_stats_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.GatewayStats'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        F@_11,
                        TrUserData
                    );
                1 ->
                    'skip_64_gw.GatewayStats'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        F@_11,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_gw.GatewayStats'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        F@_11,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.GatewayStats'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        F@_11,
                        TrUserData
                    );
                5 ->
                    'skip_32_gw.GatewayStats'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        F@_11,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_gw.GatewayStats'(
    <<>>,
    0,
    0,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    R1,
    F@_11,
    TrUserData
) ->
    #'gw.GatewayStats'{
        gateway_id = F@_1,
        ip = F@_2,
        time = F@_3,
        location = F@_4,
        config_version = F@_5,
        rx_packets_received = F@_6,
        rx_packets_received_ok = F@_7,
        tx_packets_received = F@_8,
        tx_packets_emitted = F@_9,
        meta_data = 'tr_decode_repeated_finalize_gw.GatewayStats.meta_data'(R1, TrUserData),
        stats_id = F@_11
    }.

'd_field_gw.GatewayStats_gateway_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayStats_gateway_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'd_field_gw.GatewayStats_gateway_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.GatewayStats'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    ).

'd_field_gw.GatewayStats_ip'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayStats_ip'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'd_field_gw.GatewayStats_ip'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Utf8:Len/binary, Rest2/binary>> = Rest,
        {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.GatewayStats'(
        RestF,
        0,
        0,
        F,
        F@_1,
        NewFValue,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    ).

'd_field_gw.GatewayStats_time'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayStats_time'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'd_field_gw.GatewayStats_time'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    Prev,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Timestamp'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.GatewayStats'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Timestamp'(Prev, NewFValue, TrUserData)
        end,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    ).

'd_field_gw.GatewayStats_location'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayStats_location'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'd_field_gw.GatewayStats_location'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    Prev,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_common.Location'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.GatewayStats'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_common.Location'(Prev, NewFValue, TrUserData)
        end,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    ).

'd_field_gw.GatewayStats_config_version'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayStats_config_version'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'd_field_gw.GatewayStats_config_version'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Utf8:Len/binary, Rest2/binary>> = Rest,
        {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.GatewayStats'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        NewFValue,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    ).

'd_field_gw.GatewayStats_rx_packets_received'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayStats_rx_packets_received'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'd_field_gw.GatewayStats_rx_packets_received'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    _,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.GatewayStats'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        NewFValue,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    ).

'd_field_gw.GatewayStats_rx_packets_received_ok'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayStats_rx_packets_received_ok'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'd_field_gw.GatewayStats_rx_packets_received_ok'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    _,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.GatewayStats'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        NewFValue,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    ).

'd_field_gw.GatewayStats_tx_packets_received'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayStats_tx_packets_received'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'd_field_gw.GatewayStats_tx_packets_received'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    _,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.GatewayStats'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        NewFValue,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    ).

'd_field_gw.GatewayStats_tx_packets_emitted'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayStats_tx_packets_emitted'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'd_field_gw.GatewayStats_tx_packets_emitted'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    _,
    F@_10,
    F@_11,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.GatewayStats'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        NewFValue,
        F@_10,
        F@_11,
        TrUserData
    ).

'd_field_gw.GatewayStats_meta_data'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayStats_meta_data'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'd_field_gw.GatewayStats_meta_data'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    Prev,
    F@_11,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_map<string,string>'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.GatewayStats'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        'tr_decode_repeated_add_elem_gw.GatewayStats.meta_data'(NewFValue, Prev, TrUserData),
        F@_11,
        TrUserData
    ).

'd_field_gw.GatewayStats_stats_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayStats_stats_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'd_field_gw.GatewayStats_stats_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.GatewayStats'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        NewFValue,
        TrUserData
    ).

'skip_varint_gw.GatewayStats'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    'skip_varint_gw.GatewayStats'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'skip_varint_gw.GatewayStats'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    'dfp_read_field_def_gw.GatewayStats'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    ).

'skip_length_delimited_gw.GatewayStats'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.GatewayStats'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    );
'skip_length_delimited_gw.GatewayStats'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.GatewayStats'(
        Rest2,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    ).

'skip_group_gw.GatewayStats'(
    Bin,
    _,
    Z2,
    FNum,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.GatewayStats'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    ).

'skip_32_gw.GatewayStats'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    'dfp_read_field_def_gw.GatewayStats'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    ).

'skip_64_gw.GatewayStats'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    TrUserData
) ->
    'dfp_read_field_def_gw.GatewayStats'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        TrUserData
    ).

'decode_msg_gw.UplinkRXInfo'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.UplinkRXInfo'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        id(0, TrUserData),
        id(0.0, TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        id(undefined, TrUserData),
        id('NONE', TrUserData),
        id(undefined, TrUserData),
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        id('NO_CRC', TrUserData),
        TrUserData
    ).

'dfp_read_field_def_gw.UplinkRXInfo'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'd_field_gw.UplinkRXInfo_gateway_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'dfp_read_field_def_gw.UplinkRXInfo'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'd_field_gw.UplinkRXInfo_time'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'dfp_read_field_def_gw.UplinkRXInfo'(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'd_field_gw.UplinkRXInfo_time_since_gps_epoch'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'dfp_read_field_def_gw.UplinkRXInfo'(
    <<40, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'd_field_gw.UplinkRXInfo_rssi'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'dfp_read_field_def_gw.UplinkRXInfo'(
    <<49, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'd_field_gw.UplinkRXInfo_lora_snr'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'dfp_read_field_def_gw.UplinkRXInfo'(
    <<56, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'd_field_gw.UplinkRXInfo_channel'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'dfp_read_field_def_gw.UplinkRXInfo'(
    <<64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'd_field_gw.UplinkRXInfo_rf_chain'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'dfp_read_field_def_gw.UplinkRXInfo'(
    <<72, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'd_field_gw.UplinkRXInfo_board'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'dfp_read_field_def_gw.UplinkRXInfo'(
    <<80, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'd_field_gw.UplinkRXInfo_antenna'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'dfp_read_field_def_gw.UplinkRXInfo'(
    <<90, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'd_field_gw.UplinkRXInfo_location'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'dfp_read_field_def_gw.UplinkRXInfo'(
    <<96, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'd_field_gw.UplinkRXInfo_fine_timestamp_type'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'dfp_read_field_def_gw.UplinkRXInfo'(
    <<106, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'd_field_gw.UplinkRXInfo_encrypted_fine_timestamp'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'dfp_read_field_def_gw.UplinkRXInfo'(
    <<114, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'd_field_gw.UplinkRXInfo_plain_fine_timestamp'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'dfp_read_field_def_gw.UplinkRXInfo'(
    <<122, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'd_field_gw.UplinkRXInfo_context'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'dfp_read_field_def_gw.UplinkRXInfo'(
    <<130, 1, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'd_field_gw.UplinkRXInfo_uplink_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'dfp_read_field_def_gw.UplinkRXInfo'(
    <<136, 1, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'd_field_gw.UplinkRXInfo_crc_status'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'dfp_read_field_def_gw.UplinkRXInfo'(
    <<>>,
    0,
    0,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    _
) ->
    #'gw.UplinkRXInfo'{
        gateway_id = F@_1,
        time = F@_2,
        time_since_gps_epoch = F@_3,
        rssi = F@_4,
        lora_snr = F@_5,
        channel = F@_6,
        rf_chain = F@_7,
        board = F@_8,
        antenna = F@_9,
        location = F@_10,
        fine_timestamp_type = F@_11,
        fine_timestamp = F@_12,
        context = F@_13,
        uplink_id = F@_14,
        crc_status = F@_15
    };
'dfp_read_field_def_gw.UplinkRXInfo'(
    Other,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'dg_read_field_def_gw.UplinkRXInfo'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    ).

'dg_read_field_def_gw.UplinkRXInfo'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_gw.UplinkRXInfo'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'dg_read_field_def_gw.UplinkRXInfo'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_gw.UplinkRXInfo_gateway_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                TrUserData
            );
        18 ->
            'd_field_gw.UplinkRXInfo_time'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                TrUserData
            );
        26 ->
            'd_field_gw.UplinkRXInfo_time_since_gps_epoch'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                TrUserData
            );
        40 ->
            'd_field_gw.UplinkRXInfo_rssi'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                TrUserData
            );
        49 ->
            'd_field_gw.UplinkRXInfo_lora_snr'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                TrUserData
            );
        56 ->
            'd_field_gw.UplinkRXInfo_channel'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                TrUserData
            );
        64 ->
            'd_field_gw.UplinkRXInfo_rf_chain'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                TrUserData
            );
        72 ->
            'd_field_gw.UplinkRXInfo_board'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                TrUserData
            );
        80 ->
            'd_field_gw.UplinkRXInfo_antenna'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                TrUserData
            );
        90 ->
            'd_field_gw.UplinkRXInfo_location'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                TrUserData
            );
        96 ->
            'd_field_gw.UplinkRXInfo_fine_timestamp_type'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                TrUserData
            );
        106 ->
            'd_field_gw.UplinkRXInfo_encrypted_fine_timestamp'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                TrUserData
            );
        114 ->
            'd_field_gw.UplinkRXInfo_plain_fine_timestamp'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                TrUserData
            );
        122 ->
            'd_field_gw.UplinkRXInfo_context'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                TrUserData
            );
        130 ->
            'd_field_gw.UplinkRXInfo_uplink_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                TrUserData
            );
        136 ->
            'd_field_gw.UplinkRXInfo_crc_status'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.UplinkRXInfo'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        F@_11,
                        F@_12,
                        F@_13,
                        F@_14,
                        F@_15,
                        TrUserData
                    );
                1 ->
                    'skip_64_gw.UplinkRXInfo'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        F@_11,
                        F@_12,
                        F@_13,
                        F@_14,
                        F@_15,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_gw.UplinkRXInfo'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        F@_11,
                        F@_12,
                        F@_13,
                        F@_14,
                        F@_15,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.UplinkRXInfo'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        F@_11,
                        F@_12,
                        F@_13,
                        F@_14,
                        F@_15,
                        TrUserData
                    );
                5 ->
                    'skip_32_gw.UplinkRXInfo'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        F@_11,
                        F@_12,
                        F@_13,
                        F@_14,
                        F@_15,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_gw.UplinkRXInfo'(
    <<>>,
    0,
    0,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    _
) ->
    #'gw.UplinkRXInfo'{
        gateway_id = F@_1,
        time = F@_2,
        time_since_gps_epoch = F@_3,
        rssi = F@_4,
        lora_snr = F@_5,
        channel = F@_6,
        rf_chain = F@_7,
        board = F@_8,
        antenna = F@_9,
        location = F@_10,
        fine_timestamp_type = F@_11,
        fine_timestamp = F@_12,
        context = F@_13,
        uplink_id = F@_14,
        crc_status = F@_15
    }.

'd_field_gw.UplinkRXInfo_gateway_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkRXInfo_gateway_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'd_field_gw.UplinkRXInfo_gateway_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.UplinkRXInfo'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    ).

'd_field_gw.UplinkRXInfo_time'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkRXInfo_time'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'd_field_gw.UplinkRXInfo_time'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    Prev,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Timestamp'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.UplinkRXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Timestamp'(Prev, NewFValue, TrUserData)
        end,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    ).

'd_field_gw.UplinkRXInfo_time_since_gps_epoch'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkRXInfo_time_since_gps_epoch'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'd_field_gw.UplinkRXInfo_time_since_gps_epoch'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    Prev,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Duration'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.UplinkRXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Duration'(Prev, NewFValue, TrUserData)
        end,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    ).

'd_field_gw.UplinkRXInfo_rssi'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkRXInfo_rssi'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'd_field_gw.UplinkRXInfo_rssi'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    _,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    {NewFValue, RestF} =
        {begin
                <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>,
                id(Res, TrUserData)
            end,
            Rest},
    'dfp_read_field_def_gw.UplinkRXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        NewFValue,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    ).

'd_field_gw.UplinkRXInfo_lora_snr'(
    <<0:48, 240, 127, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'dfp_read_field_def_gw.UplinkRXInfo'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        id(infinity, TrUserData),
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'd_field_gw.UplinkRXInfo_lora_snr'(
    <<0:48, 240, 255, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'dfp_read_field_def_gw.UplinkRXInfo'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        id('-infinity', TrUserData),
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'd_field_gw.UplinkRXInfo_lora_snr'(
    <<_:48, 15:4, _:4, _:1, 127:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'dfp_read_field_def_gw.UplinkRXInfo'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        id(nan, TrUserData),
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'd_field_gw.UplinkRXInfo_lora_snr'(
    <<Value:64/little-float, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'dfp_read_field_def_gw.UplinkRXInfo'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        id(Value, TrUserData),
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    ).

'd_field_gw.UplinkRXInfo_channel'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkRXInfo_channel'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'd_field_gw.UplinkRXInfo_channel'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    _,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.UplinkRXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        NewFValue,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    ).

'd_field_gw.UplinkRXInfo_rf_chain'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkRXInfo_rf_chain'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'd_field_gw.UplinkRXInfo_rf_chain'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    _,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.UplinkRXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        NewFValue,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    ).

'd_field_gw.UplinkRXInfo_board'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkRXInfo_board'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'd_field_gw.UplinkRXInfo_board'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    _,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.UplinkRXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        NewFValue,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    ).

'd_field_gw.UplinkRXInfo_antenna'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkRXInfo_antenna'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'd_field_gw.UplinkRXInfo_antenna'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    _,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.UplinkRXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        NewFValue,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    ).

'd_field_gw.UplinkRXInfo_location'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkRXInfo_location'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'd_field_gw.UplinkRXInfo_location'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    Prev,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_common.Location'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.UplinkRXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_common.Location'(Prev, NewFValue, TrUserData)
        end,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    ).

'd_field_gw.UplinkRXInfo_fine_timestamp_type'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkRXInfo_fine_timestamp_type'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'd_field_gw.UplinkRXInfo_fine_timestamp_type'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    _,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    {NewFValue, RestF} =
        {id(
                'd_enum_gw.FineTimestampType'(begin
                    <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>,
                    id(Res, TrUserData)
                end),
                TrUserData
            ),
            Rest},
    'dfp_read_field_def_gw.UplinkRXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        NewFValue,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    ).

'd_field_gw.UplinkRXInfo_encrypted_fine_timestamp'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkRXInfo_encrypted_fine_timestamp'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'd_field_gw.UplinkRXInfo_encrypted_fine_timestamp'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    Prev,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_gw.EncryptedFineTimestamp'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.UplinkRXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        case Prev of
            undefined ->
                id({encrypted_fine_timestamp, NewFValue}, TrUserData);
            {encrypted_fine_timestamp, MVPrev} ->
                id(
                    {encrypted_fine_timestamp,
                        'merge_msg_gw.EncryptedFineTimestamp'(MVPrev, NewFValue, TrUserData)},
                    TrUserData
                );
            _ ->
                id({encrypted_fine_timestamp, NewFValue}, TrUserData)
        end,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    ).

'd_field_gw.UplinkRXInfo_plain_fine_timestamp'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkRXInfo_plain_fine_timestamp'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'd_field_gw.UplinkRXInfo_plain_fine_timestamp'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    Prev,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_gw.PlainFineTimestamp'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.UplinkRXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        case Prev of
            undefined ->
                id({plain_fine_timestamp, NewFValue}, TrUserData);
            {plain_fine_timestamp, MVPrev} ->
                id(
                    {plain_fine_timestamp,
                        'merge_msg_gw.PlainFineTimestamp'(MVPrev, NewFValue, TrUserData)},
                    TrUserData
                );
            _ ->
                id({plain_fine_timestamp, NewFValue}, TrUserData)
        end,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    ).

'd_field_gw.UplinkRXInfo_context'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkRXInfo_context'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'd_field_gw.UplinkRXInfo_context'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    _,
    F@_14,
    F@_15,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.UplinkRXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        NewFValue,
        F@_14,
        F@_15,
        TrUserData
    ).

'd_field_gw.UplinkRXInfo_uplink_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkRXInfo_uplink_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'd_field_gw.UplinkRXInfo_uplink_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    _,
    F@_15,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.UplinkRXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        NewFValue,
        F@_15,
        TrUserData
    ).

'd_field_gw.UplinkRXInfo_crc_status'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkRXInfo_crc_status'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'd_field_gw.UplinkRXInfo_crc_status'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    _,
    TrUserData
) ->
    {NewFValue, RestF} =
        {id(
                'd_enum_gw.CRCStatus'(begin
                    <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>,
                    id(Res, TrUserData)
                end),
                TrUserData
            ),
            Rest},
    'dfp_read_field_def_gw.UplinkRXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        NewFValue,
        TrUserData
    ).

'skip_varint_gw.UplinkRXInfo'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'skip_varint_gw.UplinkRXInfo'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'skip_varint_gw.UplinkRXInfo'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'dfp_read_field_def_gw.UplinkRXInfo'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    ).

'skip_length_delimited_gw.UplinkRXInfo'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.UplinkRXInfo'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    );
'skip_length_delimited_gw.UplinkRXInfo'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.UplinkRXInfo'(
        Rest2,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    ).

'skip_group_gw.UplinkRXInfo'(
    Bin,
    _,
    Z2,
    FNum,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.UplinkRXInfo'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    ).

'skip_32_gw.UplinkRXInfo'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'dfp_read_field_def_gw.UplinkRXInfo'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    ).

'skip_64_gw.UplinkRXInfo'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    TrUserData
) ->
    'dfp_read_field_def_gw.UplinkRXInfo'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        TrUserData
    ).

'decode_msg_gw.DownlinkTXInfo'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.DownlinkTXInfo'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        id('LORA', TrUserData),
        id(undefined, TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        id('IMMEDIATELY', TrUserData),
        id(undefined, TrUserData),
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_gw.DownlinkTXInfo'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'd_field_gw.DownlinkTXInfo_gateway_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'dfp_read_field_def_gw.DownlinkTXInfo'(
    <<40, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'd_field_gw.DownlinkTXInfo_frequency'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'dfp_read_field_def_gw.DownlinkTXInfo'(
    <<48, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'd_field_gw.DownlinkTXInfo_power'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'dfp_read_field_def_gw.DownlinkTXInfo'(
    <<56, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'd_field_gw.DownlinkTXInfo_modulation'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'dfp_read_field_def_gw.DownlinkTXInfo'(
    <<66, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'd_field_gw.DownlinkTXInfo_lora_modulation_info'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'dfp_read_field_def_gw.DownlinkTXInfo'(
    <<74, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'd_field_gw.DownlinkTXInfo_fsk_modulation_info'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'dfp_read_field_def_gw.DownlinkTXInfo'(
    <<80, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'd_field_gw.DownlinkTXInfo_board'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'dfp_read_field_def_gw.DownlinkTXInfo'(
    <<88, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'd_field_gw.DownlinkTXInfo_antenna'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'dfp_read_field_def_gw.DownlinkTXInfo'(
    <<96, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'd_field_gw.DownlinkTXInfo_timing'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'dfp_read_field_def_gw.DownlinkTXInfo'(
    <<106, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'd_field_gw.DownlinkTXInfo_immediately_timing_info'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'dfp_read_field_def_gw.DownlinkTXInfo'(
    <<114, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'd_field_gw.DownlinkTXInfo_delay_timing_info'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'dfp_read_field_def_gw.DownlinkTXInfo'(
    <<122, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'd_field_gw.DownlinkTXInfo_gps_epoch_timing_info'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'dfp_read_field_def_gw.DownlinkTXInfo'(
    <<130, 1, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'd_field_gw.DownlinkTXInfo_context'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'dfp_read_field_def_gw.DownlinkTXInfo'(
    <<>>,
    0,
    0,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    _
) ->
    #'gw.DownlinkTXInfo'{
        gateway_id = F@_1,
        frequency = F@_2,
        power = F@_3,
        modulation = F@_4,
        modulation_info = F@_5,
        board = F@_6,
        antenna = F@_7,
        timing = F@_8,
        timing_info = F@_9,
        context = F@_10
    };
'dfp_read_field_def_gw.DownlinkTXInfo'(
    Other,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'dg_read_field_def_gw.DownlinkTXInfo'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

'dg_read_field_def_gw.DownlinkTXInfo'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_gw.DownlinkTXInfo'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'dg_read_field_def_gw.DownlinkTXInfo'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_gw.DownlinkTXInfo_gateway_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        40 ->
            'd_field_gw.DownlinkTXInfo_frequency'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        48 ->
            'd_field_gw.DownlinkTXInfo_power'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        56 ->
            'd_field_gw.DownlinkTXInfo_modulation'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        66 ->
            'd_field_gw.DownlinkTXInfo_lora_modulation_info'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        74 ->
            'd_field_gw.DownlinkTXInfo_fsk_modulation_info'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        80 ->
            'd_field_gw.DownlinkTXInfo_board'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        88 ->
            'd_field_gw.DownlinkTXInfo_antenna'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        96 ->
            'd_field_gw.DownlinkTXInfo_timing'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        106 ->
            'd_field_gw.DownlinkTXInfo_immediately_timing_info'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        114 ->
            'd_field_gw.DownlinkTXInfo_delay_timing_info'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        122 ->
            'd_field_gw.DownlinkTXInfo_gps_epoch_timing_info'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        130 ->
            'd_field_gw.DownlinkTXInfo_context'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.DownlinkTXInfo'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        TrUserData
                    );
                1 ->
                    'skip_64_gw.DownlinkTXInfo'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_gw.DownlinkTXInfo'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.DownlinkTXInfo'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        TrUserData
                    );
                5 ->
                    'skip_32_gw.DownlinkTXInfo'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_gw.DownlinkTXInfo'(
    <<>>,
    0,
    0,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    _
) ->
    #'gw.DownlinkTXInfo'{
        gateway_id = F@_1,
        frequency = F@_2,
        power = F@_3,
        modulation = F@_4,
        modulation_info = F@_5,
        board = F@_6,
        antenna = F@_7,
        timing = F@_8,
        timing_info = F@_9,
        context = F@_10
    }.

'd_field_gw.DownlinkTXInfo_gateway_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkTXInfo_gateway_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'd_field_gw.DownlinkTXInfo_gateway_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.DownlinkTXInfo'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

'd_field_gw.DownlinkTXInfo_frequency'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkTXInfo_frequency'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'd_field_gw.DownlinkTXInfo_frequency'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.DownlinkTXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        NewFValue,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

'd_field_gw.DownlinkTXInfo_power'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkTXInfo_power'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'd_field_gw.DownlinkTXInfo_power'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    _,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} =
        {begin
                <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>,
                id(Res, TrUserData)
            end,
            Rest},
    'dfp_read_field_def_gw.DownlinkTXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        NewFValue,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

'd_field_gw.DownlinkTXInfo_modulation'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkTXInfo_modulation'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'd_field_gw.DownlinkTXInfo_modulation'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    _,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} =
        {id(
                'd_enum_common.Modulation'(begin
                    <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>,
                    id(Res, TrUserData)
                end),
                TrUserData
            ),
            Rest},
    'dfp_read_field_def_gw.DownlinkTXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        NewFValue,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

'd_field_gw.DownlinkTXInfo_lora_modulation_info'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkTXInfo_lora_modulation_info'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'd_field_gw.DownlinkTXInfo_lora_modulation_info'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    Prev,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_gw.LoRaModulationInfo'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.DownlinkTXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        case Prev of
            undefined ->
                id({lora_modulation_info, NewFValue}, TrUserData);
            {lora_modulation_info, MVPrev} ->
                id(
                    {lora_modulation_info,
                        'merge_msg_gw.LoRaModulationInfo'(MVPrev, NewFValue, TrUserData)},
                    TrUserData
                );
            _ ->
                id({lora_modulation_info, NewFValue}, TrUserData)
        end,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

'd_field_gw.DownlinkTXInfo_fsk_modulation_info'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkTXInfo_fsk_modulation_info'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'd_field_gw.DownlinkTXInfo_fsk_modulation_info'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    Prev,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_gw.FSKModulationInfo'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.DownlinkTXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        case Prev of
            undefined ->
                id({fsk_modulation_info, NewFValue}, TrUserData);
            {fsk_modulation_info, MVPrev} ->
                id(
                    {fsk_modulation_info,
                        'merge_msg_gw.FSKModulationInfo'(MVPrev, NewFValue, TrUserData)},
                    TrUserData
                );
            _ ->
                id({fsk_modulation_info, NewFValue}, TrUserData)
        end,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

'd_field_gw.DownlinkTXInfo_board'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkTXInfo_board'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'd_field_gw.DownlinkTXInfo_board'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    _,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.DownlinkTXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        NewFValue,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

'd_field_gw.DownlinkTXInfo_antenna'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkTXInfo_antenna'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'd_field_gw.DownlinkTXInfo_antenna'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    _,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.DownlinkTXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        NewFValue,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

'd_field_gw.DownlinkTXInfo_timing'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkTXInfo_timing'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'd_field_gw.DownlinkTXInfo_timing'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    _,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} =
        {id(
                'd_enum_gw.DownlinkTiming'(begin
                    <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>,
                    id(Res, TrUserData)
                end),
                TrUserData
            ),
            Rest},
    'dfp_read_field_def_gw.DownlinkTXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        NewFValue,
        F@_9,
        F@_10,
        TrUserData
    ).

'd_field_gw.DownlinkTXInfo_immediately_timing_info'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkTXInfo_immediately_timing_info'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'd_field_gw.DownlinkTXInfo_immediately_timing_info'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    Prev,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_gw.ImmediatelyTimingInfo'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.DownlinkTXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        case Prev of
            undefined ->
                id({immediately_timing_info, NewFValue}, TrUserData);
            {immediately_timing_info, MVPrev} ->
                id(
                    {immediately_timing_info,
                        'merge_msg_gw.ImmediatelyTimingInfo'(MVPrev, NewFValue, TrUserData)},
                    TrUserData
                );
            _ ->
                id({immediately_timing_info, NewFValue}, TrUserData)
        end,
        F@_10,
        TrUserData
    ).

'd_field_gw.DownlinkTXInfo_delay_timing_info'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkTXInfo_delay_timing_info'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'd_field_gw.DownlinkTXInfo_delay_timing_info'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    Prev,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_gw.DelayTimingInfo'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.DownlinkTXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        case Prev of
            undefined ->
                id({delay_timing_info, NewFValue}, TrUserData);
            {delay_timing_info, MVPrev} ->
                id(
                    {delay_timing_info,
                        'merge_msg_gw.DelayTimingInfo'(MVPrev, NewFValue, TrUserData)},
                    TrUserData
                );
            _ ->
                id({delay_timing_info, NewFValue}, TrUserData)
        end,
        F@_10,
        TrUserData
    ).

'd_field_gw.DownlinkTXInfo_gps_epoch_timing_info'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkTXInfo_gps_epoch_timing_info'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'd_field_gw.DownlinkTXInfo_gps_epoch_timing_info'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    Prev,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_gw.GPSEpochTimingInfo'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.DownlinkTXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        case Prev of
            undefined ->
                id({gps_epoch_timing_info, NewFValue}, TrUserData);
            {gps_epoch_timing_info, MVPrev} ->
                id(
                    {gps_epoch_timing_info,
                        'merge_msg_gw.GPSEpochTimingInfo'(MVPrev, NewFValue, TrUserData)},
                    TrUserData
                );
            _ ->
                id({gps_epoch_timing_info, NewFValue}, TrUserData)
        end,
        F@_10,
        TrUserData
    ).

'd_field_gw.DownlinkTXInfo_context'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkTXInfo_context'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'd_field_gw.DownlinkTXInfo_context'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.DownlinkTXInfo'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        NewFValue,
        TrUserData
    ).

'skip_varint_gw.DownlinkTXInfo'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'skip_varint_gw.DownlinkTXInfo'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'skip_varint_gw.DownlinkTXInfo'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'dfp_read_field_def_gw.DownlinkTXInfo'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

'skip_length_delimited_gw.DownlinkTXInfo'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.DownlinkTXInfo'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'skip_length_delimited_gw.DownlinkTXInfo'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.DownlinkTXInfo'(
        Rest2,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

'skip_group_gw.DownlinkTXInfo'(
    Bin,
    _,
    Z2,
    FNum,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.DownlinkTXInfo'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

'skip_32_gw.DownlinkTXInfo'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'dfp_read_field_def_gw.DownlinkTXInfo'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

'skip_64_gw.DownlinkTXInfo'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'dfp_read_field_def_gw.DownlinkTXInfo'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

'decode_msg_gw.ImmediatelyTimingInfo'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.ImmediatelyTimingInfo'(Bin, 0, 0, 0, TrUserData).

'dfp_read_field_def_gw.ImmediatelyTimingInfo'(<<>>, 0, 0, _, _) ->
    #'gw.ImmediatelyTimingInfo'{};
'dfp_read_field_def_gw.ImmediatelyTimingInfo'(Other, Z1, Z2, F, TrUserData) ->
    'dg_read_field_def_gw.ImmediatelyTimingInfo'(Other, Z1, Z2, F, TrUserData).

'dg_read_field_def_gw.ImmediatelyTimingInfo'(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when
    N < 32 - 7
->
    'dg_read_field_def_gw.ImmediatelyTimingInfo'(Rest, N + 7, X bsl N + Acc, F, TrUserData);
'dg_read_field_def_gw.ImmediatelyTimingInfo'(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> 'skip_varint_gw.ImmediatelyTimingInfo'(Rest, 0, 0, Key bsr 3, TrUserData);
        1 -> 'skip_64_gw.ImmediatelyTimingInfo'(Rest, 0, 0, Key bsr 3, TrUserData);
        2 -> 'skip_length_delimited_gw.ImmediatelyTimingInfo'(Rest, 0, 0, Key bsr 3, TrUserData);
        3 -> 'skip_group_gw.ImmediatelyTimingInfo'(Rest, 0, 0, Key bsr 3, TrUserData);
        5 -> 'skip_32_gw.ImmediatelyTimingInfo'(Rest, 0, 0, Key bsr 3, TrUserData)
    end;
'dg_read_field_def_gw.ImmediatelyTimingInfo'(<<>>, 0, 0, _, _) ->
    #'gw.ImmediatelyTimingInfo'{}.

'skip_varint_gw.ImmediatelyTimingInfo'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) ->
    'skip_varint_gw.ImmediatelyTimingInfo'(Rest, Z1, Z2, F, TrUserData);
'skip_varint_gw.ImmediatelyTimingInfo'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) ->
    'dfp_read_field_def_gw.ImmediatelyTimingInfo'(Rest, Z1, Z2, F, TrUserData).

'skip_length_delimited_gw.ImmediatelyTimingInfo'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.ImmediatelyTimingInfo'(Rest, N + 7, X bsl N + Acc, F, TrUserData);
'skip_length_delimited_gw.ImmediatelyTimingInfo'(<<0:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.ImmediatelyTimingInfo'(Rest2, 0, 0, F, TrUserData).

'skip_group_gw.ImmediatelyTimingInfo'(Bin, _, Z2, FNum, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.ImmediatelyTimingInfo'(Rest, 0, Z2, FNum, TrUserData).

'skip_32_gw.ImmediatelyTimingInfo'(<<_:32, Rest/binary>>, Z1, Z2, F, TrUserData) ->
    'dfp_read_field_def_gw.ImmediatelyTimingInfo'(Rest, Z1, Z2, F, TrUserData).

'skip_64_gw.ImmediatelyTimingInfo'(<<_:64, Rest/binary>>, Z1, Z2, F, TrUserData) ->
    'dfp_read_field_def_gw.ImmediatelyTimingInfo'(Rest, Z1, Z2, F, TrUserData).

'decode_msg_gw.DelayTimingInfo'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.DelayTimingInfo'(Bin, 0, 0, 0, id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_gw.DelayTimingInfo'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'd_field_gw.DelayTimingInfo_delay'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_gw.DelayTimingInfo'(<<>>, 0, 0, _, F@_1, _) ->
    #'gw.DelayTimingInfo'{delay = F@_1};
'dfp_read_field_def_gw.DelayTimingInfo'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_gw.DelayTimingInfo'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_gw.DelayTimingInfo'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when
    N < 32 - 7
->
    'dg_read_field_def_gw.DelayTimingInfo'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'dg_read_field_def_gw.DelayTimingInfo'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_gw.DelayTimingInfo_delay'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.DelayTimingInfo'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 ->
                    'skip_64_gw.DelayTimingInfo'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 ->
                    'skip_length_delimited_gw.DelayTimingInfo'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.DelayTimingInfo'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 ->
                    'skip_32_gw.DelayTimingInfo'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
'dg_read_field_def_gw.DelayTimingInfo'(<<>>, 0, 0, _, F@_1, _) ->
    #'gw.DelayTimingInfo'{delay = F@_1}.

'd_field_gw.DelayTimingInfo_delay'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when
    N < 57
->
    'd_field_gw.DelayTimingInfo_delay'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'd_field_gw.DelayTimingInfo_delay'(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Duration'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.DelayTimingInfo'(
        RestF,
        0,
        0,
        F,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Duration'(Prev, NewFValue, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_gw.DelayTimingInfo'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'skip_varint_gw.DelayTimingInfo'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_gw.DelayTimingInfo'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_gw.DelayTimingInfo'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_gw.DelayTimingInfo'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.DelayTimingInfo'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'skip_length_delimited_gw.DelayTimingInfo'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.DelayTimingInfo'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_gw.DelayTimingInfo'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.DelayTimingInfo'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_gw.DelayTimingInfo'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_gw.DelayTimingInfo'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_gw.DelayTimingInfo'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_gw.DelayTimingInfo'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_gw.GPSEpochTimingInfo'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.GPSEpochTimingInfo'(Bin, 0, 0, 0, id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_gw.GPSEpochTimingInfo'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'd_field_gw.GPSEpochTimingInfo_time_since_gps_epoch'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_gw.GPSEpochTimingInfo'(<<>>, 0, 0, _, F@_1, _) ->
    #'gw.GPSEpochTimingInfo'{time_since_gps_epoch = F@_1};
'dfp_read_field_def_gw.GPSEpochTimingInfo'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_gw.GPSEpochTimingInfo'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_gw.GPSEpochTimingInfo'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_gw.GPSEpochTimingInfo'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'dg_read_field_def_gw.GPSEpochTimingInfo'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_gw.GPSEpochTimingInfo_time_since_gps_epoch'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.GPSEpochTimingInfo'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 ->
                    'skip_64_gw.GPSEpochTimingInfo'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 ->
                    'skip_length_delimited_gw.GPSEpochTimingInfo'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.GPSEpochTimingInfo'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 ->
                    'skip_32_gw.GPSEpochTimingInfo'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
'dg_read_field_def_gw.GPSEpochTimingInfo'(<<>>, 0, 0, _, F@_1, _) ->
    #'gw.GPSEpochTimingInfo'{time_since_gps_epoch = F@_1}.

'd_field_gw.GPSEpochTimingInfo_time_since_gps_epoch'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_gw.GPSEpochTimingInfo_time_since_gps_epoch'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'd_field_gw.GPSEpochTimingInfo_time_since_gps_epoch'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Duration'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.GPSEpochTimingInfo'(
        RestF,
        0,
        0,
        F,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Duration'(Prev, NewFValue, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_gw.GPSEpochTimingInfo'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'skip_varint_gw.GPSEpochTimingInfo'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_gw.GPSEpochTimingInfo'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_gw.GPSEpochTimingInfo'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_gw.GPSEpochTimingInfo'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.GPSEpochTimingInfo'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'skip_length_delimited_gw.GPSEpochTimingInfo'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.GPSEpochTimingInfo'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_gw.GPSEpochTimingInfo'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.GPSEpochTimingInfo'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_gw.GPSEpochTimingInfo'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_gw.GPSEpochTimingInfo'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_gw.GPSEpochTimingInfo'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_gw.GPSEpochTimingInfo'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_gw.UplinkFrame'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.UplinkFrame'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_gw.UplinkFrame'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'd_field_gw.UplinkFrame_phy_payload'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_gw.UplinkFrame'(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'd_field_gw.UplinkFrame_tx_info'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_gw.UplinkFrame'(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'd_field_gw.UplinkFrame_rx_info'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_gw.UplinkFrame'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) ->
    #'gw.UplinkFrame'{phy_payload = F@_1, tx_info = F@_2, rx_info = F@_3};
'dfp_read_field_def_gw.UplinkFrame'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'dg_read_field_def_gw.UplinkFrame'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'dg_read_field_def_gw.UplinkFrame'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_gw.UplinkFrame'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
'dg_read_field_def_gw.UplinkFrame'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_gw.UplinkFrame_phy_payload'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 ->
            'd_field_gw.UplinkFrame_tx_info'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 ->
            'd_field_gw.UplinkFrame_rx_info'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.UplinkFrame'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                1 ->
                    'skip_64_gw.UplinkFrame'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 ->
                    'skip_length_delimited_gw.UplinkFrame'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.UplinkFrame'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                5 ->
                    'skip_32_gw.UplinkFrame'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
'dg_read_field_def_gw.UplinkFrame'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) ->
    #'gw.UplinkFrame'{phy_payload = F@_1, tx_info = F@_2, rx_info = F@_3}.

'd_field_gw.UplinkFrame_phy_payload'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkFrame_phy_payload'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_gw.UplinkFrame_phy_payload'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.UplinkFrame'(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

'd_field_gw.UplinkFrame_tx_info'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkFrame_tx_info'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
'd_field_gw.UplinkFrame_tx_info'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    Prev,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_gw.UplinkTXInfo'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.UplinkFrame'(
        RestF,
        0,
        0,
        F,
        F@_1,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_gw.UplinkTXInfo'(Prev, NewFValue, TrUserData)
        end,
        F@_3,
        TrUserData
    ).

'd_field_gw.UplinkFrame_rx_info'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkFrame_rx_info'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
'd_field_gw.UplinkFrame_rx_info'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_gw.UplinkRXInfo'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.UplinkFrame'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_gw.UplinkRXInfo'(Prev, NewFValue, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_gw.UplinkFrame'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'skip_varint_gw.UplinkFrame'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'skip_varint_gw.UplinkFrame'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_gw.UplinkFrame'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'skip_length_delimited_gw.UplinkFrame'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.UplinkFrame'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'skip_length_delimited_gw.UplinkFrame'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.UplinkFrame'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

'skip_group_gw.UplinkFrame'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.UplinkFrame'(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

'skip_32_gw.UplinkFrame'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_gw.UplinkFrame'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'skip_64_gw.UplinkFrame'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_gw.UplinkFrame'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'decode_msg_gw.UplinkFrameSet'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.UplinkFrameSet'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id(undefined, TrUserData),
        id([], TrUserData),
        TrUserData
    ).

'dfp_read_field_def_gw.UplinkFrameSet'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_gw.UplinkFrameSet_phy_payload'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_gw.UplinkFrameSet'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_gw.UplinkFrameSet_tx_info'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_gw.UplinkFrameSet'(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_gw.UplinkFrameSet_rx_info'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_gw.UplinkFrameSet'(<<>>, 0, 0, _, F@_1, F@_2, R1, TrUserData) ->
    #'gw.UplinkFrameSet'{
        phy_payload = F@_1,
        tx_info = F@_2,
        rx_info = lists_reverse(R1, TrUserData)
    };
'dfp_read_field_def_gw.UplinkFrameSet'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'dg_read_field_def_gw.UplinkFrameSet'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'dg_read_field_def_gw.UplinkFrameSet'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_gw.UplinkFrameSet'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'dg_read_field_def_gw.UplinkFrameSet'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_gw.UplinkFrameSet_phy_payload'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 ->
            'd_field_gw.UplinkFrameSet_tx_info'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 ->
            'd_field_gw.UplinkFrameSet_rx_info'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.UplinkFrameSet'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                1 ->
                    'skip_64_gw.UplinkFrameSet'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_gw.UplinkFrameSet'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.UplinkFrameSet'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                5 ->
                    'skip_32_gw.UplinkFrameSet'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
'dg_read_field_def_gw.UplinkFrameSet'(<<>>, 0, 0, _, F@_1, F@_2, R1, TrUserData) ->
    #'gw.UplinkFrameSet'{
        phy_payload = F@_1,
        tx_info = F@_2,
        rx_info = lists_reverse(R1, TrUserData)
    }.

'd_field_gw.UplinkFrameSet_phy_payload'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkFrameSet_phy_payload'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_gw.UplinkFrameSet_phy_payload'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.UplinkFrameSet'(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

'd_field_gw.UplinkFrameSet_tx_info'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkFrameSet_tx_info'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_gw.UplinkFrameSet_tx_info'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    Prev,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_gw.UplinkTXInfo'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.UplinkFrameSet'(
        RestF,
        0,
        0,
        F,
        F@_1,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_gw.UplinkTXInfo'(Prev, NewFValue, TrUserData)
        end,
        F@_3,
        TrUserData
    ).

'd_field_gw.UplinkFrameSet_rx_info'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_gw.UplinkFrameSet_rx_info'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_gw.UplinkFrameSet_rx_info'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_gw.UplinkRXInfo'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.UplinkFrameSet'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        cons(NewFValue, Prev, TrUserData),
        TrUserData
    ).

'skip_varint_gw.UplinkFrameSet'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'skip_varint_gw.UplinkFrameSet'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'skip_varint_gw.UplinkFrameSet'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_gw.UplinkFrameSet'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'skip_length_delimited_gw.UplinkFrameSet'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.UplinkFrameSet'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'skip_length_delimited_gw.UplinkFrameSet'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.UplinkFrameSet'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

'skip_group_gw.UplinkFrameSet'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.UplinkFrameSet'(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

'skip_32_gw.UplinkFrameSet'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_gw.UplinkFrameSet'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'skip_64_gw.UplinkFrameSet'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_gw.UplinkFrameSet'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'decode_msg_gw.DownlinkFrame'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.DownlinkFrame'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id(undefined, TrUserData),
        id(0, TrUserData),
        id(<<>>, TrUserData),
        id([], TrUserData),
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_gw.DownlinkFrame'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'd_field_gw.DownlinkFrame_phy_payload'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'dfp_read_field_def_gw.DownlinkFrame'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'd_field_gw.DownlinkFrame_tx_info'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'dfp_read_field_def_gw.DownlinkFrame'(
    <<24, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'd_field_gw.DownlinkFrame_token'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'dfp_read_field_def_gw.DownlinkFrame'(
    <<34, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'd_field_gw.DownlinkFrame_downlink_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'dfp_read_field_def_gw.DownlinkFrame'(
    <<42, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'd_field_gw.DownlinkFrame_items'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'dfp_read_field_def_gw.DownlinkFrame'(
    <<50, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'd_field_gw.DownlinkFrame_gateway_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'dfp_read_field_def_gw.DownlinkFrame'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, R1, F@_6, TrUserData) ->
    #'gw.DownlinkFrame'{
        phy_payload = F@_1,
        tx_info = F@_2,
        token = F@_3,
        downlink_id = F@_4,
        items = lists_reverse(R1, TrUserData),
        gateway_id = F@_6
    };
'dfp_read_field_def_gw.DownlinkFrame'(
    Other,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'dg_read_field_def_gw.DownlinkFrame'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'dg_read_field_def_gw.DownlinkFrame'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_gw.DownlinkFrame'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'dg_read_field_def_gw.DownlinkFrame'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_gw.DownlinkFrame_phy_payload'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                TrUserData
            );
        18 ->
            'd_field_gw.DownlinkFrame_tx_info'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                TrUserData
            );
        24 ->
            'd_field_gw.DownlinkFrame_token'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                TrUserData
            );
        34 ->
            'd_field_gw.DownlinkFrame_downlink_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                TrUserData
            );
        42 ->
            'd_field_gw.DownlinkFrame_items'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                TrUserData
            );
        50 ->
            'd_field_gw.DownlinkFrame_gateway_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.DownlinkFrame'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        TrUserData
                    );
                1 ->
                    'skip_64_gw.DownlinkFrame'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_gw.DownlinkFrame'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.DownlinkFrame'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        TrUserData
                    );
                5 ->
                    'skip_32_gw.DownlinkFrame'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_gw.DownlinkFrame'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, R1, F@_6, TrUserData) ->
    #'gw.DownlinkFrame'{
        phy_payload = F@_1,
        tx_info = F@_2,
        token = F@_3,
        downlink_id = F@_4,
        items = lists_reverse(R1, TrUserData),
        gateway_id = F@_6
    }.

'd_field_gw.DownlinkFrame_phy_payload'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkFrame_phy_payload'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'd_field_gw.DownlinkFrame_phy_payload'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.DownlinkFrame'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'd_field_gw.DownlinkFrame_tx_info'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkFrame_tx_info'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'd_field_gw.DownlinkFrame_tx_info'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    Prev,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_gw.DownlinkTXInfo'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.DownlinkFrame'(
        RestF,
        0,
        0,
        F,
        F@_1,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_gw.DownlinkTXInfo'(Prev, NewFValue, TrUserData)
        end,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'd_field_gw.DownlinkFrame_token'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkFrame_token'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'd_field_gw.DownlinkFrame_token'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    _,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.DownlinkFrame'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        NewFValue,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'd_field_gw.DownlinkFrame_downlink_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkFrame_downlink_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'd_field_gw.DownlinkFrame_downlink_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    _,
    F@_5,
    F@_6,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.DownlinkFrame'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        NewFValue,
        F@_5,
        F@_6,
        TrUserData
    ).

'd_field_gw.DownlinkFrame_items'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkFrame_items'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'd_field_gw.DownlinkFrame_items'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    Prev,
    F@_6,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_gw.DownlinkFrameItem'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.DownlinkFrame'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        cons(NewFValue, Prev, TrUserData),
        F@_6,
        TrUserData
    ).

'd_field_gw.DownlinkFrame_gateway_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkFrame_gateway_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'd_field_gw.DownlinkFrame_gateway_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.DownlinkFrame'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        NewFValue,
        TrUserData
    ).

'skip_varint_gw.DownlinkFrame'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'skip_varint_gw.DownlinkFrame'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
'skip_varint_gw.DownlinkFrame'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'dfp_read_field_def_gw.DownlinkFrame'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'skip_length_delimited_gw.DownlinkFrame'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.DownlinkFrame'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    );
'skip_length_delimited_gw.DownlinkFrame'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.DownlinkFrame'(
        Rest2,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'skip_group_gw.DownlinkFrame'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.DownlinkFrame'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'skip_32_gw.DownlinkFrame'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'dfp_read_field_def_gw.DownlinkFrame'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'skip_64_gw.DownlinkFrame'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    TrUserData
) ->
    'dfp_read_field_def_gw.DownlinkFrame'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        TrUserData
    ).

'decode_msg_gw.DownlinkFrameItem'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.DownlinkFrameItem'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id(undefined, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_gw.DownlinkFrameItem'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'd_field_gw.DownlinkFrameItem_phy_payload'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_gw.DownlinkFrameItem'(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'd_field_gw.DownlinkFrameItem_tx_info'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_gw.DownlinkFrameItem'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'gw.DownlinkFrameItem'{phy_payload = F@_1, tx_info = F@_2};
'dfp_read_field_def_gw.DownlinkFrameItem'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_gw.DownlinkFrameItem'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_gw.DownlinkFrameItem'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_gw.DownlinkFrameItem'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'dg_read_field_def_gw.DownlinkFrameItem'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_gw.DownlinkFrameItem_phy_payload'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 ->
            'd_field_gw.DownlinkFrameItem_tx_info'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.DownlinkFrameItem'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                1 ->
                    'skip_64_gw.DownlinkFrameItem'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 ->
                    'skip_length_delimited_gw.DownlinkFrameItem'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.DownlinkFrameItem'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                5 ->
                    'skip_32_gw.DownlinkFrameItem'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_gw.DownlinkFrameItem'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'gw.DownlinkFrameItem'{phy_payload = F@_1, tx_info = F@_2}.

'd_field_gw.DownlinkFrameItem_phy_payload'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkFrameItem_phy_payload'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'd_field_gw.DownlinkFrameItem_phy_payload'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.DownlinkFrameItem'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_gw.DownlinkFrameItem_tx_info'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkFrameItem_tx_info'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_gw.DownlinkFrameItem_tx_info'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_gw.DownlinkTXInfo'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.DownlinkFrameItem'(
        RestF,
        0,
        0,
        F,
        F@_1,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_gw.DownlinkTXInfo'(Prev, NewFValue, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_gw.DownlinkFrameItem'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'skip_varint_gw.DownlinkFrameItem'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_gw.DownlinkFrameItem'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_gw.DownlinkFrameItem'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_gw.DownlinkFrameItem'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.DownlinkFrameItem'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'skip_length_delimited_gw.DownlinkFrameItem'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.DownlinkFrameItem'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_gw.DownlinkFrameItem'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.DownlinkFrameItem'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_gw.DownlinkFrameItem'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_gw.DownlinkFrameItem'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_gw.DownlinkFrameItem'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_gw.DownlinkFrameItem'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'decode_msg_gw.DownlinkTXAck'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.DownlinkTXAck'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id(0, TrUserData),
        id([], TrUserData),
        id(<<>>, TrUserData),
        id([], TrUserData),
        TrUserData
    ).

'dfp_read_field_def_gw.DownlinkTXAck'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_gw.DownlinkTXAck_gateway_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_gw.DownlinkTXAck'(
    <<16, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_gw.DownlinkTXAck_token'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_gw.DownlinkTXAck'(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_gw.DownlinkTXAck_error'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_gw.DownlinkTXAck'(
    <<34, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_gw.DownlinkTXAck_downlink_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_gw.DownlinkTXAck'(
    <<42, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_gw.DownlinkTXAck_items'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_gw.DownlinkTXAck'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, R1, TrUserData) ->
    #'gw.DownlinkTXAck'{
        gateway_id = F@_1,
        token = F@_2,
        error = F@_3,
        downlink_id = F@_4,
        items = lists_reverse(R1, TrUserData)
    };
'dfp_read_field_def_gw.DownlinkTXAck'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    'dg_read_field_def_gw.DownlinkTXAck'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'dg_read_field_def_gw.DownlinkTXAck'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_gw.DownlinkTXAck'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dg_read_field_def_gw.DownlinkTXAck'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_gw.DownlinkTXAck_gateway_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        16 ->
            'd_field_gw.DownlinkTXAck_token'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        26 ->
            'd_field_gw.DownlinkTXAck_error'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        34 ->
            'd_field_gw.DownlinkTXAck_downlink_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        42 ->
            'd_field_gw.DownlinkTXAck_items'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.DownlinkTXAck'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                1 ->
                    'skip_64_gw.DownlinkTXAck'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_gw.DownlinkTXAck'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.DownlinkTXAck'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                5 ->
                    'skip_32_gw.DownlinkTXAck'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_gw.DownlinkTXAck'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, R1, TrUserData) ->
    #'gw.DownlinkTXAck'{
        gateway_id = F@_1,
        token = F@_2,
        error = F@_3,
        downlink_id = F@_4,
        items = lists_reverse(R1, TrUserData)
    }.

'd_field_gw.DownlinkTXAck_gateway_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkTXAck_gateway_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_gw.DownlinkTXAck_gateway_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.DownlinkTXAck'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'd_field_gw.DownlinkTXAck_token'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkTXAck_token'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_gw.DownlinkTXAck_token'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.DownlinkTXAck'(
        RestF,
        0,
        0,
        F,
        F@_1,
        NewFValue,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'd_field_gw.DownlinkTXAck_error'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkTXAck_error'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_gw.DownlinkTXAck_error'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    _,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Utf8:Len/binary, Rest2/binary>> = Rest,
        {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.DownlinkTXAck'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        NewFValue,
        F@_4,
        F@_5,
        TrUserData
    ).

'd_field_gw.DownlinkTXAck_downlink_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkTXAck_downlink_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_gw.DownlinkTXAck_downlink_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    _,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.DownlinkTXAck'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        NewFValue,
        F@_5,
        TrUserData
    ).

'd_field_gw.DownlinkTXAck_items'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_gw.DownlinkTXAck_items'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_gw.DownlinkTXAck_items'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_gw.DownlinkTXAckItem'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.DownlinkTXAck'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        cons(NewFValue, Prev, TrUserData),
        TrUserData
    ).

'skip_varint_gw.DownlinkTXAck'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'skip_varint_gw.DownlinkTXAck'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'skip_varint_gw.DownlinkTXAck'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_gw.DownlinkTXAck'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'skip_length_delimited_gw.DownlinkTXAck'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.DownlinkTXAck'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'skip_length_delimited_gw.DownlinkTXAck'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.DownlinkTXAck'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'skip_group_gw.DownlinkTXAck'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.DownlinkTXAck'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'skip_32_gw.DownlinkTXAck'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_gw.DownlinkTXAck'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'skip_64_gw.DownlinkTXAck'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_gw.DownlinkTXAck'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'decode_msg_gw.DownlinkTXAckItem'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.DownlinkTXAckItem'(Bin, 0, 0, 0, id('IGNORED', TrUserData), TrUserData).

'dfp_read_field_def_gw.DownlinkTXAckItem'(<<8, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'd_field_gw.DownlinkTXAckItem_status'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_gw.DownlinkTXAckItem'(<<>>, 0, 0, _, F@_1, _) ->
    #'gw.DownlinkTXAckItem'{status = F@_1};
'dfp_read_field_def_gw.DownlinkTXAckItem'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_gw.DownlinkTXAckItem'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_gw.DownlinkTXAckItem'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_gw.DownlinkTXAckItem'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'dg_read_field_def_gw.DownlinkTXAckItem'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            'd_field_gw.DownlinkTXAckItem_status'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.DownlinkTXAckItem'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 ->
                    'skip_64_gw.DownlinkTXAckItem'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 ->
                    'skip_length_delimited_gw.DownlinkTXAckItem'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.DownlinkTXAckItem'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 ->
                    'skip_32_gw.DownlinkTXAckItem'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
'dg_read_field_def_gw.DownlinkTXAckItem'(<<>>, 0, 0, _, F@_1, _) ->
    #'gw.DownlinkTXAckItem'{status = F@_1}.

'd_field_gw.DownlinkTXAckItem_status'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when
    N < 57
->
    'd_field_gw.DownlinkTXAckItem_status'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'd_field_gw.DownlinkTXAckItem_status'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} =
        {id(
                'd_enum_gw.TxAckStatus'(begin
                    <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>,
                    id(Res, TrUserData)
                end),
                TrUserData
            ),
            Rest},
    'dfp_read_field_def_gw.DownlinkTXAckItem'(RestF, 0, 0, F, NewFValue, TrUserData).

'skip_varint_gw.DownlinkTXAckItem'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'skip_varint_gw.DownlinkTXAckItem'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_gw.DownlinkTXAckItem'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_gw.DownlinkTXAckItem'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_gw.DownlinkTXAckItem'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.DownlinkTXAckItem'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'skip_length_delimited_gw.DownlinkTXAckItem'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.DownlinkTXAckItem'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_gw.DownlinkTXAckItem'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.DownlinkTXAckItem'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_gw.DownlinkTXAckItem'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_gw.DownlinkTXAckItem'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_gw.DownlinkTXAckItem'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_gw.DownlinkTXAckItem'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_gw.GatewayConfiguration'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.GatewayConfiguration'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id([], TrUserData),
        id([], TrUserData),
        id(undefined, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_gw.GatewayConfiguration'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'd_field_gw.GatewayConfiguration_gateway_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'dfp_read_field_def_gw.GatewayConfiguration'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'd_field_gw.GatewayConfiguration_version'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'dfp_read_field_def_gw.GatewayConfiguration'(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'd_field_gw.GatewayConfiguration_channels'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'dfp_read_field_def_gw.GatewayConfiguration'(
    <<34, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'd_field_gw.GatewayConfiguration_stats_interval'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'dfp_read_field_def_gw.GatewayConfiguration'(<<>>, 0, 0, _, F@_1, F@_2, R1, F@_4, TrUserData) ->
    #'gw.GatewayConfiguration'{
        gateway_id = F@_1,
        version = F@_2,
        channels = lists_reverse(R1, TrUserData),
        stats_interval = F@_4
    };
'dfp_read_field_def_gw.GatewayConfiguration'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    'dg_read_field_def_gw.GatewayConfiguration'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

'dg_read_field_def_gw.GatewayConfiguration'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_gw.GatewayConfiguration'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'dg_read_field_def_gw.GatewayConfiguration'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_gw.GatewayConfiguration_gateway_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        18 ->
            'd_field_gw.GatewayConfiguration_version'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        26 ->
            'd_field_gw.GatewayConfiguration_channels'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        34 ->
            'd_field_gw.GatewayConfiguration_stats_interval'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.GatewayConfiguration'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                1 ->
                    'skip_64_gw.GatewayConfiguration'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_gw.GatewayConfiguration'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.GatewayConfiguration'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                5 ->
                    'skip_32_gw.GatewayConfiguration'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_gw.GatewayConfiguration'(<<>>, 0, 0, _, F@_1, F@_2, R1, F@_4, TrUserData) ->
    #'gw.GatewayConfiguration'{
        gateway_id = F@_1,
        version = F@_2,
        channels = lists_reverse(R1, TrUserData),
        stats_interval = F@_4
    }.

'd_field_gw.GatewayConfiguration_gateway_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayConfiguration_gateway_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'd_field_gw.GatewayConfiguration_gateway_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.GatewayConfiguration'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

'd_field_gw.GatewayConfiguration_version'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayConfiguration_version'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'd_field_gw.GatewayConfiguration_version'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    F@_3,
    F@_4,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Utf8:Len/binary, Rest2/binary>> = Rest,
        {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.GatewayConfiguration'(
        RestF,
        0,
        0,
        F,
        F@_1,
        NewFValue,
        F@_3,
        F@_4,
        TrUserData
    ).

'd_field_gw.GatewayConfiguration_channels'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayConfiguration_channels'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'd_field_gw.GatewayConfiguration_channels'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    Prev,
    F@_4,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_gw.ChannelConfiguration'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.GatewayConfiguration'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        cons(NewFValue, Prev, TrUserData),
        F@_4,
        TrUserData
    ).

'd_field_gw.GatewayConfiguration_stats_interval'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayConfiguration_stats_interval'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'd_field_gw.GatewayConfiguration_stats_interval'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Duration'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.GatewayConfiguration'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Duration'(Prev, NewFValue, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_gw.GatewayConfiguration'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'skip_varint_gw.GatewayConfiguration'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'skip_varint_gw.GatewayConfiguration'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'dfp_read_field_def_gw.GatewayConfiguration'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

'skip_length_delimited_gw.GatewayConfiguration'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.GatewayConfiguration'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'skip_length_delimited_gw.GatewayConfiguration'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.GatewayConfiguration'(
        Rest2,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

'skip_group_gw.GatewayConfiguration'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.GatewayConfiguration'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

'skip_32_gw.GatewayConfiguration'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'dfp_read_field_def_gw.GatewayConfiguration'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

'skip_64_gw.GatewayConfiguration'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'dfp_read_field_def_gw.GatewayConfiguration'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

'decode_msg_gw.ChannelConfiguration'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.ChannelConfiguration'(
        Bin,
        0,
        0,
        0,
        id(0, TrUserData),
        id('LORA', TrUserData),
        id(undefined, TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_gw.ChannelConfiguration'(
    <<8, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_gw.ChannelConfiguration_frequency'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_gw.ChannelConfiguration'(
    <<16, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_gw.ChannelConfiguration_modulation'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_gw.ChannelConfiguration'(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_gw.ChannelConfiguration_lora_modulation_config'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_gw.ChannelConfiguration'(
    <<34, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_gw.ChannelConfiguration_fsk_modulation_config'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_gw.ChannelConfiguration'(
    <<40, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_gw.ChannelConfiguration_board'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_gw.ChannelConfiguration'(
    <<48, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_gw.ChannelConfiguration_demodulator'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_gw.ChannelConfiguration'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    #'gw.ChannelConfiguration'{
        frequency = F@_1,
        modulation = F@_2,
        modulation_config = F@_3,
        board = F@_4,
        demodulator = F@_5
    };
'dfp_read_field_def_gw.ChannelConfiguration'(
    Other,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dg_read_field_def_gw.ChannelConfiguration'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'dg_read_field_def_gw.ChannelConfiguration'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_gw.ChannelConfiguration'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dg_read_field_def_gw.ChannelConfiguration'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            'd_field_gw.ChannelConfiguration_frequency'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        16 ->
            'd_field_gw.ChannelConfiguration_modulation'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        26 ->
            'd_field_gw.ChannelConfiguration_lora_modulation_config'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        34 ->
            'd_field_gw.ChannelConfiguration_fsk_modulation_config'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        40 ->
            'd_field_gw.ChannelConfiguration_board'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        48 ->
            'd_field_gw.ChannelConfiguration_demodulator'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.ChannelConfiguration'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                1 ->
                    'skip_64_gw.ChannelConfiguration'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_gw.ChannelConfiguration'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.ChannelConfiguration'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                5 ->
                    'skip_32_gw.ChannelConfiguration'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_gw.ChannelConfiguration'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    #'gw.ChannelConfiguration'{
        frequency = F@_1,
        modulation = F@_2,
        modulation_config = F@_3,
        board = F@_4,
        demodulator = F@_5
    }.

'd_field_gw.ChannelConfiguration_frequency'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_gw.ChannelConfiguration_frequency'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_gw.ChannelConfiguration_frequency'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.ChannelConfiguration'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'd_field_gw.ChannelConfiguration_modulation'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_gw.ChannelConfiguration_modulation'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_gw.ChannelConfiguration_modulation'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} =
        {id(
                'd_enum_common.Modulation'(begin
                    <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>,
                    id(Res, TrUserData)
                end),
                TrUserData
            ),
            Rest},
    'dfp_read_field_def_gw.ChannelConfiguration'(
        RestF,
        0,
        0,
        F,
        F@_1,
        NewFValue,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'd_field_gw.ChannelConfiguration_lora_modulation_config'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_gw.ChannelConfiguration_lora_modulation_config'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_gw.ChannelConfiguration_lora_modulation_config'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    Prev,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_gw.LoRaModulationConfig'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.ChannelConfiguration'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        case Prev of
            undefined ->
                id({lora_modulation_config, NewFValue}, TrUserData);
            {lora_modulation_config, MVPrev} ->
                id(
                    {lora_modulation_config,
                        'merge_msg_gw.LoRaModulationConfig'(MVPrev, NewFValue, TrUserData)},
                    TrUserData
                );
            _ ->
                id({lora_modulation_config, NewFValue}, TrUserData)
        end,
        F@_4,
        F@_5,
        TrUserData
    ).

'd_field_gw.ChannelConfiguration_fsk_modulation_config'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_gw.ChannelConfiguration_fsk_modulation_config'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_gw.ChannelConfiguration_fsk_modulation_config'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    Prev,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_gw.FSKModulationConfig'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.ChannelConfiguration'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        case Prev of
            undefined ->
                id({fsk_modulation_config, NewFValue}, TrUserData);
            {fsk_modulation_config, MVPrev} ->
                id(
                    {fsk_modulation_config,
                        'merge_msg_gw.FSKModulationConfig'(MVPrev, NewFValue, TrUserData)},
                    TrUserData
                );
            _ ->
                id({fsk_modulation_config, NewFValue}, TrUserData)
        end,
        F@_4,
        F@_5,
        TrUserData
    ).

'd_field_gw.ChannelConfiguration_board'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_gw.ChannelConfiguration_board'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_gw.ChannelConfiguration_board'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    _,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.ChannelConfiguration'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        NewFValue,
        F@_5,
        TrUserData
    ).

'd_field_gw.ChannelConfiguration_demodulator'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_gw.ChannelConfiguration_demodulator'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_gw.ChannelConfiguration_demodulator'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.ChannelConfiguration'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        NewFValue,
        TrUserData
    ).

'skip_varint_gw.ChannelConfiguration'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'skip_varint_gw.ChannelConfiguration'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'skip_varint_gw.ChannelConfiguration'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_gw.ChannelConfiguration'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'skip_length_delimited_gw.ChannelConfiguration'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.ChannelConfiguration'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'skip_length_delimited_gw.ChannelConfiguration'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.ChannelConfiguration'(
        Rest2,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'skip_group_gw.ChannelConfiguration'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.ChannelConfiguration'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'skip_32_gw.ChannelConfiguration'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_gw.ChannelConfiguration'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'skip_64_gw.ChannelConfiguration'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_gw.ChannelConfiguration'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'decode_msg_gw.LoRaModulationConfig'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.LoRaModulationConfig'(
        Bin,
        0,
        0,
        0,
        id(0, TrUserData),
        id([], TrUserData),
        TrUserData
    ).

'dfp_read_field_def_gw.LoRaModulationConfig'(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'd_field_gw.LoRaModulationConfig_bandwidth'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_gw.LoRaModulationConfig'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'd_pfield_gw.LoRaModulationConfig_spreading_factors'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_gw.LoRaModulationConfig'(
    <<16, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'd_field_gw.LoRaModulationConfig_spreading_factors'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_gw.LoRaModulationConfig'(<<>>, 0, 0, _, F@_1, R1, TrUserData) ->
    #'gw.LoRaModulationConfig'{bandwidth = F@_1, spreading_factors = lists_reverse(R1, TrUserData)};
'dfp_read_field_def_gw.LoRaModulationConfig'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_gw.LoRaModulationConfig'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_gw.LoRaModulationConfig'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_gw.LoRaModulationConfig'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'dg_read_field_def_gw.LoRaModulationConfig'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            'd_field_gw.LoRaModulationConfig_bandwidth'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 ->
            'd_pfield_gw.LoRaModulationConfig_spreading_factors'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                TrUserData
            );
        16 ->
            'd_field_gw.LoRaModulationConfig_spreading_factors'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.LoRaModulationConfig'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                1 ->
                    'skip_64_gw.LoRaModulationConfig'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_gw.LoRaModulationConfig'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.LoRaModulationConfig'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                5 ->
                    'skip_32_gw.LoRaModulationConfig'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_gw.LoRaModulationConfig'(<<>>, 0, 0, _, F@_1, R1, TrUserData) ->
    #'gw.LoRaModulationConfig'{bandwidth = F@_1, spreading_factors = lists_reverse(R1, TrUserData)}.

'd_field_gw.LoRaModulationConfig_bandwidth'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_gw.LoRaModulationConfig_bandwidth'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'd_field_gw.LoRaModulationConfig_bandwidth'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.LoRaModulationConfig'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_gw.LoRaModulationConfig_spreading_factors'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_gw.LoRaModulationConfig_spreading_factors'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'd_field_gw.LoRaModulationConfig_spreading_factors'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.LoRaModulationConfig'(
        RestF,
        0,
        0,
        F,
        F@_1,
        cons(NewFValue, Prev, TrUserData),
        TrUserData
    ).

'd_pfield_gw.LoRaModulationConfig_spreading_factors'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_pfield_gw.LoRaModulationConfig_spreading_factors'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'd_pfield_gw.LoRaModulationConfig_spreading_factors'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    E,
    TrUserData
) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = 'd_packed_field_gw.LoRaModulationConfig_spreading_factors'(
        PackedBytes,
        0,
        0,
        F,
        E,
        TrUserData
    ),
    'dfp_read_field_def_gw.LoRaModulationConfig'(Rest2, 0, 0, F, F@_1, NewSeq, TrUserData).

'd_packed_field_gw.LoRaModulationConfig_spreading_factors'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    AccSeq,
    TrUserData
) when N < 57 ->
    'd_packed_field_gw.LoRaModulationConfig_spreading_factors'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        AccSeq,
        TrUserData
    );
'd_packed_field_gw.LoRaModulationConfig_spreading_factors'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    AccSeq,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'd_packed_field_gw.LoRaModulationConfig_spreading_factors'(
        RestF,
        0,
        0,
        F,
        [NewFValue | AccSeq],
        TrUserData
    );
'd_packed_field_gw.LoRaModulationConfig_spreading_factors'(<<>>, 0, 0, _, AccSeq, _) ->
    AccSeq.

'skip_varint_gw.LoRaModulationConfig'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'skip_varint_gw.LoRaModulationConfig'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_gw.LoRaModulationConfig'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_gw.LoRaModulationConfig'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_gw.LoRaModulationConfig'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.LoRaModulationConfig'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'skip_length_delimited_gw.LoRaModulationConfig'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.LoRaModulationConfig'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_gw.LoRaModulationConfig'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.LoRaModulationConfig'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_gw.LoRaModulationConfig'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_gw.LoRaModulationConfig'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_gw.LoRaModulationConfig'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_gw.LoRaModulationConfig'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'decode_msg_gw.FSKModulationConfig'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.FSKModulationConfig'(
        Bin,
        0,
        0,
        0,
        id(0, TrUserData),
        id(0, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_gw.FSKModulationConfig'(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'd_field_gw.FSKModulationConfig_bandwidth'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_gw.FSKModulationConfig'(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'd_field_gw.FSKModulationConfig_bitrate'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_gw.FSKModulationConfig'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'gw.FSKModulationConfig'{bandwidth = F@_1, bitrate = F@_2};
'dfp_read_field_def_gw.FSKModulationConfig'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_gw.FSKModulationConfig'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_gw.FSKModulationConfig'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_gw.FSKModulationConfig'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'dg_read_field_def_gw.FSKModulationConfig'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            'd_field_gw.FSKModulationConfig_bandwidth'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        16 ->
            'd_field_gw.FSKModulationConfig_bitrate'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.FSKModulationConfig'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                1 ->
                    'skip_64_gw.FSKModulationConfig'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 ->
                    'skip_length_delimited_gw.FSKModulationConfig'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.FSKModulationConfig'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                5 ->
                    'skip_32_gw.FSKModulationConfig'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_gw.FSKModulationConfig'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'gw.FSKModulationConfig'{bandwidth = F@_1, bitrate = F@_2}.

'd_field_gw.FSKModulationConfig_bandwidth'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_gw.FSKModulationConfig_bandwidth'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'd_field_gw.FSKModulationConfig_bandwidth'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.FSKModulationConfig'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_gw.FSKModulationConfig_bitrate'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_gw.FSKModulationConfig_bitrate'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_gw.FSKModulationConfig_bitrate'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_gw.FSKModulationConfig'(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

'skip_varint_gw.FSKModulationConfig'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'skip_varint_gw.FSKModulationConfig'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_gw.FSKModulationConfig'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_gw.FSKModulationConfig'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_gw.FSKModulationConfig'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.FSKModulationConfig'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'skip_length_delimited_gw.FSKModulationConfig'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.FSKModulationConfig'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_gw.FSKModulationConfig'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.FSKModulationConfig'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_gw.FSKModulationConfig'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_gw.FSKModulationConfig'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_gw.FSKModulationConfig'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_gw.FSKModulationConfig'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'decode_msg_gw.GatewayCommandExecRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.GatewayCommandExecRequest'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id([], TrUserData),
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        'tr_decode_init_default_gw.GatewayCommandExecRequest.environment'([], TrUserData),
        TrUserData
    ).

'dfp_read_field_def_gw.GatewayCommandExecRequest'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_gw.GatewayCommandExecRequest_gateway_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_gw.GatewayCommandExecRequest'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_gw.GatewayCommandExecRequest_command'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_gw.GatewayCommandExecRequest'(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_gw.GatewayCommandExecRequest_ExecId'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_gw.GatewayCommandExecRequest'(
    <<34, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_gw.GatewayCommandExecRequest_stdin'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_gw.GatewayCommandExecRequest'(
    <<42, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_gw.GatewayCommandExecRequest_environment'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_gw.GatewayCommandExecRequest'(
    <<>>,
    0,
    0,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    R1,
    TrUserData
) ->
    #'gw.GatewayCommandExecRequest'{
        gateway_id = F@_1,
        command = F@_2,
        'ExecId' = F@_3,
        stdin = F@_4,
        environment = 'tr_decode_repeated_finalize_gw.GatewayCommandExecRequest.environment'(
            R1,
            TrUserData
        )
    };
'dfp_read_field_def_gw.GatewayCommandExecRequest'(
    Other,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dg_read_field_def_gw.GatewayCommandExecRequest'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'dg_read_field_def_gw.GatewayCommandExecRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_gw.GatewayCommandExecRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dg_read_field_def_gw.GatewayCommandExecRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_gw.GatewayCommandExecRequest_gateway_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        18 ->
            'd_field_gw.GatewayCommandExecRequest_command'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        26 ->
            'd_field_gw.GatewayCommandExecRequest_ExecId'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        34 ->
            'd_field_gw.GatewayCommandExecRequest_stdin'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        42 ->
            'd_field_gw.GatewayCommandExecRequest_environment'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.GatewayCommandExecRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                1 ->
                    'skip_64_gw.GatewayCommandExecRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_gw.GatewayCommandExecRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.GatewayCommandExecRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                5 ->
                    'skip_32_gw.GatewayCommandExecRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_gw.GatewayCommandExecRequest'(
    <<>>,
    0,
    0,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    R1,
    TrUserData
) ->
    #'gw.GatewayCommandExecRequest'{
        gateway_id = F@_1,
        command = F@_2,
        'ExecId' = F@_3,
        stdin = F@_4,
        environment = 'tr_decode_repeated_finalize_gw.GatewayCommandExecRequest.environment'(
            R1,
            TrUserData
        )
    }.

'd_field_gw.GatewayCommandExecRequest_gateway_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayCommandExecRequest_gateway_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_gw.GatewayCommandExecRequest_gateway_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.GatewayCommandExecRequest'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'd_field_gw.GatewayCommandExecRequest_command'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayCommandExecRequest_command'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_gw.GatewayCommandExecRequest_command'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Utf8:Len/binary, Rest2/binary>> = Rest,
        {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.GatewayCommandExecRequest'(
        RestF,
        0,
        0,
        F,
        F@_1,
        NewFValue,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'd_field_gw.GatewayCommandExecRequest_ExecId'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayCommandExecRequest_ExecId'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_gw.GatewayCommandExecRequest_ExecId'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    _,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.GatewayCommandExecRequest'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        NewFValue,
        F@_4,
        F@_5,
        TrUserData
    ).

'd_field_gw.GatewayCommandExecRequest_stdin'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayCommandExecRequest_stdin'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_gw.GatewayCommandExecRequest_stdin'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    _,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.GatewayCommandExecRequest'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        NewFValue,
        F@_5,
        TrUserData
    ).

'd_field_gw.GatewayCommandExecRequest_environment'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayCommandExecRequest_environment'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_gw.GatewayCommandExecRequest_environment'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_map<string,string>'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.GatewayCommandExecRequest'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        'tr_decode_repeated_add_elem_gw.GatewayCommandExecRequest.environment'(
            NewFValue,
            Prev,
            TrUserData
        ),
        TrUserData
    ).

'skip_varint_gw.GatewayCommandExecRequest'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'skip_varint_gw.GatewayCommandExecRequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'skip_varint_gw.GatewayCommandExecRequest'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_gw.GatewayCommandExecRequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'skip_length_delimited_gw.GatewayCommandExecRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.GatewayCommandExecRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'skip_length_delimited_gw.GatewayCommandExecRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.GatewayCommandExecRequest'(
        Rest2,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'skip_group_gw.GatewayCommandExecRequest'(
    Bin,
    _,
    Z2,
    FNum,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.GatewayCommandExecRequest'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'skip_32_gw.GatewayCommandExecRequest'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_gw.GatewayCommandExecRequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'skip_64_gw.GatewayCommandExecRequest'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_gw.GatewayCommandExecRequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'decode_msg_gw.GatewayCommandExecResponse'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.GatewayCommandExecResponse'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        id([], TrUserData),
        TrUserData
    ).

'dfp_read_field_def_gw.GatewayCommandExecResponse'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_gw.GatewayCommandExecResponse_gateway_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_gw.GatewayCommandExecResponse'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_gw.GatewayCommandExecResponse_exec_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_gw.GatewayCommandExecResponse'(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_gw.GatewayCommandExecResponse_stdout'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_gw.GatewayCommandExecResponse'(
    <<34, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_gw.GatewayCommandExecResponse_stderr'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_gw.GatewayCommandExecResponse'(
    <<42, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_gw.GatewayCommandExecResponse_error'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dfp_read_field_def_gw.GatewayCommandExecResponse'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    #'gw.GatewayCommandExecResponse'{
        gateway_id = F@_1,
        exec_id = F@_2,
        stdout = F@_3,
        stderr = F@_4,
        error = F@_5
    };
'dfp_read_field_def_gw.GatewayCommandExecResponse'(
    Other,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dg_read_field_def_gw.GatewayCommandExecResponse'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'dg_read_field_def_gw.GatewayCommandExecResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_gw.GatewayCommandExecResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dg_read_field_def_gw.GatewayCommandExecResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_gw.GatewayCommandExecResponse_gateway_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        18 ->
            'd_field_gw.GatewayCommandExecResponse_exec_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        26 ->
            'd_field_gw.GatewayCommandExecResponse_stdout'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        34 ->
            'd_field_gw.GatewayCommandExecResponse_stderr'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        42 ->
            'd_field_gw.GatewayCommandExecResponse_error'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.GatewayCommandExecResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                1 ->
                    'skip_64_gw.GatewayCommandExecResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_gw.GatewayCommandExecResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.GatewayCommandExecResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                5 ->
                    'skip_32_gw.GatewayCommandExecResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_gw.GatewayCommandExecResponse'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    #'gw.GatewayCommandExecResponse'{
        gateway_id = F@_1,
        exec_id = F@_2,
        stdout = F@_3,
        stderr = F@_4,
        error = F@_5
    }.

'd_field_gw.GatewayCommandExecResponse_gateway_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayCommandExecResponse_gateway_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_gw.GatewayCommandExecResponse_gateway_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.GatewayCommandExecResponse'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'd_field_gw.GatewayCommandExecResponse_exec_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayCommandExecResponse_exec_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_gw.GatewayCommandExecResponse_exec_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.GatewayCommandExecResponse'(
        RestF,
        0,
        0,
        F,
        F@_1,
        NewFValue,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'd_field_gw.GatewayCommandExecResponse_stdout'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayCommandExecResponse_stdout'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_gw.GatewayCommandExecResponse_stdout'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    _,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.GatewayCommandExecResponse'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        NewFValue,
        F@_4,
        F@_5,
        TrUserData
    ).

'd_field_gw.GatewayCommandExecResponse_stderr'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayCommandExecResponse_stderr'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_gw.GatewayCommandExecResponse_stderr'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    _,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.GatewayCommandExecResponse'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        NewFValue,
        F@_5,
        TrUserData
    ).

'd_field_gw.GatewayCommandExecResponse_error'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_gw.GatewayCommandExecResponse_error'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_gw.GatewayCommandExecResponse_error'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Utf8:Len/binary, Rest2/binary>> = Rest,
        {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.GatewayCommandExecResponse'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        NewFValue,
        TrUserData
    ).

'skip_varint_gw.GatewayCommandExecResponse'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'skip_varint_gw.GatewayCommandExecResponse'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'skip_varint_gw.GatewayCommandExecResponse'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_gw.GatewayCommandExecResponse'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'skip_length_delimited_gw.GatewayCommandExecResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.GatewayCommandExecResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'skip_length_delimited_gw.GatewayCommandExecResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.GatewayCommandExecResponse'(
        Rest2,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'skip_group_gw.GatewayCommandExecResponse'(
    Bin,
    _,
    Z2,
    FNum,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.GatewayCommandExecResponse'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'skip_32_gw.GatewayCommandExecResponse'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_gw.GatewayCommandExecResponse'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'skip_64_gw.GatewayCommandExecResponse'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_gw.GatewayCommandExecResponse'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'decode_msg_gw.RawPacketForwarderEvent'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.RawPacketForwarderEvent'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_gw.RawPacketForwarderEvent'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_gw.RawPacketForwarderEvent_gateway_id'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_gw.RawPacketForwarderEvent'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_gw.RawPacketForwarderEvent_raw_id'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_gw.RawPacketForwarderEvent'(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_gw.RawPacketForwarderEvent_payload'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_gw.RawPacketForwarderEvent'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) ->
    #'gw.RawPacketForwarderEvent'{gateway_id = F@_1, raw_id = F@_2, payload = F@_3};
'dfp_read_field_def_gw.RawPacketForwarderEvent'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'dg_read_field_def_gw.RawPacketForwarderEvent'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'dg_read_field_def_gw.RawPacketForwarderEvent'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_gw.RawPacketForwarderEvent'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'dg_read_field_def_gw.RawPacketForwarderEvent'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_gw.RawPacketForwarderEvent_gateway_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        18 ->
            'd_field_gw.RawPacketForwarderEvent_raw_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        26 ->
            'd_field_gw.RawPacketForwarderEvent_payload'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.RawPacketForwarderEvent'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                1 ->
                    'skip_64_gw.RawPacketForwarderEvent'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_gw.RawPacketForwarderEvent'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.RawPacketForwarderEvent'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                5 ->
                    'skip_32_gw.RawPacketForwarderEvent'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_gw.RawPacketForwarderEvent'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) ->
    #'gw.RawPacketForwarderEvent'{gateway_id = F@_1, raw_id = F@_2, payload = F@_3}.

'd_field_gw.RawPacketForwarderEvent_gateway_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_gw.RawPacketForwarderEvent_gateway_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_gw.RawPacketForwarderEvent_gateway_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.RawPacketForwarderEvent'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        F@_3,
        TrUserData
    ).

'd_field_gw.RawPacketForwarderEvent_raw_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_gw.RawPacketForwarderEvent_raw_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_gw.RawPacketForwarderEvent_raw_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.RawPacketForwarderEvent'(
        RestF,
        0,
        0,
        F,
        F@_1,
        NewFValue,
        F@_3,
        TrUserData
    ).

'd_field_gw.RawPacketForwarderEvent_payload'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_gw.RawPacketForwarderEvent_payload'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_gw.RawPacketForwarderEvent_payload'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.RawPacketForwarderEvent'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        NewFValue,
        TrUserData
    ).

'skip_varint_gw.RawPacketForwarderEvent'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'skip_varint_gw.RawPacketForwarderEvent'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'skip_varint_gw.RawPacketForwarderEvent'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'dfp_read_field_def_gw.RawPacketForwarderEvent'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'skip_length_delimited_gw.RawPacketForwarderEvent'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.RawPacketForwarderEvent'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'skip_length_delimited_gw.RawPacketForwarderEvent'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.RawPacketForwarderEvent'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

'skip_group_gw.RawPacketForwarderEvent'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.RawPacketForwarderEvent'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

'skip_32_gw.RawPacketForwarderEvent'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'dfp_read_field_def_gw.RawPacketForwarderEvent'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'skip_64_gw.RawPacketForwarderEvent'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'dfp_read_field_def_gw.RawPacketForwarderEvent'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'decode_msg_gw.RawPacketForwarderCommand'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.RawPacketForwarderCommand'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_gw.RawPacketForwarderCommand'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_gw.RawPacketForwarderCommand_gateway_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'dfp_read_field_def_gw.RawPacketForwarderCommand'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_gw.RawPacketForwarderCommand_raw_id'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_gw.RawPacketForwarderCommand'(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'd_field_gw.RawPacketForwarderCommand_payload'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_gw.RawPacketForwarderCommand'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) ->
    #'gw.RawPacketForwarderCommand'{gateway_id = F@_1, raw_id = F@_2, payload = F@_3};
'dfp_read_field_def_gw.RawPacketForwarderCommand'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'dg_read_field_def_gw.RawPacketForwarderCommand'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

'dg_read_field_def_gw.RawPacketForwarderCommand'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_gw.RawPacketForwarderCommand'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'dg_read_field_def_gw.RawPacketForwarderCommand'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_gw.RawPacketForwarderCommand_gateway_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        18 ->
            'd_field_gw.RawPacketForwarderCommand_raw_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        26 ->
            'd_field_gw.RawPacketForwarderCommand_payload'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.RawPacketForwarderCommand'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                1 ->
                    'skip_64_gw.RawPacketForwarderCommand'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_gw.RawPacketForwarderCommand'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.RawPacketForwarderCommand'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                5 ->
                    'skip_32_gw.RawPacketForwarderCommand'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_gw.RawPacketForwarderCommand'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) ->
    #'gw.RawPacketForwarderCommand'{gateway_id = F@_1, raw_id = F@_2, payload = F@_3}.

'd_field_gw.RawPacketForwarderCommand_gateway_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_gw.RawPacketForwarderCommand_gateway_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_gw.RawPacketForwarderCommand_gateway_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.RawPacketForwarderCommand'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        F@_3,
        TrUserData
    ).

'd_field_gw.RawPacketForwarderCommand_raw_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_gw.RawPacketForwarderCommand_raw_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_gw.RawPacketForwarderCommand_raw_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.RawPacketForwarderCommand'(
        RestF,
        0,
        0,
        F,
        F@_1,
        NewFValue,
        F@_3,
        TrUserData
    ).

'd_field_gw.RawPacketForwarderCommand_payload'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'd_field_gw.RawPacketForwarderCommand_payload'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'd_field_gw.RawPacketForwarderCommand_payload'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.RawPacketForwarderCommand'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        NewFValue,
        TrUserData
    ).

'skip_varint_gw.RawPacketForwarderCommand'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'skip_varint_gw.RawPacketForwarderCommand'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'skip_varint_gw.RawPacketForwarderCommand'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'dfp_read_field_def_gw.RawPacketForwarderCommand'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

'skip_length_delimited_gw.RawPacketForwarderCommand'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.RawPacketForwarderCommand'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
'skip_length_delimited_gw.RawPacketForwarderCommand'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.RawPacketForwarderCommand'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

'skip_group_gw.RawPacketForwarderCommand'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.RawPacketForwarderCommand'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

'skip_32_gw.RawPacketForwarderCommand'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'dfp_read_field_def_gw.RawPacketForwarderCommand'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

'skip_64_gw.RawPacketForwarderCommand'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    'dfp_read_field_def_gw.RawPacketForwarderCommand'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

'decode_msg_gw.ConnState'(Bin, TrUserData) ->
    'dfp_read_field_def_gw.ConnState'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id('OFFLINE', TrUserData),
        TrUserData
    ).

'dfp_read_field_def_gw.ConnState'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'd_field_gw.ConnState_gateway_id'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_gw.ConnState'(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'd_field_gw.ConnState_state'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_gw.ConnState'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'gw.ConnState'{gateway_id = F@_1, state = F@_2};
'dfp_read_field_def_gw.ConnState'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_gw.ConnState'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_gw.ConnState'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when
    N < 32 - 7
->
    'dg_read_field_def_gw.ConnState'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'dg_read_field_def_gw.ConnState'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_gw.ConnState_gateway_id'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        16 ->
            'd_field_gw.ConnState_state'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_gw.ConnState'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 ->
                    'skip_64_gw.ConnState'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 ->
                    'skip_length_delimited_gw.ConnState'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                3 ->
                    'skip_group_gw.ConnState'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 ->
                    'skip_32_gw.ConnState'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_gw.ConnState'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'gw.ConnState'{gateway_id = F@_1, state = F@_2}.

'd_field_gw.ConnState_gateway_id'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when
    N < 57
->
    'd_field_gw.ConnState_gateway_id'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_gw.ConnState_gateway_id'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_gw.ConnState'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_gw.ConnState_state'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when
    N < 57
->
    'd_field_gw.ConnState_state'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_gw.ConnState_state'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} =
        {id(
                'd_enum_gw.ConnState.State'(begin
                    <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>,
                    id(Res, TrUserData)
                end),
                TrUserData
            ),
            Rest},
    'dfp_read_field_def_gw.ConnState'(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

'skip_varint_gw.ConnState'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'skip_varint_gw.ConnState'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_gw.ConnState'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_gw.ConnState'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_gw.ConnState'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_gw.ConnState'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'skip_length_delimited_gw.ConnState'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_gw.ConnState'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_gw.ConnState'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_gw.ConnState'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_gw.ConnState'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_gw.ConnState'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_gw.ConnState'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_gw.ConnState'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'decode_msg_common.KeyEnvelope'(Bin, TrUserData) ->
    'dfp_read_field_def_common.KeyEnvelope'(
        Bin,
        0,
        0,
        0,
        id([], TrUserData),
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_common.KeyEnvelope'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'd_field_common.KeyEnvelope_kek_label'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_common.KeyEnvelope'(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'd_field_common.KeyEnvelope_aes_key'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_common.KeyEnvelope'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'common.KeyEnvelope'{kek_label = F@_1, aes_key = F@_2};
'dfp_read_field_def_common.KeyEnvelope'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_common.KeyEnvelope'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_common.KeyEnvelope'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_common.KeyEnvelope'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'dg_read_field_def_common.KeyEnvelope'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_common.KeyEnvelope_kek_label'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 ->
            'd_field_common.KeyEnvelope_aes_key'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_common.KeyEnvelope'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 ->
                    'skip_64_common.KeyEnvelope'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 ->
                    'skip_length_delimited_common.KeyEnvelope'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                3 ->
                    'skip_group_common.KeyEnvelope'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 ->
                    'skip_32_common.KeyEnvelope'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_common.KeyEnvelope'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'common.KeyEnvelope'{kek_label = F@_1, aes_key = F@_2}.

'd_field_common.KeyEnvelope_kek_label'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_common.KeyEnvelope_kek_label'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_common.KeyEnvelope_kek_label'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Utf8:Len/binary, Rest2/binary>> = Rest,
        {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2}
    end,
    'dfp_read_field_def_common.KeyEnvelope'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_common.KeyEnvelope_aes_key'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_common.KeyEnvelope_aes_key'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_common.KeyEnvelope_aes_key'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_common.KeyEnvelope'(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

'skip_varint_common.KeyEnvelope'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'skip_varint_common.KeyEnvelope'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_common.KeyEnvelope'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_common.KeyEnvelope'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_common.KeyEnvelope'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_common.KeyEnvelope'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'skip_length_delimited_common.KeyEnvelope'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_common.KeyEnvelope'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_common.KeyEnvelope'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_common.KeyEnvelope'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_common.KeyEnvelope'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_common.KeyEnvelope'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_common.KeyEnvelope'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_common.KeyEnvelope'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'decode_msg_common.Location'(Bin, TrUserData) ->
    'dfp_read_field_def_common.Location'(
        Bin,
        0,
        0,
        0,
        id(0.0, TrUserData),
        id(0.0, TrUserData),
        id(0.0, TrUserData),
        id('UNKNOWN', TrUserData),
        id(0, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_common.Location'(
    <<9, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_common.Location_latitude'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_common.Location'(
    <<17, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_common.Location_longitude'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_common.Location'(
    <<25, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_common.Location_altitude'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_common.Location'(
    <<32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_common.Location_source'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_common.Location'(
    <<40, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'd_field_common.Location_accuracy'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_common.Location'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    #'common.Location'{
        latitude = F@_1,
        longitude = F@_2,
        altitude = F@_3,
        source = F@_4,
        accuracy = F@_5
    };
'dfp_read_field_def_common.Location'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    'dg_read_field_def_common.Location'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'dg_read_field_def_common.Location'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_common.Location'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'dg_read_field_def_common.Location'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        9 ->
            'd_field_common.Location_latitude'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        17 ->
            'd_field_common.Location_longitude'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        25 ->
            'd_field_common.Location_altitude'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        32 ->
            'd_field_common.Location_source'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        40 ->
            'd_field_common.Location_accuracy'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_common.Location'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                1 ->
                    'skip_64_common.Location'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_common.Location'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                3 ->
                    'skip_group_common.Location'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                5 ->
                    'skip_32_common.Location'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_common.Location'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    #'common.Location'{
        latitude = F@_1,
        longitude = F@_2,
        altitude = F@_3,
        source = F@_4,
        accuracy = F@_5
    }.

'd_field_common.Location_latitude'(
    <<0:48, 240, 127, Rest/binary>>,
    Z1,
    Z2,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_common.Location'(
        Rest,
        Z1,
        Z2,
        F,
        id(infinity, TrUserData),
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_common.Location_latitude'(
    <<0:48, 240, 255, Rest/binary>>,
    Z1,
    Z2,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_common.Location'(
        Rest,
        Z1,
        Z2,
        F,
        id('-infinity', TrUserData),
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_common.Location_latitude'(
    <<_:48, 15:4, _:4, _:1, 127:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_common.Location'(
        Rest,
        Z1,
        Z2,
        F,
        id(nan, TrUserData),
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_common.Location_latitude'(
    <<Value:64/little-float, Rest/binary>>,
    Z1,
    Z2,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_common.Location'(
        Rest,
        Z1,
        Z2,
        F,
        id(Value, TrUserData),
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'd_field_common.Location_longitude'(
    <<0:48, 240, 127, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    _,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_common.Location'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        id(infinity, TrUserData),
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_common.Location_longitude'(
    <<0:48, 240, 255, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    _,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_common.Location'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        id('-infinity', TrUserData),
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_common.Location_longitude'(
    <<_:48, 15:4, _:4, _:1, 127:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    _,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_common.Location'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        id(nan, TrUserData),
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_common.Location_longitude'(
    <<Value:64/little-float, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    _,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_common.Location'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        id(Value, TrUserData),
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'd_field_common.Location_altitude'(
    <<0:48, 240, 127, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    _,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_common.Location'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        id(infinity, TrUserData),
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_common.Location_altitude'(
    <<0:48, 240, 255, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    _,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_common.Location'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        id('-infinity', TrUserData),
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_common.Location_altitude'(
    <<_:48, 15:4, _:4, _:1, 127:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    _,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_common.Location'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        id(nan, TrUserData),
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_common.Location_altitude'(
    <<Value:64/little-float, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    _,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_common.Location'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        id(Value, TrUserData),
        F@_4,
        F@_5,
        TrUserData
    ).

'd_field_common.Location_source'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_common.Location_source'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_common.Location_source'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    _,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} =
        {id(
                'd_enum_common.LocationSource'(begin
                    <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>,
                    id(Res, TrUserData)
                end),
                TrUserData
            ),
            Rest},
    'dfp_read_field_def_common.Location'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        NewFValue,
        F@_5,
        TrUserData
    ).

'd_field_common.Location_accuracy'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'd_field_common.Location_accuracy'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'd_field_common.Location_accuracy'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_common.Location'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        NewFValue,
        TrUserData
    ).

'skip_varint_common.Location'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'skip_varint_common.Location'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'skip_varint_common.Location'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_common.Location'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'skip_length_delimited_common.Location'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_common.Location'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
'skip_length_delimited_common.Location'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_common.Location'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'skip_group_common.Location'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_common.Location'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

'skip_32_common.Location'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_common.Location'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'skip_64_common.Location'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    'dfp_read_field_def_common.Location'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'decode_msg_google.protobuf.Timestamp'(Bin, TrUserData) ->
    'dfp_read_field_def_google.protobuf.Timestamp'(
        Bin,
        0,
        0,
        0,
        id(0, TrUserData),
        id(0, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_google.protobuf.Timestamp'(
    <<8, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'd_field_google.protobuf.Timestamp_seconds'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_google.protobuf.Timestamp'(
    <<16, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'd_field_google.protobuf.Timestamp_nanos'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_google.protobuf.Timestamp'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'google.protobuf.Timestamp'{seconds = F@_1, nanos = F@_2};
'dfp_read_field_def_google.protobuf.Timestamp'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_google.protobuf.Timestamp'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_google.protobuf.Timestamp'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_google.protobuf.Timestamp'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'dg_read_field_def_google.protobuf.Timestamp'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            'd_field_google.protobuf.Timestamp_seconds'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        16 ->
            'd_field_google.protobuf.Timestamp_nanos'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_google.protobuf.Timestamp'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                1 ->
                    'skip_64_google.protobuf.Timestamp'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_google.protobuf.Timestamp'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                3 ->
                    'skip_group_google.protobuf.Timestamp'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                5 ->
                    'skip_32_google.protobuf.Timestamp'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_google.protobuf.Timestamp'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'google.protobuf.Timestamp'{seconds = F@_1, nanos = F@_2}.

'd_field_google.protobuf.Timestamp_seconds'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_google.protobuf.Timestamp_seconds'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'd_field_google.protobuf.Timestamp_seconds'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    TrUserData
) ->
    {NewFValue, RestF} =
        {begin
                <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>,
                id(Res, TrUserData)
            end,
            Rest},
    'dfp_read_field_def_google.protobuf.Timestamp'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_google.protobuf.Timestamp_nanos'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_google.protobuf.Timestamp_nanos'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'd_field_google.protobuf.Timestamp_nanos'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    TrUserData
) ->
    {NewFValue, RestF} =
        {begin
                <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>,
                id(Res, TrUserData)
            end,
            Rest},
    'dfp_read_field_def_google.protobuf.Timestamp'(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

'skip_varint_google.protobuf.Timestamp'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'skip_varint_google.protobuf.Timestamp'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_google.protobuf.Timestamp'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'dfp_read_field_def_google.protobuf.Timestamp'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_google.protobuf.Timestamp'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_google.protobuf.Timestamp'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'skip_length_delimited_google.protobuf.Timestamp'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_google.protobuf.Timestamp'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_google.protobuf.Timestamp'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_google.protobuf.Timestamp'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_google.protobuf.Timestamp'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_google.protobuf.Timestamp'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_google.protobuf.Timestamp'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_google.protobuf.Timestamp'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'decode_msg_google.protobuf.Duration'(Bin, TrUserData) ->
    'dfp_read_field_def_google.protobuf.Duration'(
        Bin,
        0,
        0,
        0,
        id(0, TrUserData),
        id(0, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_google.protobuf.Duration'(
    <<8, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'd_field_google.protobuf.Duration_seconds'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_google.protobuf.Duration'(
    <<16, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'd_field_google.protobuf.Duration_nanos'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_google.protobuf.Duration'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'google.protobuf.Duration'{seconds = F@_1, nanos = F@_2};
'dfp_read_field_def_google.protobuf.Duration'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_google.protobuf.Duration'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_google.protobuf.Duration'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_google.protobuf.Duration'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'dg_read_field_def_google.protobuf.Duration'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            'd_field_google.protobuf.Duration_seconds'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        16 ->
            'd_field_google.protobuf.Duration_nanos'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_google.protobuf.Duration'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                1 ->
                    'skip_64_google.protobuf.Duration'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_google.protobuf.Duration'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                3 ->
                    'skip_group_google.protobuf.Duration'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                5 ->
                    'skip_32_google.protobuf.Duration'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_google.protobuf.Duration'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'google.protobuf.Duration'{seconds = F@_1, nanos = F@_2}.

'd_field_google.protobuf.Duration_seconds'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_google.protobuf.Duration_seconds'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'd_field_google.protobuf.Duration_seconds'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    TrUserData
) ->
    {NewFValue, RestF} =
        {begin
                <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>,
                id(Res, TrUserData)
            end,
            Rest},
    'dfp_read_field_def_google.protobuf.Duration'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_google.protobuf.Duration_nanos'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_google.protobuf.Duration_nanos'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_google.protobuf.Duration_nanos'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} =
        {begin
                <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>,
                id(Res, TrUserData)
            end,
            Rest},
    'dfp_read_field_def_google.protobuf.Duration'(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

'skip_varint_google.protobuf.Duration'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'skip_varint_google.protobuf.Duration'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_google.protobuf.Duration'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'dfp_read_field_def_google.protobuf.Duration'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_google.protobuf.Duration'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_google.protobuf.Duration'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'skip_length_delimited_google.protobuf.Duration'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_google.protobuf.Duration'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_google.protobuf.Duration'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_google.protobuf.Duration'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_google.protobuf.Duration'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_google.protobuf.Duration'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_google.protobuf.Duration'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_google.protobuf.Duration'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'decode_msg_map<string,string>'(Bin, TrUserData) ->
    'dfp_read_field_def_map<string,string>'(
        Bin,
        0,
        0,
        0,
        id([], TrUserData),
        id([], TrUserData),
        TrUserData
    ).

'dfp_read_field_def_map<string,string>'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'd_field_map<string,string>_key'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_map<string,string>'(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'd_field_map<string,string>_value'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_map<string,string>'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'map<string,string>'{key = F@_1, value = F@_2};
'dfp_read_field_def_map<string,string>'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_map<string,string>'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_map<string,string>'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_map<string,string>'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'dg_read_field_def_map<string,string>'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_map<string,string>_key'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 ->
            'd_field_map<string,string>_value'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_map<string,string>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 ->
                    'skip_64_map<string,string>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 ->
                    'skip_length_delimited_map<string,string>'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                3 ->
                    'skip_group_map<string,string>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 ->
                    'skip_32_map<string,string>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_map<string,string>'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'map<string,string>'{key = F@_1, value = F@_2}.

'd_field_map<string,string>_key'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when
    N < 57
->
    'd_field_map<string,string>_key'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_map<string,string>_key'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Utf8:Len/binary, Rest2/binary>> = Rest,
        {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2}
    end,
    'dfp_read_field_def_map<string,string>'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_map<string,string>_value'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_map<string,string>_value'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_map<string,string>_value'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Utf8:Len/binary, Rest2/binary>> = Rest,
        {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2}
    end,
    'dfp_read_field_def_map<string,string>'(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

'skip_varint_map<string,string>'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'skip_varint_map<string,string>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_map<string,string>'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,string>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_map<string,string>'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_map<string,string>'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'skip_length_delimited_map<string,string>'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<string,string>'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_map<string,string>'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<string,string>'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_map<string,string>'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,string>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_map<string,string>'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,string>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'd_enum_gw.DownlinkTiming'(0) -> 'IMMEDIATELY';
'd_enum_gw.DownlinkTiming'(1) -> 'DELAY';
'd_enum_gw.DownlinkTiming'(2) -> 'GPS_EPOCH';
'd_enum_gw.DownlinkTiming'(V) -> V.

'd_enum_gw.FineTimestampType'(0) -> 'NONE';
'd_enum_gw.FineTimestampType'(1) -> 'ENCRYPTED';
'd_enum_gw.FineTimestampType'(2) -> 'PLAIN';
'd_enum_gw.FineTimestampType'(V) -> V.

'd_enum_gw.CRCStatus'(0) -> 'NO_CRC';
'd_enum_gw.CRCStatus'(1) -> 'BAD_CRC';
'd_enum_gw.CRCStatus'(2) -> 'CRC_OK';
'd_enum_gw.CRCStatus'(V) -> V.

'd_enum_gw.TxAckStatus'(0) -> 'IGNORED';
'd_enum_gw.TxAckStatus'(1) -> 'OK';
'd_enum_gw.TxAckStatus'(2) -> 'TOO_LATE';
'd_enum_gw.TxAckStatus'(3) -> 'TOO_EARLY';
'd_enum_gw.TxAckStatus'(4) -> 'COLLISION_PACKET';
'd_enum_gw.TxAckStatus'(5) -> 'COLLISION_BEACON';
'd_enum_gw.TxAckStatus'(6) -> 'TX_FREQ';
'd_enum_gw.TxAckStatus'(7) -> 'TX_POWER';
'd_enum_gw.TxAckStatus'(8) -> 'GPS_UNLOCKED';
'd_enum_gw.TxAckStatus'(9) -> 'QUEUE_FULL';
'd_enum_gw.TxAckStatus'(10) -> 'INTERNAL_ERROR';
'd_enum_gw.TxAckStatus'(V) -> V.

'd_enum_gw.ConnState.State'(0) -> 'OFFLINE';
'd_enum_gw.ConnState.State'(1) -> 'ONLINE';
'd_enum_gw.ConnState.State'(V) -> V.

'd_enum_common.Modulation'(0) -> 'LORA';
'd_enum_common.Modulation'(1) -> 'FSK';
'd_enum_common.Modulation'(V) -> V.

'd_enum_common.LocationSource'(0) -> 'UNKNOWN';
'd_enum_common.LocationSource'(1) -> 'GPS';
'd_enum_common.LocationSource'(2) -> 'CONFIG';
'd_enum_common.LocationSource'(3) -> 'GEO_RESOLVER_TDOA';
'd_enum_common.LocationSource'(4) -> 'GEO_RESOLVER_RSSI';
'd_enum_common.LocationSource'(5) -> 'GEO_RESOLVER_GNSS';
'd_enum_common.LocationSource'(6) -> 'GEO_RESOLVER_WIFI';
'd_enum_common.LocationSource'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum) when N < (32 - 7) ->
    read_gr_b(Tl, N + 7, X bsl N + Acc, NumBytes, TagLen + 1, FieldNum);
read_gr_b(
    <<0:1, X:7, Tl/binary>>,
    N,
    Acc,
    NumBytes,
    TagLen,
    FieldNum
) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        % 4 = group_end
        {FieldNum, 4} ->
            {NumBytes, TagLen1};
        % 0 = varint
        {_, 0} ->
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        % 1 = bits64
        {_, 1} ->
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        % 2 = length_delimited
        {_, 2} ->
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        % 3 = group_start
        {_, 3} ->
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        % 4 = group_end
        {_, 4} ->
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        % 5 = bits32
        {_, 5} ->
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum) when N < (64 - 7) ->
    read_gr_vi(Tl, N + 7, NumBytes + 1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes + 1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) when N < (64 - 7) ->
    read_gr_ld(Tl, N + 7, X bsl N + Acc, NumBytes + 1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts) when element(1, Prev) =:= element(1, New), is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'geo.ResolveResult' ->
            'merge_msg_geo.ResolveResult'(Prev, New, TrUserData);
        'geo.FrameRXInfo' ->
            'merge_msg_geo.FrameRXInfo'(Prev, New, TrUserData);
        'geo.ResolveTDOARequest' ->
            'merge_msg_geo.ResolveTDOARequest'(Prev, New, TrUserData);
        'geo.ResolveMultiFrameTDOARequest' ->
            'merge_msg_geo.ResolveMultiFrameTDOARequest'(Prev, New, TrUserData);
        'geo.ResolveTDOAResponse' ->
            'merge_msg_geo.ResolveTDOAResponse'(Prev, New, TrUserData);
        'geo.ResolveMultiFrameTDOAResponse' ->
            'merge_msg_geo.ResolveMultiFrameTDOAResponse'(Prev, New, TrUserData);
        'gw.UplinkTXInfo' ->
            'merge_msg_gw.UplinkTXInfo'(Prev, New, TrUserData);
        'gw.LoRaModulationInfo' ->
            'merge_msg_gw.LoRaModulationInfo'(Prev, New, TrUserData);
        'gw.FSKModulationInfo' ->
            'merge_msg_gw.FSKModulationInfo'(Prev, New, TrUserData);
        'gw.EncryptedFineTimestamp' ->
            'merge_msg_gw.EncryptedFineTimestamp'(Prev, New, TrUserData);
        'gw.PlainFineTimestamp' ->
            'merge_msg_gw.PlainFineTimestamp'(Prev, New, TrUserData);
        'gw.GatewayStats' ->
            'merge_msg_gw.GatewayStats'(Prev, New, TrUserData);
        'gw.UplinkRXInfo' ->
            'merge_msg_gw.UplinkRXInfo'(Prev, New, TrUserData);
        'gw.DownlinkTXInfo' ->
            'merge_msg_gw.DownlinkTXInfo'(Prev, New, TrUserData);
        'gw.ImmediatelyTimingInfo' ->
            'merge_msg_gw.ImmediatelyTimingInfo'(Prev, New, TrUserData);
        'gw.DelayTimingInfo' ->
            'merge_msg_gw.DelayTimingInfo'(Prev, New, TrUserData);
        'gw.GPSEpochTimingInfo' ->
            'merge_msg_gw.GPSEpochTimingInfo'(Prev, New, TrUserData);
        'gw.UplinkFrame' ->
            'merge_msg_gw.UplinkFrame'(Prev, New, TrUserData);
        'gw.UplinkFrameSet' ->
            'merge_msg_gw.UplinkFrameSet'(Prev, New, TrUserData);
        'gw.DownlinkFrame' ->
            'merge_msg_gw.DownlinkFrame'(Prev, New, TrUserData);
        'gw.DownlinkFrameItem' ->
            'merge_msg_gw.DownlinkFrameItem'(Prev, New, TrUserData);
        'gw.DownlinkTXAck' ->
            'merge_msg_gw.DownlinkTXAck'(Prev, New, TrUserData);
        'gw.DownlinkTXAckItem' ->
            'merge_msg_gw.DownlinkTXAckItem'(Prev, New, TrUserData);
        'gw.GatewayConfiguration' ->
            'merge_msg_gw.GatewayConfiguration'(Prev, New, TrUserData);
        'gw.ChannelConfiguration' ->
            'merge_msg_gw.ChannelConfiguration'(Prev, New, TrUserData);
        'gw.LoRaModulationConfig' ->
            'merge_msg_gw.LoRaModulationConfig'(Prev, New, TrUserData);
        'gw.FSKModulationConfig' ->
            'merge_msg_gw.FSKModulationConfig'(Prev, New, TrUserData);
        'gw.GatewayCommandExecRequest' ->
            'merge_msg_gw.GatewayCommandExecRequest'(Prev, New, TrUserData);
        'gw.GatewayCommandExecResponse' ->
            'merge_msg_gw.GatewayCommandExecResponse'(Prev, New, TrUserData);
        'gw.RawPacketForwarderEvent' ->
            'merge_msg_gw.RawPacketForwarderEvent'(Prev, New, TrUserData);
        'gw.RawPacketForwarderCommand' ->
            'merge_msg_gw.RawPacketForwarderCommand'(Prev, New, TrUserData);
        'gw.ConnState' ->
            'merge_msg_gw.ConnState'(Prev, New, TrUserData);
        'common.KeyEnvelope' ->
            'merge_msg_common.KeyEnvelope'(Prev, New, TrUserData);
        'common.Location' ->
            'merge_msg_common.Location'(Prev, New, TrUserData);
        'google.protobuf.Timestamp' ->
            'merge_msg_google.protobuf.Timestamp'(Prev, New, TrUserData);
        'google.protobuf.Duration' ->
            'merge_msg_google.protobuf.Duration'(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function, 'merge_msg_geo.ResolveResult'/3}).
'merge_msg_geo.ResolveResult'(
    #'geo.ResolveResult'{location = PFlocation},
    #'geo.ResolveResult'{location = NFlocation},
    TrUserData
) ->
    #'geo.ResolveResult'{
        location =
            if
                PFlocation /= undefined, NFlocation /= undefined ->
                    'merge_msg_common.Location'(PFlocation, NFlocation, TrUserData);
                PFlocation == undefined ->
                    NFlocation;
                NFlocation == undefined ->
                    PFlocation
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_geo.FrameRXInfo'/3}).
'merge_msg_geo.FrameRXInfo'(
    #'geo.FrameRXInfo'{rx_info = PFrx_info},
    #'geo.FrameRXInfo'{rx_info = NFrx_info},
    TrUserData
) ->
    #'geo.FrameRXInfo'{
        rx_info =
            if
                PFrx_info /= undefined, NFrx_info /= undefined ->
                    'erlang_++'(PFrx_info, NFrx_info, TrUserData);
                PFrx_info == undefined ->
                    NFrx_info;
                NFrx_info == undefined ->
                    PFrx_info
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_geo.ResolveTDOARequest'/3}).
'merge_msg_geo.ResolveTDOARequest'(
    #'geo.ResolveTDOARequest'{
        dev_eui = PFdev_eui,
        frame_rx_info = PFframe_rx_info,
        device_reference_altitude = PFdevice_reference_altitude
    },
    #'geo.ResolveTDOARequest'{
        dev_eui = NFdev_eui,
        frame_rx_info = NFframe_rx_info,
        device_reference_altitude = NFdevice_reference_altitude
    },
    TrUserData
) ->
    #'geo.ResolveTDOARequest'{
        dev_eui =
            if
                NFdev_eui =:= undefined -> PFdev_eui;
                true -> NFdev_eui
            end,
        frame_rx_info =
            if
                PFframe_rx_info /= undefined, NFframe_rx_info /= undefined ->
                    'merge_msg_geo.FrameRXInfo'(PFframe_rx_info, NFframe_rx_info, TrUserData);
                PFframe_rx_info == undefined ->
                    NFframe_rx_info;
                NFframe_rx_info == undefined ->
                    PFframe_rx_info
            end,
        device_reference_altitude =
            if
                NFdevice_reference_altitude =:= undefined -> PFdevice_reference_altitude;
                true -> NFdevice_reference_altitude
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_geo.ResolveMultiFrameTDOARequest'/3}).
'merge_msg_geo.ResolveMultiFrameTDOARequest'(
    #'geo.ResolveMultiFrameTDOARequest'{
        dev_eui = PFdev_eui,
        frame_rx_info_set = PFframe_rx_info_set,
        device_reference_altitude = PFdevice_reference_altitude
    },
    #'geo.ResolveMultiFrameTDOARequest'{
        dev_eui = NFdev_eui,
        frame_rx_info_set = NFframe_rx_info_set,
        device_reference_altitude = NFdevice_reference_altitude
    },
    TrUserData
) ->
    #'geo.ResolveMultiFrameTDOARequest'{
        dev_eui =
            if
                NFdev_eui =:= undefined -> PFdev_eui;
                true -> NFdev_eui
            end,
        frame_rx_info_set =
            if
                PFframe_rx_info_set /= undefined, NFframe_rx_info_set /= undefined ->
                    'erlang_++'(PFframe_rx_info_set, NFframe_rx_info_set, TrUserData);
                PFframe_rx_info_set == undefined ->
                    NFframe_rx_info_set;
                NFframe_rx_info_set == undefined ->
                    PFframe_rx_info_set
            end,
        device_reference_altitude =
            if
                NFdevice_reference_altitude =:= undefined -> PFdevice_reference_altitude;
                true -> NFdevice_reference_altitude
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_geo.ResolveTDOAResponse'/3}).
'merge_msg_geo.ResolveTDOAResponse'(
    #'geo.ResolveTDOAResponse'{result = PFresult},
    #'geo.ResolveTDOAResponse'{result = NFresult},
    TrUserData
) ->
    #'geo.ResolveTDOAResponse'{
        result =
            if
                PFresult /= undefined, NFresult /= undefined ->
                    'merge_msg_geo.ResolveResult'(PFresult, NFresult, TrUserData);
                PFresult == undefined ->
                    NFresult;
                NFresult == undefined ->
                    PFresult
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_geo.ResolveMultiFrameTDOAResponse'/3}).
'merge_msg_geo.ResolveMultiFrameTDOAResponse'(
    #'geo.ResolveMultiFrameTDOAResponse'{result = PFresult},
    #'geo.ResolveMultiFrameTDOAResponse'{result = NFresult},
    TrUserData
) ->
    #'geo.ResolveMultiFrameTDOAResponse'{
        result =
            if
                PFresult /= undefined, NFresult /= undefined ->
                    'merge_msg_geo.ResolveResult'(PFresult, NFresult, TrUserData);
                PFresult == undefined ->
                    NFresult;
                NFresult == undefined ->
                    PFresult
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.UplinkTXInfo'/3}).
'merge_msg_gw.UplinkTXInfo'(
    #'gw.UplinkTXInfo'{
        frequency = PFfrequency,
        modulation = PFmodulation,
        modulation_info = PFmodulation_info
    },
    #'gw.UplinkTXInfo'{
        frequency = NFfrequency,
        modulation = NFmodulation,
        modulation_info = NFmodulation_info
    },
    TrUserData
) ->
    #'gw.UplinkTXInfo'{
        frequency =
            if
                NFfrequency =:= undefined -> PFfrequency;
                true -> NFfrequency
            end,
        modulation =
            if
                NFmodulation =:= undefined -> PFmodulation;
                true -> NFmodulation
            end,
        modulation_info =
            case {PFmodulation_info, NFmodulation_info} of
                {{lora_modulation_info, OPFmodulation_info},
                    {lora_modulation_info, ONFmodulation_info}} ->
                    {lora_modulation_info,
                        'merge_msg_gw.LoRaModulationInfo'(
                            OPFmodulation_info,
                            ONFmodulation_info,
                            TrUserData
                        )};
                {{fsk_modulation_info, OPFmodulation_info},
                    {fsk_modulation_info, ONFmodulation_info}} ->
                    {fsk_modulation_info,
                        'merge_msg_gw.FSKModulationInfo'(
                            OPFmodulation_info,
                            ONFmodulation_info,
                            TrUserData
                        )};
                {_, undefined} ->
                    PFmodulation_info;
                _ ->
                    NFmodulation_info
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.LoRaModulationInfo'/3}).
'merge_msg_gw.LoRaModulationInfo'(
    #'gw.LoRaModulationInfo'{
        bandwidth = PFbandwidth,
        spreading_factor = PFspreading_factor,
        code_rate = PFcode_rate,
        polarization_inversion = PFpolarization_inversion
    },
    #'gw.LoRaModulationInfo'{
        bandwidth = NFbandwidth,
        spreading_factor = NFspreading_factor,
        code_rate = NFcode_rate,
        polarization_inversion = NFpolarization_inversion
    },
    _
) ->
    #'gw.LoRaModulationInfo'{
        bandwidth =
            if
                NFbandwidth =:= undefined -> PFbandwidth;
                true -> NFbandwidth
            end,
        spreading_factor =
            if
                NFspreading_factor =:= undefined -> PFspreading_factor;
                true -> NFspreading_factor
            end,
        code_rate =
            if
                NFcode_rate =:= undefined -> PFcode_rate;
                true -> NFcode_rate
            end,
        polarization_inversion =
            if
                NFpolarization_inversion =:= undefined -> PFpolarization_inversion;
                true -> NFpolarization_inversion
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.FSKModulationInfo'/3}).
'merge_msg_gw.FSKModulationInfo'(
    #'gw.FSKModulationInfo'{frequency_deviation = PFfrequency_deviation, datarate = PFdatarate},
    #'gw.FSKModulationInfo'{frequency_deviation = NFfrequency_deviation, datarate = NFdatarate},
    _
) ->
    #'gw.FSKModulationInfo'{
        frequency_deviation =
            if
                NFfrequency_deviation =:= undefined -> PFfrequency_deviation;
                true -> NFfrequency_deviation
            end,
        datarate =
            if
                NFdatarate =:= undefined -> PFdatarate;
                true -> NFdatarate
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.EncryptedFineTimestamp'/3}).
'merge_msg_gw.EncryptedFineTimestamp'(
    #'gw.EncryptedFineTimestamp'{
        aes_key_index = PFaes_key_index,
        encrypted_ns = PFencrypted_ns,
        fpga_id = PFfpga_id
    },
    #'gw.EncryptedFineTimestamp'{
        aes_key_index = NFaes_key_index,
        encrypted_ns = NFencrypted_ns,
        fpga_id = NFfpga_id
    },
    _
) ->
    #'gw.EncryptedFineTimestamp'{
        aes_key_index =
            if
                NFaes_key_index =:= undefined -> PFaes_key_index;
                true -> NFaes_key_index
            end,
        encrypted_ns =
            if
                NFencrypted_ns =:= undefined -> PFencrypted_ns;
                true -> NFencrypted_ns
            end,
        fpga_id =
            if
                NFfpga_id =:= undefined -> PFfpga_id;
                true -> NFfpga_id
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.PlainFineTimestamp'/3}).
'merge_msg_gw.PlainFineTimestamp'(
    #'gw.PlainFineTimestamp'{time = PFtime},
    #'gw.PlainFineTimestamp'{time = NFtime},
    TrUserData
) ->
    #'gw.PlainFineTimestamp'{
        time =
            if
                PFtime /= undefined, NFtime /= undefined ->
                    'merge_msg_google.protobuf.Timestamp'(PFtime, NFtime, TrUserData);
                PFtime == undefined ->
                    NFtime;
                NFtime == undefined ->
                    PFtime
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.GatewayStats'/3}).
'merge_msg_gw.GatewayStats'(
    #'gw.GatewayStats'{
        gateway_id = PFgateway_id,
        ip = PFip,
        time = PFtime,
        location = PFlocation,
        config_version = PFconfig_version,
        rx_packets_received = PFrx_packets_received,
        rx_packets_received_ok = PFrx_packets_received_ok,
        tx_packets_received = PFtx_packets_received,
        tx_packets_emitted = PFtx_packets_emitted,
        meta_data = PFmeta_data,
        stats_id = PFstats_id
    },
    #'gw.GatewayStats'{
        gateway_id = NFgateway_id,
        ip = NFip,
        time = NFtime,
        location = NFlocation,
        config_version = NFconfig_version,
        rx_packets_received = NFrx_packets_received,
        rx_packets_received_ok = NFrx_packets_received_ok,
        tx_packets_received = NFtx_packets_received,
        tx_packets_emitted = NFtx_packets_emitted,
        meta_data = NFmeta_data,
        stats_id = NFstats_id
    },
    TrUserData
) ->
    #'gw.GatewayStats'{
        gateway_id =
            if
                NFgateway_id =:= undefined -> PFgateway_id;
                true -> NFgateway_id
            end,
        ip =
            if
                NFip =:= undefined -> PFip;
                true -> NFip
            end,
        time =
            if
                PFtime /= undefined, NFtime /= undefined ->
                    'merge_msg_google.protobuf.Timestamp'(PFtime, NFtime, TrUserData);
                PFtime == undefined ->
                    NFtime;
                NFtime == undefined ->
                    PFtime
            end,
        location =
            if
                PFlocation /= undefined, NFlocation /= undefined ->
                    'merge_msg_common.Location'(PFlocation, NFlocation, TrUserData);
                PFlocation == undefined ->
                    NFlocation;
                NFlocation == undefined ->
                    PFlocation
            end,
        config_version =
            if
                NFconfig_version =:= undefined -> PFconfig_version;
                true -> NFconfig_version
            end,
        rx_packets_received =
            if
                NFrx_packets_received =:= undefined -> PFrx_packets_received;
                true -> NFrx_packets_received
            end,
        rx_packets_received_ok =
            if
                NFrx_packets_received_ok =:= undefined -> PFrx_packets_received_ok;
                true -> NFrx_packets_received_ok
            end,
        tx_packets_received =
            if
                NFtx_packets_received =:= undefined -> PFtx_packets_received;
                true -> NFtx_packets_received
            end,
        tx_packets_emitted =
            if
                NFtx_packets_emitted =:= undefined -> PFtx_packets_emitted;
                true -> NFtx_packets_emitted
            end,
        meta_data =
            if
                PFmeta_data /= undefined, NFmeta_data /= undefined ->
                    'tr_merge_gw.GatewayStats.meta_data'(PFmeta_data, NFmeta_data, TrUserData);
                PFmeta_data == undefined ->
                    NFmeta_data;
                NFmeta_data == undefined ->
                    PFmeta_data
            end,
        stats_id =
            if
                NFstats_id =:= undefined -> PFstats_id;
                true -> NFstats_id
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.UplinkRXInfo'/3}).
'merge_msg_gw.UplinkRXInfo'(
    #'gw.UplinkRXInfo'{
        gateway_id = PFgateway_id,
        time = PFtime,
        time_since_gps_epoch = PFtime_since_gps_epoch,
        rssi = PFrssi,
        lora_snr = PFlora_snr,
        channel = PFchannel,
        rf_chain = PFrf_chain,
        board = PFboard,
        antenna = PFantenna,
        location = PFlocation,
        fine_timestamp_type = PFfine_timestamp_type,
        fine_timestamp = PFfine_timestamp,
        context = PFcontext,
        uplink_id = PFuplink_id,
        crc_status = PFcrc_status
    },
    #'gw.UplinkRXInfo'{
        gateway_id = NFgateway_id,
        time = NFtime,
        time_since_gps_epoch = NFtime_since_gps_epoch,
        rssi = NFrssi,
        lora_snr = NFlora_snr,
        channel = NFchannel,
        rf_chain = NFrf_chain,
        board = NFboard,
        antenna = NFantenna,
        location = NFlocation,
        fine_timestamp_type = NFfine_timestamp_type,
        fine_timestamp = NFfine_timestamp,
        context = NFcontext,
        uplink_id = NFuplink_id,
        crc_status = NFcrc_status
    },
    TrUserData
) ->
    #'gw.UplinkRXInfo'{
        gateway_id =
            if
                NFgateway_id =:= undefined -> PFgateway_id;
                true -> NFgateway_id
            end,
        time =
            if
                PFtime /= undefined, NFtime /= undefined ->
                    'merge_msg_google.protobuf.Timestamp'(PFtime, NFtime, TrUserData);
                PFtime == undefined ->
                    NFtime;
                NFtime == undefined ->
                    PFtime
            end,
        time_since_gps_epoch =
            if
                PFtime_since_gps_epoch /= undefined, NFtime_since_gps_epoch /= undefined ->
                    'merge_msg_google.protobuf.Duration'(
                        PFtime_since_gps_epoch,
                        NFtime_since_gps_epoch,
                        TrUserData
                    );
                PFtime_since_gps_epoch == undefined ->
                    NFtime_since_gps_epoch;
                NFtime_since_gps_epoch == undefined ->
                    PFtime_since_gps_epoch
            end,
        rssi =
            if
                NFrssi =:= undefined -> PFrssi;
                true -> NFrssi
            end,
        lora_snr =
            if
                NFlora_snr =:= undefined -> PFlora_snr;
                true -> NFlora_snr
            end,
        channel =
            if
                NFchannel =:= undefined -> PFchannel;
                true -> NFchannel
            end,
        rf_chain =
            if
                NFrf_chain =:= undefined -> PFrf_chain;
                true -> NFrf_chain
            end,
        board =
            if
                NFboard =:= undefined -> PFboard;
                true -> NFboard
            end,
        antenna =
            if
                NFantenna =:= undefined -> PFantenna;
                true -> NFantenna
            end,
        location =
            if
                PFlocation /= undefined, NFlocation /= undefined ->
                    'merge_msg_common.Location'(PFlocation, NFlocation, TrUserData);
                PFlocation == undefined ->
                    NFlocation;
                NFlocation == undefined ->
                    PFlocation
            end,
        fine_timestamp_type =
            if
                NFfine_timestamp_type =:= undefined -> PFfine_timestamp_type;
                true -> NFfine_timestamp_type
            end,
        fine_timestamp =
            case {PFfine_timestamp, NFfine_timestamp} of
                {{encrypted_fine_timestamp, OPFfine_timestamp},
                    {encrypted_fine_timestamp, ONFfine_timestamp}} ->
                    {encrypted_fine_timestamp,
                        'merge_msg_gw.EncryptedFineTimestamp'(
                            OPFfine_timestamp,
                            ONFfine_timestamp,
                            TrUserData
                        )};
                {{plain_fine_timestamp, OPFfine_timestamp},
                    {plain_fine_timestamp, ONFfine_timestamp}} ->
                    {plain_fine_timestamp,
                        'merge_msg_gw.PlainFineTimestamp'(
                            OPFfine_timestamp,
                            ONFfine_timestamp,
                            TrUserData
                        )};
                {_, undefined} ->
                    PFfine_timestamp;
                _ ->
                    NFfine_timestamp
            end,
        context =
            if
                NFcontext =:= undefined -> PFcontext;
                true -> NFcontext
            end,
        uplink_id =
            if
                NFuplink_id =:= undefined -> PFuplink_id;
                true -> NFuplink_id
            end,
        crc_status =
            if
                NFcrc_status =:= undefined -> PFcrc_status;
                true -> NFcrc_status
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.DownlinkTXInfo'/3}).
'merge_msg_gw.DownlinkTXInfo'(
    #'gw.DownlinkTXInfo'{
        gateway_id = PFgateway_id,
        frequency = PFfrequency,
        power = PFpower,
        modulation = PFmodulation,
        modulation_info = PFmodulation_info,
        board = PFboard,
        antenna = PFantenna,
        timing = PFtiming,
        timing_info = PFtiming_info,
        context = PFcontext
    },
    #'gw.DownlinkTXInfo'{
        gateway_id = NFgateway_id,
        frequency = NFfrequency,
        power = NFpower,
        modulation = NFmodulation,
        modulation_info = NFmodulation_info,
        board = NFboard,
        antenna = NFantenna,
        timing = NFtiming,
        timing_info = NFtiming_info,
        context = NFcontext
    },
    TrUserData
) ->
    #'gw.DownlinkTXInfo'{
        gateway_id =
            if
                NFgateway_id =:= undefined -> PFgateway_id;
                true -> NFgateway_id
            end,
        frequency =
            if
                NFfrequency =:= undefined -> PFfrequency;
                true -> NFfrequency
            end,
        power =
            if
                NFpower =:= undefined -> PFpower;
                true -> NFpower
            end,
        modulation =
            if
                NFmodulation =:= undefined -> PFmodulation;
                true -> NFmodulation
            end,
        modulation_info =
            case {PFmodulation_info, NFmodulation_info} of
                {{lora_modulation_info, OPFmodulation_info},
                    {lora_modulation_info, ONFmodulation_info}} ->
                    {lora_modulation_info,
                        'merge_msg_gw.LoRaModulationInfo'(
                            OPFmodulation_info,
                            ONFmodulation_info,
                            TrUserData
                        )};
                {{fsk_modulation_info, OPFmodulation_info},
                    {fsk_modulation_info, ONFmodulation_info}} ->
                    {fsk_modulation_info,
                        'merge_msg_gw.FSKModulationInfo'(
                            OPFmodulation_info,
                            ONFmodulation_info,
                            TrUserData
                        )};
                {_, undefined} ->
                    PFmodulation_info;
                _ ->
                    NFmodulation_info
            end,
        board =
            if
                NFboard =:= undefined -> PFboard;
                true -> NFboard
            end,
        antenna =
            if
                NFantenna =:= undefined -> PFantenna;
                true -> NFantenna
            end,
        timing =
            if
                NFtiming =:= undefined -> PFtiming;
                true -> NFtiming
            end,
        timing_info =
            case {PFtiming_info, NFtiming_info} of
                {{immediately_timing_info, OPFtiming_info},
                    {immediately_timing_info, ONFtiming_info}} ->
                    {immediately_timing_info,
                        'merge_msg_gw.ImmediatelyTimingInfo'(
                            OPFtiming_info,
                            ONFtiming_info,
                            TrUserData
                        )};
                {{delay_timing_info, OPFtiming_info}, {delay_timing_info, ONFtiming_info}} ->
                    {delay_timing_info,
                        'merge_msg_gw.DelayTimingInfo'(OPFtiming_info, ONFtiming_info, TrUserData)};
                {{gps_epoch_timing_info, OPFtiming_info}, {gps_epoch_timing_info, ONFtiming_info}} ->
                    {gps_epoch_timing_info,
                        'merge_msg_gw.GPSEpochTimingInfo'(
                            OPFtiming_info,
                            ONFtiming_info,
                            TrUserData
                        )};
                {_, undefined} ->
                    PFtiming_info;
                _ ->
                    NFtiming_info
            end,
        context =
            if
                NFcontext =:= undefined -> PFcontext;
                true -> NFcontext
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.ImmediatelyTimingInfo'/3}).
'merge_msg_gw.ImmediatelyTimingInfo'(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function, 'merge_msg_gw.DelayTimingInfo'/3}).
'merge_msg_gw.DelayTimingInfo'(
    #'gw.DelayTimingInfo'{delay = PFdelay},
    #'gw.DelayTimingInfo'{delay = NFdelay},
    TrUserData
) ->
    #'gw.DelayTimingInfo'{
        delay =
            if
                PFdelay /= undefined, NFdelay /= undefined ->
                    'merge_msg_google.protobuf.Duration'(PFdelay, NFdelay, TrUserData);
                PFdelay == undefined ->
                    NFdelay;
                NFdelay == undefined ->
                    PFdelay
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.GPSEpochTimingInfo'/3}).
'merge_msg_gw.GPSEpochTimingInfo'(
    #'gw.GPSEpochTimingInfo'{time_since_gps_epoch = PFtime_since_gps_epoch},
    #'gw.GPSEpochTimingInfo'{time_since_gps_epoch = NFtime_since_gps_epoch},
    TrUserData
) ->
    #'gw.GPSEpochTimingInfo'{
        time_since_gps_epoch =
            if
                PFtime_since_gps_epoch /= undefined, NFtime_since_gps_epoch /= undefined ->
                    'merge_msg_google.protobuf.Duration'(
                        PFtime_since_gps_epoch,
                        NFtime_since_gps_epoch,
                        TrUserData
                    );
                PFtime_since_gps_epoch == undefined ->
                    NFtime_since_gps_epoch;
                NFtime_since_gps_epoch == undefined ->
                    PFtime_since_gps_epoch
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.UplinkFrame'/3}).
'merge_msg_gw.UplinkFrame'(
    #'gw.UplinkFrame'{phy_payload = PFphy_payload, tx_info = PFtx_info, rx_info = PFrx_info},
    #'gw.UplinkFrame'{phy_payload = NFphy_payload, tx_info = NFtx_info, rx_info = NFrx_info},
    TrUserData
) ->
    #'gw.UplinkFrame'{
        phy_payload =
            if
                NFphy_payload =:= undefined -> PFphy_payload;
                true -> NFphy_payload
            end,
        tx_info =
            if
                PFtx_info /= undefined, NFtx_info /= undefined ->
                    'merge_msg_gw.UplinkTXInfo'(PFtx_info, NFtx_info, TrUserData);
                PFtx_info == undefined ->
                    NFtx_info;
                NFtx_info == undefined ->
                    PFtx_info
            end,
        rx_info =
            if
                PFrx_info /= undefined, NFrx_info /= undefined ->
                    'merge_msg_gw.UplinkRXInfo'(PFrx_info, NFrx_info, TrUserData);
                PFrx_info == undefined ->
                    NFrx_info;
                NFrx_info == undefined ->
                    PFrx_info
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.UplinkFrameSet'/3}).
'merge_msg_gw.UplinkFrameSet'(
    #'gw.UplinkFrameSet'{phy_payload = PFphy_payload, tx_info = PFtx_info, rx_info = PFrx_info},
    #'gw.UplinkFrameSet'{phy_payload = NFphy_payload, tx_info = NFtx_info, rx_info = NFrx_info},
    TrUserData
) ->
    #'gw.UplinkFrameSet'{
        phy_payload =
            if
                NFphy_payload =:= undefined -> PFphy_payload;
                true -> NFphy_payload
            end,
        tx_info =
            if
                PFtx_info /= undefined, NFtx_info /= undefined ->
                    'merge_msg_gw.UplinkTXInfo'(PFtx_info, NFtx_info, TrUserData);
                PFtx_info == undefined ->
                    NFtx_info;
                NFtx_info == undefined ->
                    PFtx_info
            end,
        rx_info =
            if
                PFrx_info /= undefined, NFrx_info /= undefined ->
                    'erlang_++'(PFrx_info, NFrx_info, TrUserData);
                PFrx_info == undefined ->
                    NFrx_info;
                NFrx_info == undefined ->
                    PFrx_info
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.DownlinkFrame'/3}).
'merge_msg_gw.DownlinkFrame'(
    #'gw.DownlinkFrame'{
        phy_payload = PFphy_payload,
        tx_info = PFtx_info,
        token = PFtoken,
        downlink_id = PFdownlink_id,
        items = PFitems,
        gateway_id = PFgateway_id
    },
    #'gw.DownlinkFrame'{
        phy_payload = NFphy_payload,
        tx_info = NFtx_info,
        token = NFtoken,
        downlink_id = NFdownlink_id,
        items = NFitems,
        gateway_id = NFgateway_id
    },
    TrUserData
) ->
    #'gw.DownlinkFrame'{
        phy_payload =
            if
                NFphy_payload =:= undefined -> PFphy_payload;
                true -> NFphy_payload
            end,
        tx_info =
            if
                PFtx_info /= undefined, NFtx_info /= undefined ->
                    'merge_msg_gw.DownlinkTXInfo'(PFtx_info, NFtx_info, TrUserData);
                PFtx_info == undefined ->
                    NFtx_info;
                NFtx_info == undefined ->
                    PFtx_info
            end,
        token =
            if
                NFtoken =:= undefined -> PFtoken;
                true -> NFtoken
            end,
        downlink_id =
            if
                NFdownlink_id =:= undefined -> PFdownlink_id;
                true -> NFdownlink_id
            end,
        items =
            if
                PFitems /= undefined, NFitems /= undefined ->
                    'erlang_++'(PFitems, NFitems, TrUserData);
                PFitems == undefined ->
                    NFitems;
                NFitems == undefined ->
                    PFitems
            end,
        gateway_id =
            if
                NFgateway_id =:= undefined -> PFgateway_id;
                true -> NFgateway_id
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.DownlinkFrameItem'/3}).
'merge_msg_gw.DownlinkFrameItem'(
    #'gw.DownlinkFrameItem'{phy_payload = PFphy_payload, tx_info = PFtx_info},
    #'gw.DownlinkFrameItem'{phy_payload = NFphy_payload, tx_info = NFtx_info},
    TrUserData
) ->
    #'gw.DownlinkFrameItem'{
        phy_payload =
            if
                NFphy_payload =:= undefined -> PFphy_payload;
                true -> NFphy_payload
            end,
        tx_info =
            if
                PFtx_info /= undefined, NFtx_info /= undefined ->
                    'merge_msg_gw.DownlinkTXInfo'(PFtx_info, NFtx_info, TrUserData);
                PFtx_info == undefined ->
                    NFtx_info;
                NFtx_info == undefined ->
                    PFtx_info
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.DownlinkTXAck'/3}).
'merge_msg_gw.DownlinkTXAck'(
    #'gw.DownlinkTXAck'{
        gateway_id = PFgateway_id,
        token = PFtoken,
        error = PFerror,
        downlink_id = PFdownlink_id,
        items = PFitems
    },
    #'gw.DownlinkTXAck'{
        gateway_id = NFgateway_id,
        token = NFtoken,
        error = NFerror,
        downlink_id = NFdownlink_id,
        items = NFitems
    },
    TrUserData
) ->
    #'gw.DownlinkTXAck'{
        gateway_id =
            if
                NFgateway_id =:= undefined -> PFgateway_id;
                true -> NFgateway_id
            end,
        token =
            if
                NFtoken =:= undefined -> PFtoken;
                true -> NFtoken
            end,
        error =
            if
                NFerror =:= undefined -> PFerror;
                true -> NFerror
            end,
        downlink_id =
            if
                NFdownlink_id =:= undefined -> PFdownlink_id;
                true -> NFdownlink_id
            end,
        items =
            if
                PFitems /= undefined, NFitems /= undefined ->
                    'erlang_++'(PFitems, NFitems, TrUserData);
                PFitems == undefined ->
                    NFitems;
                NFitems == undefined ->
                    PFitems
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.DownlinkTXAckItem'/3}).
'merge_msg_gw.DownlinkTXAckItem'(
    #'gw.DownlinkTXAckItem'{status = PFstatus},
    #'gw.DownlinkTXAckItem'{status = NFstatus},
    _
) ->
    #'gw.DownlinkTXAckItem'{
        status =
            if
                NFstatus =:= undefined -> PFstatus;
                true -> NFstatus
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.GatewayConfiguration'/3}).
'merge_msg_gw.GatewayConfiguration'(
    #'gw.GatewayConfiguration'{
        gateway_id = PFgateway_id,
        version = PFversion,
        channels = PFchannels,
        stats_interval = PFstats_interval
    },
    #'gw.GatewayConfiguration'{
        gateway_id = NFgateway_id,
        version = NFversion,
        channels = NFchannels,
        stats_interval = NFstats_interval
    },
    TrUserData
) ->
    #'gw.GatewayConfiguration'{
        gateway_id =
            if
                NFgateway_id =:= undefined -> PFgateway_id;
                true -> NFgateway_id
            end,
        version =
            if
                NFversion =:= undefined -> PFversion;
                true -> NFversion
            end,
        channels =
            if
                PFchannels /= undefined, NFchannels /= undefined ->
                    'erlang_++'(PFchannels, NFchannels, TrUserData);
                PFchannels == undefined ->
                    NFchannels;
                NFchannels == undefined ->
                    PFchannels
            end,
        stats_interval =
            if
                PFstats_interval /= undefined, NFstats_interval /= undefined ->
                    'merge_msg_google.protobuf.Duration'(
                        PFstats_interval,
                        NFstats_interval,
                        TrUserData
                    );
                PFstats_interval == undefined ->
                    NFstats_interval;
                NFstats_interval == undefined ->
                    PFstats_interval
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.ChannelConfiguration'/3}).
'merge_msg_gw.ChannelConfiguration'(
    #'gw.ChannelConfiguration'{
        frequency = PFfrequency,
        modulation = PFmodulation,
        modulation_config = PFmodulation_config,
        board = PFboard,
        demodulator = PFdemodulator
    },
    #'gw.ChannelConfiguration'{
        frequency = NFfrequency,
        modulation = NFmodulation,
        modulation_config = NFmodulation_config,
        board = NFboard,
        demodulator = NFdemodulator
    },
    TrUserData
) ->
    #'gw.ChannelConfiguration'{
        frequency =
            if
                NFfrequency =:= undefined -> PFfrequency;
                true -> NFfrequency
            end,
        modulation =
            if
                NFmodulation =:= undefined -> PFmodulation;
                true -> NFmodulation
            end,
        modulation_config =
            case {PFmodulation_config, NFmodulation_config} of
                {{lora_modulation_config, OPFmodulation_config},
                    {lora_modulation_config, ONFmodulation_config}} ->
                    {lora_modulation_config,
                        'merge_msg_gw.LoRaModulationConfig'(
                            OPFmodulation_config,
                            ONFmodulation_config,
                            TrUserData
                        )};
                {{fsk_modulation_config, OPFmodulation_config},
                    {fsk_modulation_config, ONFmodulation_config}} ->
                    {fsk_modulation_config,
                        'merge_msg_gw.FSKModulationConfig'(
                            OPFmodulation_config,
                            ONFmodulation_config,
                            TrUserData
                        )};
                {_, undefined} ->
                    PFmodulation_config;
                _ ->
                    NFmodulation_config
            end,
        board =
            if
                NFboard =:= undefined -> PFboard;
                true -> NFboard
            end,
        demodulator =
            if
                NFdemodulator =:= undefined -> PFdemodulator;
                true -> NFdemodulator
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.LoRaModulationConfig'/3}).
'merge_msg_gw.LoRaModulationConfig'(
    #'gw.LoRaModulationConfig'{bandwidth = PFbandwidth, spreading_factors = PFspreading_factors},
    #'gw.LoRaModulationConfig'{bandwidth = NFbandwidth, spreading_factors = NFspreading_factors},
    TrUserData
) ->
    #'gw.LoRaModulationConfig'{
        bandwidth =
            if
                NFbandwidth =:= undefined -> PFbandwidth;
                true -> NFbandwidth
            end,
        spreading_factors =
            if
                PFspreading_factors /= undefined, NFspreading_factors /= undefined ->
                    'erlang_++'(PFspreading_factors, NFspreading_factors, TrUserData);
                PFspreading_factors == undefined ->
                    NFspreading_factors;
                NFspreading_factors == undefined ->
                    PFspreading_factors
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.FSKModulationConfig'/3}).
'merge_msg_gw.FSKModulationConfig'(
    #'gw.FSKModulationConfig'{bandwidth = PFbandwidth, bitrate = PFbitrate},
    #'gw.FSKModulationConfig'{bandwidth = NFbandwidth, bitrate = NFbitrate},
    _
) ->
    #'gw.FSKModulationConfig'{
        bandwidth =
            if
                NFbandwidth =:= undefined -> PFbandwidth;
                true -> NFbandwidth
            end,
        bitrate =
            if
                NFbitrate =:= undefined -> PFbitrate;
                true -> NFbitrate
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.GatewayCommandExecRequest'/3}).
'merge_msg_gw.GatewayCommandExecRequest'(
    #'gw.GatewayCommandExecRequest'{
        gateway_id = PFgateway_id,
        command = PFcommand,
        'ExecId' = PFExecId,
        stdin = PFstdin,
        environment = PFenvironment
    },
    #'gw.GatewayCommandExecRequest'{
        gateway_id = NFgateway_id,
        command = NFcommand,
        'ExecId' = NFExecId,
        stdin = NFstdin,
        environment = NFenvironment
    },
    TrUserData
) ->
    #'gw.GatewayCommandExecRequest'{
        gateway_id =
            if
                NFgateway_id =:= undefined -> PFgateway_id;
                true -> NFgateway_id
            end,
        command =
            if
                NFcommand =:= undefined -> PFcommand;
                true -> NFcommand
            end,
        'ExecId' =
            if
                NFExecId =:= undefined -> PFExecId;
                true -> NFExecId
            end,
        stdin =
            if
                NFstdin =:= undefined -> PFstdin;
                true -> NFstdin
            end,
        environment =
            if
                PFenvironment /= undefined, NFenvironment /= undefined ->
                    'tr_merge_gw.GatewayCommandExecRequest.environment'(
                        PFenvironment,
                        NFenvironment,
                        TrUserData
                    );
                PFenvironment == undefined ->
                    NFenvironment;
                NFenvironment == undefined ->
                    PFenvironment
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.GatewayCommandExecResponse'/3}).
'merge_msg_gw.GatewayCommandExecResponse'(
    #'gw.GatewayCommandExecResponse'{
        gateway_id = PFgateway_id,
        exec_id = PFexec_id,
        stdout = PFstdout,
        stderr = PFstderr,
        error = PFerror
    },
    #'gw.GatewayCommandExecResponse'{
        gateway_id = NFgateway_id,
        exec_id = NFexec_id,
        stdout = NFstdout,
        stderr = NFstderr,
        error = NFerror
    },
    _
) ->
    #'gw.GatewayCommandExecResponse'{
        gateway_id =
            if
                NFgateway_id =:= undefined -> PFgateway_id;
                true -> NFgateway_id
            end,
        exec_id =
            if
                NFexec_id =:= undefined -> PFexec_id;
                true -> NFexec_id
            end,
        stdout =
            if
                NFstdout =:= undefined -> PFstdout;
                true -> NFstdout
            end,
        stderr =
            if
                NFstderr =:= undefined -> PFstderr;
                true -> NFstderr
            end,
        error =
            if
                NFerror =:= undefined -> PFerror;
                true -> NFerror
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.RawPacketForwarderEvent'/3}).
'merge_msg_gw.RawPacketForwarderEvent'(
    #'gw.RawPacketForwarderEvent'{
        gateway_id = PFgateway_id,
        raw_id = PFraw_id,
        payload = PFpayload
    },
    #'gw.RawPacketForwarderEvent'{
        gateway_id = NFgateway_id,
        raw_id = NFraw_id,
        payload = NFpayload
    },
    _
) ->
    #'gw.RawPacketForwarderEvent'{
        gateway_id =
            if
                NFgateway_id =:= undefined -> PFgateway_id;
                true -> NFgateway_id
            end,
        raw_id =
            if
                NFraw_id =:= undefined -> PFraw_id;
                true -> NFraw_id
            end,
        payload =
            if
                NFpayload =:= undefined -> PFpayload;
                true -> NFpayload
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.RawPacketForwarderCommand'/3}).
'merge_msg_gw.RawPacketForwarderCommand'(
    #'gw.RawPacketForwarderCommand'{
        gateway_id = PFgateway_id,
        raw_id = PFraw_id,
        payload = PFpayload
    },
    #'gw.RawPacketForwarderCommand'{
        gateway_id = NFgateway_id,
        raw_id = NFraw_id,
        payload = NFpayload
    },
    _
) ->
    #'gw.RawPacketForwarderCommand'{
        gateway_id =
            if
                NFgateway_id =:= undefined -> PFgateway_id;
                true -> NFgateway_id
            end,
        raw_id =
            if
                NFraw_id =:= undefined -> PFraw_id;
                true -> NFraw_id
            end,
        payload =
            if
                NFpayload =:= undefined -> PFpayload;
                true -> NFpayload
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_gw.ConnState'/3}).
'merge_msg_gw.ConnState'(
    #'gw.ConnState'{gateway_id = PFgateway_id, state = PFstate},
    #'gw.ConnState'{gateway_id = NFgateway_id, state = NFstate},
    _
) ->
    #'gw.ConnState'{
        gateway_id =
            if
                NFgateway_id =:= undefined -> PFgateway_id;
                true -> NFgateway_id
            end,
        state =
            if
                NFstate =:= undefined -> PFstate;
                true -> NFstate
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_common.KeyEnvelope'/3}).
'merge_msg_common.KeyEnvelope'(
    #'common.KeyEnvelope'{kek_label = PFkek_label, aes_key = PFaes_key},
    #'common.KeyEnvelope'{kek_label = NFkek_label, aes_key = NFaes_key},
    _
) ->
    #'common.KeyEnvelope'{
        kek_label =
            if
                NFkek_label =:= undefined -> PFkek_label;
                true -> NFkek_label
            end,
        aes_key =
            if
                NFaes_key =:= undefined -> PFaes_key;
                true -> NFaes_key
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_common.Location'/3}).
'merge_msg_common.Location'(
    #'common.Location'{
        latitude = PFlatitude,
        longitude = PFlongitude,
        altitude = PFaltitude,
        source = PFsource,
        accuracy = PFaccuracy
    },
    #'common.Location'{
        latitude = NFlatitude,
        longitude = NFlongitude,
        altitude = NFaltitude,
        source = NFsource,
        accuracy = NFaccuracy
    },
    _
) ->
    #'common.Location'{
        latitude =
            if
                NFlatitude =:= undefined -> PFlatitude;
                true -> NFlatitude
            end,
        longitude =
            if
                NFlongitude =:= undefined -> PFlongitude;
                true -> NFlongitude
            end,
        altitude =
            if
                NFaltitude =:= undefined -> PFaltitude;
                true -> NFaltitude
            end,
        source =
            if
                NFsource =:= undefined -> PFsource;
                true -> NFsource
            end,
        accuracy =
            if
                NFaccuracy =:= undefined -> PFaccuracy;
                true -> NFaccuracy
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_google.protobuf.Timestamp'/3}).
'merge_msg_google.protobuf.Timestamp'(
    #'google.protobuf.Timestamp'{seconds = PFseconds, nanos = PFnanos},
    #'google.protobuf.Timestamp'{seconds = NFseconds, nanos = NFnanos},
    _
) ->
    #'google.protobuf.Timestamp'{
        seconds =
            if
                NFseconds =:= undefined -> PFseconds;
                true -> NFseconds
            end,
        nanos =
            if
                NFnanos =:= undefined -> PFnanos;
                true -> NFnanos
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_google.protobuf.Duration'/3}).
'merge_msg_google.protobuf.Duration'(
    #'google.protobuf.Duration'{seconds = PFseconds, nanos = PFnanos},
    #'google.protobuf.Duration'{seconds = NFseconds, nanos = NFnanos},
    _
) ->
    #'google.protobuf.Duration'{
        seconds =
            if
                NFseconds =:= undefined -> PFseconds;
                true -> NFseconds
            end,
        nanos =
            if
                NFnanos =:= undefined -> PFnanos;
                true -> NFnanos
            end
    }.

verify_msg(Msg) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), []);
verify_msg(X) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'geo.ResolveResult' ->
            'v_msg_geo.ResolveResult'(Msg, [MsgName], TrUserData);
        'geo.FrameRXInfo' ->
            'v_msg_geo.FrameRXInfo'(Msg, [MsgName], TrUserData);
        'geo.ResolveTDOARequest' ->
            'v_msg_geo.ResolveTDOARequest'(Msg, [MsgName], TrUserData);
        'geo.ResolveMultiFrameTDOARequest' ->
            'v_msg_geo.ResolveMultiFrameTDOARequest'(Msg, [MsgName], TrUserData);
        'geo.ResolveTDOAResponse' ->
            'v_msg_geo.ResolveTDOAResponse'(Msg, [MsgName], TrUserData);
        'geo.ResolveMultiFrameTDOAResponse' ->
            'v_msg_geo.ResolveMultiFrameTDOAResponse'(Msg, [MsgName], TrUserData);
        'gw.UplinkTXInfo' ->
            'v_msg_gw.UplinkTXInfo'(Msg, [MsgName], TrUserData);
        'gw.LoRaModulationInfo' ->
            'v_msg_gw.LoRaModulationInfo'(Msg, [MsgName], TrUserData);
        'gw.FSKModulationInfo' ->
            'v_msg_gw.FSKModulationInfo'(Msg, [MsgName], TrUserData);
        'gw.EncryptedFineTimestamp' ->
            'v_msg_gw.EncryptedFineTimestamp'(Msg, [MsgName], TrUserData);
        'gw.PlainFineTimestamp' ->
            'v_msg_gw.PlainFineTimestamp'(Msg, [MsgName], TrUserData);
        'gw.GatewayStats' ->
            'v_msg_gw.GatewayStats'(Msg, [MsgName], TrUserData);
        'gw.UplinkRXInfo' ->
            'v_msg_gw.UplinkRXInfo'(Msg, [MsgName], TrUserData);
        'gw.DownlinkTXInfo' ->
            'v_msg_gw.DownlinkTXInfo'(Msg, [MsgName], TrUserData);
        'gw.ImmediatelyTimingInfo' ->
            'v_msg_gw.ImmediatelyTimingInfo'(Msg, [MsgName], TrUserData);
        'gw.DelayTimingInfo' ->
            'v_msg_gw.DelayTimingInfo'(Msg, [MsgName], TrUserData);
        'gw.GPSEpochTimingInfo' ->
            'v_msg_gw.GPSEpochTimingInfo'(Msg, [MsgName], TrUserData);
        'gw.UplinkFrame' ->
            'v_msg_gw.UplinkFrame'(Msg, [MsgName], TrUserData);
        'gw.UplinkFrameSet' ->
            'v_msg_gw.UplinkFrameSet'(Msg, [MsgName], TrUserData);
        'gw.DownlinkFrame' ->
            'v_msg_gw.DownlinkFrame'(Msg, [MsgName], TrUserData);
        'gw.DownlinkFrameItem' ->
            'v_msg_gw.DownlinkFrameItem'(Msg, [MsgName], TrUserData);
        'gw.DownlinkTXAck' ->
            'v_msg_gw.DownlinkTXAck'(Msg, [MsgName], TrUserData);
        'gw.DownlinkTXAckItem' ->
            'v_msg_gw.DownlinkTXAckItem'(Msg, [MsgName], TrUserData);
        'gw.GatewayConfiguration' ->
            'v_msg_gw.GatewayConfiguration'(Msg, [MsgName], TrUserData);
        'gw.ChannelConfiguration' ->
            'v_msg_gw.ChannelConfiguration'(Msg, [MsgName], TrUserData);
        'gw.LoRaModulationConfig' ->
            'v_msg_gw.LoRaModulationConfig'(Msg, [MsgName], TrUserData);
        'gw.FSKModulationConfig' ->
            'v_msg_gw.FSKModulationConfig'(Msg, [MsgName], TrUserData);
        'gw.GatewayCommandExecRequest' ->
            'v_msg_gw.GatewayCommandExecRequest'(Msg, [MsgName], TrUserData);
        'gw.GatewayCommandExecResponse' ->
            'v_msg_gw.GatewayCommandExecResponse'(Msg, [MsgName], TrUserData);
        'gw.RawPacketForwarderEvent' ->
            'v_msg_gw.RawPacketForwarderEvent'(Msg, [MsgName], TrUserData);
        'gw.RawPacketForwarderCommand' ->
            'v_msg_gw.RawPacketForwarderCommand'(Msg, [MsgName], TrUserData);
        'gw.ConnState' ->
            'v_msg_gw.ConnState'(Msg, [MsgName], TrUserData);
        'common.KeyEnvelope' ->
            'v_msg_common.KeyEnvelope'(Msg, [MsgName], TrUserData);
        'common.Location' ->
            'v_msg_common.Location'(Msg, [MsgName], TrUserData);
        'google.protobuf.Timestamp' ->
            'v_msg_google.protobuf.Timestamp'(Msg, [MsgName], TrUserData);
        'google.protobuf.Duration' ->
            'v_msg_google.protobuf.Duration'(Msg, [MsgName], TrUserData);
        _ ->
            mk_type_error(not_a_known_message, Msg, [])
    end.

-compile({nowarn_unused_function, 'v_msg_geo.ResolveResult'/3}).
-dialyzer({nowarn_function, 'v_msg_geo.ResolveResult'/3}).
'v_msg_geo.ResolveResult'(#'geo.ResolveResult'{location = F1}, Path, TrUserData) ->
    if
        F1 == undefined -> ok;
        true -> 'v_msg_common.Location'(F1, [location | Path], TrUserData)
    end,
    ok;
'v_msg_geo.ResolveResult'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'geo.ResolveResult'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_geo.FrameRXInfo'/3}).
-dialyzer({nowarn_function, 'v_msg_geo.FrameRXInfo'/3}).
'v_msg_geo.FrameRXInfo'(#'geo.FrameRXInfo'{rx_info = F1}, Path, TrUserData) ->
    if
        is_list(F1) ->
            _ = ['v_msg_gw.UplinkRXInfo'(Elem, [rx_info | Path], TrUserData) || Elem <- F1],
            ok;
        true ->
            mk_type_error({invalid_list_of, {msg, 'gw.UplinkRXInfo'}}, F1, [rx_info | Path])
    end,
    ok;
'v_msg_geo.FrameRXInfo'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'geo.FrameRXInfo'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_geo.ResolveTDOARequest'/3}).
-dialyzer({nowarn_function, 'v_msg_geo.ResolveTDOARequest'/3}).
'v_msg_geo.ResolveTDOARequest'(
    #'geo.ResolveTDOARequest'{dev_eui = F1, frame_rx_info = F2, device_reference_altitude = F3},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [dev_eui | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> 'v_msg_geo.FrameRXInfo'(F2, [frame_rx_info | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_double(F3, [device_reference_altitude | Path], TrUserData)
    end,
    ok;
'v_msg_geo.ResolveTDOARequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'geo.ResolveTDOARequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_geo.ResolveMultiFrameTDOARequest'/3}).
-dialyzer({nowarn_function, 'v_msg_geo.ResolveMultiFrameTDOARequest'/3}).
'v_msg_geo.ResolveMultiFrameTDOARequest'(
    #'geo.ResolveMultiFrameTDOARequest'{
        dev_eui = F1,
        frame_rx_info_set = F2,
        device_reference_altitude = F3
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [dev_eui | Path], TrUserData)
    end,
    if
        is_list(F2) ->
            _ = [
                'v_msg_geo.FrameRXInfo'(Elem, [frame_rx_info_set | Path], TrUserData)
                || Elem <- F2
            ],
            ok;
        true ->
            mk_type_error({invalid_list_of, {msg, 'geo.FrameRXInfo'}}, F2, [
                frame_rx_info_set
                | Path
            ])
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_double(F3, [device_reference_altitude | Path], TrUserData)
    end,
    ok;
'v_msg_geo.ResolveMultiFrameTDOARequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'geo.ResolveMultiFrameTDOARequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_geo.ResolveTDOAResponse'/3}).
-dialyzer({nowarn_function, 'v_msg_geo.ResolveTDOAResponse'/3}).
'v_msg_geo.ResolveTDOAResponse'(#'geo.ResolveTDOAResponse'{result = F1}, Path, TrUserData) ->
    if
        F1 == undefined -> ok;
        true -> 'v_msg_geo.ResolveResult'(F1, [result | Path], TrUserData)
    end,
    ok;
'v_msg_geo.ResolveTDOAResponse'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'geo.ResolveTDOAResponse'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_geo.ResolveMultiFrameTDOAResponse'/3}).
-dialyzer({nowarn_function, 'v_msg_geo.ResolveMultiFrameTDOAResponse'/3}).
'v_msg_geo.ResolveMultiFrameTDOAResponse'(
    #'geo.ResolveMultiFrameTDOAResponse'{result = F1},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> 'v_msg_geo.ResolveResult'(F1, [result | Path], TrUserData)
    end,
    ok;
'v_msg_geo.ResolveMultiFrameTDOAResponse'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'geo.ResolveMultiFrameTDOAResponse'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.UplinkTXInfo'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.UplinkTXInfo'/3}).
'v_msg_gw.UplinkTXInfo'(
    #'gw.UplinkTXInfo'{frequency = F1, modulation = F2, modulation_info = F3},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_uint32(F1, [frequency | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> 'v_enum_common.Modulation'(F2, [modulation | Path], TrUserData)
    end,
    case F3 of
        undefined ->
            ok;
        {lora_modulation_info, OF3} ->
            'v_msg_gw.LoRaModulationInfo'(
                OF3,
                [lora_modulation_info, modulation_info | Path],
                TrUserData
            );
        {fsk_modulation_info, OF3} ->
            'v_msg_gw.FSKModulationInfo'(
                OF3,
                [fsk_modulation_info, modulation_info | Path],
                TrUserData
            );
        _ ->
            mk_type_error(invalid_oneof, F3, [modulation_info | Path])
    end,
    ok;
'v_msg_gw.UplinkTXInfo'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.UplinkTXInfo'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.LoRaModulationInfo'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.LoRaModulationInfo'/3}).
'v_msg_gw.LoRaModulationInfo'(
    #'gw.LoRaModulationInfo'{
        bandwidth = F1,
        spreading_factor = F2,
        code_rate = F3,
        polarization_inversion = F4
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_uint32(F1, [bandwidth | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_uint32(F2, [spreading_factor | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_string(F3, [code_rate | Path], TrUserData)
    end,
    if
        F4 == undefined -> ok;
        true -> v_type_bool(F4, [polarization_inversion | Path], TrUserData)
    end,
    ok;
'v_msg_gw.LoRaModulationInfo'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.LoRaModulationInfo'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.FSKModulationInfo'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.FSKModulationInfo'/3}).
'v_msg_gw.FSKModulationInfo'(
    #'gw.FSKModulationInfo'{frequency_deviation = F1, datarate = F2},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_uint32(F1, [frequency_deviation | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_uint32(F2, [datarate | Path], TrUserData)
    end,
    ok;
'v_msg_gw.FSKModulationInfo'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.FSKModulationInfo'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.EncryptedFineTimestamp'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.EncryptedFineTimestamp'/3}).
'v_msg_gw.EncryptedFineTimestamp'(
    #'gw.EncryptedFineTimestamp'{aes_key_index = F1, encrypted_ns = F2, fpga_id = F3},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_uint32(F1, [aes_key_index | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_bytes(F2, [encrypted_ns | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_bytes(F3, [fpga_id | Path], TrUserData)
    end,
    ok;
'v_msg_gw.EncryptedFineTimestamp'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.EncryptedFineTimestamp'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.PlainFineTimestamp'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.PlainFineTimestamp'/3}).
'v_msg_gw.PlainFineTimestamp'(#'gw.PlainFineTimestamp'{time = F1}, Path, TrUserData) ->
    if
        F1 == undefined -> ok;
        true -> 'v_msg_google.protobuf.Timestamp'(F1, [time | Path], TrUserData)
    end,
    ok;
'v_msg_gw.PlainFineTimestamp'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.PlainFineTimestamp'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.GatewayStats'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.GatewayStats'/3}).
'v_msg_gw.GatewayStats'(
    #'gw.GatewayStats'{
        gateway_id = F1,
        ip = F2,
        time = F3,
        location = F4,
        config_version = F5,
        rx_packets_received = F6,
        rx_packets_received_ok = F7,
        tx_packets_received = F8,
        tx_packets_emitted = F9,
        meta_data = F10,
        stats_id = F11
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [gateway_id | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_string(F2, [ip | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> 'v_msg_google.protobuf.Timestamp'(F3, [time | Path], TrUserData)
    end,
    if
        F4 == undefined -> ok;
        true -> 'v_msg_common.Location'(F4, [location | Path], TrUserData)
    end,
    if
        F5 == undefined -> ok;
        true -> v_type_string(F5, [config_version | Path], TrUserData)
    end,
    if
        F6 == undefined -> ok;
        true -> v_type_uint32(F6, [rx_packets_received | Path], TrUserData)
    end,
    if
        F7 == undefined -> ok;
        true -> v_type_uint32(F7, [rx_packets_received_ok | Path], TrUserData)
    end,
    if
        F8 == undefined -> ok;
        true -> v_type_uint32(F8, [tx_packets_received | Path], TrUserData)
    end,
    if
        F9 == undefined -> ok;
        true -> v_type_uint32(F9, [tx_packets_emitted | Path], TrUserData)
    end,
    'v_map<string,string>'(F10, [meta_data | Path], TrUserData),
    if
        F11 == undefined -> ok;
        true -> v_type_bytes(F11, [stats_id | Path], TrUserData)
    end,
    ok;
'v_msg_gw.GatewayStats'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.GatewayStats'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.UplinkRXInfo'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.UplinkRXInfo'/3}).
'v_msg_gw.UplinkRXInfo'(
    #'gw.UplinkRXInfo'{
        gateway_id = F1,
        time = F2,
        time_since_gps_epoch = F3,
        rssi = F4,
        lora_snr = F5,
        channel = F6,
        rf_chain = F7,
        board = F8,
        antenna = F9,
        location = F10,
        fine_timestamp_type = F11,
        fine_timestamp = F12,
        context = F13,
        uplink_id = F14,
        crc_status = F15
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [gateway_id | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> 'v_msg_google.protobuf.Timestamp'(F2, [time | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> 'v_msg_google.protobuf.Duration'(F3, [time_since_gps_epoch | Path], TrUserData)
    end,
    if
        F4 == undefined -> ok;
        true -> v_type_int32(F4, [rssi | Path], TrUserData)
    end,
    if
        F5 == undefined -> ok;
        true -> v_type_double(F5, [lora_snr | Path], TrUserData)
    end,
    if
        F6 == undefined -> ok;
        true -> v_type_uint32(F6, [channel | Path], TrUserData)
    end,
    if
        F7 == undefined -> ok;
        true -> v_type_uint32(F7, [rf_chain | Path], TrUserData)
    end,
    if
        F8 == undefined -> ok;
        true -> v_type_uint32(F8, [board | Path], TrUserData)
    end,
    if
        F9 == undefined -> ok;
        true -> v_type_uint32(F9, [antenna | Path], TrUserData)
    end,
    if
        F10 == undefined -> ok;
        true -> 'v_msg_common.Location'(F10, [location | Path], TrUserData)
    end,
    if
        F11 == undefined -> ok;
        true -> 'v_enum_gw.FineTimestampType'(F11, [fine_timestamp_type | Path], TrUserData)
    end,
    case F12 of
        undefined ->
            ok;
        {encrypted_fine_timestamp, OF12} ->
            'v_msg_gw.EncryptedFineTimestamp'(
                OF12,
                [encrypted_fine_timestamp, fine_timestamp | Path],
                TrUserData
            );
        {plain_fine_timestamp, OF12} ->
            'v_msg_gw.PlainFineTimestamp'(
                OF12,
                [plain_fine_timestamp, fine_timestamp | Path],
                TrUserData
            );
        _ ->
            mk_type_error(invalid_oneof, F12, [fine_timestamp | Path])
    end,
    if
        F13 == undefined -> ok;
        true -> v_type_bytes(F13, [context | Path], TrUserData)
    end,
    if
        F14 == undefined -> ok;
        true -> v_type_bytes(F14, [uplink_id | Path], TrUserData)
    end,
    if
        F15 == undefined -> ok;
        true -> 'v_enum_gw.CRCStatus'(F15, [crc_status | Path], TrUserData)
    end,
    ok;
'v_msg_gw.UplinkRXInfo'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.UplinkRXInfo'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.DownlinkTXInfo'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.DownlinkTXInfo'/3}).
'v_msg_gw.DownlinkTXInfo'(
    #'gw.DownlinkTXInfo'{
        gateway_id = F1,
        frequency = F2,
        power = F3,
        modulation = F4,
        modulation_info = F5,
        board = F6,
        antenna = F7,
        timing = F8,
        timing_info = F9,
        context = F10
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [gateway_id | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_uint32(F2, [frequency | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_int32(F3, [power | Path], TrUserData)
    end,
    if
        F4 == undefined -> ok;
        true -> 'v_enum_common.Modulation'(F4, [modulation | Path], TrUserData)
    end,
    case F5 of
        undefined ->
            ok;
        {lora_modulation_info, OF5} ->
            'v_msg_gw.LoRaModulationInfo'(
                OF5,
                [lora_modulation_info, modulation_info | Path],
                TrUserData
            );
        {fsk_modulation_info, OF5} ->
            'v_msg_gw.FSKModulationInfo'(
                OF5,
                [fsk_modulation_info, modulation_info | Path],
                TrUserData
            );
        _ ->
            mk_type_error(invalid_oneof, F5, [modulation_info | Path])
    end,
    if
        F6 == undefined -> ok;
        true -> v_type_uint32(F6, [board | Path], TrUserData)
    end,
    if
        F7 == undefined -> ok;
        true -> v_type_uint32(F7, [antenna | Path], TrUserData)
    end,
    if
        F8 == undefined -> ok;
        true -> 'v_enum_gw.DownlinkTiming'(F8, [timing | Path], TrUserData)
    end,
    case F9 of
        undefined ->
            ok;
        {immediately_timing_info, OF9} ->
            'v_msg_gw.ImmediatelyTimingInfo'(
                OF9,
                [immediately_timing_info, timing_info | Path],
                TrUserData
            );
        {delay_timing_info, OF9} ->
            'v_msg_gw.DelayTimingInfo'(OF9, [delay_timing_info, timing_info | Path], TrUserData);
        {gps_epoch_timing_info, OF9} ->
            'v_msg_gw.GPSEpochTimingInfo'(
                OF9,
                [gps_epoch_timing_info, timing_info | Path],
                TrUserData
            );
        _ ->
            mk_type_error(invalid_oneof, F9, [timing_info | Path])
    end,
    if
        F10 == undefined -> ok;
        true -> v_type_bytes(F10, [context | Path], TrUserData)
    end,
    ok;
'v_msg_gw.DownlinkTXInfo'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.DownlinkTXInfo'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.ImmediatelyTimingInfo'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.ImmediatelyTimingInfo'/3}).
'v_msg_gw.ImmediatelyTimingInfo'(#'gw.ImmediatelyTimingInfo'{}, _Path, _) ->
    ok;
'v_msg_gw.ImmediatelyTimingInfo'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.ImmediatelyTimingInfo'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.DelayTimingInfo'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.DelayTimingInfo'/3}).
'v_msg_gw.DelayTimingInfo'(#'gw.DelayTimingInfo'{delay = F1}, Path, TrUserData) ->
    if
        F1 == undefined -> ok;
        true -> 'v_msg_google.protobuf.Duration'(F1, [delay | Path], TrUserData)
    end,
    ok;
'v_msg_gw.DelayTimingInfo'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.DelayTimingInfo'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.GPSEpochTimingInfo'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.GPSEpochTimingInfo'/3}).
'v_msg_gw.GPSEpochTimingInfo'(
    #'gw.GPSEpochTimingInfo'{time_since_gps_epoch = F1},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> 'v_msg_google.protobuf.Duration'(F1, [time_since_gps_epoch | Path], TrUserData)
    end,
    ok;
'v_msg_gw.GPSEpochTimingInfo'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.GPSEpochTimingInfo'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.UplinkFrame'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.UplinkFrame'/3}).
'v_msg_gw.UplinkFrame'(
    #'gw.UplinkFrame'{phy_payload = F1, tx_info = F2, rx_info = F3},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [phy_payload | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> 'v_msg_gw.UplinkTXInfo'(F2, [tx_info | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> 'v_msg_gw.UplinkRXInfo'(F3, [rx_info | Path], TrUserData)
    end,
    ok;
'v_msg_gw.UplinkFrame'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.UplinkFrame'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.UplinkFrameSet'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.UplinkFrameSet'/3}).
'v_msg_gw.UplinkFrameSet'(
    #'gw.UplinkFrameSet'{phy_payload = F1, tx_info = F2, rx_info = F3},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [phy_payload | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> 'v_msg_gw.UplinkTXInfo'(F2, [tx_info | Path], TrUserData)
    end,
    if
        is_list(F3) ->
            _ = ['v_msg_gw.UplinkRXInfo'(Elem, [rx_info | Path], TrUserData) || Elem <- F3],
            ok;
        true ->
            mk_type_error({invalid_list_of, {msg, 'gw.UplinkRXInfo'}}, F3, [rx_info | Path])
    end,
    ok;
'v_msg_gw.UplinkFrameSet'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.UplinkFrameSet'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.DownlinkFrame'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.DownlinkFrame'/3}).
'v_msg_gw.DownlinkFrame'(
    #'gw.DownlinkFrame'{
        phy_payload = F1,
        tx_info = F2,
        token = F3,
        downlink_id = F4,
        items = F5,
        gateway_id = F6
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [phy_payload | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> 'v_msg_gw.DownlinkTXInfo'(F2, [tx_info | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_uint32(F3, [token | Path], TrUserData)
    end,
    if
        F4 == undefined -> ok;
        true -> v_type_bytes(F4, [downlink_id | Path], TrUserData)
    end,
    if
        is_list(F5) ->
            _ = ['v_msg_gw.DownlinkFrameItem'(Elem, [items | Path], TrUserData) || Elem <- F5],
            ok;
        true ->
            mk_type_error({invalid_list_of, {msg, 'gw.DownlinkFrameItem'}}, F5, [items | Path])
    end,
    if
        F6 == undefined -> ok;
        true -> v_type_bytes(F6, [gateway_id | Path], TrUserData)
    end,
    ok;
'v_msg_gw.DownlinkFrame'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.DownlinkFrame'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.DownlinkFrameItem'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.DownlinkFrameItem'/3}).
'v_msg_gw.DownlinkFrameItem'(
    #'gw.DownlinkFrameItem'{phy_payload = F1, tx_info = F2},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [phy_payload | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> 'v_msg_gw.DownlinkTXInfo'(F2, [tx_info | Path], TrUserData)
    end,
    ok;
'v_msg_gw.DownlinkFrameItem'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.DownlinkFrameItem'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.DownlinkTXAck'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.DownlinkTXAck'/3}).
'v_msg_gw.DownlinkTXAck'(
    #'gw.DownlinkTXAck'{gateway_id = F1, token = F2, error = F3, downlink_id = F4, items = F5},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [gateway_id | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_uint32(F2, [token | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_string(F3, [error | Path], TrUserData)
    end,
    if
        F4 == undefined -> ok;
        true -> v_type_bytes(F4, [downlink_id | Path], TrUserData)
    end,
    if
        is_list(F5) ->
            _ = ['v_msg_gw.DownlinkTXAckItem'(Elem, [items | Path], TrUserData) || Elem <- F5],
            ok;
        true ->
            mk_type_error({invalid_list_of, {msg, 'gw.DownlinkTXAckItem'}}, F5, [items | Path])
    end,
    ok;
'v_msg_gw.DownlinkTXAck'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.DownlinkTXAck'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.DownlinkTXAckItem'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.DownlinkTXAckItem'/3}).
'v_msg_gw.DownlinkTXAckItem'(#'gw.DownlinkTXAckItem'{status = F1}, Path, TrUserData) ->
    if
        F1 == undefined -> ok;
        true -> 'v_enum_gw.TxAckStatus'(F1, [status | Path], TrUserData)
    end,
    ok;
'v_msg_gw.DownlinkTXAckItem'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.DownlinkTXAckItem'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.GatewayConfiguration'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.GatewayConfiguration'/3}).
'v_msg_gw.GatewayConfiguration'(
    #'gw.GatewayConfiguration'{gateway_id = F1, version = F2, channels = F3, stats_interval = F4},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [gateway_id | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_string(F2, [version | Path], TrUserData)
    end,
    if
        is_list(F3) ->
            _ = [
                'v_msg_gw.ChannelConfiguration'(Elem, [channels | Path], TrUserData)
                || Elem <- F3
            ],
            ok;
        true ->
            mk_type_error({invalid_list_of, {msg, 'gw.ChannelConfiguration'}}, F3, [channels | Path])
    end,
    if
        F4 == undefined -> ok;
        true -> 'v_msg_google.protobuf.Duration'(F4, [stats_interval | Path], TrUserData)
    end,
    ok;
'v_msg_gw.GatewayConfiguration'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.GatewayConfiguration'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.ChannelConfiguration'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.ChannelConfiguration'/3}).
'v_msg_gw.ChannelConfiguration'(
    #'gw.ChannelConfiguration'{
        frequency = F1,
        modulation = F2,
        modulation_config = F3,
        board = F4,
        demodulator = F5
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_uint32(F1, [frequency | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> 'v_enum_common.Modulation'(F2, [modulation | Path], TrUserData)
    end,
    case F3 of
        undefined ->
            ok;
        {lora_modulation_config, OF3} ->
            'v_msg_gw.LoRaModulationConfig'(
                OF3,
                [lora_modulation_config, modulation_config | Path],
                TrUserData
            );
        {fsk_modulation_config, OF3} ->
            'v_msg_gw.FSKModulationConfig'(
                OF3,
                [fsk_modulation_config, modulation_config | Path],
                TrUserData
            );
        _ ->
            mk_type_error(invalid_oneof, F3, [modulation_config | Path])
    end,
    if
        F4 == undefined -> ok;
        true -> v_type_uint32(F4, [board | Path], TrUserData)
    end,
    if
        F5 == undefined -> ok;
        true -> v_type_uint32(F5, [demodulator | Path], TrUserData)
    end,
    ok;
'v_msg_gw.ChannelConfiguration'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.ChannelConfiguration'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.LoRaModulationConfig'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.LoRaModulationConfig'/3}).
'v_msg_gw.LoRaModulationConfig'(
    #'gw.LoRaModulationConfig'{bandwidth = F1, spreading_factors = F2},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_uint32(F1, [bandwidth | Path], TrUserData)
    end,
    if
        is_list(F2) ->
            _ = [v_type_uint32(Elem, [spreading_factors | Path], TrUserData) || Elem <- F2],
            ok;
        true ->
            mk_type_error({invalid_list_of, uint32}, F2, [spreading_factors | Path])
    end,
    ok;
'v_msg_gw.LoRaModulationConfig'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.LoRaModulationConfig'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.FSKModulationConfig'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.FSKModulationConfig'/3}).
'v_msg_gw.FSKModulationConfig'(
    #'gw.FSKModulationConfig'{bandwidth = F1, bitrate = F2},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_uint32(F1, [bandwidth | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_uint32(F2, [bitrate | Path], TrUserData)
    end,
    ok;
'v_msg_gw.FSKModulationConfig'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.FSKModulationConfig'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.GatewayCommandExecRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.GatewayCommandExecRequest'/3}).
'v_msg_gw.GatewayCommandExecRequest'(
    #'gw.GatewayCommandExecRequest'{
        gateway_id = F1,
        command = F2,
        'ExecId' = F3,
        stdin = F4,
        environment = F5
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [gateway_id | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_string(F2, [command | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_bytes(F3, ['ExecId' | Path], TrUserData)
    end,
    if
        F4 == undefined -> ok;
        true -> v_type_bytes(F4, [stdin | Path], TrUserData)
    end,
    'v_map<string,string>'(F5, [environment | Path], TrUserData),
    ok;
'v_msg_gw.GatewayCommandExecRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.GatewayCommandExecRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.GatewayCommandExecResponse'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.GatewayCommandExecResponse'/3}).
'v_msg_gw.GatewayCommandExecResponse'(
    #'gw.GatewayCommandExecResponse'{
        gateway_id = F1,
        exec_id = F2,
        stdout = F3,
        stderr = F4,
        error = F5
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [gateway_id | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_bytes(F2, [exec_id | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_bytes(F3, [stdout | Path], TrUserData)
    end,
    if
        F4 == undefined -> ok;
        true -> v_type_bytes(F4, [stderr | Path], TrUserData)
    end,
    if
        F5 == undefined -> ok;
        true -> v_type_string(F5, [error | Path], TrUserData)
    end,
    ok;
'v_msg_gw.GatewayCommandExecResponse'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.GatewayCommandExecResponse'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.RawPacketForwarderEvent'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.RawPacketForwarderEvent'/3}).
'v_msg_gw.RawPacketForwarderEvent'(
    #'gw.RawPacketForwarderEvent'{gateway_id = F1, raw_id = F2, payload = F3},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [gateway_id | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_bytes(F2, [raw_id | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_bytes(F3, [payload | Path], TrUserData)
    end,
    ok;
'v_msg_gw.RawPacketForwarderEvent'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.RawPacketForwarderEvent'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.RawPacketForwarderCommand'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.RawPacketForwarderCommand'/3}).
'v_msg_gw.RawPacketForwarderCommand'(
    #'gw.RawPacketForwarderCommand'{gateway_id = F1, raw_id = F2, payload = F3},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [gateway_id | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_bytes(F2, [raw_id | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_bytes(F3, [payload | Path], TrUserData)
    end,
    ok;
'v_msg_gw.RawPacketForwarderCommand'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.RawPacketForwarderCommand'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_gw.ConnState'/3}).
-dialyzer({nowarn_function, 'v_msg_gw.ConnState'/3}).
'v_msg_gw.ConnState'(#'gw.ConnState'{gateway_id = F1, state = F2}, Path, TrUserData) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [gateway_id | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> 'v_enum_gw.ConnState.State'(F2, [state | Path], TrUserData)
    end,
    ok;
'v_msg_gw.ConnState'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'gw.ConnState'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_common.KeyEnvelope'/3}).
-dialyzer({nowarn_function, 'v_msg_common.KeyEnvelope'/3}).
'v_msg_common.KeyEnvelope'(#'common.KeyEnvelope'{kek_label = F1, aes_key = F2}, Path, TrUserData) ->
    if
        F1 == undefined -> ok;
        true -> v_type_string(F1, [kek_label | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_bytes(F2, [aes_key | Path], TrUserData)
    end,
    ok;
'v_msg_common.KeyEnvelope'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'common.KeyEnvelope'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_common.Location'/3}).
-dialyzer({nowarn_function, 'v_msg_common.Location'/3}).
'v_msg_common.Location'(
    #'common.Location'{latitude = F1, longitude = F2, altitude = F3, source = F4, accuracy = F5},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_double(F1, [latitude | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_double(F2, [longitude | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_double(F3, [altitude | Path], TrUserData)
    end,
    if
        F4 == undefined -> ok;
        true -> 'v_enum_common.LocationSource'(F4, [source | Path], TrUserData)
    end,
    if
        F5 == undefined -> ok;
        true -> v_type_uint32(F5, [accuracy | Path], TrUserData)
    end,
    ok;
'v_msg_common.Location'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'common.Location'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_google.protobuf.Timestamp'/3}).
-dialyzer({nowarn_function, 'v_msg_google.protobuf.Timestamp'/3}).
'v_msg_google.protobuf.Timestamp'(
    #'google.protobuf.Timestamp'{seconds = F1, nanos = F2},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_int64(F1, [seconds | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_int32(F2, [nanos | Path], TrUserData)
    end,
    ok;
'v_msg_google.protobuf.Timestamp'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'google.protobuf.Timestamp'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_google.protobuf.Duration'/3}).
-dialyzer({nowarn_function, 'v_msg_google.protobuf.Duration'/3}).
'v_msg_google.protobuf.Duration'(
    #'google.protobuf.Duration'{seconds = F1, nanos = F2},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_int64(F1, [seconds | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_int32(F2, [nanos | Path], TrUserData)
    end,
    ok;
'v_msg_google.protobuf.Duration'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'google.protobuf.Duration'}, X, Path).

-compile({nowarn_unused_function, 'v_enum_gw.DownlinkTiming'/3}).
-dialyzer({nowarn_function, 'v_enum_gw.DownlinkTiming'/3}).
'v_enum_gw.DownlinkTiming'('IMMEDIATELY', _Path, _TrUserData) ->
    ok;
'v_enum_gw.DownlinkTiming'('DELAY', _Path, _TrUserData) ->
    ok;
'v_enum_gw.DownlinkTiming'('GPS_EPOCH', _Path, _TrUserData) ->
    ok;
'v_enum_gw.DownlinkTiming'(V, _Path, _TrUserData) when
    -2147483648 =< V, V =< 2147483647, is_integer(V)
->
    ok;
'v_enum_gw.DownlinkTiming'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'gw.DownlinkTiming'}, X, Path).

-compile({nowarn_unused_function, 'v_enum_gw.FineTimestampType'/3}).
-dialyzer({nowarn_function, 'v_enum_gw.FineTimestampType'/3}).
'v_enum_gw.FineTimestampType'('NONE', _Path, _TrUserData) ->
    ok;
'v_enum_gw.FineTimestampType'('ENCRYPTED', _Path, _TrUserData) ->
    ok;
'v_enum_gw.FineTimestampType'('PLAIN', _Path, _TrUserData) ->
    ok;
'v_enum_gw.FineTimestampType'(V, _Path, _TrUserData) when
    -2147483648 =< V, V =< 2147483647, is_integer(V)
->
    ok;
'v_enum_gw.FineTimestampType'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'gw.FineTimestampType'}, X, Path).

-compile({nowarn_unused_function, 'v_enum_gw.CRCStatus'/3}).
-dialyzer({nowarn_function, 'v_enum_gw.CRCStatus'/3}).
'v_enum_gw.CRCStatus'('NO_CRC', _Path, _TrUserData) ->
    ok;
'v_enum_gw.CRCStatus'('BAD_CRC', _Path, _TrUserData) ->
    ok;
'v_enum_gw.CRCStatus'('CRC_OK', _Path, _TrUserData) ->
    ok;
'v_enum_gw.CRCStatus'(V, _Path, _TrUserData) when
    -2147483648 =< V, V =< 2147483647, is_integer(V)
->
    ok;
'v_enum_gw.CRCStatus'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'gw.CRCStatus'}, X, Path).

-compile({nowarn_unused_function, 'v_enum_gw.TxAckStatus'/3}).
-dialyzer({nowarn_function, 'v_enum_gw.TxAckStatus'/3}).
'v_enum_gw.TxAckStatus'('IGNORED', _Path, _TrUserData) ->
    ok;
'v_enum_gw.TxAckStatus'('OK', _Path, _TrUserData) ->
    ok;
'v_enum_gw.TxAckStatus'('TOO_LATE', _Path, _TrUserData) ->
    ok;
'v_enum_gw.TxAckStatus'('TOO_EARLY', _Path, _TrUserData) ->
    ok;
'v_enum_gw.TxAckStatus'('COLLISION_PACKET', _Path, _TrUserData) ->
    ok;
'v_enum_gw.TxAckStatus'('COLLISION_BEACON', _Path, _TrUserData) ->
    ok;
'v_enum_gw.TxAckStatus'('TX_FREQ', _Path, _TrUserData) ->
    ok;
'v_enum_gw.TxAckStatus'('TX_POWER', _Path, _TrUserData) ->
    ok;
'v_enum_gw.TxAckStatus'('GPS_UNLOCKED', _Path, _TrUserData) ->
    ok;
'v_enum_gw.TxAckStatus'('QUEUE_FULL', _Path, _TrUserData) ->
    ok;
'v_enum_gw.TxAckStatus'('INTERNAL_ERROR', _Path, _TrUserData) ->
    ok;
'v_enum_gw.TxAckStatus'(V, _Path, _TrUserData) when
    -2147483648 =< V, V =< 2147483647, is_integer(V)
->
    ok;
'v_enum_gw.TxAckStatus'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'gw.TxAckStatus'}, X, Path).

-compile({nowarn_unused_function, 'v_enum_gw.ConnState.State'/3}).
-dialyzer({nowarn_function, 'v_enum_gw.ConnState.State'/3}).
'v_enum_gw.ConnState.State'('OFFLINE', _Path, _TrUserData) ->
    ok;
'v_enum_gw.ConnState.State'('ONLINE', _Path, _TrUserData) ->
    ok;
'v_enum_gw.ConnState.State'(V, _Path, _TrUserData) when
    -2147483648 =< V, V =< 2147483647, is_integer(V)
->
    ok;
'v_enum_gw.ConnState.State'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'gw.ConnState.State'}, X, Path).

-compile({nowarn_unused_function, 'v_enum_common.Modulation'/3}).
-dialyzer({nowarn_function, 'v_enum_common.Modulation'/3}).
'v_enum_common.Modulation'('LORA', _Path, _TrUserData) ->
    ok;
'v_enum_common.Modulation'('FSK', _Path, _TrUserData) ->
    ok;
'v_enum_common.Modulation'(V, _Path, _TrUserData) when
    -2147483648 =< V, V =< 2147483647, is_integer(V)
->
    ok;
'v_enum_common.Modulation'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'common.Modulation'}, X, Path).

-compile({nowarn_unused_function, 'v_enum_common.LocationSource'/3}).
-dialyzer({nowarn_function, 'v_enum_common.LocationSource'/3}).
'v_enum_common.LocationSource'('UNKNOWN', _Path, _TrUserData) ->
    ok;
'v_enum_common.LocationSource'('GPS', _Path, _TrUserData) ->
    ok;
'v_enum_common.LocationSource'('CONFIG', _Path, _TrUserData) ->
    ok;
'v_enum_common.LocationSource'('GEO_RESOLVER_TDOA', _Path, _TrUserData) ->
    ok;
'v_enum_common.LocationSource'('GEO_RESOLVER_RSSI', _Path, _TrUserData) ->
    ok;
'v_enum_common.LocationSource'('GEO_RESOLVER_GNSS', _Path, _TrUserData) ->
    ok;
'v_enum_common.LocationSource'('GEO_RESOLVER_WIFI', _Path, _TrUserData) ->
    ok;
'v_enum_common.LocationSource'(V, _Path, _TrUserData) when
    -2147483648 =< V, V =< 2147483647, is_integer(V)
->
    ok;
'v_enum_common.LocationSource'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'common.LocationSource'}, X, Path).

-compile({nowarn_unused_function, v_type_int32/3}).
-dialyzer({nowarn_function, v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData) when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32}, N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X, Path).

-compile({nowarn_unused_function, v_type_int64/3}).
-dialyzer({nowarn_function, v_type_int64/3}).
v_type_int64(N, _Path, _TrUserData) when -9223372036854775808 =< N, N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64}, N, Path);
v_type_int64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int64, signed, 64}, X, Path).

-compile({nowarn_unused_function, v_type_uint32/3}).
-dialyzer({nowarn_function, v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData) when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned, 32}, N, Path);
v_type_uint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X, Path).

-compile({nowarn_unused_function, v_type_bool/3}).
-dialyzer({nowarn_function, v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) -> mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function, v_type_double/3}).
-dialyzer({nowarn_function, v_type_double/3}).
v_type_double(N, _Path, _TrUserData) when is_float(N) -> ok;
v_type_double(N, _Path, _TrUserData) when is_integer(N) -> ok;
v_type_double(infinity, _Path, _TrUserData) -> ok;
v_type_double('-infinity', _Path, _TrUserData) -> ok;
v_type_double(nan, _Path, _TrUserData) -> ok;
v_type_double(X, Path, _TrUserData) -> mk_type_error(bad_double_value, X, Path).

-compile({nowarn_unused_function, v_type_string/3}).
-dialyzer({nowarn_function, v_type_string/3}).
v_type_string(S, Path, _TrUserData) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} -> mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg -> mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function, v_type_bytes/3}).
-dialyzer({nowarn_function, v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) -> ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) -> ok;
v_type_bytes(X, Path, _TrUserData) -> mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function, 'v_map<string,string>'/3}).
-dialyzer({nowarn_function, 'v_map<string,string>'/3}).
'v_map<string,string>'(KVs, Path, TrUserData) when is_list(KVs) ->
    [
        case X of
            {Key, Value} ->
                v_type_string(Key, [key | Path], TrUserData),
                v_type_string(Value, [value | Path], TrUserData);
            _ ->
                mk_type_error(invalid_key_value_tuple, X, Path)
        end
        || X <- KVs
    ],
    ok;
'v_map<string,string>'(X, Path, _TrUserData) ->
    mk_type_error(invalid_list_of_key_value_tuples, X, Path).

-compile({nowarn_unused_function, mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).

-compile({nowarn_unused_function, prettify_path/1}).
-dialyzer({nowarn_function, prettify_path/1}).
prettify_path([]) ->
    top_level;
prettify_path(PathR) ->
    lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR)))).

-compile({nowarn_unused_function, id/2}).
-compile({inline, id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function, v_ok/3}).
-compile({inline, v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function, m_overwrite/3}).
-compile({inline, m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function, cons/3}).
-compile({inline, cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function, lists_reverse/2}).
-compile({inline, lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function, 'erlang_++'/3}).
-compile({inline, 'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.
-compile({inline, 'tr_encode_gw.GatewayStats.meta_data[x]'/2}).
'tr_encode_gw.GatewayStats.meta_data[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_r(X, 'map<string,string>').

-compile({inline, 'tr_decode_init_default_gw.GatewayCommandExecRequest.environment'/2}).
'tr_decode_init_default_gw.GatewayCommandExecRequest.environment'(_, _) -> mt_empty_map_r().

-compile({inline, 'tr_merge_gw.GatewayCommandExecRequest.environment'/3}).
'tr_merge_gw.GatewayCommandExecRequest.environment'(X1, X2, _) -> mt_merge_maptuples_r(X1, X2).

-compile({inline, 'tr_decode_repeated_finalize_gw.GatewayCommandExecRequest.environment'/2}).
'tr_decode_repeated_finalize_gw.GatewayCommandExecRequest.environment'(L, _) ->
    mt_finalize_items_r(L).

-compile({inline, 'tr_decode_repeated_add_elem_gw.GatewayCommandExecRequest.environment'/3}).
'tr_decode_repeated_add_elem_gw.GatewayCommandExecRequest.environment'(Elem, L, _) ->
    mt_add_item_r(Elem, L).

-compile({inline, 'tr_decode_init_default_gw.GatewayStats.meta_data'/2}).
'tr_decode_init_default_gw.GatewayStats.meta_data'(_, _) -> mt_empty_map_r().

-compile({inline, 'tr_merge_gw.GatewayStats.meta_data'/3}).
'tr_merge_gw.GatewayStats.meta_data'(X1, X2, _) -> mt_merge_maptuples_r(X1, X2).

-compile({inline, 'tr_decode_repeated_finalize_gw.GatewayStats.meta_data'/2}).
'tr_decode_repeated_finalize_gw.GatewayStats.meta_data'(L, _) -> mt_finalize_items_r(L).

-compile({inline, 'tr_decode_repeated_add_elem_gw.GatewayStats.meta_data'/3}).
'tr_decode_repeated_add_elem_gw.GatewayStats.meta_data'(Elem, L, _) -> mt_add_item_r(Elem, L).

-compile({inline, 'tr_encode_gw.GatewayCommandExecRequest.environment[x]'/2}).
'tr_encode_gw.GatewayCommandExecRequest.environment[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_r(X, 'map<string,string>').

-compile({inline, mt_maptuple_to_pseudomsg_r/2}).
mt_maptuple_to_pseudomsg_r({K, V}, RName) -> {RName, K, V}.

-compile({inline, mt_empty_map_r/0}).
mt_empty_map_r() -> [].

-compile({inline, mt_add_item_r/2}).
mt_add_item_r({_RName, K, V}, Acc) -> [{K, V} | Acc].

-compile({inline, mt_finalize_items_r/1}).
mt_finalize_items_r(Acc) -> mt_finalize_items_r_aux(lists:reverse(Acc), dict:new()).

mt_finalize_items_r_aux([{K, V} | Tl], D) -> mt_finalize_items_r_aux(Tl, dict:store(K, V, D));
mt_finalize_items_r_aux([], D) -> dict:to_list(D).

-compile({inline, mt_merge_maptuples_r/2}).
mt_merge_maptuples_r(L1, L2) ->
    dict:to_list(dict:merge(fun(_Key, _V1, V2) -> V2 end, dict:from_list(L1), dict:from_list(L2))).

get_msg_defs() ->
    [
        {{enum, 'gw.DownlinkTiming'}, [{'IMMEDIATELY', 0}, {'DELAY', 1}, {'GPS_EPOCH', 2}]},
        {{enum, 'gw.FineTimestampType'}, [{'NONE', 0}, {'ENCRYPTED', 1}, {'PLAIN', 2}]},
        {{enum, 'gw.CRCStatus'}, [{'NO_CRC', 0}, {'BAD_CRC', 1}, {'CRC_OK', 2}]},
        {{enum, 'gw.TxAckStatus'}, [
            {'IGNORED', 0},
            {'OK', 1},
            {'TOO_LATE', 2},
            {'TOO_EARLY', 3},
            {'COLLISION_PACKET', 4},
            {'COLLISION_BEACON', 5},
            {'TX_FREQ', 6},
            {'TX_POWER', 7},
            {'GPS_UNLOCKED', 8},
            {'QUEUE_FULL', 9},
            {'INTERNAL_ERROR', 10}
        ]},
        {{enum, 'gw.ConnState.State'}, [{'OFFLINE', 0}, {'ONLINE', 1}]},
        {{enum, 'common.Modulation'}, [{'LORA', 0}, {'FSK', 1}]},
        {{enum, 'common.Region'}, [
            {'EU868', 0},
            {'US915', 2},
            {'CN779', 3},
            {'EU433', 4},
            {'AU915', 5},
            {'CN470', 6},
            {'AS923', 7},
            {'KR920', 8},
            {'IN865', 9},
            {'RU864', 10}
        ]},
        {{enum, 'common.MType'}, [
            {'JoinRequest', 0},
            {'JoinAccept', 1},
            {'UnconfirmedDataUp', 2},
            {'UnconfirmedDataDown', 3},
            {'ConfirmedDataUp', 4},
            {'ConfirmedDataDown', 5},
            {'RejoinRequest', 6},
            {'Proprietary', 7}
        ]},
        {{enum, 'common.LocationSource'}, [
            {'UNKNOWN', 0},
            {'GPS', 1},
            {'CONFIG', 2},
            {'GEO_RESOLVER_TDOA', 3},
            {'GEO_RESOLVER_RSSI', 4},
            {'GEO_RESOLVER_GNSS', 5},
            {'GEO_RESOLVER_WIFI', 6}
        ]},
        {{msg, 'geo.ResolveResult'}, [
            #field{
                name = location,
                fnum = 1,
                rnum = 2,
                type = {msg, 'common.Location'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'geo.FrameRXInfo'}, [
            #field{
                name = rx_info,
                fnum = 1,
                rnum = 2,
                type = {msg, 'gw.UplinkRXInfo'},
                occurrence = repeated,
                opts = []
            }
        ]},
        {{msg, 'geo.ResolveTDOARequest'}, [
            #field{
                name = dev_eui,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = [{json_name, "devEUI"}]
            },
            #field{
                name = frame_rx_info,
                fnum = 2,
                rnum = 3,
                type = {msg, 'geo.FrameRXInfo'},
                occurrence = optional,
                opts = [{json_name, "frameRXInfo"}]
            },
            #field{
                name = device_reference_altitude,
                fnum = 3,
                rnum = 4,
                type = double,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'geo.ResolveMultiFrameTDOARequest'}, [
            #field{
                name = dev_eui,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = [{json_name, "devEUI"}]
            },
            #field{
                name = frame_rx_info_set,
                fnum = 2,
                rnum = 3,
                type = {msg, 'geo.FrameRXInfo'},
                occurrence = repeated,
                opts = [{json_name, "frameRXInfoSet"}]
            },
            #field{
                name = device_reference_altitude,
                fnum = 3,
                rnum = 4,
                type = double,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'geo.ResolveTDOAResponse'}, [
            #field{
                name = result,
                fnum = 1,
                rnum = 2,
                type = {msg, 'geo.ResolveResult'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'geo.ResolveMultiFrameTDOAResponse'}, [
            #field{
                name = result,
                fnum = 1,
                rnum = 2,
                type = {msg, 'geo.ResolveResult'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'gw.UplinkTXInfo'}, [
            #field{
                name = frequency,
                fnum = 1,
                rnum = 2,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = modulation,
                fnum = 2,
                rnum = 3,
                type = {enum, 'common.Modulation'},
                occurrence = optional,
                opts = []
            },
            #gpb_oneof{
                name = modulation_info,
                rnum = 4,
                fields = [
                    #field{
                        name = lora_modulation_info,
                        fnum = 3,
                        rnum = 4,
                        type = {msg, 'gw.LoRaModulationInfo'},
                        occurrence = optional,
                        opts = [{json_name, "loRaModulationInfo"}]
                    },
                    #field{
                        name = fsk_modulation_info,
                        fnum = 4,
                        rnum = 4,
                        type = {msg, 'gw.FSKModulationInfo'},
                        occurrence = optional,
                        opts = []
                    }
                ],
                opts = []
            }
        ]},
        {{msg, 'gw.LoRaModulationInfo'}, [
            #field{
                name = bandwidth,
                fnum = 1,
                rnum = 2,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = spreading_factor,
                fnum = 2,
                rnum = 3,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = code_rate,
                fnum = 3,
                rnum = 4,
                type = string,
                occurrence = optional,
                opts = []
            },
            #field{
                name = polarization_inversion,
                fnum = 4,
                rnum = 5,
                type = bool,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'gw.FSKModulationInfo'}, [
            #field{
                name = frequency_deviation,
                fnum = 1,
                rnum = 2,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = datarate,
                fnum = 2,
                rnum = 3,
                type = uint32,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'gw.EncryptedFineTimestamp'}, [
            #field{
                name = aes_key_index,
                fnum = 1,
                rnum = 2,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = encrypted_ns,
                fnum = 2,
                rnum = 3,
                type = bytes,
                occurrence = optional,
                opts = [{json_name, "encryptedNS"}]
            },
            #field{
                name = fpga_id,
                fnum = 3,
                rnum = 4,
                type = bytes,
                occurrence = optional,
                opts = [{json_name, "fpgaID"}]
            }
        ]},
        {{msg, 'gw.PlainFineTimestamp'}, [
            #field{
                name = time,
                fnum = 1,
                rnum = 2,
                type = {msg, 'google.protobuf.Timestamp'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'gw.GatewayStats'}, [
            #field{
                name = gateway_id,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = [{json_name, "gatewayID"}]
            },
            #field{name = ip, fnum = 9, rnum = 3, type = string, occurrence = optional, opts = []},
            #field{
                name = time,
                fnum = 2,
                rnum = 4,
                type = {msg, 'google.protobuf.Timestamp'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = location,
                fnum = 3,
                rnum = 5,
                type = {msg, 'common.Location'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = config_version,
                fnum = 4,
                rnum = 6,
                type = string,
                occurrence = optional,
                opts = []
            },
            #field{
                name = rx_packets_received,
                fnum = 5,
                rnum = 7,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = rx_packets_received_ok,
                fnum = 6,
                rnum = 8,
                type = uint32,
                occurrence = optional,
                opts = [{json_name, "rxPacketsReceivedOK"}]
            },
            #field{
                name = tx_packets_received,
                fnum = 7,
                rnum = 9,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = tx_packets_emitted,
                fnum = 8,
                rnum = 10,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = meta_data,
                fnum = 10,
                rnum = 11,
                type = {map, string, string},
                occurrence = repeated,
                opts = []
            },
            #field{
                name = stats_id,
                fnum = 11,
                rnum = 12,
                type = bytes,
                occurrence = optional,
                opts = [{json_name, "statsID"}]
            }
        ]},
        {{msg, 'gw.UplinkRXInfo'}, [
            #field{
                name = gateway_id,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = [{json_name, "gatewayID"}]
            },
            #field{
                name = time,
                fnum = 2,
                rnum = 3,
                type = {msg, 'google.protobuf.Timestamp'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = time_since_gps_epoch,
                fnum = 3,
                rnum = 4,
                type = {msg, 'google.protobuf.Duration'},
                occurrence = optional,
                opts = [{json_name, "timeSinceGPSEpoch"}]
            },
            #field{name = rssi, fnum = 5, rnum = 5, type = int32, occurrence = optional, opts = []},
            #field{
                name = lora_snr,
                fnum = 6,
                rnum = 6,
                type = double,
                occurrence = optional,
                opts = [{json_name, "loRaSNR"}]
            },
            #field{
                name = channel,
                fnum = 7,
                rnum = 7,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = rf_chain,
                fnum = 8,
                rnum = 8,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = board,
                fnum = 9,
                rnum = 9,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = antenna,
                fnum = 10,
                rnum = 10,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = location,
                fnum = 11,
                rnum = 11,
                type = {msg, 'common.Location'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = fine_timestamp_type,
                fnum = 12,
                rnum = 12,
                type = {enum, 'gw.FineTimestampType'},
                occurrence = optional,
                opts = []
            },
            #gpb_oneof{
                name = fine_timestamp,
                rnum = 13,
                fields = [
                    #field{
                        name = encrypted_fine_timestamp,
                        fnum = 13,
                        rnum = 13,
                        type = {msg, 'gw.EncryptedFineTimestamp'},
                        occurrence = optional,
                        opts = []
                    },
                    #field{
                        name = plain_fine_timestamp,
                        fnum = 14,
                        rnum = 13,
                        type = {msg, 'gw.PlainFineTimestamp'},
                        occurrence = optional,
                        opts = []
                    }
                ],
                opts = []
            },
            #field{
                name = context,
                fnum = 15,
                rnum = 14,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = uplink_id,
                fnum = 16,
                rnum = 15,
                type = bytes,
                occurrence = optional,
                opts = [{json_name, "uplinkID"}]
            },
            #field{
                name = crc_status,
                fnum = 17,
                rnum = 16,
                type = {enum, 'gw.CRCStatus'},
                occurrence = optional,
                opts = [{json_name, "crcStatus"}]
            }
        ]},
        {{msg, 'gw.DownlinkTXInfo'}, [
            #field{
                name = gateway_id,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = [{json_name, "gatewayID"}]
            },
            #field{
                name = frequency,
                fnum = 5,
                rnum = 3,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = power,
                fnum = 6,
                rnum = 4,
                type = int32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = modulation,
                fnum = 7,
                rnum = 5,
                type = {enum, 'common.Modulation'},
                occurrence = optional,
                opts = []
            },
            #gpb_oneof{
                name = modulation_info,
                rnum = 6,
                fields = [
                    #field{
                        name = lora_modulation_info,
                        fnum = 8,
                        rnum = 6,
                        type = {msg, 'gw.LoRaModulationInfo'},
                        occurrence = optional,
                        opts = [{json_name, "loRaModulationInfo"}]
                    },
                    #field{
                        name = fsk_modulation_info,
                        fnum = 9,
                        rnum = 6,
                        type = {msg, 'gw.FSKModulationInfo'},
                        occurrence = optional,
                        opts = []
                    }
                ],
                opts = []
            },
            #field{
                name = board,
                fnum = 10,
                rnum = 7,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = antenna,
                fnum = 11,
                rnum = 8,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = timing,
                fnum = 12,
                rnum = 9,
                type = {enum, 'gw.DownlinkTiming'},
                occurrence = optional,
                opts = []
            },
            #gpb_oneof{
                name = timing_info,
                rnum = 10,
                fields = [
                    #field{
                        name = immediately_timing_info,
                        fnum = 13,
                        rnum = 10,
                        type = {msg, 'gw.ImmediatelyTimingInfo'},
                        occurrence = optional,
                        opts = []
                    },
                    #field{
                        name = delay_timing_info,
                        fnum = 14,
                        rnum = 10,
                        type = {msg, 'gw.DelayTimingInfo'},
                        occurrence = optional,
                        opts = []
                    },
                    #field{
                        name = gps_epoch_timing_info,
                        fnum = 15,
                        rnum = 10,
                        type = {msg, 'gw.GPSEpochTimingInfo'},
                        occurrence = optional,
                        opts = []
                    }
                ],
                opts = []
            },
            #field{
                name = context,
                fnum = 16,
                rnum = 11,
                type = bytes,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'gw.ImmediatelyTimingInfo'}, []},
        {{msg, 'gw.DelayTimingInfo'}, [
            #field{
                name = delay,
                fnum = 1,
                rnum = 2,
                type = {msg, 'google.protobuf.Duration'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'gw.GPSEpochTimingInfo'}, [
            #field{
                name = time_since_gps_epoch,
                fnum = 1,
                rnum = 2,
                type = {msg, 'google.protobuf.Duration'},
                occurrence = optional,
                opts = [{json_name, "timeSinceGPSEpoch"}]
            }
        ]},
        {{msg, 'gw.UplinkFrame'}, [
            #field{
                name = phy_payload,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = tx_info,
                fnum = 2,
                rnum = 3,
                type = {msg, 'gw.UplinkTXInfo'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = rx_info,
                fnum = 3,
                rnum = 4,
                type = {msg, 'gw.UplinkRXInfo'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'gw.UplinkFrameSet'}, [
            #field{
                name = phy_payload,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = tx_info,
                fnum = 2,
                rnum = 3,
                type = {msg, 'gw.UplinkTXInfo'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = rx_info,
                fnum = 3,
                rnum = 4,
                type = {msg, 'gw.UplinkRXInfo'},
                occurrence = repeated,
                opts = []
            }
        ]},
        {{msg, 'gw.DownlinkFrame'}, [
            #field{
                name = phy_payload,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = tx_info,
                fnum = 2,
                rnum = 3,
                type = {msg, 'gw.DownlinkTXInfo'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = token,
                fnum = 3,
                rnum = 4,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = downlink_id,
                fnum = 4,
                rnum = 5,
                type = bytes,
                occurrence = optional,
                opts = [{json_name, "downlinkID"}]
            },
            #field{
                name = items,
                fnum = 5,
                rnum = 6,
                type = {msg, 'gw.DownlinkFrameItem'},
                occurrence = repeated,
                opts = []
            },
            #field{
                name = gateway_id,
                fnum = 6,
                rnum = 7,
                type = bytes,
                occurrence = optional,
                opts = [{json_name, "gatewayID"}]
            }
        ]},
        {{msg, 'gw.DownlinkFrameItem'}, [
            #field{
                name = phy_payload,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = tx_info,
                fnum = 2,
                rnum = 3,
                type = {msg, 'gw.DownlinkTXInfo'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'gw.DownlinkTXAck'}, [
            #field{
                name = gateway_id,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = [{json_name, "gatewayID"}]
            },
            #field{
                name = token,
                fnum = 2,
                rnum = 3,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = error,
                fnum = 3,
                rnum = 4,
                type = string,
                occurrence = optional,
                opts = []
            },
            #field{
                name = downlink_id,
                fnum = 4,
                rnum = 5,
                type = bytes,
                occurrence = optional,
                opts = [{json_name, "downlinkID"}]
            },
            #field{
                name = items,
                fnum = 5,
                rnum = 6,
                type = {msg, 'gw.DownlinkTXAckItem'},
                occurrence = repeated,
                opts = []
            }
        ]},
        {{msg, 'gw.DownlinkTXAckItem'}, [
            #field{
                name = status,
                fnum = 1,
                rnum = 2,
                type = {enum, 'gw.TxAckStatus'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'gw.GatewayConfiguration'}, [
            #field{
                name = gateway_id,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = [{json_name, "gatewayID"}]
            },
            #field{
                name = version,
                fnum = 2,
                rnum = 3,
                type = string,
                occurrence = optional,
                opts = []
            },
            #field{
                name = channels,
                fnum = 3,
                rnum = 4,
                type = {msg, 'gw.ChannelConfiguration'},
                occurrence = repeated,
                opts = []
            },
            #field{
                name = stats_interval,
                fnum = 4,
                rnum = 5,
                type = {msg, 'google.protobuf.Duration'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'gw.ChannelConfiguration'}, [
            #field{
                name = frequency,
                fnum = 1,
                rnum = 2,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = modulation,
                fnum = 2,
                rnum = 3,
                type = {enum, 'common.Modulation'},
                occurrence = optional,
                opts = []
            },
            #gpb_oneof{
                name = modulation_config,
                rnum = 4,
                fields = [
                    #field{
                        name = lora_modulation_config,
                        fnum = 3,
                        rnum = 4,
                        type = {msg, 'gw.LoRaModulationConfig'},
                        occurrence = optional,
                        opts = [{json_name, "loRaModulationConfig"}]
                    },
                    #field{
                        name = fsk_modulation_config,
                        fnum = 4,
                        rnum = 4,
                        type = {msg, 'gw.FSKModulationConfig'},
                        occurrence = optional,
                        opts = []
                    }
                ],
                opts = []
            },
            #field{
                name = board,
                fnum = 5,
                rnum = 5,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = demodulator,
                fnum = 6,
                rnum = 6,
                type = uint32,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'gw.LoRaModulationConfig'}, [
            #field{
                name = bandwidth,
                fnum = 1,
                rnum = 2,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = spreading_factors,
                fnum = 2,
                rnum = 3,
                type = uint32,
                occurrence = repeated,
                opts = [packed]
            }
        ]},
        {{msg, 'gw.FSKModulationConfig'}, [
            #field{
                name = bandwidth,
                fnum = 1,
                rnum = 2,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = bitrate,
                fnum = 2,
                rnum = 3,
                type = uint32,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'gw.GatewayCommandExecRequest'}, [
            #field{
                name = gateway_id,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = [{json_name, "gatewayID"}]
            },
            #field{
                name = command,
                fnum = 2,
                rnum = 3,
                type = string,
                occurrence = optional,
                opts = []
            },
            #field{
                name = 'ExecId',
                fnum = 3,
                rnum = 4,
                type = bytes,
                occurrence = optional,
                opts = [{json_name, "execID"}]
            },
            #field{
                name = stdin,
                fnum = 4,
                rnum = 5,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = environment,
                fnum = 5,
                rnum = 6,
                type = {map, string, string},
                occurrence = repeated,
                opts = []
            }
        ]},
        {{msg, 'gw.GatewayCommandExecResponse'}, [
            #field{
                name = gateway_id,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = [{json_name, "gatewayID"}]
            },
            #field{
                name = exec_id,
                fnum = 2,
                rnum = 3,
                type = bytes,
                occurrence = optional,
                opts = [{json_name, "execID"}]
            },
            #field{
                name = stdout,
                fnum = 3,
                rnum = 4,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = stderr,
                fnum = 4,
                rnum = 5,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = error,
                fnum = 5,
                rnum = 6,
                type = string,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'gw.RawPacketForwarderEvent'}, [
            #field{
                name = gateway_id,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = [{json_name, "gatewayID"}]
            },
            #field{
                name = raw_id,
                fnum = 2,
                rnum = 3,
                type = bytes,
                occurrence = optional,
                opts = [{json_name, "rawID"}]
            },
            #field{
                name = payload,
                fnum = 3,
                rnum = 4,
                type = bytes,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'gw.RawPacketForwarderCommand'}, [
            #field{
                name = gateway_id,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = [{json_name, "gatewayID"}]
            },
            #field{
                name = raw_id,
                fnum = 2,
                rnum = 3,
                type = bytes,
                occurrence = optional,
                opts = [{json_name, "rawID"}]
            },
            #field{
                name = payload,
                fnum = 3,
                rnum = 4,
                type = bytes,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'gw.ConnState'}, [
            #field{
                name = gateway_id,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = [{json_name, "gatewayID"}]
            },
            #field{
                name = state,
                fnum = 2,
                rnum = 3,
                type = {enum, 'gw.ConnState.State'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'common.KeyEnvelope'}, [
            #field{
                name = kek_label,
                fnum = 1,
                rnum = 2,
                type = string,
                occurrence = optional,
                opts = []
            },
            #field{
                name = aes_key,
                fnum = 2,
                rnum = 3,
                type = bytes,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'common.Location'}, [
            #field{
                name = latitude,
                fnum = 1,
                rnum = 2,
                type = double,
                occurrence = optional,
                opts = []
            },
            #field{
                name = longitude,
                fnum = 2,
                rnum = 3,
                type = double,
                occurrence = optional,
                opts = []
            },
            #field{
                name = altitude,
                fnum = 3,
                rnum = 4,
                type = double,
                occurrence = optional,
                opts = []
            },
            #field{
                name = source,
                fnum = 4,
                rnum = 5,
                type = {enum, 'common.LocationSource'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = accuracy,
                fnum = 5,
                rnum = 6,
                type = uint32,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'google.protobuf.Timestamp'}, [
            #field{
                name = seconds,
                fnum = 1,
                rnum = 2,
                type = int64,
                occurrence = optional,
                opts = []
            },
            #field{name = nanos, fnum = 2, rnum = 3, type = int32, occurrence = optional, opts = []}
        ]},
        {{msg, 'google.protobuf.Duration'}, [
            #field{
                name = seconds,
                fnum = 1,
                rnum = 2,
                type = int64,
                occurrence = optional,
                opts = []
            },
            #field{name = nanos, fnum = 2, rnum = 3, type = int32, occurrence = optional, opts = []}
        ]}
    ].

get_msg_names() ->
    [
        'geo.ResolveResult',
        'geo.FrameRXInfo',
        'geo.ResolveTDOARequest',
        'geo.ResolveMultiFrameTDOARequest',
        'geo.ResolveTDOAResponse',
        'geo.ResolveMultiFrameTDOAResponse',
        'gw.UplinkTXInfo',
        'gw.LoRaModulationInfo',
        'gw.FSKModulationInfo',
        'gw.EncryptedFineTimestamp',
        'gw.PlainFineTimestamp',
        'gw.GatewayStats',
        'gw.UplinkRXInfo',
        'gw.DownlinkTXInfo',
        'gw.ImmediatelyTimingInfo',
        'gw.DelayTimingInfo',
        'gw.GPSEpochTimingInfo',
        'gw.UplinkFrame',
        'gw.UplinkFrameSet',
        'gw.DownlinkFrame',
        'gw.DownlinkFrameItem',
        'gw.DownlinkTXAck',
        'gw.DownlinkTXAckItem',
        'gw.GatewayConfiguration',
        'gw.ChannelConfiguration',
        'gw.LoRaModulationConfig',
        'gw.FSKModulationConfig',
        'gw.GatewayCommandExecRequest',
        'gw.GatewayCommandExecResponse',
        'gw.RawPacketForwarderEvent',
        'gw.RawPacketForwarderCommand',
        'gw.ConnState',
        'common.KeyEnvelope',
        'common.Location',
        'google.protobuf.Timestamp',
        'google.protobuf.Duration'
    ].

get_group_names() -> [].

get_msg_or_group_names() ->
    [
        'geo.ResolveResult',
        'geo.FrameRXInfo',
        'geo.ResolveTDOARequest',
        'geo.ResolveMultiFrameTDOARequest',
        'geo.ResolveTDOAResponse',
        'geo.ResolveMultiFrameTDOAResponse',
        'gw.UplinkTXInfo',
        'gw.LoRaModulationInfo',
        'gw.FSKModulationInfo',
        'gw.EncryptedFineTimestamp',
        'gw.PlainFineTimestamp',
        'gw.GatewayStats',
        'gw.UplinkRXInfo',
        'gw.DownlinkTXInfo',
        'gw.ImmediatelyTimingInfo',
        'gw.DelayTimingInfo',
        'gw.GPSEpochTimingInfo',
        'gw.UplinkFrame',
        'gw.UplinkFrameSet',
        'gw.DownlinkFrame',
        'gw.DownlinkFrameItem',
        'gw.DownlinkTXAck',
        'gw.DownlinkTXAckItem',
        'gw.GatewayConfiguration',
        'gw.ChannelConfiguration',
        'gw.LoRaModulationConfig',
        'gw.FSKModulationConfig',
        'gw.GatewayCommandExecRequest',
        'gw.GatewayCommandExecResponse',
        'gw.RawPacketForwarderEvent',
        'gw.RawPacketForwarderCommand',
        'gw.ConnState',
        'common.KeyEnvelope',
        'common.Location',
        'google.protobuf.Timestamp',
        'google.protobuf.Duration'
    ].

get_enum_names() ->
    [
        'gw.DownlinkTiming',
        'gw.FineTimestampType',
        'gw.CRCStatus',
        'gw.TxAckStatus',
        'gw.ConnState.State',
        'common.Modulation',
        'common.Region',
        'common.MType',
        'common.LocationSource'
    ].

fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.

fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
        Es when is_list(Es) -> Es;
        error -> erlang:error({no_such_enum, EnumName})
    end.

find_msg_def('geo.ResolveResult') ->
    [
        #field{
            name = location,
            fnum = 1,
            rnum = 2,
            type = {msg, 'common.Location'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('geo.FrameRXInfo') ->
    [
        #field{
            name = rx_info,
            fnum = 1,
            rnum = 2,
            type = {msg, 'gw.UplinkRXInfo'},
            occurrence = repeated,
            opts = []
        }
    ];
find_msg_def('geo.ResolveTDOARequest') ->
    [
        #field{
            name = dev_eui,
            fnum = 1,
            rnum = 2,
            type = bytes,
            occurrence = optional,
            opts = [{json_name, "devEUI"}]
        },
        #field{
            name = frame_rx_info,
            fnum = 2,
            rnum = 3,
            type = {msg, 'geo.FrameRXInfo'},
            occurrence = optional,
            opts = [{json_name, "frameRXInfo"}]
        },
        #field{
            name = device_reference_altitude,
            fnum = 3,
            rnum = 4,
            type = double,
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('geo.ResolveMultiFrameTDOARequest') ->
    [
        #field{
            name = dev_eui,
            fnum = 1,
            rnum = 2,
            type = bytes,
            occurrence = optional,
            opts = [{json_name, "devEUI"}]
        },
        #field{
            name = frame_rx_info_set,
            fnum = 2,
            rnum = 3,
            type = {msg, 'geo.FrameRXInfo'},
            occurrence = repeated,
            opts = [{json_name, "frameRXInfoSet"}]
        },
        #field{
            name = device_reference_altitude,
            fnum = 3,
            rnum = 4,
            type = double,
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('geo.ResolveTDOAResponse') ->
    [
        #field{
            name = result,
            fnum = 1,
            rnum = 2,
            type = {msg, 'geo.ResolveResult'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('geo.ResolveMultiFrameTDOAResponse') ->
    [
        #field{
            name = result,
            fnum = 1,
            rnum = 2,
            type = {msg, 'geo.ResolveResult'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('gw.UplinkTXInfo') ->
    [
        #field{
            name = frequency,
            fnum = 1,
            rnum = 2,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = modulation,
            fnum = 2,
            rnum = 3,
            type = {enum, 'common.Modulation'},
            occurrence = optional,
            opts = []
        },
        #gpb_oneof{
            name = modulation_info,
            rnum = 4,
            fields = [
                #field{
                    name = lora_modulation_info,
                    fnum = 3,
                    rnum = 4,
                    type = {msg, 'gw.LoRaModulationInfo'},
                    occurrence = optional,
                    opts = [{json_name, "loRaModulationInfo"}]
                },
                #field{
                    name = fsk_modulation_info,
                    fnum = 4,
                    rnum = 4,
                    type = {msg, 'gw.FSKModulationInfo'},
                    occurrence = optional,
                    opts = []
                }
            ],
            opts = []
        }
    ];
find_msg_def('gw.LoRaModulationInfo') ->
    [
        #field{
            name = bandwidth,
            fnum = 1,
            rnum = 2,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = spreading_factor,
            fnum = 2,
            rnum = 3,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = code_rate,
            fnum = 3,
            rnum = 4,
            type = string,
            occurrence = optional,
            opts = []
        },
        #field{
            name = polarization_inversion,
            fnum = 4,
            rnum = 5,
            type = bool,
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('gw.FSKModulationInfo') ->
    [
        #field{
            name = frequency_deviation,
            fnum = 1,
            rnum = 2,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{name = datarate, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []}
    ];
find_msg_def('gw.EncryptedFineTimestamp') ->
    [
        #field{
            name = aes_key_index,
            fnum = 1,
            rnum = 2,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = encrypted_ns,
            fnum = 2,
            rnum = 3,
            type = bytes,
            occurrence = optional,
            opts = [{json_name, "encryptedNS"}]
        },
        #field{
            name = fpga_id,
            fnum = 3,
            rnum = 4,
            type = bytes,
            occurrence = optional,
            opts = [{json_name, "fpgaID"}]
        }
    ];
find_msg_def('gw.PlainFineTimestamp') ->
    [
        #field{
            name = time,
            fnum = 1,
            rnum = 2,
            type = {msg, 'google.protobuf.Timestamp'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('gw.GatewayStats') ->
    [
        #field{
            name = gateway_id,
            fnum = 1,
            rnum = 2,
            type = bytes,
            occurrence = optional,
            opts = [{json_name, "gatewayID"}]
        },
        #field{name = ip, fnum = 9, rnum = 3, type = string, occurrence = optional, opts = []},
        #field{
            name = time,
            fnum = 2,
            rnum = 4,
            type = {msg, 'google.protobuf.Timestamp'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = location,
            fnum = 3,
            rnum = 5,
            type = {msg, 'common.Location'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = config_version,
            fnum = 4,
            rnum = 6,
            type = string,
            occurrence = optional,
            opts = []
        },
        #field{
            name = rx_packets_received,
            fnum = 5,
            rnum = 7,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = rx_packets_received_ok,
            fnum = 6,
            rnum = 8,
            type = uint32,
            occurrence = optional,
            opts = [{json_name, "rxPacketsReceivedOK"}]
        },
        #field{
            name = tx_packets_received,
            fnum = 7,
            rnum = 9,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = tx_packets_emitted,
            fnum = 8,
            rnum = 10,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = meta_data,
            fnum = 10,
            rnum = 11,
            type = {map, string, string},
            occurrence = repeated,
            opts = []
        },
        #field{
            name = stats_id,
            fnum = 11,
            rnum = 12,
            type = bytes,
            occurrence = optional,
            opts = [{json_name, "statsID"}]
        }
    ];
find_msg_def('gw.UplinkRXInfo') ->
    [
        #field{
            name = gateway_id,
            fnum = 1,
            rnum = 2,
            type = bytes,
            occurrence = optional,
            opts = [{json_name, "gatewayID"}]
        },
        #field{
            name = time,
            fnum = 2,
            rnum = 3,
            type = {msg, 'google.protobuf.Timestamp'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = time_since_gps_epoch,
            fnum = 3,
            rnum = 4,
            type = {msg, 'google.protobuf.Duration'},
            occurrence = optional,
            opts = [{json_name, "timeSinceGPSEpoch"}]
        },
        #field{name = rssi, fnum = 5, rnum = 5, type = int32, occurrence = optional, opts = []},
        #field{
            name = lora_snr,
            fnum = 6,
            rnum = 6,
            type = double,
            occurrence = optional,
            opts = [{json_name, "loRaSNR"}]
        },
        #field{name = channel, fnum = 7, rnum = 7, type = uint32, occurrence = optional, opts = []},
        #field{
            name = rf_chain,
            fnum = 8,
            rnum = 8,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{name = board, fnum = 9, rnum = 9, type = uint32, occurrence = optional, opts = []},
        #field{
            name = antenna,
            fnum = 10,
            rnum = 10,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = location,
            fnum = 11,
            rnum = 11,
            type = {msg, 'common.Location'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = fine_timestamp_type,
            fnum = 12,
            rnum = 12,
            type = {enum, 'gw.FineTimestampType'},
            occurrence = optional,
            opts = []
        },
        #gpb_oneof{
            name = fine_timestamp,
            rnum = 13,
            fields = [
                #field{
                    name = encrypted_fine_timestamp,
                    fnum = 13,
                    rnum = 13,
                    type = {msg, 'gw.EncryptedFineTimestamp'},
                    occurrence = optional,
                    opts = []
                },
                #field{
                    name = plain_fine_timestamp,
                    fnum = 14,
                    rnum = 13,
                    type = {msg, 'gw.PlainFineTimestamp'},
                    occurrence = optional,
                    opts = []
                }
            ],
            opts = []
        },
        #field{
            name = context,
            fnum = 15,
            rnum = 14,
            type = bytes,
            occurrence = optional,
            opts = []
        },
        #field{
            name = uplink_id,
            fnum = 16,
            rnum = 15,
            type = bytes,
            occurrence = optional,
            opts = [{json_name, "uplinkID"}]
        },
        #field{
            name = crc_status,
            fnum = 17,
            rnum = 16,
            type = {enum, 'gw.CRCStatus'},
            occurrence = optional,
            opts = [{json_name, "crcStatus"}]
        }
    ];
find_msg_def('gw.DownlinkTXInfo') ->
    [
        #field{
            name = gateway_id,
            fnum = 1,
            rnum = 2,
            type = bytes,
            occurrence = optional,
            opts = [{json_name, "gatewayID"}]
        },
        #field{
            name = frequency,
            fnum = 5,
            rnum = 3,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{name = power, fnum = 6, rnum = 4, type = int32, occurrence = optional, opts = []},
        #field{
            name = modulation,
            fnum = 7,
            rnum = 5,
            type = {enum, 'common.Modulation'},
            occurrence = optional,
            opts = []
        },
        #gpb_oneof{
            name = modulation_info,
            rnum = 6,
            fields = [
                #field{
                    name = lora_modulation_info,
                    fnum = 8,
                    rnum = 6,
                    type = {msg, 'gw.LoRaModulationInfo'},
                    occurrence = optional,
                    opts = [{json_name, "loRaModulationInfo"}]
                },
                #field{
                    name = fsk_modulation_info,
                    fnum = 9,
                    rnum = 6,
                    type = {msg, 'gw.FSKModulationInfo'},
                    occurrence = optional,
                    opts = []
                }
            ],
            opts = []
        },
        #field{name = board, fnum = 10, rnum = 7, type = uint32, occurrence = optional, opts = []},
        #field{
            name = antenna,
            fnum = 11,
            rnum = 8,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = timing,
            fnum = 12,
            rnum = 9,
            type = {enum, 'gw.DownlinkTiming'},
            occurrence = optional,
            opts = []
        },
        #gpb_oneof{
            name = timing_info,
            rnum = 10,
            fields = [
                #field{
                    name = immediately_timing_info,
                    fnum = 13,
                    rnum = 10,
                    type = {msg, 'gw.ImmediatelyTimingInfo'},
                    occurrence = optional,
                    opts = []
                },
                #field{
                    name = delay_timing_info,
                    fnum = 14,
                    rnum = 10,
                    type = {msg, 'gw.DelayTimingInfo'},
                    occurrence = optional,
                    opts = []
                },
                #field{
                    name = gps_epoch_timing_info,
                    fnum = 15,
                    rnum = 10,
                    type = {msg, 'gw.GPSEpochTimingInfo'},
                    occurrence = optional,
                    opts = []
                }
            ],
            opts = []
        },
        #field{name = context, fnum = 16, rnum = 11, type = bytes, occurrence = optional, opts = []}
    ];
find_msg_def('gw.ImmediatelyTimingInfo') ->
    [];
find_msg_def('gw.DelayTimingInfo') ->
    [
        #field{
            name = delay,
            fnum = 1,
            rnum = 2,
            type = {msg, 'google.protobuf.Duration'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('gw.GPSEpochTimingInfo') ->
    [
        #field{
            name = time_since_gps_epoch,
            fnum = 1,
            rnum = 2,
            type = {msg, 'google.protobuf.Duration'},
            occurrence = optional,
            opts = [{json_name, "timeSinceGPSEpoch"}]
        }
    ];
find_msg_def('gw.UplinkFrame') ->
    [
        #field{
            name = phy_payload,
            fnum = 1,
            rnum = 2,
            type = bytes,
            occurrence = optional,
            opts = []
        },
        #field{
            name = tx_info,
            fnum = 2,
            rnum = 3,
            type = {msg, 'gw.UplinkTXInfo'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = rx_info,
            fnum = 3,
            rnum = 4,
            type = {msg, 'gw.UplinkRXInfo'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('gw.UplinkFrameSet') ->
    [
        #field{
            name = phy_payload,
            fnum = 1,
            rnum = 2,
            type = bytes,
            occurrence = optional,
            opts = []
        },
        #field{
            name = tx_info,
            fnum = 2,
            rnum = 3,
            type = {msg, 'gw.UplinkTXInfo'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = rx_info,
            fnum = 3,
            rnum = 4,
            type = {msg, 'gw.UplinkRXInfo'},
            occurrence = repeated,
            opts = []
        }
    ];
find_msg_def('gw.DownlinkFrame') ->
    [
        #field{
            name = phy_payload,
            fnum = 1,
            rnum = 2,
            type = bytes,
            occurrence = optional,
            opts = []
        },
        #field{
            name = tx_info,
            fnum = 2,
            rnum = 3,
            type = {msg, 'gw.DownlinkTXInfo'},
            occurrence = optional,
            opts = []
        },
        #field{name = token, fnum = 3, rnum = 4, type = uint32, occurrence = optional, opts = []},
        #field{
            name = downlink_id,
            fnum = 4,
            rnum = 5,
            type = bytes,
            occurrence = optional,
            opts = [{json_name, "downlinkID"}]
        },
        #field{
            name = items,
            fnum = 5,
            rnum = 6,
            type = {msg, 'gw.DownlinkFrameItem'},
            occurrence = repeated,
            opts = []
        },
        #field{
            name = gateway_id,
            fnum = 6,
            rnum = 7,
            type = bytes,
            occurrence = optional,
            opts = [{json_name, "gatewayID"}]
        }
    ];
find_msg_def('gw.DownlinkFrameItem') ->
    [
        #field{
            name = phy_payload,
            fnum = 1,
            rnum = 2,
            type = bytes,
            occurrence = optional,
            opts = []
        },
        #field{
            name = tx_info,
            fnum = 2,
            rnum = 3,
            type = {msg, 'gw.DownlinkTXInfo'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('gw.DownlinkTXAck') ->
    [
        #field{
            name = gateway_id,
            fnum = 1,
            rnum = 2,
            type = bytes,
            occurrence = optional,
            opts = [{json_name, "gatewayID"}]
        },
        #field{name = token, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []},
        #field{name = error, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []},
        #field{
            name = downlink_id,
            fnum = 4,
            rnum = 5,
            type = bytes,
            occurrence = optional,
            opts = [{json_name, "downlinkID"}]
        },
        #field{
            name = items,
            fnum = 5,
            rnum = 6,
            type = {msg, 'gw.DownlinkTXAckItem'},
            occurrence = repeated,
            opts = []
        }
    ];
find_msg_def('gw.DownlinkTXAckItem') ->
    [
        #field{
            name = status,
            fnum = 1,
            rnum = 2,
            type = {enum, 'gw.TxAckStatus'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('gw.GatewayConfiguration') ->
    [
        #field{
            name = gateway_id,
            fnum = 1,
            rnum = 2,
            type = bytes,
            occurrence = optional,
            opts = [{json_name, "gatewayID"}]
        },
        #field{name = version, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
        #field{
            name = channels,
            fnum = 3,
            rnum = 4,
            type = {msg, 'gw.ChannelConfiguration'},
            occurrence = repeated,
            opts = []
        },
        #field{
            name = stats_interval,
            fnum = 4,
            rnum = 5,
            type = {msg, 'google.protobuf.Duration'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('gw.ChannelConfiguration') ->
    [
        #field{
            name = frequency,
            fnum = 1,
            rnum = 2,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = modulation,
            fnum = 2,
            rnum = 3,
            type = {enum, 'common.Modulation'},
            occurrence = optional,
            opts = []
        },
        #gpb_oneof{
            name = modulation_config,
            rnum = 4,
            fields = [
                #field{
                    name = lora_modulation_config,
                    fnum = 3,
                    rnum = 4,
                    type = {msg, 'gw.LoRaModulationConfig'},
                    occurrence = optional,
                    opts = [{json_name, "loRaModulationConfig"}]
                },
                #field{
                    name = fsk_modulation_config,
                    fnum = 4,
                    rnum = 4,
                    type = {msg, 'gw.FSKModulationConfig'},
                    occurrence = optional,
                    opts = []
                }
            ],
            opts = []
        },
        #field{name = board, fnum = 5, rnum = 5, type = uint32, occurrence = optional, opts = []},
        #field{
            name = demodulator,
            fnum = 6,
            rnum = 6,
            type = uint32,
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('gw.LoRaModulationConfig') ->
    [
        #field{
            name = bandwidth,
            fnum = 1,
            rnum = 2,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = spreading_factors,
            fnum = 2,
            rnum = 3,
            type = uint32,
            occurrence = repeated,
            opts = [packed]
        }
    ];
find_msg_def('gw.FSKModulationConfig') ->
    [
        #field{
            name = bandwidth,
            fnum = 1,
            rnum = 2,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{name = bitrate, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []}
    ];
find_msg_def('gw.GatewayCommandExecRequest') ->
    [
        #field{
            name = gateway_id,
            fnum = 1,
            rnum = 2,
            type = bytes,
            occurrence = optional,
            opts = [{json_name, "gatewayID"}]
        },
        #field{name = command, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
        #field{
            name = 'ExecId',
            fnum = 3,
            rnum = 4,
            type = bytes,
            occurrence = optional,
            opts = [{json_name, "execID"}]
        },
        #field{name = stdin, fnum = 4, rnum = 5, type = bytes, occurrence = optional, opts = []},
        #field{
            name = environment,
            fnum = 5,
            rnum = 6,
            type = {map, string, string},
            occurrence = repeated,
            opts = []
        }
    ];
find_msg_def('gw.GatewayCommandExecResponse') ->
    [
        #field{
            name = gateway_id,
            fnum = 1,
            rnum = 2,
            type = bytes,
            occurrence = optional,
            opts = [{json_name, "gatewayID"}]
        },
        #field{
            name = exec_id,
            fnum = 2,
            rnum = 3,
            type = bytes,
            occurrence = optional,
            opts = [{json_name, "execID"}]
        },
        #field{name = stdout, fnum = 3, rnum = 4, type = bytes, occurrence = optional, opts = []},
        #field{name = stderr, fnum = 4, rnum = 5, type = bytes, occurrence = optional, opts = []},
        #field{name = error, fnum = 5, rnum = 6, type = string, occurrence = optional, opts = []}
    ];
find_msg_def('gw.RawPacketForwarderEvent') ->
    [
        #field{
            name = gateway_id,
            fnum = 1,
            rnum = 2,
            type = bytes,
            occurrence = optional,
            opts = [{json_name, "gatewayID"}]
        },
        #field{
            name = raw_id,
            fnum = 2,
            rnum = 3,
            type = bytes,
            occurrence = optional,
            opts = [{json_name, "rawID"}]
        },
        #field{name = payload, fnum = 3, rnum = 4, type = bytes, occurrence = optional, opts = []}
    ];
find_msg_def('gw.RawPacketForwarderCommand') ->
    [
        #field{
            name = gateway_id,
            fnum = 1,
            rnum = 2,
            type = bytes,
            occurrence = optional,
            opts = [{json_name, "gatewayID"}]
        },
        #field{
            name = raw_id,
            fnum = 2,
            rnum = 3,
            type = bytes,
            occurrence = optional,
            opts = [{json_name, "rawID"}]
        },
        #field{name = payload, fnum = 3, rnum = 4, type = bytes, occurrence = optional, opts = []}
    ];
find_msg_def('gw.ConnState') ->
    [
        #field{
            name = gateway_id,
            fnum = 1,
            rnum = 2,
            type = bytes,
            occurrence = optional,
            opts = [{json_name, "gatewayID"}]
        },
        #field{
            name = state,
            fnum = 2,
            rnum = 3,
            type = {enum, 'gw.ConnState.State'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('common.KeyEnvelope') ->
    [
        #field{
            name = kek_label,
            fnum = 1,
            rnum = 2,
            type = string,
            occurrence = optional,
            opts = []
        },
        #field{name = aes_key, fnum = 2, rnum = 3, type = bytes, occurrence = optional, opts = []}
    ];
find_msg_def('common.Location') ->
    [
        #field{
            name = latitude,
            fnum = 1,
            rnum = 2,
            type = double,
            occurrence = optional,
            opts = []
        },
        #field{
            name = longitude,
            fnum = 2,
            rnum = 3,
            type = double,
            occurrence = optional,
            opts = []
        },
        #field{
            name = altitude,
            fnum = 3,
            rnum = 4,
            type = double,
            occurrence = optional,
            opts = []
        },
        #field{
            name = source,
            fnum = 4,
            rnum = 5,
            type = {enum, 'common.LocationSource'},
            occurrence = optional,
            opts = []
        },
        #field{name = accuracy, fnum = 5, rnum = 6, type = uint32, occurrence = optional, opts = []}
    ];
find_msg_def('google.protobuf.Timestamp') ->
    [
        #field{name = seconds, fnum = 1, rnum = 2, type = int64, occurrence = optional, opts = []},
        #field{name = nanos, fnum = 2, rnum = 3, type = int32, occurrence = optional, opts = []}
    ];
find_msg_def('google.protobuf.Duration') ->
    [
        #field{name = seconds, fnum = 1, rnum = 2, type = int64, occurrence = optional, opts = []},
        #field{name = nanos, fnum = 2, rnum = 3, type = int32, occurrence = optional, opts = []}
    ];
find_msg_def(_) ->
    error.

find_enum_def('gw.DownlinkTiming') ->
    [{'IMMEDIATELY', 0}, {'DELAY', 1}, {'GPS_EPOCH', 2}];
find_enum_def('gw.FineTimestampType') ->
    [{'NONE', 0}, {'ENCRYPTED', 1}, {'PLAIN', 2}];
find_enum_def('gw.CRCStatus') ->
    [{'NO_CRC', 0}, {'BAD_CRC', 1}, {'CRC_OK', 2}];
find_enum_def('gw.TxAckStatus') ->
    [
        {'IGNORED', 0},
        {'OK', 1},
        {'TOO_LATE', 2},
        {'TOO_EARLY', 3},
        {'COLLISION_PACKET', 4},
        {'COLLISION_BEACON', 5},
        {'TX_FREQ', 6},
        {'TX_POWER', 7},
        {'GPS_UNLOCKED', 8},
        {'QUEUE_FULL', 9},
        {'INTERNAL_ERROR', 10}
    ];
find_enum_def('gw.ConnState.State') ->
    [{'OFFLINE', 0}, {'ONLINE', 1}];
find_enum_def('common.Modulation') ->
    [{'LORA', 0}, {'FSK', 1}];
find_enum_def('common.Region') ->
    [
        {'EU868', 0},
        {'US915', 2},
        {'CN779', 3},
        {'EU433', 4},
        {'AU915', 5},
        {'CN470', 6},
        {'AS923', 7},
        {'KR920', 8},
        {'IN865', 9},
        {'RU864', 10}
    ];
find_enum_def('common.MType') ->
    [
        {'JoinRequest', 0},
        {'JoinAccept', 1},
        {'UnconfirmedDataUp', 2},
        {'UnconfirmedDataDown', 3},
        {'ConfirmedDataUp', 4},
        {'ConfirmedDataDown', 5},
        {'RejoinRequest', 6},
        {'Proprietary', 7}
    ];
find_enum_def('common.LocationSource') ->
    [
        {'UNKNOWN', 0},
        {'GPS', 1},
        {'CONFIG', 2},
        {'GEO_RESOLVER_TDOA', 3},
        {'GEO_RESOLVER_RSSI', 4},
        {'GEO_RESOLVER_GNSS', 5},
        {'GEO_RESOLVER_WIFI', 6}
    ];
find_enum_def(_) ->
    error.

enum_symbol_by_value('gw.DownlinkTiming', Value) ->
    'enum_symbol_by_value_gw.DownlinkTiming'(Value);
enum_symbol_by_value('gw.FineTimestampType', Value) ->
    'enum_symbol_by_value_gw.FineTimestampType'(Value);
enum_symbol_by_value('gw.CRCStatus', Value) ->
    'enum_symbol_by_value_gw.CRCStatus'(Value);
enum_symbol_by_value('gw.TxAckStatus', Value) ->
    'enum_symbol_by_value_gw.TxAckStatus'(Value);
enum_symbol_by_value('gw.ConnState.State', Value) ->
    'enum_symbol_by_value_gw.ConnState.State'(Value);
enum_symbol_by_value('common.Modulation', Value) ->
    'enum_symbol_by_value_common.Modulation'(Value);
enum_symbol_by_value('common.Region', Value) ->
    'enum_symbol_by_value_common.Region'(Value);
enum_symbol_by_value('common.MType', Value) ->
    'enum_symbol_by_value_common.MType'(Value);
enum_symbol_by_value('common.LocationSource', Value) ->
    'enum_symbol_by_value_common.LocationSource'(Value).

enum_value_by_symbol('gw.DownlinkTiming', Sym) ->
    'enum_value_by_symbol_gw.DownlinkTiming'(Sym);
enum_value_by_symbol('gw.FineTimestampType', Sym) ->
    'enum_value_by_symbol_gw.FineTimestampType'(Sym);
enum_value_by_symbol('gw.CRCStatus', Sym) ->
    'enum_value_by_symbol_gw.CRCStatus'(Sym);
enum_value_by_symbol('gw.TxAckStatus', Sym) ->
    'enum_value_by_symbol_gw.TxAckStatus'(Sym);
enum_value_by_symbol('gw.ConnState.State', Sym) ->
    'enum_value_by_symbol_gw.ConnState.State'(Sym);
enum_value_by_symbol('common.Modulation', Sym) ->
    'enum_value_by_symbol_common.Modulation'(Sym);
enum_value_by_symbol('common.Region', Sym) ->
    'enum_value_by_symbol_common.Region'(Sym);
enum_value_by_symbol('common.MType', Sym) ->
    'enum_value_by_symbol_common.MType'(Sym);
enum_value_by_symbol('common.LocationSource', Sym) ->
    'enum_value_by_symbol_common.LocationSource'(Sym).

'enum_symbol_by_value_gw.DownlinkTiming'(0) -> 'IMMEDIATELY';
'enum_symbol_by_value_gw.DownlinkTiming'(1) -> 'DELAY';
'enum_symbol_by_value_gw.DownlinkTiming'(2) -> 'GPS_EPOCH'.

'enum_value_by_symbol_gw.DownlinkTiming'('IMMEDIATELY') -> 0;
'enum_value_by_symbol_gw.DownlinkTiming'('DELAY') -> 1;
'enum_value_by_symbol_gw.DownlinkTiming'('GPS_EPOCH') -> 2.

'enum_symbol_by_value_gw.FineTimestampType'(0) -> 'NONE';
'enum_symbol_by_value_gw.FineTimestampType'(1) -> 'ENCRYPTED';
'enum_symbol_by_value_gw.FineTimestampType'(2) -> 'PLAIN'.

'enum_value_by_symbol_gw.FineTimestampType'('NONE') -> 0;
'enum_value_by_symbol_gw.FineTimestampType'('ENCRYPTED') -> 1;
'enum_value_by_symbol_gw.FineTimestampType'('PLAIN') -> 2.

'enum_symbol_by_value_gw.CRCStatus'(0) -> 'NO_CRC';
'enum_symbol_by_value_gw.CRCStatus'(1) -> 'BAD_CRC';
'enum_symbol_by_value_gw.CRCStatus'(2) -> 'CRC_OK'.

'enum_value_by_symbol_gw.CRCStatus'('NO_CRC') -> 0;
'enum_value_by_symbol_gw.CRCStatus'('BAD_CRC') -> 1;
'enum_value_by_symbol_gw.CRCStatus'('CRC_OK') -> 2.

'enum_symbol_by_value_gw.TxAckStatus'(0) -> 'IGNORED';
'enum_symbol_by_value_gw.TxAckStatus'(1) -> 'OK';
'enum_symbol_by_value_gw.TxAckStatus'(2) -> 'TOO_LATE';
'enum_symbol_by_value_gw.TxAckStatus'(3) -> 'TOO_EARLY';
'enum_symbol_by_value_gw.TxAckStatus'(4) -> 'COLLISION_PACKET';
'enum_symbol_by_value_gw.TxAckStatus'(5) -> 'COLLISION_BEACON';
'enum_symbol_by_value_gw.TxAckStatus'(6) -> 'TX_FREQ';
'enum_symbol_by_value_gw.TxAckStatus'(7) -> 'TX_POWER';
'enum_symbol_by_value_gw.TxAckStatus'(8) -> 'GPS_UNLOCKED';
'enum_symbol_by_value_gw.TxAckStatus'(9) -> 'QUEUE_FULL';
'enum_symbol_by_value_gw.TxAckStatus'(10) -> 'INTERNAL_ERROR'.

'enum_value_by_symbol_gw.TxAckStatus'('IGNORED') -> 0;
'enum_value_by_symbol_gw.TxAckStatus'('OK') -> 1;
'enum_value_by_symbol_gw.TxAckStatus'('TOO_LATE') -> 2;
'enum_value_by_symbol_gw.TxAckStatus'('TOO_EARLY') -> 3;
'enum_value_by_symbol_gw.TxAckStatus'('COLLISION_PACKET') -> 4;
'enum_value_by_symbol_gw.TxAckStatus'('COLLISION_BEACON') -> 5;
'enum_value_by_symbol_gw.TxAckStatus'('TX_FREQ') -> 6;
'enum_value_by_symbol_gw.TxAckStatus'('TX_POWER') -> 7;
'enum_value_by_symbol_gw.TxAckStatus'('GPS_UNLOCKED') -> 8;
'enum_value_by_symbol_gw.TxAckStatus'('QUEUE_FULL') -> 9;
'enum_value_by_symbol_gw.TxAckStatus'('INTERNAL_ERROR') -> 10.

'enum_symbol_by_value_gw.ConnState.State'(0) -> 'OFFLINE';
'enum_symbol_by_value_gw.ConnState.State'(1) -> 'ONLINE'.

'enum_value_by_symbol_gw.ConnState.State'('OFFLINE') -> 0;
'enum_value_by_symbol_gw.ConnState.State'('ONLINE') -> 1.

'enum_symbol_by_value_common.Modulation'(0) -> 'LORA';
'enum_symbol_by_value_common.Modulation'(1) -> 'FSK'.

'enum_value_by_symbol_common.Modulation'('LORA') -> 0;
'enum_value_by_symbol_common.Modulation'('FSK') -> 1.

'enum_symbol_by_value_common.Region'(0) -> 'EU868';
'enum_symbol_by_value_common.Region'(2) -> 'US915';
'enum_symbol_by_value_common.Region'(3) -> 'CN779';
'enum_symbol_by_value_common.Region'(4) -> 'EU433';
'enum_symbol_by_value_common.Region'(5) -> 'AU915';
'enum_symbol_by_value_common.Region'(6) -> 'CN470';
'enum_symbol_by_value_common.Region'(7) -> 'AS923';
'enum_symbol_by_value_common.Region'(8) -> 'KR920';
'enum_symbol_by_value_common.Region'(9) -> 'IN865';
'enum_symbol_by_value_common.Region'(10) -> 'RU864'.

'enum_value_by_symbol_common.Region'('EU868') -> 0;
'enum_value_by_symbol_common.Region'('US915') -> 2;
'enum_value_by_symbol_common.Region'('CN779') -> 3;
'enum_value_by_symbol_common.Region'('EU433') -> 4;
'enum_value_by_symbol_common.Region'('AU915') -> 5;
'enum_value_by_symbol_common.Region'('CN470') -> 6;
'enum_value_by_symbol_common.Region'('AS923') -> 7;
'enum_value_by_symbol_common.Region'('KR920') -> 8;
'enum_value_by_symbol_common.Region'('IN865') -> 9;
'enum_value_by_symbol_common.Region'('RU864') -> 10.

'enum_symbol_by_value_common.MType'(0) -> 'JoinRequest';
'enum_symbol_by_value_common.MType'(1) -> 'JoinAccept';
'enum_symbol_by_value_common.MType'(2) -> 'UnconfirmedDataUp';
'enum_symbol_by_value_common.MType'(3) -> 'UnconfirmedDataDown';
'enum_symbol_by_value_common.MType'(4) -> 'ConfirmedDataUp';
'enum_symbol_by_value_common.MType'(5) -> 'ConfirmedDataDown';
'enum_symbol_by_value_common.MType'(6) -> 'RejoinRequest';
'enum_symbol_by_value_common.MType'(7) -> 'Proprietary'.

'enum_value_by_symbol_common.MType'('JoinRequest') -> 0;
'enum_value_by_symbol_common.MType'('JoinAccept') -> 1;
'enum_value_by_symbol_common.MType'('UnconfirmedDataUp') -> 2;
'enum_value_by_symbol_common.MType'('UnconfirmedDataDown') -> 3;
'enum_value_by_symbol_common.MType'('ConfirmedDataUp') -> 4;
'enum_value_by_symbol_common.MType'('ConfirmedDataDown') -> 5;
'enum_value_by_symbol_common.MType'('RejoinRequest') -> 6;
'enum_value_by_symbol_common.MType'('Proprietary') -> 7.

'enum_symbol_by_value_common.LocationSource'(0) -> 'UNKNOWN';
'enum_symbol_by_value_common.LocationSource'(1) -> 'GPS';
'enum_symbol_by_value_common.LocationSource'(2) -> 'CONFIG';
'enum_symbol_by_value_common.LocationSource'(3) -> 'GEO_RESOLVER_TDOA';
'enum_symbol_by_value_common.LocationSource'(4) -> 'GEO_RESOLVER_RSSI';
'enum_symbol_by_value_common.LocationSource'(5) -> 'GEO_RESOLVER_GNSS';
'enum_symbol_by_value_common.LocationSource'(6) -> 'GEO_RESOLVER_WIFI'.

'enum_value_by_symbol_common.LocationSource'('UNKNOWN') -> 0;
'enum_value_by_symbol_common.LocationSource'('GPS') -> 1;
'enum_value_by_symbol_common.LocationSource'('CONFIG') -> 2;
'enum_value_by_symbol_common.LocationSource'('GEO_RESOLVER_TDOA') -> 3;
'enum_value_by_symbol_common.LocationSource'('GEO_RESOLVER_RSSI') -> 4;
'enum_value_by_symbol_common.LocationSource'('GEO_RESOLVER_GNSS') -> 5;
'enum_value_by_symbol_common.LocationSource'('GEO_RESOLVER_WIFI') -> 6.

get_service_names() -> ['geo.GeolocationServerService'].

get_service_def('geo.GeolocationServerService') ->
    {{service, 'geo.GeolocationServerService'}, [
        #rpc{
            name = 'ResolveTDOA',
            input = 'geo.ResolveTDOARequest',
            output = 'geo.ResolveTDOAResponse',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'ResolveMultiFrameTDOA',
            input = 'geo.ResolveMultiFrameTDOARequest',
            output = 'geo.ResolveMultiFrameTDOAResponse',
            input_stream = false,
            output_stream = false,
            opts = []
        }
    ]};
get_service_def(_) ->
    error.

get_rpc_names('geo.GeolocationServerService') -> ['ResolveTDOA', 'ResolveMultiFrameTDOA'];
get_rpc_names(_) -> error.

find_rpc_def('geo.GeolocationServerService', RpcName) ->
    'find_rpc_def_geo.GeolocationServerService'(RpcName);
find_rpc_def(_, _) ->
    error.

'find_rpc_def_geo.GeolocationServerService'('ResolveTDOA') ->
    #rpc{
        name = 'ResolveTDOA',
        input = 'geo.ResolveTDOARequest',
        output = 'geo.ResolveTDOAResponse',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_geo.GeolocationServerService'('ResolveMultiFrameTDOA') ->
    #rpc{
        name = 'ResolveMultiFrameTDOA',
        input = 'geo.ResolveMultiFrameTDOARequest',
        output = 'geo.ResolveMultiFrameTDOAResponse',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_geo.GeolocationServerService'(_) ->
    error.

fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
        Def when is_tuple(Def) -> Def;
        error -> erlang:error({no_such_rpc, ServiceName, RpcName})
    end.

%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
fqbin_to_service_name(<<"geo.GeolocationServerService">>) -> 'geo.GeolocationServerService';
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).

%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
service_name_to_fqbin('geo.GeolocationServerService') -> <<"geo.GeolocationServerService">>;
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).

%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
fqbins_to_service_and_rpc_name(<<"geo.GeolocationServerService">>, <<"ResolveTDOA">>) ->
    {'geo.GeolocationServerService', 'ResolveTDOA'};
fqbins_to_service_and_rpc_name(<<"geo.GeolocationServerService">>, <<"ResolveMultiFrameTDOA">>) ->
    {'geo.GeolocationServerService', 'ResolveMultiFrameTDOA'};
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).

%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
service_and_rpc_name_to_fqbins('geo.GeolocationServerService', 'ResolveTDOA') ->
    {<<"geo.GeolocationServerService">>, <<"ResolveTDOA">>};
service_and_rpc_name_to_fqbins('geo.GeolocationServerService', 'ResolveMultiFrameTDOA') ->
    {<<"geo.GeolocationServerService">>, <<"ResolveMultiFrameTDOA">>};
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).

fqbin_to_msg_name(<<"geo.ResolveResult">>) -> 'geo.ResolveResult';
fqbin_to_msg_name(<<"geo.FrameRXInfo">>) -> 'geo.FrameRXInfo';
fqbin_to_msg_name(<<"geo.ResolveTDOARequest">>) -> 'geo.ResolveTDOARequest';
fqbin_to_msg_name(<<"geo.ResolveMultiFrameTDOARequest">>) -> 'geo.ResolveMultiFrameTDOARequest';
fqbin_to_msg_name(<<"geo.ResolveTDOAResponse">>) -> 'geo.ResolveTDOAResponse';
fqbin_to_msg_name(<<"geo.ResolveMultiFrameTDOAResponse">>) -> 'geo.ResolveMultiFrameTDOAResponse';
fqbin_to_msg_name(<<"gw.UplinkTXInfo">>) -> 'gw.UplinkTXInfo';
fqbin_to_msg_name(<<"gw.LoRaModulationInfo">>) -> 'gw.LoRaModulationInfo';
fqbin_to_msg_name(<<"gw.FSKModulationInfo">>) -> 'gw.FSKModulationInfo';
fqbin_to_msg_name(<<"gw.EncryptedFineTimestamp">>) -> 'gw.EncryptedFineTimestamp';
fqbin_to_msg_name(<<"gw.PlainFineTimestamp">>) -> 'gw.PlainFineTimestamp';
fqbin_to_msg_name(<<"gw.GatewayStats">>) -> 'gw.GatewayStats';
fqbin_to_msg_name(<<"gw.UplinkRXInfo">>) -> 'gw.UplinkRXInfo';
fqbin_to_msg_name(<<"gw.DownlinkTXInfo">>) -> 'gw.DownlinkTXInfo';
fqbin_to_msg_name(<<"gw.ImmediatelyTimingInfo">>) -> 'gw.ImmediatelyTimingInfo';
fqbin_to_msg_name(<<"gw.DelayTimingInfo">>) -> 'gw.DelayTimingInfo';
fqbin_to_msg_name(<<"gw.GPSEpochTimingInfo">>) -> 'gw.GPSEpochTimingInfo';
fqbin_to_msg_name(<<"gw.UplinkFrame">>) -> 'gw.UplinkFrame';
fqbin_to_msg_name(<<"gw.UplinkFrameSet">>) -> 'gw.UplinkFrameSet';
fqbin_to_msg_name(<<"gw.DownlinkFrame">>) -> 'gw.DownlinkFrame';
fqbin_to_msg_name(<<"gw.DownlinkFrameItem">>) -> 'gw.DownlinkFrameItem';
fqbin_to_msg_name(<<"gw.DownlinkTXAck">>) -> 'gw.DownlinkTXAck';
fqbin_to_msg_name(<<"gw.DownlinkTXAckItem">>) -> 'gw.DownlinkTXAckItem';
fqbin_to_msg_name(<<"gw.GatewayConfiguration">>) -> 'gw.GatewayConfiguration';
fqbin_to_msg_name(<<"gw.ChannelConfiguration">>) -> 'gw.ChannelConfiguration';
fqbin_to_msg_name(<<"gw.LoRaModulationConfig">>) -> 'gw.LoRaModulationConfig';
fqbin_to_msg_name(<<"gw.FSKModulationConfig">>) -> 'gw.FSKModulationConfig';
fqbin_to_msg_name(<<"gw.GatewayCommandExecRequest">>) -> 'gw.GatewayCommandExecRequest';
fqbin_to_msg_name(<<"gw.GatewayCommandExecResponse">>) -> 'gw.GatewayCommandExecResponse';
fqbin_to_msg_name(<<"gw.RawPacketForwarderEvent">>) -> 'gw.RawPacketForwarderEvent';
fqbin_to_msg_name(<<"gw.RawPacketForwarderCommand">>) -> 'gw.RawPacketForwarderCommand';
fqbin_to_msg_name(<<"gw.ConnState">>) -> 'gw.ConnState';
fqbin_to_msg_name(<<"common.KeyEnvelope">>) -> 'common.KeyEnvelope';
fqbin_to_msg_name(<<"common.Location">>) -> 'common.Location';
fqbin_to_msg_name(<<"google.protobuf.Timestamp">>) -> 'google.protobuf.Timestamp';
fqbin_to_msg_name(<<"google.protobuf.Duration">>) -> 'google.protobuf.Duration';
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).

msg_name_to_fqbin('geo.ResolveResult') -> <<"geo.ResolveResult">>;
msg_name_to_fqbin('geo.FrameRXInfo') -> <<"geo.FrameRXInfo">>;
msg_name_to_fqbin('geo.ResolveTDOARequest') -> <<"geo.ResolveTDOARequest">>;
msg_name_to_fqbin('geo.ResolveMultiFrameTDOARequest') -> <<"geo.ResolveMultiFrameTDOARequest">>;
msg_name_to_fqbin('geo.ResolveTDOAResponse') -> <<"geo.ResolveTDOAResponse">>;
msg_name_to_fqbin('geo.ResolveMultiFrameTDOAResponse') -> <<"geo.ResolveMultiFrameTDOAResponse">>;
msg_name_to_fqbin('gw.UplinkTXInfo') -> <<"gw.UplinkTXInfo">>;
msg_name_to_fqbin('gw.LoRaModulationInfo') -> <<"gw.LoRaModulationInfo">>;
msg_name_to_fqbin('gw.FSKModulationInfo') -> <<"gw.FSKModulationInfo">>;
msg_name_to_fqbin('gw.EncryptedFineTimestamp') -> <<"gw.EncryptedFineTimestamp">>;
msg_name_to_fqbin('gw.PlainFineTimestamp') -> <<"gw.PlainFineTimestamp">>;
msg_name_to_fqbin('gw.GatewayStats') -> <<"gw.GatewayStats">>;
msg_name_to_fqbin('gw.UplinkRXInfo') -> <<"gw.UplinkRXInfo">>;
msg_name_to_fqbin('gw.DownlinkTXInfo') -> <<"gw.DownlinkTXInfo">>;
msg_name_to_fqbin('gw.ImmediatelyTimingInfo') -> <<"gw.ImmediatelyTimingInfo">>;
msg_name_to_fqbin('gw.DelayTimingInfo') -> <<"gw.DelayTimingInfo">>;
msg_name_to_fqbin('gw.GPSEpochTimingInfo') -> <<"gw.GPSEpochTimingInfo">>;
msg_name_to_fqbin('gw.UplinkFrame') -> <<"gw.UplinkFrame">>;
msg_name_to_fqbin('gw.UplinkFrameSet') -> <<"gw.UplinkFrameSet">>;
msg_name_to_fqbin('gw.DownlinkFrame') -> <<"gw.DownlinkFrame">>;
msg_name_to_fqbin('gw.DownlinkFrameItem') -> <<"gw.DownlinkFrameItem">>;
msg_name_to_fqbin('gw.DownlinkTXAck') -> <<"gw.DownlinkTXAck">>;
msg_name_to_fqbin('gw.DownlinkTXAckItem') -> <<"gw.DownlinkTXAckItem">>;
msg_name_to_fqbin('gw.GatewayConfiguration') -> <<"gw.GatewayConfiguration">>;
msg_name_to_fqbin('gw.ChannelConfiguration') -> <<"gw.ChannelConfiguration">>;
msg_name_to_fqbin('gw.LoRaModulationConfig') -> <<"gw.LoRaModulationConfig">>;
msg_name_to_fqbin('gw.FSKModulationConfig') -> <<"gw.FSKModulationConfig">>;
msg_name_to_fqbin('gw.GatewayCommandExecRequest') -> <<"gw.GatewayCommandExecRequest">>;
msg_name_to_fqbin('gw.GatewayCommandExecResponse') -> <<"gw.GatewayCommandExecResponse">>;
msg_name_to_fqbin('gw.RawPacketForwarderEvent') -> <<"gw.RawPacketForwarderEvent">>;
msg_name_to_fqbin('gw.RawPacketForwarderCommand') -> <<"gw.RawPacketForwarderCommand">>;
msg_name_to_fqbin('gw.ConnState') -> <<"gw.ConnState">>;
msg_name_to_fqbin('common.KeyEnvelope') -> <<"common.KeyEnvelope">>;
msg_name_to_fqbin('common.Location') -> <<"common.Location">>;
msg_name_to_fqbin('google.protobuf.Timestamp') -> <<"google.protobuf.Timestamp">>;
msg_name_to_fqbin('google.protobuf.Duration') -> <<"google.protobuf.Duration">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).

fqbin_to_enum_name(<<"gw.DownlinkTiming">>) -> 'gw.DownlinkTiming';
fqbin_to_enum_name(<<"gw.FineTimestampType">>) -> 'gw.FineTimestampType';
fqbin_to_enum_name(<<"gw.CRCStatus">>) -> 'gw.CRCStatus';
fqbin_to_enum_name(<<"gw.TxAckStatus">>) -> 'gw.TxAckStatus';
fqbin_to_enum_name(<<"gw.ConnState.State">>) -> 'gw.ConnState.State';
fqbin_to_enum_name(<<"common.Modulation">>) -> 'common.Modulation';
fqbin_to_enum_name(<<"common.Region">>) -> 'common.Region';
fqbin_to_enum_name(<<"common.MType">>) -> 'common.MType';
fqbin_to_enum_name(<<"common.LocationSource">>) -> 'common.LocationSource';
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).

enum_name_to_fqbin('gw.DownlinkTiming') -> <<"gw.DownlinkTiming">>;
enum_name_to_fqbin('gw.FineTimestampType') -> <<"gw.FineTimestampType">>;
enum_name_to_fqbin('gw.CRCStatus') -> <<"gw.CRCStatus">>;
enum_name_to_fqbin('gw.TxAckStatus') -> <<"gw.TxAckStatus">>;
enum_name_to_fqbin('gw.ConnState.State') -> <<"gw.ConnState.State">>;
enum_name_to_fqbin('common.Modulation') -> <<"common.Modulation">>;
enum_name_to_fqbin('common.Region') -> <<"common.Region">>;
enum_name_to_fqbin('common.MType') -> <<"common.MType">>;
enum_name_to_fqbin('common.LocationSource') -> <<"common.LocationSource">>;
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).

get_package_name() -> geo.

%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> true.

source_basename() -> "geo.proto".

%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() ->
    ["geo.proto", "gw.proto", "common.proto", "timestamp.proto", "duration.proto"].

%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["geo", "gw", "common", "timestamp", "duration"].

get_msg_containment("geo") ->
    [
        'geo.FrameRXInfo',
        'geo.ResolveMultiFrameTDOARequest',
        'geo.ResolveMultiFrameTDOAResponse',
        'geo.ResolveResult',
        'geo.ResolveTDOARequest',
        'geo.ResolveTDOAResponse'
    ];
get_msg_containment("gw") ->
    [
        'gw.ChannelConfiguration',
        'gw.ConnState',
        'gw.DelayTimingInfo',
        'gw.DownlinkFrame',
        'gw.DownlinkFrameItem',
        'gw.DownlinkTXAck',
        'gw.DownlinkTXAckItem',
        'gw.DownlinkTXInfo',
        'gw.EncryptedFineTimestamp',
        'gw.FSKModulationConfig',
        'gw.FSKModulationInfo',
        'gw.GPSEpochTimingInfo',
        'gw.GatewayCommandExecRequest',
        'gw.GatewayCommandExecResponse',
        'gw.GatewayConfiguration',
        'gw.GatewayStats',
        'gw.ImmediatelyTimingInfo',
        'gw.LoRaModulationConfig',
        'gw.LoRaModulationInfo',
        'gw.PlainFineTimestamp',
        'gw.RawPacketForwarderCommand',
        'gw.RawPacketForwarderEvent',
        'gw.UplinkFrame',
        'gw.UplinkFrameSet',
        'gw.UplinkRXInfo',
        'gw.UplinkTXInfo'
    ];
get_msg_containment("common") ->
    ['common.KeyEnvelope', 'common.Location'];
get_msg_containment("timestamp") ->
    ['google.protobuf.Timestamp'];
get_msg_containment("duration") ->
    ['google.protobuf.Duration'];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).

get_pkg_containment("geo") -> geo;
get_pkg_containment("gw") -> gw;
get_pkg_containment("common") -> common;
get_pkg_containment("timestamp") -> 'google.protobuf';
get_pkg_containment("duration") -> 'google.protobuf';
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).

get_service_containment("geo") -> ['geo.GeolocationServerService'];
get_service_containment("gw") -> [];
get_service_containment("common") -> [];
get_service_containment("timestamp") -> [];
get_service_containment("duration") -> [];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).

get_rpc_containment("geo") ->
    [
        {'geo.GeolocationServerService', 'ResolveTDOA'},
        {'geo.GeolocationServerService', 'ResolveMultiFrameTDOA'}
    ];
get_rpc_containment("gw") ->
    [];
get_rpc_containment("common") ->
    [];
get_rpc_containment("timestamp") ->
    [];
get_rpc_containment("duration") ->
    [];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).

get_enum_containment("geo") ->
    [];
get_enum_containment("gw") ->
    [
        'gw.CRCStatus',
        'gw.ConnState.State',
        'gw.DownlinkTiming',
        'gw.FineTimestampType',
        'gw.TxAckStatus'
    ];
get_enum_containment("common") ->
    ['common.LocationSource', 'common.MType', 'common.Modulation', 'common.Region'];
get_enum_containment("timestamp") ->
    [];
get_enum_containment("duration") ->
    [];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).

get_proto_by_msg_name_as_fqbin(<<"google.protobuf.Timestamp">>) -> "timestamp";
get_proto_by_msg_name_as_fqbin(<<"gw.PlainFineTimestamp">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"gw.EncryptedFineTimestamp">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"gw.GatewayStats">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"gw.UplinkFrameSet">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"gw.RawPacketForwarderEvent">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"gw.RawPacketForwarderCommand">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"gw.GatewayCommandExecRequest">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"geo.ResolveTDOARequest">>) -> "geo";
get_proto_by_msg_name_as_fqbin(<<"geo.ResolveResult">>) -> "geo";
get_proto_by_msg_name_as_fqbin(<<"geo.ResolveMultiFrameTDOARequest">>) -> "geo";
get_proto_by_msg_name_as_fqbin(<<"common.KeyEnvelope">>) -> "common";
get_proto_by_msg_name_as_fqbin(<<"gw.UplinkFrame">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"gw.GatewayCommandExecResponse">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"gw.DownlinkFrame">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"gw.ConnState">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"geo.ResolveTDOAResponse">>) -> "geo";
get_proto_by_msg_name_as_fqbin(<<"geo.ResolveMultiFrameTDOAResponse">>) -> "geo";
get_proto_by_msg_name_as_fqbin(<<"gw.LoRaModulationConfig">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"gw.FSKModulationConfig">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"gw.DownlinkTXAck">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"gw.DownlinkTXAckItem">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"gw.DownlinkFrameItem">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"google.protobuf.Duration">>) -> "duration";
get_proto_by_msg_name_as_fqbin(<<"common.Location">>) -> "common";
get_proto_by_msg_name_as_fqbin(<<"gw.GatewayConfiguration">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"gw.ChannelConfiguration">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"gw.UplinkTXInfo">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"gw.UplinkRXInfo">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"gw.LoRaModulationInfo">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"gw.ImmediatelyTimingInfo">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"gw.GPSEpochTimingInfo">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"gw.FSKModulationInfo">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"gw.DownlinkTXInfo">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"gw.DelayTimingInfo">>) -> "gw";
get_proto_by_msg_name_as_fqbin(<<"geo.FrameRXInfo">>) -> "geo";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).

get_proto_by_service_name_as_fqbin(<<"geo.GeolocationServerService">>) -> "geo";
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).

get_proto_by_enum_name_as_fqbin(<<"gw.TxAckStatus">>) -> "gw";
get_proto_by_enum_name_as_fqbin(<<"gw.CRCStatus">>) -> "gw";
get_proto_by_enum_name_as_fqbin(<<"common.MType">>) -> "common";
get_proto_by_enum_name_as_fqbin(<<"common.LocationSource">>) -> "common";
get_proto_by_enum_name_as_fqbin(<<"gw.FineTimestampType">>) -> "gw";
get_proto_by_enum_name_as_fqbin(<<"gw.ConnState.State">>) -> "gw";
get_proto_by_enum_name_as_fqbin(<<"gw.DownlinkTiming">>) -> "gw";
get_proto_by_enum_name_as_fqbin(<<"common.Region">>) -> "common";
get_proto_by_enum_name_as_fqbin(<<"common.Modulation">>) -> "common";
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).

get_protos_by_pkg_name_as_fqbin(<<"google.protobuf">>) -> ["duration", "timestamp"];
get_protos_by_pkg_name_as_fqbin(<<"gw">>) -> ["gw"];
get_protos_by_pkg_name_as_fqbin(<<"common">>) -> ["common"];
get_protos_by_pkg_name_as_fqbin(<<"geo">>) -> ["geo"];
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).

gpb_version_as_string() ->
    "4.17.0".

gpb_version_as_list() ->
    [4, 17, 0].
