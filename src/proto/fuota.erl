%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.17.0
-module(fuota).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([
    'enum_symbol_by_value_fuota.MulticastGroupType'/1,
    'enum_value_by_symbol_fuota.MulticastGroupType'/1
]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("fuota.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'fuota.MulticastGroupType'() :: 'CLASS_B' | 'CLASS_C'.
-export_type(['fuota.MulticastGroupType'/0]).

%% message types
-type 'fuota.DeploymentDevice'() :: #'fuota.DeploymentDevice'{}.

-type 'fuota.Deployment'() :: #'fuota.Deployment'{}.

-type 'fuota.CreateDeploymentRequest'() :: #'fuota.CreateDeploymentRequest'{}.

-type 'fuota.CreateDeploymentResponse'() :: #'fuota.CreateDeploymentResponse'{}.

-type 'fuota.GetDeploymentStatusRequest'() :: #'fuota.GetDeploymentStatusRequest'{}.

-type 'fuota.DeploymentDeviceStatus'() :: #'fuota.DeploymentDeviceStatus'{}.

-type 'fuota.GetDeploymentStatusResponse'() :: #'fuota.GetDeploymentStatusResponse'{}.

-type 'fuota.GetDeploymentDeviceLogsRequest'() :: #'fuota.GetDeploymentDeviceLogsRequest'{}.

-type 'fuota.DeploymentDeviceLog'() :: #'fuota.DeploymentDeviceLog'{}.

-type 'fuota.GetDeploymentDeviceLogsResponse'() :: #'fuota.GetDeploymentDeviceLogsResponse'{}.

-type 'google.protobuf.Timestamp'() :: #'google.protobuf.Timestamp'{}.

-type 'google.protobuf.Duration'() :: #'google.protobuf.Duration'{}.

-export_type([
    'fuota.DeploymentDevice'/0,
    'fuota.Deployment'/0,
    'fuota.CreateDeploymentRequest'/0,
    'fuota.CreateDeploymentResponse'/0,
    'fuota.GetDeploymentStatusRequest'/0,
    'fuota.DeploymentDeviceStatus'/0,
    'fuota.GetDeploymentStatusResponse'/0,
    'fuota.GetDeploymentDeviceLogsRequest'/0,
    'fuota.DeploymentDeviceLog'/0,
    'fuota.GetDeploymentDeviceLogsResponse'/0,
    'google.protobuf.Timestamp'/0,
    'google.protobuf.Duration'/0
]).
-type '$msg_name'() ::
    'fuota.DeploymentDevice'
    | 'fuota.Deployment'
    | 'fuota.CreateDeploymentRequest'
    | 'fuota.CreateDeploymentResponse'
    | 'fuota.GetDeploymentStatusRequest'
    | 'fuota.DeploymentDeviceStatus'
    | 'fuota.GetDeploymentStatusResponse'
    | 'fuota.GetDeploymentDeviceLogsRequest'
    | 'fuota.DeploymentDeviceLog'
    | 'fuota.GetDeploymentDeviceLogsResponse'
    | 'google.protobuf.Timestamp'
    | 'google.protobuf.Duration'.
-type '$msg'() ::
    'fuota.DeploymentDevice'()
    | 'fuota.Deployment'()
    | 'fuota.CreateDeploymentRequest'()
    | 'fuota.CreateDeploymentResponse'()
    | 'fuota.GetDeploymentStatusRequest'()
    | 'fuota.DeploymentDeviceStatus'()
    | 'fuota.GetDeploymentStatusResponse'()
    | 'fuota.GetDeploymentDeviceLogsRequest'()
    | 'fuota.DeploymentDeviceLog'()
    | 'fuota.GetDeploymentDeviceLogsResponse'()
    | 'google.protobuf.Timestamp'()
    | 'google.protobuf.Duration'().
-export_type(['$msg_name'/0, '$msg'/0]).

-record('map<string,string>', {key, value}).
-spec encode_msg('$msg'()) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 -> encode_msg(Msg, element(1, Msg), []).

-spec encode_msg('$msg'(), '$msg_name'() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts) when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg('$msg'(), '$msg_name'(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'fuota.DeploymentDevice' ->
            'encode_msg_fuota.DeploymentDevice'(id(Msg, TrUserData), TrUserData);
        'fuota.Deployment' ->
            'encode_msg_fuota.Deployment'(id(Msg, TrUserData), TrUserData);
        'fuota.CreateDeploymentRequest' ->
            'encode_msg_fuota.CreateDeploymentRequest'(id(Msg, TrUserData), TrUserData);
        'fuota.CreateDeploymentResponse' ->
            'encode_msg_fuota.CreateDeploymentResponse'(id(Msg, TrUserData), TrUserData);
        'fuota.GetDeploymentStatusRequest' ->
            'encode_msg_fuota.GetDeploymentStatusRequest'(id(Msg, TrUserData), TrUserData);
        'fuota.DeploymentDeviceStatus' ->
            'encode_msg_fuota.DeploymentDeviceStatus'(id(Msg, TrUserData), TrUserData);
        'fuota.GetDeploymentStatusResponse' ->
            'encode_msg_fuota.GetDeploymentStatusResponse'(id(Msg, TrUserData), TrUserData);
        'fuota.GetDeploymentDeviceLogsRequest' ->
            'encode_msg_fuota.GetDeploymentDeviceLogsRequest'(id(Msg, TrUserData), TrUserData);
        'fuota.DeploymentDeviceLog' ->
            'encode_msg_fuota.DeploymentDeviceLog'(id(Msg, TrUserData), TrUserData);
        'fuota.GetDeploymentDeviceLogsResponse' ->
            'encode_msg_fuota.GetDeploymentDeviceLogsResponse'(id(Msg, TrUserData), TrUserData);
        'google.protobuf.Timestamp' ->
            'encode_msg_google.protobuf.Timestamp'(id(Msg, TrUserData), TrUserData);
        'google.protobuf.Duration' ->
            'encode_msg_google.protobuf.Duration'(id(Msg, TrUserData), TrUserData)
    end.

'encode_msg_fuota.DeploymentDevice'(Msg, TrUserData) ->
    'encode_msg_fuota.DeploymentDevice'(Msg, <<>>, TrUserData).

'encode_msg_fuota.DeploymentDevice'(
    #'fuota.DeploymentDevice'{dev_eui = F1, mc_root_key = F2},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    if
        F2 == undefined ->
            B1;
        true ->
            begin
                TrF2 = id(F2, TrUserData),
                case iolist_size(TrF2) of
                    0 -> B1;
                    _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                end
            end
    end.

'encode_msg_fuota.Deployment'(Msg, TrUserData) ->
    'encode_msg_fuota.Deployment'(Msg, <<>>, TrUserData).

'encode_msg_fuota.Deployment'(
    #'fuota.Deployment'{
        application_id = F1,
        devices = F2,
        multicast_group_type = F3,
        multicast_dr = F4,
        multicast_ping_slot_period = F5,
        multicast_frequency = F6,
        multicast_group_id = F7,
        multicast_timeout = F8,
        unicast_timeout = F9,
        unicast_attempt_count = F10,
        fragmentation_fragment_size = F11,
        payload = F12,
        fragmentation_redundancy = F13,
        fragmentation_session_index = F14,
        fragmentation_matrix = F15,
        fragmentation_block_ack_delay = F16,
        fragmentation_descriptor = F17
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= 0 -> Bin;
                        true -> e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
        end,
    B2 = begin
        TrF2 = id(F2, TrUserData),
        if
            TrF2 == [] -> B1;
            true -> 'e_field_fuota.Deployment_devices'(TrF2, B1, TrUserData)
        end
    end,
    B3 =
        if
            F3 == undefined ->
                B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    if
                        TrF3 =:= 'CLASS_B'; TrF3 =:= 0 ->
                            B2;
                        true ->
                            'e_enum_fuota.MulticastGroupType'(TrF3, <<B2/binary, 24>>, TrUserData)
                    end
                end
        end,
    B4 =
        if
            F4 == undefined ->
                B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    if
                        TrF4 =:= 0 -> B3;
                        true -> e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
                    end
                end
        end,
    B5 =
        if
            F5 == undefined ->
                B4;
            true ->
                begin
                    TrF5 = id(F5, TrUserData),
                    if
                        TrF5 =:= 0 -> B4;
                        true -> e_varint(TrF5, <<B4/binary, 40>>, TrUserData)
                    end
                end
        end,
    B6 =
        if
            F6 == undefined ->
                B5;
            true ->
                begin
                    TrF6 = id(F6, TrUserData),
                    if
                        TrF6 =:= 0 -> B5;
                        true -> e_varint(TrF6, <<B5/binary, 48>>, TrUserData)
                    end
                end
        end,
    B7 =
        if
            F7 == undefined ->
                B6;
            true ->
                begin
                    TrF7 = id(F7, TrUserData),
                    if
                        TrF7 =:= 0 -> B6;
                        true -> e_varint(TrF7, <<B6/binary, 56>>, TrUserData)
                    end
                end
        end,
    B8 =
        if
            F8 == undefined ->
                B7;
            true ->
                begin
                    TrF8 = id(F8, TrUserData),
                    if
                        TrF8 =:= 0 -> B7;
                        true -> e_varint(TrF8, <<B7/binary, 64>>, TrUserData)
                    end
                end
        end,
    B9 =
        if
            F9 == undefined ->
                B8;
            true ->
                begin
                    TrF9 = id(F9, TrUserData),
                    if
                        TrF9 =:= undefined ->
                            B8;
                        true ->
                            'e_mfield_fuota.Deployment_unicast_timeout'(
                                TrF9,
                                <<B8/binary, 74>>,
                                TrUserData
                            )
                    end
                end
        end,
    B10 =
        if
            F10 == undefined ->
                B9;
            true ->
                begin
                    TrF10 = id(F10, TrUserData),
                    if
                        TrF10 =:= 0 -> B9;
                        true -> e_varint(TrF10, <<B9/binary, 80>>, TrUserData)
                    end
                end
        end,
    B11 =
        if
            F11 == undefined ->
                B10;
            true ->
                begin
                    TrF11 = id(F11, TrUserData),
                    if
                        TrF11 =:= 0 -> B10;
                        true -> e_varint(TrF11, <<B10/binary, 88>>, TrUserData)
                    end
                end
        end,
    B12 =
        if
            F12 == undefined ->
                B11;
            true ->
                begin
                    TrF12 = id(F12, TrUserData),
                    case iolist_size(TrF12) of
                        0 -> B11;
                        _ -> e_type_bytes(TrF12, <<B11/binary, 98>>, TrUserData)
                    end
                end
        end,
    B13 =
        if
            F13 == undefined ->
                B12;
            true ->
                begin
                    TrF13 = id(F13, TrUserData),
                    if
                        TrF13 =:= 0 -> B12;
                        true -> e_varint(TrF13, <<B12/binary, 104>>, TrUserData)
                    end
                end
        end,
    B14 =
        if
            F14 == undefined ->
                B13;
            true ->
                begin
                    TrF14 = id(F14, TrUserData),
                    if
                        TrF14 =:= 0 -> B13;
                        true -> e_varint(TrF14, <<B13/binary, 112>>, TrUserData)
                    end
                end
        end,
    B15 =
        if
            F15 == undefined ->
                B14;
            true ->
                begin
                    TrF15 = id(F15, TrUserData),
                    if
                        TrF15 =:= 0 -> B14;
                        true -> e_varint(TrF15, <<B14/binary, 120>>, TrUserData)
                    end
                end
        end,
    B16 =
        if
            F16 == undefined ->
                B15;
            true ->
                begin
                    TrF16 = id(F16, TrUserData),
                    if
                        TrF16 =:= 0 -> B15;
                        true -> e_varint(TrF16, <<B15/binary, 128, 1>>, TrUserData)
                    end
                end
        end,
    if
        F17 == undefined ->
            B16;
        true ->
            begin
                TrF17 = id(F17, TrUserData),
                case iolist_size(TrF17) of
                    0 -> B16;
                    _ -> e_type_bytes(TrF17, <<B16/binary, 138, 1>>, TrUserData)
                end
            end
    end.

'encode_msg_fuota.CreateDeploymentRequest'(Msg, TrUserData) ->
    'encode_msg_fuota.CreateDeploymentRequest'(Msg, <<>>, TrUserData).

'encode_msg_fuota.CreateDeploymentRequest'(
    #'fuota.CreateDeploymentRequest'{deployment = F1},
    Bin,
    TrUserData
) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                if
                    TrF1 =:= undefined ->
                        Bin;
                    true ->
                        'e_mfield_fuota.CreateDeploymentRequest_deployment'(
                            TrF1,
                            <<Bin/binary, 10>>,
                            TrUserData
                        )
                end
            end
    end.

'encode_msg_fuota.CreateDeploymentResponse'(Msg, TrUserData) ->
    'encode_msg_fuota.CreateDeploymentResponse'(Msg, <<>>, TrUserData).

'encode_msg_fuota.CreateDeploymentResponse'(
    #'fuota.CreateDeploymentResponse'{id = F1},
    Bin,
    TrUserData
) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                case iolist_size(TrF1) of
                    0 -> Bin;
                    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end
    end.

'encode_msg_fuota.GetDeploymentStatusRequest'(Msg, TrUserData) ->
    'encode_msg_fuota.GetDeploymentStatusRequest'(Msg, <<>>, TrUserData).

'encode_msg_fuota.GetDeploymentStatusRequest'(
    #'fuota.GetDeploymentStatusRequest'{id = F1},
    Bin,
    TrUserData
) ->
    if
        F1 == undefined ->
            Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                case iolist_size(TrF1) of
                    0 -> Bin;
                    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end
    end.

'encode_msg_fuota.DeploymentDeviceStatus'(Msg, TrUserData) ->
    'encode_msg_fuota.DeploymentDeviceStatus'(Msg, <<>>, TrUserData).

'encode_msg_fuota.DeploymentDeviceStatus'(
    #'fuota.DeploymentDeviceStatus'{
        dev_eui = F1,
        created_at = F2,
        updated_at = F3,
        mc_group_setup_completed_at = F4,
        mc_session_completed_at = F5,
        frag_session_setup_completed_at = F6,
        frag_status_completed_at = F7
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= undefined ->
                            B1;
                        true ->
                            'e_mfield_fuota.DeploymentDeviceStatus_created_at'(
                                TrF2,
                                <<B1/binary, 18>>,
                                TrUserData
                            )
                    end
                end
        end,
    B3 =
        if
            F3 == undefined ->
                B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    if
                        TrF3 =:= undefined ->
                            B2;
                        true ->
                            'e_mfield_fuota.DeploymentDeviceStatus_updated_at'(
                                TrF3,
                                <<B2/binary, 26>>,
                                TrUserData
                            )
                    end
                end
        end,
    B4 =
        if
            F4 == undefined ->
                B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    if
                        TrF4 =:= undefined ->
                            B3;
                        true ->
                            'e_mfield_fuota.DeploymentDeviceStatus_mc_group_setup_completed_at'(
                                TrF4,
                                <<B3/binary, 34>>,
                                TrUserData
                            )
                    end
                end
        end,
    B5 =
        if
            F5 == undefined ->
                B4;
            true ->
                begin
                    TrF5 = id(F5, TrUserData),
                    if
                        TrF5 =:= undefined ->
                            B4;
                        true ->
                            'e_mfield_fuota.DeploymentDeviceStatus_mc_session_completed_at'(
                                TrF5,
                                <<B4/binary, 42>>,
                                TrUserData
                            )
                    end
                end
        end,
    B6 =
        if
            F6 == undefined ->
                B5;
            true ->
                begin
                    TrF6 = id(F6, TrUserData),
                    if
                        TrF6 =:= undefined ->
                            B5;
                        true ->
                            'e_mfield_fuota.DeploymentDeviceStatus_frag_session_setup_completed_at'(
                                TrF6,
                                <<B5/binary, 50>>,
                                TrUserData
                            )
                    end
                end
        end,
    if
        F7 == undefined ->
            B6;
        true ->
            begin
                TrF7 = id(F7, TrUserData),
                if
                    TrF7 =:= undefined ->
                        B6;
                    true ->
                        'e_mfield_fuota.DeploymentDeviceStatus_frag_status_completed_at'(
                            TrF7,
                            <<B6/binary, 58>>,
                            TrUserData
                        )
                end
            end
    end.

'encode_msg_fuota.GetDeploymentStatusResponse'(Msg, TrUserData) ->
    'encode_msg_fuota.GetDeploymentStatusResponse'(Msg, <<>>, TrUserData).

'encode_msg_fuota.GetDeploymentStatusResponse'(
    #'fuota.GetDeploymentStatusResponse'{
        created_at = F1,
        updated_at = F2,
        mc_group_setup_completed_at = F3,
        mc_session_completed_at = F4,
        frag_session_setup_completed_at = F5,
        enqueue_completed_at = F6,
        frag_status_completed_at = F7,
        device_status = F8
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= undefined ->
                            Bin;
                        true ->
                            'e_mfield_fuota.GetDeploymentStatusResponse_created_at'(
                                TrF1,
                                <<Bin/binary, 10>>,
                                TrUserData
                            )
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= undefined ->
                            B1;
                        true ->
                            'e_mfield_fuota.GetDeploymentStatusResponse_updated_at'(
                                TrF2,
                                <<B1/binary, 18>>,
                                TrUserData
                            )
                    end
                end
        end,
    B3 =
        if
            F3 == undefined ->
                B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    if
                        TrF3 =:= undefined ->
                            B2;
                        true ->
                            'e_mfield_fuota.GetDeploymentStatusResponse_mc_group_setup_completed_at'(
                                TrF3,
                                <<B2/binary, 26>>,
                                TrUserData
                            )
                    end
                end
        end,
    B4 =
        if
            F4 == undefined ->
                B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    if
                        TrF4 =:= undefined ->
                            B3;
                        true ->
                            'e_mfield_fuota.GetDeploymentStatusResponse_mc_session_completed_at'(
                                TrF4,
                                <<B3/binary, 34>>,
                                TrUserData
                            )
                    end
                end
        end,
    B5 =
        if
            F5 == undefined ->
                B4;
            true ->
                begin
                    TrF5 = id(F5, TrUserData),
                    if
                        TrF5 =:= undefined ->
                            B4;
                        true ->
                            'e_mfield_fuota.GetDeploymentStatusResponse_frag_session_setup_completed_at'(
                                TrF5,
                                <<B4/binary, 42>>,
                                TrUserData
                            )
                    end
                end
        end,
    B6 =
        if
            F6 == undefined ->
                B5;
            true ->
                begin
                    TrF6 = id(F6, TrUserData),
                    if
                        TrF6 =:= undefined ->
                            B5;
                        true ->
                            'e_mfield_fuota.GetDeploymentStatusResponse_enqueue_completed_at'(
                                TrF6,
                                <<B5/binary, 50>>,
                                TrUserData
                            )
                    end
                end
        end,
    B7 =
        if
            F7 == undefined ->
                B6;
            true ->
                begin
                    TrF7 = id(F7, TrUserData),
                    if
                        TrF7 =:= undefined ->
                            B6;
                        true ->
                            'e_mfield_fuota.GetDeploymentStatusResponse_frag_status_completed_at'(
                                TrF7,
                                <<B6/binary, 58>>,
                                TrUserData
                            )
                    end
                end
        end,
    begin
        TrF8 = id(F8, TrUserData),
        if
            TrF8 == [] -> B7;
            true -> 'e_field_fuota.GetDeploymentStatusResponse_device_status'(TrF8, B7, TrUserData)
        end
    end.

'encode_msg_fuota.GetDeploymentDeviceLogsRequest'(Msg, TrUserData) ->
    'encode_msg_fuota.GetDeploymentDeviceLogsRequest'(Msg, <<>>, TrUserData).

'encode_msg_fuota.GetDeploymentDeviceLogsRequest'(
    #'fuota.GetDeploymentDeviceLogsRequest'{deployment_id = F1, dev_eui = F2},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    if
        F2 == undefined ->
            B1;
        true ->
            begin
                TrF2 = id(F2, TrUserData),
                case iolist_size(TrF2) of
                    0 -> B1;
                    _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                end
            end
    end.

'encode_msg_fuota.DeploymentDeviceLog'(Msg, TrUserData) ->
    'encode_msg_fuota.DeploymentDeviceLog'(Msg, <<>>, TrUserData).

'encode_msg_fuota.DeploymentDeviceLog'(
    #'fuota.DeploymentDeviceLog'{created_at = F1, f_port = F2, command = F3, fields = F4},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= undefined ->
                            Bin;
                        true ->
                            'e_mfield_fuota.DeploymentDeviceLog_created_at'(
                                TrF1,
                                <<Bin/binary, 10>>,
                                TrUserData
                            )
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= 0 -> B1;
                        true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                    end
                end
        end,
    B3 =
        if
            F3 == undefined ->
                B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    case is_empty_string(TrF3) of
                        true -> B2;
                        false -> e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
                    end
                end
        end,
    begin
        TrF4 = id(F4, TrUserData),
        if
            TrF4 == [] -> B3;
            true -> 'e_field_fuota.DeploymentDeviceLog_fields'(TrF4, B3, TrUserData)
        end
    end.

'encode_msg_fuota.GetDeploymentDeviceLogsResponse'(Msg, TrUserData) ->
    'encode_msg_fuota.GetDeploymentDeviceLogsResponse'(Msg, <<>>, TrUserData).

'encode_msg_fuota.GetDeploymentDeviceLogsResponse'(
    #'fuota.GetDeploymentDeviceLogsResponse'{logs = F1},
    Bin,
    TrUserData
) ->
    begin
        TrF1 = id(F1, TrUserData),
        if
            TrF1 == [] -> Bin;
            true -> 'e_field_fuota.GetDeploymentDeviceLogsResponse_logs'(TrF1, Bin, TrUserData)
        end
    end.

'encode_msg_google.protobuf.Timestamp'(Msg, TrUserData) ->
    'encode_msg_google.protobuf.Timestamp'(Msg, <<>>, TrUserData).

'encode_msg_google.protobuf.Timestamp'(
    #'google.protobuf.Timestamp'{seconds = F1, nanos = F2},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= 0 -> Bin;
                        true -> e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
        end,
    if
        F2 == undefined ->
            B1;
        true ->
            begin
                TrF2 = id(F2, TrUserData),
                if
                    TrF2 =:= 0 -> B1;
                    true -> e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
                end
            end
    end.

'encode_msg_google.protobuf.Duration'(Msg, TrUserData) ->
    'encode_msg_google.protobuf.Duration'(Msg, <<>>, TrUserData).

'encode_msg_google.protobuf.Duration'(
    #'google.protobuf.Duration'{seconds = F1, nanos = F2},
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= 0 -> Bin;
                        true -> e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
        end,
    if
        F2 == undefined ->
            B1;
        true ->
            begin
                TrF2 = id(F2, TrUserData),
                if
                    TrF2 =:= 0 -> B1;
                    true -> e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
                end
            end
    end.

'e_mfield_fuota.Deployment_devices'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_fuota.DeploymentDevice'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_fuota.Deployment_devices'([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = 'e_mfield_fuota.Deployment_devices'(id(Elem, TrUserData), Bin2, TrUserData),
    'e_field_fuota.Deployment_devices'(Rest, Bin3, TrUserData);
'e_field_fuota.Deployment_devices'([], Bin, _TrUserData) ->
    Bin.

'e_mfield_fuota.Deployment_unicast_timeout'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Duration'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_fuota.CreateDeploymentRequest_deployment'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_fuota.Deployment'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_fuota.DeploymentDeviceStatus_created_at'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Timestamp'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_fuota.DeploymentDeviceStatus_updated_at'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Timestamp'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_fuota.DeploymentDeviceStatus_mc_group_setup_completed_at'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Timestamp'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_fuota.DeploymentDeviceStatus_mc_session_completed_at'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Timestamp'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_fuota.DeploymentDeviceStatus_frag_session_setup_completed_at'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Timestamp'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_fuota.DeploymentDeviceStatus_frag_status_completed_at'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Timestamp'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_fuota.GetDeploymentStatusResponse_created_at'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Timestamp'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_fuota.GetDeploymentStatusResponse_updated_at'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Timestamp'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_fuota.GetDeploymentStatusResponse_mc_group_setup_completed_at'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Timestamp'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_fuota.GetDeploymentStatusResponse_mc_session_completed_at'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Timestamp'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_fuota.GetDeploymentStatusResponse_frag_session_setup_completed_at'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Timestamp'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_fuota.GetDeploymentStatusResponse_enqueue_completed_at'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Timestamp'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_fuota.GetDeploymentStatusResponse_frag_status_completed_at'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Timestamp'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_fuota.GetDeploymentStatusResponse_device_status'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_fuota.DeploymentDeviceStatus'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_fuota.GetDeploymentStatusResponse_device_status'([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 66>>,
    Bin3 = 'e_mfield_fuota.GetDeploymentStatusResponse_device_status'(
        id(Elem, TrUserData),
        Bin2,
        TrUserData
    ),
    'e_field_fuota.GetDeploymentStatusResponse_device_status'(Rest, Bin3, TrUserData);
'e_field_fuota.GetDeploymentStatusResponse_device_status'([], Bin, _TrUserData) ->
    Bin.

'e_mfield_fuota.DeploymentDeviceLog_created_at'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Timestamp'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_fuota.DeploymentDeviceLog_fields'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_map<string,string>'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_fuota.DeploymentDeviceLog_fields'([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = 'e_mfield_fuota.DeploymentDeviceLog_fields'(
        'tr_encode_fuota.DeploymentDeviceLog.fields[x]'(Elem, TrUserData),
        Bin2,
        TrUserData
    ),
    'e_field_fuota.DeploymentDeviceLog_fields'(Rest, Bin3, TrUserData);
'e_field_fuota.DeploymentDeviceLog_fields'([], Bin, _TrUserData) ->
    Bin.

'e_mfield_fuota.GetDeploymentDeviceLogsResponse_logs'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_fuota.DeploymentDeviceLog'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_fuota.GetDeploymentDeviceLogsResponse_logs'([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = 'e_mfield_fuota.GetDeploymentDeviceLogsResponse_logs'(
        id(Elem, TrUserData),
        Bin2,
        TrUserData
    ),
    'e_field_fuota.GetDeploymentDeviceLogsResponse_logs'(Rest, Bin3, TrUserData);
'e_field_fuota.GetDeploymentDeviceLogsResponse_logs'([], Bin, _TrUserData) ->
    Bin.

'encode_msg_map<string,string>'(#'map<string,string>'{key = F1, value = F2}, Bin, TrUserData) ->
    B1 = begin
        TrF1 = id(F1, TrUserData),
        e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
    end,
    begin
        TrF2 = id(F2, TrUserData),
        e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
    end.

'e_enum_fuota.MulticastGroupType'('CLASS_B', Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_fuota.MulticastGroupType'('CLASS_C', Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_fuota.MulticastGroupType'(V, Bin, _TrUserData) -> e_varint(V, Bin).

-compile({nowarn_unused_function, e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function, e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function, e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function, e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function, e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function, e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function, e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function, e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function, e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function, e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function, e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function, e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function, e_unknown_elems/2}).
e_unknown_elems([Elem | Rest], Bin) ->
    BinR =
        case Elem of
            {varint, FNum, N} ->
                BinF = e_varint(FNum bsl 3, Bin),
                e_varint(N, BinF);
            {length_delimited, FNum, Data} ->
                BinF = e_varint(FNum bsl 3 bor 2, Bin),
                BinL = e_varint(byte_size(Data), BinF),
                <<BinL/binary, Data/binary>>;
            {group, FNum, GroupFields} ->
                Bin1 = e_varint(FNum bsl 3 bor 3, Bin),
                Bin2 = e_unknown_elems(GroupFields, Bin1),
                e_varint(FNum bsl 3 bor 4, Bin2);
            {fixed32, FNum, V} ->
                BinF = e_varint(FNum bsl 3 bor 5, Bin),
                <<BinF/binary, V:32/little>>;
            {fixed64, FNum, V} ->
                BinF = e_varint(FNum bsl 3 bor 1, Bin),
                <<BinF/binary, V:64/little>>
        end,
    e_unknown_elems(Rest, BinR);
e_unknown_elems([], Bin) ->
    Bin.

-compile({nowarn_unused_function, e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function, e_varint/2}).
e_varint(N, Bin) when N =< 127 ->
    <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) -> not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) ->
    true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
        true -> true;
        false -> string_has_chars(T)
    end;
string_has_chars(B) when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) ->
    true;
string_has_chars(<<>>) ->
    false;
string_has_chars([]) ->
    false.

decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try
        decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        Class:Reason:StackTrace ->
            error({gpb_error, {decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try
        decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        Class:Reason ->
            StackTrace = erlang:get_stacktrace(),
            error({gpb_error, {decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('fuota.DeploymentDevice', Bin, TrUserData) ->
    id('decode_msg_fuota.DeploymentDevice'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('fuota.Deployment', Bin, TrUserData) ->
    id('decode_msg_fuota.Deployment'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('fuota.CreateDeploymentRequest', Bin, TrUserData) ->
    id('decode_msg_fuota.CreateDeploymentRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('fuota.CreateDeploymentResponse', Bin, TrUserData) ->
    id('decode_msg_fuota.CreateDeploymentResponse'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('fuota.GetDeploymentStatusRequest', Bin, TrUserData) ->
    id('decode_msg_fuota.GetDeploymentStatusRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('fuota.DeploymentDeviceStatus', Bin, TrUserData) ->
    id('decode_msg_fuota.DeploymentDeviceStatus'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('fuota.GetDeploymentStatusResponse', Bin, TrUserData) ->
    id('decode_msg_fuota.GetDeploymentStatusResponse'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('fuota.GetDeploymentDeviceLogsRequest', Bin, TrUserData) ->
    id('decode_msg_fuota.GetDeploymentDeviceLogsRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('fuota.DeploymentDeviceLog', Bin, TrUserData) ->
    id('decode_msg_fuota.DeploymentDeviceLog'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('fuota.GetDeploymentDeviceLogsResponse', Bin, TrUserData) ->
    id('decode_msg_fuota.GetDeploymentDeviceLogsResponse'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('google.protobuf.Timestamp', Bin, TrUserData) ->
    id('decode_msg_google.protobuf.Timestamp'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('google.protobuf.Duration', Bin, TrUserData) ->
    id('decode_msg_google.protobuf.Duration'(Bin, TrUserData), TrUserData).

'decode_msg_fuota.DeploymentDevice'(Bin, TrUserData) ->
    'dfp_read_field_def_fuota.DeploymentDevice'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_fuota.DeploymentDevice'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'd_field_fuota.DeploymentDevice_dev_eui'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_fuota.DeploymentDevice'(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'd_field_fuota.DeploymentDevice_mc_root_key'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_fuota.DeploymentDevice'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'fuota.DeploymentDevice'{dev_eui = F@_1, mc_root_key = F@_2};
'dfp_read_field_def_fuota.DeploymentDevice'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_fuota.DeploymentDevice'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_fuota.DeploymentDevice'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_fuota.DeploymentDevice'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'dg_read_field_def_fuota.DeploymentDevice'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_fuota.DeploymentDevice_dev_eui'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 ->
            'd_field_fuota.DeploymentDevice_mc_root_key'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_fuota.DeploymentDevice'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                1 ->
                    'skip_64_fuota.DeploymentDevice'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 ->
                    'skip_length_delimited_fuota.DeploymentDevice'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                3 ->
                    'skip_group_fuota.DeploymentDevice'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                5 ->
                    'skip_32_fuota.DeploymentDevice'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_fuota.DeploymentDevice'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'fuota.DeploymentDevice'{dev_eui = F@_1, mc_root_key = F@_2}.

'd_field_fuota.DeploymentDevice_dev_eui'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_fuota.DeploymentDevice_dev_eui'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_fuota.DeploymentDevice_dev_eui'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_fuota.DeploymentDevice'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_fuota.DeploymentDevice_mc_root_key'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_fuota.DeploymentDevice_mc_root_key'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'd_field_fuota.DeploymentDevice_mc_root_key'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_fuota.DeploymentDevice'(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

'skip_varint_fuota.DeploymentDevice'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'skip_varint_fuota.DeploymentDevice'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_fuota.DeploymentDevice'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_fuota.DeploymentDevice'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_fuota.DeploymentDevice'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_fuota.DeploymentDevice'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'skip_length_delimited_fuota.DeploymentDevice'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_fuota.DeploymentDevice'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_fuota.DeploymentDevice'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_fuota.DeploymentDevice'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_fuota.DeploymentDevice'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_fuota.DeploymentDevice'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_fuota.DeploymentDevice'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_fuota.DeploymentDevice'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'decode_msg_fuota.Deployment'(Bin, TrUserData) ->
    'dfp_read_field_def_fuota.Deployment'(
        Bin,
        0,
        0,
        0,
        id(0, TrUserData),
        id([], TrUserData),
        id('CLASS_B', TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        id(undefined, TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        id(<<>>, TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_fuota.Deployment'(
    <<8, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) ->
    'd_field_fuota.Deployment_application_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    );
'dfp_read_field_def_fuota.Deployment'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) ->
    'd_field_fuota.Deployment_devices'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    );
'dfp_read_field_def_fuota.Deployment'(
    <<24, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) ->
    'd_field_fuota.Deployment_multicast_group_type'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    );
'dfp_read_field_def_fuota.Deployment'(
    <<32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) ->
    'd_field_fuota.Deployment_multicast_dr'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    );
'dfp_read_field_def_fuota.Deployment'(
    <<40, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) ->
    'd_field_fuota.Deployment_multicast_ping_slot_period'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    );
'dfp_read_field_def_fuota.Deployment'(
    <<48, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) ->
    'd_field_fuota.Deployment_multicast_frequency'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    );
'dfp_read_field_def_fuota.Deployment'(
    <<56, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) ->
    'd_field_fuota.Deployment_multicast_group_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    );
'dfp_read_field_def_fuota.Deployment'(
    <<64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) ->
    'd_field_fuota.Deployment_multicast_timeout'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    );
'dfp_read_field_def_fuota.Deployment'(
    <<74, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) ->
    'd_field_fuota.Deployment_unicast_timeout'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    );
'dfp_read_field_def_fuota.Deployment'(
    <<80, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) ->
    'd_field_fuota.Deployment_unicast_attempt_count'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    );
'dfp_read_field_def_fuota.Deployment'(
    <<88, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) ->
    'd_field_fuota.Deployment_fragmentation_fragment_size'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    );
'dfp_read_field_def_fuota.Deployment'(
    <<98, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) ->
    'd_field_fuota.Deployment_payload'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    );
'dfp_read_field_def_fuota.Deployment'(
    <<104, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) ->
    'd_field_fuota.Deployment_fragmentation_redundancy'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    );
'dfp_read_field_def_fuota.Deployment'(
    <<112, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) ->
    'd_field_fuota.Deployment_fragmentation_session_index'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    );
'dfp_read_field_def_fuota.Deployment'(
    <<120, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) ->
    'd_field_fuota.Deployment_fragmentation_matrix'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    );
'dfp_read_field_def_fuota.Deployment'(
    <<128, 1, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) ->
    'd_field_fuota.Deployment_fragmentation_block_ack_delay'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    );
'dfp_read_field_def_fuota.Deployment'(
    <<138, 1, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) ->
    'd_field_fuota.Deployment_fragmentation_descriptor'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    );
'dfp_read_field_def_fuota.Deployment'(
    <<>>,
    0,
    0,
    _,
    F@_1,
    R1,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) ->
    #'fuota.Deployment'{
        application_id = F@_1,
        devices = lists_reverse(R1, TrUserData),
        multicast_group_type = F@_3,
        multicast_dr = F@_4,
        multicast_ping_slot_period = F@_5,
        multicast_frequency = F@_6,
        multicast_group_id = F@_7,
        multicast_timeout = F@_8,
        unicast_timeout = F@_9,
        unicast_attempt_count = F@_10,
        fragmentation_fragment_size = F@_11,
        payload = F@_12,
        fragmentation_redundancy = F@_13,
        fragmentation_session_index = F@_14,
        fragmentation_matrix = F@_15,
        fragmentation_block_ack_delay = F@_16,
        fragmentation_descriptor = F@_17
    };
'dfp_read_field_def_fuota.Deployment'(
    Other,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) ->
    'dg_read_field_def_fuota.Deployment'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    ).

'dg_read_field_def_fuota.Deployment'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_fuota.Deployment'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    );
'dg_read_field_def_fuota.Deployment'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            'd_field_fuota.Deployment_application_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                TrUserData
            );
        18 ->
            'd_field_fuota.Deployment_devices'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                TrUserData
            );
        24 ->
            'd_field_fuota.Deployment_multicast_group_type'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                TrUserData
            );
        32 ->
            'd_field_fuota.Deployment_multicast_dr'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                TrUserData
            );
        40 ->
            'd_field_fuota.Deployment_multicast_ping_slot_period'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                TrUserData
            );
        48 ->
            'd_field_fuota.Deployment_multicast_frequency'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                TrUserData
            );
        56 ->
            'd_field_fuota.Deployment_multicast_group_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                TrUserData
            );
        64 ->
            'd_field_fuota.Deployment_multicast_timeout'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                TrUserData
            );
        74 ->
            'd_field_fuota.Deployment_unicast_timeout'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                TrUserData
            );
        80 ->
            'd_field_fuota.Deployment_unicast_attempt_count'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                TrUserData
            );
        88 ->
            'd_field_fuota.Deployment_fragmentation_fragment_size'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                TrUserData
            );
        98 ->
            'd_field_fuota.Deployment_payload'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                TrUserData
            );
        104 ->
            'd_field_fuota.Deployment_fragmentation_redundancy'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                TrUserData
            );
        112 ->
            'd_field_fuota.Deployment_fragmentation_session_index'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                TrUserData
            );
        120 ->
            'd_field_fuota.Deployment_fragmentation_matrix'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                TrUserData
            );
        128 ->
            'd_field_fuota.Deployment_fragmentation_block_ack_delay'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                TrUserData
            );
        138 ->
            'd_field_fuota.Deployment_fragmentation_descriptor'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                F@_11,
                F@_12,
                F@_13,
                F@_14,
                F@_15,
                F@_16,
                F@_17,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_fuota.Deployment'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        F@_11,
                        F@_12,
                        F@_13,
                        F@_14,
                        F@_15,
                        F@_16,
                        F@_17,
                        TrUserData
                    );
                1 ->
                    'skip_64_fuota.Deployment'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        F@_11,
                        F@_12,
                        F@_13,
                        F@_14,
                        F@_15,
                        F@_16,
                        F@_17,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_fuota.Deployment'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        F@_11,
                        F@_12,
                        F@_13,
                        F@_14,
                        F@_15,
                        F@_16,
                        F@_17,
                        TrUserData
                    );
                3 ->
                    'skip_group_fuota.Deployment'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        F@_11,
                        F@_12,
                        F@_13,
                        F@_14,
                        F@_15,
                        F@_16,
                        F@_17,
                        TrUserData
                    );
                5 ->
                    'skip_32_fuota.Deployment'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        F@_11,
                        F@_12,
                        F@_13,
                        F@_14,
                        F@_15,
                        F@_16,
                        F@_17,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_fuota.Deployment'(
    <<>>,
    0,
    0,
    _,
    F@_1,
    R1,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) ->
    #'fuota.Deployment'{
        application_id = F@_1,
        devices = lists_reverse(R1, TrUserData),
        multicast_group_type = F@_3,
        multicast_dr = F@_4,
        multicast_ping_slot_period = F@_5,
        multicast_frequency = F@_6,
        multicast_group_id = F@_7,
        multicast_timeout = F@_8,
        unicast_timeout = F@_9,
        unicast_attempt_count = F@_10,
        fragmentation_fragment_size = F@_11,
        payload = F@_12,
        fragmentation_redundancy = F@_13,
        fragmentation_session_index = F@_14,
        fragmentation_matrix = F@_15,
        fragmentation_block_ack_delay = F@_16,
        fragmentation_descriptor = F@_17
    }.

'd_field_fuota.Deployment_application_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) when N < 57 ->
    'd_field_fuota.Deployment_application_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    );
'd_field_fuota.Deployment_application_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) ->
    {NewFValue, RestF} =
        {begin
                <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>,
                id(Res, TrUserData)
            end,
            Rest},
    'dfp_read_field_def_fuota.Deployment'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    ).

'd_field_fuota.Deployment_devices'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) when N < 57 ->
    'd_field_fuota.Deployment_devices'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    );
'd_field_fuota.Deployment_devices'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    Prev,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_fuota.DeploymentDevice'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_fuota.Deployment'(
        RestF,
        0,
        0,
        F,
        F@_1,
        cons(NewFValue, Prev, TrUserData),
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    ).

'd_field_fuota.Deployment_multicast_group_type'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) when N < 57 ->
    'd_field_fuota.Deployment_multicast_group_type'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    );
'd_field_fuota.Deployment_multicast_group_type'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    _,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) ->
    {NewFValue, RestF} =
        {id(
                'd_enum_fuota.MulticastGroupType'(begin
                    <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>,
                    id(Res, TrUserData)
                end),
                TrUserData
            ),
            Rest},
    'dfp_read_field_def_fuota.Deployment'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        NewFValue,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    ).

'd_field_fuota.Deployment_multicast_dr'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) when N < 57 ->
    'd_field_fuota.Deployment_multicast_dr'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    );
'd_field_fuota.Deployment_multicast_dr'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    _,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_fuota.Deployment'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        NewFValue,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    ).

'd_field_fuota.Deployment_multicast_ping_slot_period'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) when N < 57 ->
    'd_field_fuota.Deployment_multicast_ping_slot_period'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    );
'd_field_fuota.Deployment_multicast_ping_slot_period'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_fuota.Deployment'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        NewFValue,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    ).

'd_field_fuota.Deployment_multicast_frequency'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) when N < 57 ->
    'd_field_fuota.Deployment_multicast_frequency'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    );
'd_field_fuota.Deployment_multicast_frequency'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    _,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_fuota.Deployment'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        NewFValue,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    ).

'd_field_fuota.Deployment_multicast_group_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) when N < 57 ->
    'd_field_fuota.Deployment_multicast_group_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    );
'd_field_fuota.Deployment_multicast_group_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    _,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_fuota.Deployment'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        NewFValue,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    ).

'd_field_fuota.Deployment_multicast_timeout'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) when N < 57 ->
    'd_field_fuota.Deployment_multicast_timeout'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    );
'd_field_fuota.Deployment_multicast_timeout'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    _,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_fuota.Deployment'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        NewFValue,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    ).

'd_field_fuota.Deployment_unicast_timeout'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) when N < 57 ->
    'd_field_fuota.Deployment_unicast_timeout'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    );
'd_field_fuota.Deployment_unicast_timeout'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    Prev,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Duration'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_fuota.Deployment'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Duration'(Prev, NewFValue, TrUserData)
        end,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    ).

'd_field_fuota.Deployment_unicast_attempt_count'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) when N < 57 ->
    'd_field_fuota.Deployment_unicast_attempt_count'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    );
'd_field_fuota.Deployment_unicast_attempt_count'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    _,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_fuota.Deployment'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        NewFValue,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    ).

'd_field_fuota.Deployment_fragmentation_fragment_size'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) when N < 57 ->
    'd_field_fuota.Deployment_fragmentation_fragment_size'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    );
'd_field_fuota.Deployment_fragmentation_fragment_size'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    _,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_fuota.Deployment'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        NewFValue,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    ).

'd_field_fuota.Deployment_payload'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) when N < 57 ->
    'd_field_fuota.Deployment_payload'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    );
'd_field_fuota.Deployment_payload'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    _,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_fuota.Deployment'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        NewFValue,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    ).

'd_field_fuota.Deployment_fragmentation_redundancy'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) when N < 57 ->
    'd_field_fuota.Deployment_fragmentation_redundancy'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    );
'd_field_fuota.Deployment_fragmentation_redundancy'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    _,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_fuota.Deployment'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        NewFValue,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    ).

'd_field_fuota.Deployment_fragmentation_session_index'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) when N < 57 ->
    'd_field_fuota.Deployment_fragmentation_session_index'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    );
'd_field_fuota.Deployment_fragmentation_session_index'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    _,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_fuota.Deployment'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        NewFValue,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    ).

'd_field_fuota.Deployment_fragmentation_matrix'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) when N < 57 ->
    'd_field_fuota.Deployment_fragmentation_matrix'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    );
'd_field_fuota.Deployment_fragmentation_matrix'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    _,
    F@_16,
    F@_17,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_fuota.Deployment'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        NewFValue,
        F@_16,
        F@_17,
        TrUserData
    ).

'd_field_fuota.Deployment_fragmentation_block_ack_delay'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) when N < 57 ->
    'd_field_fuota.Deployment_fragmentation_block_ack_delay'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    );
'd_field_fuota.Deployment_fragmentation_block_ack_delay'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    _,
    F@_17,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_fuota.Deployment'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        NewFValue,
        F@_17,
        TrUserData
    ).

'd_field_fuota.Deployment_fragmentation_descriptor'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) when N < 57 ->
    'd_field_fuota.Deployment_fragmentation_descriptor'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    );
'd_field_fuota.Deployment_fragmentation_descriptor'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_fuota.Deployment'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        NewFValue,
        TrUserData
    ).

'skip_varint_fuota.Deployment'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) ->
    'skip_varint_fuota.Deployment'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    );
'skip_varint_fuota.Deployment'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) ->
    'dfp_read_field_def_fuota.Deployment'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    ).

'skip_length_delimited_fuota.Deployment'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_fuota.Deployment'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    );
'skip_length_delimited_fuota.Deployment'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_fuota.Deployment'(
        Rest2,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    ).

'skip_group_fuota.Deployment'(
    Bin,
    _,
    Z2,
    FNum,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_fuota.Deployment'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    ).

'skip_32_fuota.Deployment'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) ->
    'dfp_read_field_def_fuota.Deployment'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    ).

'skip_64_fuota.Deployment'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    F@_11,
    F@_12,
    F@_13,
    F@_14,
    F@_15,
    F@_16,
    F@_17,
    TrUserData
) ->
    'dfp_read_field_def_fuota.Deployment'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        F@_11,
        F@_12,
        F@_13,
        F@_14,
        F@_15,
        F@_16,
        F@_17,
        TrUserData
    ).

'decode_msg_fuota.CreateDeploymentRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_fuota.CreateDeploymentRequest'(
        Bin,
        0,
        0,
        0,
        id(undefined, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_fuota.CreateDeploymentRequest'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'd_field_fuota.CreateDeploymentRequest_deployment'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_fuota.CreateDeploymentRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'fuota.CreateDeploymentRequest'{deployment = F@_1};
'dfp_read_field_def_fuota.CreateDeploymentRequest'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_fuota.CreateDeploymentRequest'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_fuota.CreateDeploymentRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_fuota.CreateDeploymentRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'dg_read_field_def_fuota.CreateDeploymentRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_fuota.CreateDeploymentRequest_deployment'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_fuota.CreateDeploymentRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_fuota.CreateDeploymentRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_fuota.CreateDeploymentRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_fuota.CreateDeploymentRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_fuota.CreateDeploymentRequest'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
'dg_read_field_def_fuota.CreateDeploymentRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'fuota.CreateDeploymentRequest'{deployment = F@_1}.

'd_field_fuota.CreateDeploymentRequest_deployment'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_fuota.CreateDeploymentRequest_deployment'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'd_field_fuota.CreateDeploymentRequest_deployment'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_fuota.Deployment'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_fuota.CreateDeploymentRequest'(
        RestF,
        0,
        0,
        F,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_fuota.Deployment'(Prev, NewFValue, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_fuota.CreateDeploymentRequest'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'skip_varint_fuota.CreateDeploymentRequest'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_fuota.CreateDeploymentRequest'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_fuota.CreateDeploymentRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_fuota.CreateDeploymentRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_fuota.CreateDeploymentRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_fuota.CreateDeploymentRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_fuota.CreateDeploymentRequest'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_fuota.CreateDeploymentRequest'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_fuota.CreateDeploymentRequest'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_fuota.CreateDeploymentRequest'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_fuota.CreateDeploymentRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_fuota.CreateDeploymentRequest'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_fuota.CreateDeploymentRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_fuota.CreateDeploymentResponse'(Bin, TrUserData) ->
    'dfp_read_field_def_fuota.CreateDeploymentResponse'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_fuota.CreateDeploymentResponse'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'd_field_fuota.CreateDeploymentResponse_id'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_fuota.CreateDeploymentResponse'(<<>>, 0, 0, _, F@_1, _) ->
    #'fuota.CreateDeploymentResponse'{id = F@_1};
'dfp_read_field_def_fuota.CreateDeploymentResponse'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_fuota.CreateDeploymentResponse'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_fuota.CreateDeploymentResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_fuota.CreateDeploymentResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'dg_read_field_def_fuota.CreateDeploymentResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_fuota.CreateDeploymentResponse_id'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_fuota.CreateDeploymentResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_fuota.CreateDeploymentResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_fuota.CreateDeploymentResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_fuota.CreateDeploymentResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_fuota.CreateDeploymentResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_fuota.CreateDeploymentResponse'(<<>>, 0, 0, _, F@_1, _) ->
    #'fuota.CreateDeploymentResponse'{id = F@_1}.

'd_field_fuota.CreateDeploymentResponse_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_fuota.CreateDeploymentResponse_id'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'd_field_fuota.CreateDeploymentResponse_id'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_fuota.CreateDeploymentResponse'(RestF, 0, 0, F, NewFValue, TrUserData).

'skip_varint_fuota.CreateDeploymentResponse'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'skip_varint_fuota.CreateDeploymentResponse'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_fuota.CreateDeploymentResponse'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_fuota.CreateDeploymentResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_fuota.CreateDeploymentResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_fuota.CreateDeploymentResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_fuota.CreateDeploymentResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_fuota.CreateDeploymentResponse'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_fuota.CreateDeploymentResponse'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_fuota.CreateDeploymentResponse'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_fuota.CreateDeploymentResponse'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_fuota.CreateDeploymentResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_fuota.CreateDeploymentResponse'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_fuota.CreateDeploymentResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_fuota.GetDeploymentStatusRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_fuota.GetDeploymentStatusRequest'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_fuota.GetDeploymentStatusRequest'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'd_field_fuota.GetDeploymentStatusRequest_id'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_fuota.GetDeploymentStatusRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'fuota.GetDeploymentStatusRequest'{id = F@_1};
'dfp_read_field_def_fuota.GetDeploymentStatusRequest'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_fuota.GetDeploymentStatusRequest'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_fuota.GetDeploymentStatusRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_fuota.GetDeploymentStatusRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'dg_read_field_def_fuota.GetDeploymentStatusRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_fuota.GetDeploymentStatusRequest_id'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_fuota.GetDeploymentStatusRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_fuota.GetDeploymentStatusRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_fuota.GetDeploymentStatusRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_fuota.GetDeploymentStatusRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_fuota.GetDeploymentStatusRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_fuota.GetDeploymentStatusRequest'(<<>>, 0, 0, _, F@_1, _) ->
    #'fuota.GetDeploymentStatusRequest'{id = F@_1}.

'd_field_fuota.GetDeploymentStatusRequest_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_fuota.GetDeploymentStatusRequest_id'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'd_field_fuota.GetDeploymentStatusRequest_id'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_fuota.GetDeploymentStatusRequest'(RestF, 0, 0, F, NewFValue, TrUserData).

'skip_varint_fuota.GetDeploymentStatusRequest'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'skip_varint_fuota.GetDeploymentStatusRequest'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_fuota.GetDeploymentStatusRequest'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_fuota.GetDeploymentStatusRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_fuota.GetDeploymentStatusRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_fuota.GetDeploymentStatusRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_fuota.GetDeploymentStatusRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_fuota.GetDeploymentStatusRequest'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_fuota.GetDeploymentStatusRequest'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_fuota.GetDeploymentStatusRequest'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_fuota.GetDeploymentStatusRequest'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_fuota.GetDeploymentStatusRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_fuota.GetDeploymentStatusRequest'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_fuota.GetDeploymentStatusRequest'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_fuota.DeploymentDeviceStatus'(Bin, TrUserData) ->
    'dfp_read_field_def_fuota.DeploymentDeviceStatus'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_fuota.DeploymentDeviceStatus'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    'd_field_fuota.DeploymentDeviceStatus_dev_eui'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
'dfp_read_field_def_fuota.DeploymentDeviceStatus'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    'd_field_fuota.DeploymentDeviceStatus_created_at'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
'dfp_read_field_def_fuota.DeploymentDeviceStatus'(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    'd_field_fuota.DeploymentDeviceStatus_updated_at'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
'dfp_read_field_def_fuota.DeploymentDeviceStatus'(
    <<34, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    'd_field_fuota.DeploymentDeviceStatus_mc_group_setup_completed_at'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
'dfp_read_field_def_fuota.DeploymentDeviceStatus'(
    <<42, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    'd_field_fuota.DeploymentDeviceStatus_mc_session_completed_at'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
'dfp_read_field_def_fuota.DeploymentDeviceStatus'(
    <<50, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    'd_field_fuota.DeploymentDeviceStatus_frag_session_setup_completed_at'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
'dfp_read_field_def_fuota.DeploymentDeviceStatus'(
    <<58, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    'd_field_fuota.DeploymentDeviceStatus_frag_status_completed_at'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
'dfp_read_field_def_fuota.DeploymentDeviceStatus'(
    <<>>,
    0,
    0,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    _
) ->
    #'fuota.DeploymentDeviceStatus'{
        dev_eui = F@_1,
        created_at = F@_2,
        updated_at = F@_3,
        mc_group_setup_completed_at = F@_4,
        mc_session_completed_at = F@_5,
        frag_session_setup_completed_at = F@_6,
        frag_status_completed_at = F@_7
    };
'dfp_read_field_def_fuota.DeploymentDeviceStatus'(
    Other,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    'dg_read_field_def_fuota.DeploymentDeviceStatus'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

'dg_read_field_def_fuota.DeploymentDeviceStatus'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_fuota.DeploymentDeviceStatus'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
'dg_read_field_def_fuota.DeploymentDeviceStatus'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_fuota.DeploymentDeviceStatus_dev_eui'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                TrUserData
            );
        18 ->
            'd_field_fuota.DeploymentDeviceStatus_created_at'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                TrUserData
            );
        26 ->
            'd_field_fuota.DeploymentDeviceStatus_updated_at'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                TrUserData
            );
        34 ->
            'd_field_fuota.DeploymentDeviceStatus_mc_group_setup_completed_at'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                TrUserData
            );
        42 ->
            'd_field_fuota.DeploymentDeviceStatus_mc_session_completed_at'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                TrUserData
            );
        50 ->
            'd_field_fuota.DeploymentDeviceStatus_frag_session_setup_completed_at'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                TrUserData
            );
        58 ->
            'd_field_fuota.DeploymentDeviceStatus_frag_status_completed_at'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_fuota.DeploymentDeviceStatus'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        TrUserData
                    );
                1 ->
                    'skip_64_fuota.DeploymentDeviceStatus'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_fuota.DeploymentDeviceStatus'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        TrUserData
                    );
                3 ->
                    'skip_group_fuota.DeploymentDeviceStatus'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        TrUserData
                    );
                5 ->
                    'skip_32_fuota.DeploymentDeviceStatus'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_fuota.DeploymentDeviceStatus'(
    <<>>,
    0,
    0,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    _
) ->
    #'fuota.DeploymentDeviceStatus'{
        dev_eui = F@_1,
        created_at = F@_2,
        updated_at = F@_3,
        mc_group_setup_completed_at = F@_4,
        mc_session_completed_at = F@_5,
        frag_session_setup_completed_at = F@_6,
        frag_status_completed_at = F@_7
    }.

'd_field_fuota.DeploymentDeviceStatus_dev_eui'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) when N < 57 ->
    'd_field_fuota.DeploymentDeviceStatus_dev_eui'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
'd_field_fuota.DeploymentDeviceStatus_dev_eui'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_fuota.DeploymentDeviceStatus'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

'd_field_fuota.DeploymentDeviceStatus_created_at'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) when N < 57 ->
    'd_field_fuota.DeploymentDeviceStatus_created_at'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
'd_field_fuota.DeploymentDeviceStatus_created_at'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    Prev,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Timestamp'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_fuota.DeploymentDeviceStatus'(
        RestF,
        0,
        0,
        F,
        F@_1,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Timestamp'(Prev, NewFValue, TrUserData)
        end,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

'd_field_fuota.DeploymentDeviceStatus_updated_at'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) when N < 57 ->
    'd_field_fuota.DeploymentDeviceStatus_updated_at'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
'd_field_fuota.DeploymentDeviceStatus_updated_at'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    Prev,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Timestamp'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_fuota.DeploymentDeviceStatus'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Timestamp'(Prev, NewFValue, TrUserData)
        end,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

'd_field_fuota.DeploymentDeviceStatus_mc_group_setup_completed_at'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) when N < 57 ->
    'd_field_fuota.DeploymentDeviceStatus_mc_group_setup_completed_at'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
'd_field_fuota.DeploymentDeviceStatus_mc_group_setup_completed_at'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    Prev,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Timestamp'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_fuota.DeploymentDeviceStatus'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Timestamp'(Prev, NewFValue, TrUserData)
        end,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

'd_field_fuota.DeploymentDeviceStatus_mc_session_completed_at'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) when N < 57 ->
    'd_field_fuota.DeploymentDeviceStatus_mc_session_completed_at'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
'd_field_fuota.DeploymentDeviceStatus_mc_session_completed_at'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    Prev,
    F@_6,
    F@_7,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Timestamp'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_fuota.DeploymentDeviceStatus'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Timestamp'(Prev, NewFValue, TrUserData)
        end,
        F@_6,
        F@_7,
        TrUserData
    ).

'd_field_fuota.DeploymentDeviceStatus_frag_session_setup_completed_at'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) when N < 57 ->
    'd_field_fuota.DeploymentDeviceStatus_frag_session_setup_completed_at'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
'd_field_fuota.DeploymentDeviceStatus_frag_session_setup_completed_at'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    Prev,
    F@_7,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Timestamp'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_fuota.DeploymentDeviceStatus'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Timestamp'(Prev, NewFValue, TrUserData)
        end,
        F@_7,
        TrUserData
    ).

'd_field_fuota.DeploymentDeviceStatus_frag_status_completed_at'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) when N < 57 ->
    'd_field_fuota.DeploymentDeviceStatus_frag_status_completed_at'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
'd_field_fuota.DeploymentDeviceStatus_frag_status_completed_at'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Timestamp'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_fuota.DeploymentDeviceStatus'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Timestamp'(Prev, NewFValue, TrUserData)
        end,
        TrUserData
    ).

'skip_varint_fuota.DeploymentDeviceStatus'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    'skip_varint_fuota.DeploymentDeviceStatus'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
'skip_varint_fuota.DeploymentDeviceStatus'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    'dfp_read_field_def_fuota.DeploymentDeviceStatus'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

'skip_length_delimited_fuota.DeploymentDeviceStatus'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_fuota.DeploymentDeviceStatus'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
'skip_length_delimited_fuota.DeploymentDeviceStatus'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_fuota.DeploymentDeviceStatus'(
        Rest2,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

'skip_group_fuota.DeploymentDeviceStatus'(
    Bin,
    _,
    Z2,
    FNum,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_fuota.DeploymentDeviceStatus'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

'skip_32_fuota.DeploymentDeviceStatus'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    'dfp_read_field_def_fuota.DeploymentDeviceStatus'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

'skip_64_fuota.DeploymentDeviceStatus'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    'dfp_read_field_def_fuota.DeploymentDeviceStatus'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

'decode_msg_fuota.GetDeploymentStatusResponse'(Bin, TrUserData) ->
    'dfp_read_field_def_fuota.GetDeploymentStatusResponse'(
        Bin,
        0,
        0,
        0,
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        id([], TrUserData),
        TrUserData
    ).

'dfp_read_field_def_fuota.GetDeploymentStatusResponse'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    'd_field_fuota.GetDeploymentStatusResponse_created_at'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
'dfp_read_field_def_fuota.GetDeploymentStatusResponse'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    'd_field_fuota.GetDeploymentStatusResponse_updated_at'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
'dfp_read_field_def_fuota.GetDeploymentStatusResponse'(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    'd_field_fuota.GetDeploymentStatusResponse_mc_group_setup_completed_at'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
'dfp_read_field_def_fuota.GetDeploymentStatusResponse'(
    <<34, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    'd_field_fuota.GetDeploymentStatusResponse_mc_session_completed_at'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
'dfp_read_field_def_fuota.GetDeploymentStatusResponse'(
    <<42, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    'd_field_fuota.GetDeploymentStatusResponse_frag_session_setup_completed_at'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
'dfp_read_field_def_fuota.GetDeploymentStatusResponse'(
    <<50, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    'd_field_fuota.GetDeploymentStatusResponse_enqueue_completed_at'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
'dfp_read_field_def_fuota.GetDeploymentStatusResponse'(
    <<58, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    'd_field_fuota.GetDeploymentStatusResponse_frag_status_completed_at'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
'dfp_read_field_def_fuota.GetDeploymentStatusResponse'(
    <<66, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    'd_field_fuota.GetDeploymentStatusResponse_device_status'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
'dfp_read_field_def_fuota.GetDeploymentStatusResponse'(
    <<>>,
    0,
    0,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    R1,
    TrUserData
) ->
    #'fuota.GetDeploymentStatusResponse'{
        created_at = F@_1,
        updated_at = F@_2,
        mc_group_setup_completed_at = F@_3,
        mc_session_completed_at = F@_4,
        frag_session_setup_completed_at = F@_5,
        enqueue_completed_at = F@_6,
        frag_status_completed_at = F@_7,
        device_status = lists_reverse(R1, TrUserData)
    };
'dfp_read_field_def_fuota.GetDeploymentStatusResponse'(
    Other,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    'dg_read_field_def_fuota.GetDeploymentStatusResponse'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    ).

'dg_read_field_def_fuota.GetDeploymentStatusResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_fuota.GetDeploymentStatusResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
'dg_read_field_def_fuota.GetDeploymentStatusResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_fuota.GetDeploymentStatusResponse_created_at'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                TrUserData
            );
        18 ->
            'd_field_fuota.GetDeploymentStatusResponse_updated_at'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                TrUserData
            );
        26 ->
            'd_field_fuota.GetDeploymentStatusResponse_mc_group_setup_completed_at'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                TrUserData
            );
        34 ->
            'd_field_fuota.GetDeploymentStatusResponse_mc_session_completed_at'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                TrUserData
            );
        42 ->
            'd_field_fuota.GetDeploymentStatusResponse_frag_session_setup_completed_at'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                TrUserData
            );
        50 ->
            'd_field_fuota.GetDeploymentStatusResponse_enqueue_completed_at'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                TrUserData
            );
        58 ->
            'd_field_fuota.GetDeploymentStatusResponse_frag_status_completed_at'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                TrUserData
            );
        66 ->
            'd_field_fuota.GetDeploymentStatusResponse_device_status'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_fuota.GetDeploymentStatusResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        TrUserData
                    );
                1 ->
                    'skip_64_fuota.GetDeploymentStatusResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_fuota.GetDeploymentStatusResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        TrUserData
                    );
                3 ->
                    'skip_group_fuota.GetDeploymentStatusResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        TrUserData
                    );
                5 ->
                    'skip_32_fuota.GetDeploymentStatusResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_fuota.GetDeploymentStatusResponse'(
    <<>>,
    0,
    0,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    R1,
    TrUserData
) ->
    #'fuota.GetDeploymentStatusResponse'{
        created_at = F@_1,
        updated_at = F@_2,
        mc_group_setup_completed_at = F@_3,
        mc_session_completed_at = F@_4,
        frag_session_setup_completed_at = F@_5,
        enqueue_completed_at = F@_6,
        frag_status_completed_at = F@_7,
        device_status = lists_reverse(R1, TrUserData)
    }.

'd_field_fuota.GetDeploymentStatusResponse_created_at'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) when N < 57 ->
    'd_field_fuota.GetDeploymentStatusResponse_created_at'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
'd_field_fuota.GetDeploymentStatusResponse_created_at'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    Prev,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Timestamp'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_fuota.GetDeploymentStatusResponse'(
        RestF,
        0,
        0,
        F,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Timestamp'(Prev, NewFValue, TrUserData)
        end,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    ).

'd_field_fuota.GetDeploymentStatusResponse_updated_at'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) when N < 57 ->
    'd_field_fuota.GetDeploymentStatusResponse_updated_at'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
'd_field_fuota.GetDeploymentStatusResponse_updated_at'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    Prev,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Timestamp'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_fuota.GetDeploymentStatusResponse'(
        RestF,
        0,
        0,
        F,
        F@_1,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Timestamp'(Prev, NewFValue, TrUserData)
        end,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    ).

'd_field_fuota.GetDeploymentStatusResponse_mc_group_setup_completed_at'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) when N < 57 ->
    'd_field_fuota.GetDeploymentStatusResponse_mc_group_setup_completed_at'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
'd_field_fuota.GetDeploymentStatusResponse_mc_group_setup_completed_at'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    Prev,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Timestamp'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_fuota.GetDeploymentStatusResponse'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Timestamp'(Prev, NewFValue, TrUserData)
        end,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    ).

'd_field_fuota.GetDeploymentStatusResponse_mc_session_completed_at'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) when N < 57 ->
    'd_field_fuota.GetDeploymentStatusResponse_mc_session_completed_at'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
'd_field_fuota.GetDeploymentStatusResponse_mc_session_completed_at'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    Prev,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Timestamp'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_fuota.GetDeploymentStatusResponse'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Timestamp'(Prev, NewFValue, TrUserData)
        end,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    ).

'd_field_fuota.GetDeploymentStatusResponse_frag_session_setup_completed_at'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) when N < 57 ->
    'd_field_fuota.GetDeploymentStatusResponse_frag_session_setup_completed_at'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
'd_field_fuota.GetDeploymentStatusResponse_frag_session_setup_completed_at'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    Prev,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Timestamp'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_fuota.GetDeploymentStatusResponse'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Timestamp'(Prev, NewFValue, TrUserData)
        end,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    ).

'd_field_fuota.GetDeploymentStatusResponse_enqueue_completed_at'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) when N < 57 ->
    'd_field_fuota.GetDeploymentStatusResponse_enqueue_completed_at'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
'd_field_fuota.GetDeploymentStatusResponse_enqueue_completed_at'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    Prev,
    F@_7,
    F@_8,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Timestamp'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_fuota.GetDeploymentStatusResponse'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Timestamp'(Prev, NewFValue, TrUserData)
        end,
        F@_7,
        F@_8,
        TrUserData
    ).

'd_field_fuota.GetDeploymentStatusResponse_frag_status_completed_at'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) when N < 57 ->
    'd_field_fuota.GetDeploymentStatusResponse_frag_status_completed_at'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
'd_field_fuota.GetDeploymentStatusResponse_frag_status_completed_at'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    Prev,
    F@_8,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Timestamp'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_fuota.GetDeploymentStatusResponse'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Timestamp'(Prev, NewFValue, TrUserData)
        end,
        F@_8,
        TrUserData
    ).

'd_field_fuota.GetDeploymentStatusResponse_device_status'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) when N < 57 ->
    'd_field_fuota.GetDeploymentStatusResponse_device_status'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
'd_field_fuota.GetDeploymentStatusResponse_device_status'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_fuota.DeploymentDeviceStatus'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_fuota.GetDeploymentStatusResponse'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        cons(NewFValue, Prev, TrUserData),
        TrUserData
    ).

'skip_varint_fuota.GetDeploymentStatusResponse'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    'skip_varint_fuota.GetDeploymentStatusResponse'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
'skip_varint_fuota.GetDeploymentStatusResponse'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    'dfp_read_field_def_fuota.GetDeploymentStatusResponse'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    ).

'skip_length_delimited_fuota.GetDeploymentStatusResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_fuota.GetDeploymentStatusResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    );
'skip_length_delimited_fuota.GetDeploymentStatusResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_fuota.GetDeploymentStatusResponse'(
        Rest2,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    ).

'skip_group_fuota.GetDeploymentStatusResponse'(
    Bin,
    _,
    Z2,
    FNum,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_fuota.GetDeploymentStatusResponse'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    ).

'skip_32_fuota.GetDeploymentStatusResponse'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    'dfp_read_field_def_fuota.GetDeploymentStatusResponse'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    ).

'skip_64_fuota.GetDeploymentStatusResponse'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    TrUserData
) ->
    'dfp_read_field_def_fuota.GetDeploymentStatusResponse'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        TrUserData
    ).

'decode_msg_fuota.GetDeploymentDeviceLogsRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_fuota.GetDeploymentDeviceLogsRequest'(
        Bin,
        0,
        0,
        0,
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_fuota.GetDeploymentDeviceLogsRequest'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'd_field_fuota.GetDeploymentDeviceLogsRequest_deployment_id'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'dfp_read_field_def_fuota.GetDeploymentDeviceLogsRequest'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'd_field_fuota.GetDeploymentDeviceLogsRequest_dev_eui'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_fuota.GetDeploymentDeviceLogsRequest'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'fuota.GetDeploymentDeviceLogsRequest'{deployment_id = F@_1, dev_eui = F@_2};
'dfp_read_field_def_fuota.GetDeploymentDeviceLogsRequest'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_fuota.GetDeploymentDeviceLogsRequest'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        TrUserData
    ).

'dg_read_field_def_fuota.GetDeploymentDeviceLogsRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_fuota.GetDeploymentDeviceLogsRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'dg_read_field_def_fuota.GetDeploymentDeviceLogsRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_fuota.GetDeploymentDeviceLogsRequest_deployment_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                TrUserData
            );
        18 ->
            'd_field_fuota.GetDeploymentDeviceLogsRequest_dev_eui'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_fuota.GetDeploymentDeviceLogsRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                1 ->
                    'skip_64_fuota.GetDeploymentDeviceLogsRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_fuota.GetDeploymentDeviceLogsRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                3 ->
                    'skip_group_fuota.GetDeploymentDeviceLogsRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                5 ->
                    'skip_32_fuota.GetDeploymentDeviceLogsRequest'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_fuota.GetDeploymentDeviceLogsRequest'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'fuota.GetDeploymentDeviceLogsRequest'{deployment_id = F@_1, dev_eui = F@_2}.

'd_field_fuota.GetDeploymentDeviceLogsRequest_deployment_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_fuota.GetDeploymentDeviceLogsRequest_deployment_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'd_field_fuota.GetDeploymentDeviceLogsRequest_deployment_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_fuota.GetDeploymentDeviceLogsRequest'(
        RestF,
        0,
        0,
        F,
        NewFValue,
        F@_2,
        TrUserData
    ).

'd_field_fuota.GetDeploymentDeviceLogsRequest_dev_eui'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_fuota.GetDeploymentDeviceLogsRequest_dev_eui'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'd_field_fuota.GetDeploymentDeviceLogsRequest_dev_eui'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_fuota.GetDeploymentDeviceLogsRequest'(
        RestF,
        0,
        0,
        F,
        F@_1,
        NewFValue,
        TrUserData
    ).

'skip_varint_fuota.GetDeploymentDeviceLogsRequest'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'skip_varint_fuota.GetDeploymentDeviceLogsRequest'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_fuota.GetDeploymentDeviceLogsRequest'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'dfp_read_field_def_fuota.GetDeploymentDeviceLogsRequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        TrUserData
    ).

'skip_length_delimited_fuota.GetDeploymentDeviceLogsRequest'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_fuota.GetDeploymentDeviceLogsRequest'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'skip_length_delimited_fuota.GetDeploymentDeviceLogsRequest'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_fuota.GetDeploymentDeviceLogsRequest'(
        Rest2,
        0,
        0,
        F,
        F@_1,
        F@_2,
        TrUserData
    ).

'skip_group_fuota.GetDeploymentDeviceLogsRequest'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_fuota.GetDeploymentDeviceLogsRequest'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        TrUserData
    ).

'skip_32_fuota.GetDeploymentDeviceLogsRequest'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'dfp_read_field_def_fuota.GetDeploymentDeviceLogsRequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        TrUserData
    ).

'skip_64_fuota.GetDeploymentDeviceLogsRequest'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'dfp_read_field_def_fuota.GetDeploymentDeviceLogsRequest'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        TrUserData
    ).

'decode_msg_fuota.DeploymentDeviceLog'(Bin, TrUserData) ->
    'dfp_read_field_def_fuota.DeploymentDeviceLog'(
        Bin,
        0,
        0,
        0,
        id(undefined, TrUserData),
        id(0, TrUserData),
        id([], TrUserData),
        'tr_decode_init_default_fuota.DeploymentDeviceLog.fields'([], TrUserData),
        TrUserData
    ).

'dfp_read_field_def_fuota.DeploymentDeviceLog'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'd_field_fuota.DeploymentDeviceLog_created_at'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'dfp_read_field_def_fuota.DeploymentDeviceLog'(
    <<16, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'd_field_fuota.DeploymentDeviceLog_f_port'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'dfp_read_field_def_fuota.DeploymentDeviceLog'(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'd_field_fuota.DeploymentDeviceLog_command'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'dfp_read_field_def_fuota.DeploymentDeviceLog'(
    <<34, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'd_field_fuota.DeploymentDeviceLog_fields'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'dfp_read_field_def_fuota.DeploymentDeviceLog'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, R1, TrUserData) ->
    #'fuota.DeploymentDeviceLog'{
        created_at = F@_1,
        f_port = F@_2,
        command = F@_3,
        fields = 'tr_decode_repeated_finalize_fuota.DeploymentDeviceLog.fields'(R1, TrUserData)
    };
'dfp_read_field_def_fuota.DeploymentDeviceLog'(
    Other,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'dg_read_field_def_fuota.DeploymentDeviceLog'(
        Other,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

'dg_read_field_def_fuota.DeploymentDeviceLog'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_fuota.DeploymentDeviceLog'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'dg_read_field_def_fuota.DeploymentDeviceLog'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_fuota.DeploymentDeviceLog_created_at'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        16 ->
            'd_field_fuota.DeploymentDeviceLog_f_port'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        26 ->
            'd_field_fuota.DeploymentDeviceLog_command'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        34 ->
            'd_field_fuota.DeploymentDeviceLog_fields'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_fuota.DeploymentDeviceLog'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                1 ->
                    'skip_64_fuota.DeploymentDeviceLog'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_fuota.DeploymentDeviceLog'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                3 ->
                    'skip_group_fuota.DeploymentDeviceLog'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                5 ->
                    'skip_32_fuota.DeploymentDeviceLog'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_fuota.DeploymentDeviceLog'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, R1, TrUserData) ->
    #'fuota.DeploymentDeviceLog'{
        created_at = F@_1,
        f_port = F@_2,
        command = F@_3,
        fields = 'tr_decode_repeated_finalize_fuota.DeploymentDeviceLog.fields'(R1, TrUserData)
    }.

'd_field_fuota.DeploymentDeviceLog_created_at'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    'd_field_fuota.DeploymentDeviceLog_created_at'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'd_field_fuota.DeploymentDeviceLog_created_at'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    Prev,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Timestamp'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_fuota.DeploymentDeviceLog'(
        RestF,
        0,
        0,
        F,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Timestamp'(Prev, NewFValue, TrUserData)
        end,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

'd_field_fuota.DeploymentDeviceLog_f_port'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    'd_field_fuota.DeploymentDeviceLog_f_port'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'd_field_fuota.DeploymentDeviceLog_f_port'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    F@_3,
    F@_4,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_fuota.DeploymentDeviceLog'(
        RestF,
        0,
        0,
        F,
        F@_1,
        NewFValue,
        F@_3,
        F@_4,
        TrUserData
    ).

'd_field_fuota.DeploymentDeviceLog_command'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    'd_field_fuota.DeploymentDeviceLog_command'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'd_field_fuota.DeploymentDeviceLog_command'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    _,
    F@_4,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Utf8:Len/binary, Rest2/binary>> = Rest,
        {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2}
    end,
    'dfp_read_field_def_fuota.DeploymentDeviceLog'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        NewFValue,
        F@_4,
        TrUserData
    ).

'd_field_fuota.DeploymentDeviceLog_fields'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    'd_field_fuota.DeploymentDeviceLog_fields'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'd_field_fuota.DeploymentDeviceLog_fields'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_map<string,string>'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_fuota.DeploymentDeviceLog'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        'tr_decode_repeated_add_elem_fuota.DeploymentDeviceLog.fields'(NewFValue, Prev, TrUserData),
        TrUserData
    ).

'skip_varint_fuota.DeploymentDeviceLog'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'skip_varint_fuota.DeploymentDeviceLog'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'skip_varint_fuota.DeploymentDeviceLog'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'dfp_read_field_def_fuota.DeploymentDeviceLog'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

'skip_length_delimited_fuota.DeploymentDeviceLog'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_fuota.DeploymentDeviceLog'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
'skip_length_delimited_fuota.DeploymentDeviceLog'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_fuota.DeploymentDeviceLog'(
        Rest2,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

'skip_group_fuota.DeploymentDeviceLog'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_fuota.DeploymentDeviceLog'(
        Rest,
        0,
        Z2,
        FNum,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

'skip_32_fuota.DeploymentDeviceLog'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'dfp_read_field_def_fuota.DeploymentDeviceLog'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

'skip_64_fuota.DeploymentDeviceLog'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    'dfp_read_field_def_fuota.DeploymentDeviceLog'(
        Rest,
        Z1,
        Z2,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

'decode_msg_fuota.GetDeploymentDeviceLogsResponse'(Bin, TrUserData) ->
    'dfp_read_field_def_fuota.GetDeploymentDeviceLogsResponse'(
        Bin,
        0,
        0,
        0,
        id([], TrUserData),
        TrUserData
    ).

'dfp_read_field_def_fuota.GetDeploymentDeviceLogsResponse'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'd_field_fuota.GetDeploymentDeviceLogsResponse_logs'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_fuota.GetDeploymentDeviceLogsResponse'(<<>>, 0, 0, _, R1, TrUserData) ->
    #'fuota.GetDeploymentDeviceLogsResponse'{logs = lists_reverse(R1, TrUserData)};
'dfp_read_field_def_fuota.GetDeploymentDeviceLogsResponse'(Other, Z1, Z2, F, F@_1, TrUserData) ->
    'dg_read_field_def_fuota.GetDeploymentDeviceLogsResponse'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_fuota.GetDeploymentDeviceLogsResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_fuota.GetDeploymentDeviceLogsResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'dg_read_field_def_fuota.GetDeploymentDeviceLogsResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_fuota.GetDeploymentDeviceLogsResponse_logs'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_fuota.GetDeploymentDeviceLogsResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    'skip_64_fuota.GetDeploymentDeviceLogsResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_fuota.GetDeploymentDeviceLogsResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    'skip_group_fuota.GetDeploymentDeviceLogsResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    'skip_32_fuota.GetDeploymentDeviceLogsResponse'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_fuota.GetDeploymentDeviceLogsResponse'(<<>>, 0, 0, _, R1, TrUserData) ->
    #'fuota.GetDeploymentDeviceLogsResponse'{logs = lists_reverse(R1, TrUserData)}.

'd_field_fuota.GetDeploymentDeviceLogsResponse_logs'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'd_field_fuota.GetDeploymentDeviceLogsResponse_logs'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'd_field_fuota.GetDeploymentDeviceLogsResponse_logs'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_fuota.DeploymentDeviceLog'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_fuota.GetDeploymentDeviceLogsResponse'(
        RestF,
        0,
        0,
        F,
        cons(NewFValue, Prev, TrUserData),
        TrUserData
    ).

'skip_varint_fuota.GetDeploymentDeviceLogsResponse'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'skip_varint_fuota.GetDeploymentDeviceLogsResponse'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_fuota.GetDeploymentDeviceLogsResponse'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    TrUserData
) ->
    'dfp_read_field_def_fuota.GetDeploymentDeviceLogsResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_fuota.GetDeploymentDeviceLogsResponse'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_fuota.GetDeploymentDeviceLogsResponse'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        TrUserData
    );
'skip_length_delimited_fuota.GetDeploymentDeviceLogsResponse'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_fuota.GetDeploymentDeviceLogsResponse'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_fuota.GetDeploymentDeviceLogsResponse'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_fuota.GetDeploymentDeviceLogsResponse'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_fuota.GetDeploymentDeviceLogsResponse'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_fuota.GetDeploymentDeviceLogsResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_fuota.GetDeploymentDeviceLogsResponse'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) ->
    'dfp_read_field_def_fuota.GetDeploymentDeviceLogsResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_google.protobuf.Timestamp'(Bin, TrUserData) ->
    'dfp_read_field_def_google.protobuf.Timestamp'(
        Bin,
        0,
        0,
        0,
        id(0, TrUserData),
        id(0, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_google.protobuf.Timestamp'(
    <<8, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'd_field_google.protobuf.Timestamp_seconds'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_google.protobuf.Timestamp'(
    <<16, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'd_field_google.protobuf.Timestamp_nanos'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_google.protobuf.Timestamp'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'google.protobuf.Timestamp'{seconds = F@_1, nanos = F@_2};
'dfp_read_field_def_google.protobuf.Timestamp'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_google.protobuf.Timestamp'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_google.protobuf.Timestamp'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_google.protobuf.Timestamp'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'dg_read_field_def_google.protobuf.Timestamp'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            'd_field_google.protobuf.Timestamp_seconds'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        16 ->
            'd_field_google.protobuf.Timestamp_nanos'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_google.protobuf.Timestamp'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                1 ->
                    'skip_64_google.protobuf.Timestamp'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_google.protobuf.Timestamp'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                3 ->
                    'skip_group_google.protobuf.Timestamp'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                5 ->
                    'skip_32_google.protobuf.Timestamp'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_google.protobuf.Timestamp'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'google.protobuf.Timestamp'{seconds = F@_1, nanos = F@_2}.

'd_field_google.protobuf.Timestamp_seconds'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_google.protobuf.Timestamp_seconds'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'd_field_google.protobuf.Timestamp_seconds'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    TrUserData
) ->
    {NewFValue, RestF} =
        {begin
                <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>,
                id(Res, TrUserData)
            end,
            Rest},
    'dfp_read_field_def_google.protobuf.Timestamp'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_google.protobuf.Timestamp_nanos'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_google.protobuf.Timestamp_nanos'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'd_field_google.protobuf.Timestamp_nanos'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    TrUserData
) ->
    {NewFValue, RestF} =
        {begin
                <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>,
                id(Res, TrUserData)
            end,
            Rest},
    'dfp_read_field_def_google.protobuf.Timestamp'(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

'skip_varint_google.protobuf.Timestamp'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'skip_varint_google.protobuf.Timestamp'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_google.protobuf.Timestamp'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'dfp_read_field_def_google.protobuf.Timestamp'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_google.protobuf.Timestamp'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_google.protobuf.Timestamp'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'skip_length_delimited_google.protobuf.Timestamp'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_google.protobuf.Timestamp'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_google.protobuf.Timestamp'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_google.protobuf.Timestamp'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_google.protobuf.Timestamp'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_google.protobuf.Timestamp'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_google.protobuf.Timestamp'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_google.protobuf.Timestamp'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'decode_msg_google.protobuf.Duration'(Bin, TrUserData) ->
    'dfp_read_field_def_google.protobuf.Duration'(
        Bin,
        0,
        0,
        0,
        id(0, TrUserData),
        id(0, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_google.protobuf.Duration'(
    <<8, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'd_field_google.protobuf.Duration_seconds'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_google.protobuf.Duration'(
    <<16, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'd_field_google.protobuf.Duration_nanos'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_google.protobuf.Duration'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'google.protobuf.Duration'{seconds = F@_1, nanos = F@_2};
'dfp_read_field_def_google.protobuf.Duration'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_google.protobuf.Duration'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_google.protobuf.Duration'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_google.protobuf.Duration'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'dg_read_field_def_google.protobuf.Duration'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            'd_field_google.protobuf.Duration_seconds'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        16 ->
            'd_field_google.protobuf.Duration_nanos'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_google.protobuf.Duration'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                1 ->
                    'skip_64_google.protobuf.Duration'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_google.protobuf.Duration'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                3 ->
                    'skip_group_google.protobuf.Duration'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                5 ->
                    'skip_32_google.protobuf.Duration'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_google.protobuf.Duration'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'google.protobuf.Duration'{seconds = F@_1, nanos = F@_2}.

'd_field_google.protobuf.Duration_seconds'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_google.protobuf.Duration_seconds'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'd_field_google.protobuf.Duration_seconds'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    _,
    F@_2,
    TrUserData
) ->
    {NewFValue, RestF} =
        {begin
                <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>,
                id(Res, TrUserData)
            end,
            Rest},
    'dfp_read_field_def_google.protobuf.Duration'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_google.protobuf.Duration_nanos'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_google.protobuf.Duration_nanos'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_google.protobuf.Duration_nanos'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} =
        {begin
                <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>,
                id(Res, TrUserData)
            end,
            Rest},
    'dfp_read_field_def_google.protobuf.Duration'(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

'skip_varint_google.protobuf.Duration'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'skip_varint_google.protobuf.Duration'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_google.protobuf.Duration'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    'dfp_read_field_def_google.protobuf.Duration'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_google.protobuf.Duration'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_google.protobuf.Duration'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'skip_length_delimited_google.protobuf.Duration'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_google.protobuf.Duration'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_google.protobuf.Duration'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_google.protobuf.Duration'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_google.protobuf.Duration'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_google.protobuf.Duration'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_google.protobuf.Duration'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_google.protobuf.Duration'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'decode_msg_map<string,string>'(Bin, TrUserData) ->
    'dfp_read_field_def_map<string,string>'(
        Bin,
        0,
        0,
        0,
        id([], TrUserData),
        id([], TrUserData),
        TrUserData
    ).

'dfp_read_field_def_map<string,string>'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'd_field_map<string,string>_key'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_map<string,string>'(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'd_field_map<string,string>_value'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_map<string,string>'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'map<string,string>'{key = F@_1, value = F@_2};
'dfp_read_field_def_map<string,string>'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_map<string,string>'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_map<string,string>'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_map<string,string>'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'dg_read_field_def_map<string,string>'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_map<string,string>_key'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 ->
            'd_field_map<string,string>_value'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_map<string,string>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 ->
                    'skip_64_map<string,string>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 ->
                    'skip_length_delimited_map<string,string>'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                3 ->
                    'skip_group_map<string,string>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 ->
                    'skip_32_map<string,string>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_map<string,string>'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'map<string,string>'{key = F@_1, value = F@_2}.

'd_field_map<string,string>_key'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when
    N < 57
->
    'd_field_map<string,string>_key'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_map<string,string>_key'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Utf8:Len/binary, Rest2/binary>> = Rest,
        {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2}
    end,
    'dfp_read_field_def_map<string,string>'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_map<string,string>_value'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'd_field_map<string,string>_value'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_map<string,string>_value'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Utf8:Len/binary, Rest2/binary>> = Rest,
        {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2}
    end,
    'dfp_read_field_def_map<string,string>'(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

'skip_varint_map<string,string>'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'skip_varint_map<string,string>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_map<string,string>'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,string>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_map<string,string>'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_map<string,string>'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        TrUserData
    );
'skip_length_delimited_map<string,string>'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<string,string>'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_map<string,string>'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<string,string>'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_map<string,string>'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,string>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_map<string,string>'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,string>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'd_enum_fuota.MulticastGroupType'(0) -> 'CLASS_B';
'd_enum_fuota.MulticastGroupType'(1) -> 'CLASS_C';
'd_enum_fuota.MulticastGroupType'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum) when N < (32 - 7) ->
    read_gr_b(Tl, N + 7, X bsl N + Acc, NumBytes, TagLen + 1, FieldNum);
read_gr_b(
    <<0:1, X:7, Tl/binary>>,
    N,
    Acc,
    NumBytes,
    TagLen,
    FieldNum
) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        % 4 = group_end
        {FieldNum, 4} ->
            {NumBytes, TagLen1};
        % 0 = varint
        {_, 0} ->
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        % 1 = bits64
        {_, 1} ->
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        % 2 = length_delimited
        {_, 2} ->
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        % 3 = group_start
        {_, 3} ->
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        % 4 = group_end
        {_, 4} ->
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        % 5 = bits32
        {_, 5} ->
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum) when N < (64 - 7) ->
    read_gr_vi(Tl, N + 7, NumBytes + 1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes + 1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) when N < (64 - 7) ->
    read_gr_ld(Tl, N + 7, X bsl N + Acc, NumBytes + 1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts) when element(1, Prev) =:= element(1, New), is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'fuota.DeploymentDevice' ->
            'merge_msg_fuota.DeploymentDevice'(Prev, New, TrUserData);
        'fuota.Deployment' ->
            'merge_msg_fuota.Deployment'(Prev, New, TrUserData);
        'fuota.CreateDeploymentRequest' ->
            'merge_msg_fuota.CreateDeploymentRequest'(Prev, New, TrUserData);
        'fuota.CreateDeploymentResponse' ->
            'merge_msg_fuota.CreateDeploymentResponse'(Prev, New, TrUserData);
        'fuota.GetDeploymentStatusRequest' ->
            'merge_msg_fuota.GetDeploymentStatusRequest'(Prev, New, TrUserData);
        'fuota.DeploymentDeviceStatus' ->
            'merge_msg_fuota.DeploymentDeviceStatus'(Prev, New, TrUserData);
        'fuota.GetDeploymentStatusResponse' ->
            'merge_msg_fuota.GetDeploymentStatusResponse'(Prev, New, TrUserData);
        'fuota.GetDeploymentDeviceLogsRequest' ->
            'merge_msg_fuota.GetDeploymentDeviceLogsRequest'(Prev, New, TrUserData);
        'fuota.DeploymentDeviceLog' ->
            'merge_msg_fuota.DeploymentDeviceLog'(Prev, New, TrUserData);
        'fuota.GetDeploymentDeviceLogsResponse' ->
            'merge_msg_fuota.GetDeploymentDeviceLogsResponse'(Prev, New, TrUserData);
        'google.protobuf.Timestamp' ->
            'merge_msg_google.protobuf.Timestamp'(Prev, New, TrUserData);
        'google.protobuf.Duration' ->
            'merge_msg_google.protobuf.Duration'(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function, 'merge_msg_fuota.DeploymentDevice'/3}).
'merge_msg_fuota.DeploymentDevice'(
    #'fuota.DeploymentDevice'{dev_eui = PFdev_eui, mc_root_key = PFmc_root_key},
    #'fuota.DeploymentDevice'{dev_eui = NFdev_eui, mc_root_key = NFmc_root_key},
    _
) ->
    #'fuota.DeploymentDevice'{
        dev_eui =
            if
                NFdev_eui =:= undefined -> PFdev_eui;
                true -> NFdev_eui
            end,
        mc_root_key =
            if
                NFmc_root_key =:= undefined -> PFmc_root_key;
                true -> NFmc_root_key
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_fuota.Deployment'/3}).
'merge_msg_fuota.Deployment'(
    #'fuota.Deployment'{
        application_id = PFapplication_id,
        devices = PFdevices,
        multicast_group_type = PFmulticast_group_type,
        multicast_dr = PFmulticast_dr,
        multicast_ping_slot_period = PFmulticast_ping_slot_period,
        multicast_frequency = PFmulticast_frequency,
        multicast_group_id = PFmulticast_group_id,
        multicast_timeout = PFmulticast_timeout,
        unicast_timeout = PFunicast_timeout,
        unicast_attempt_count = PFunicast_attempt_count,
        fragmentation_fragment_size = PFfragmentation_fragment_size,
        payload = PFpayload,
        fragmentation_redundancy = PFfragmentation_redundancy,
        fragmentation_session_index = PFfragmentation_session_index,
        fragmentation_matrix = PFfragmentation_matrix,
        fragmentation_block_ack_delay = PFfragmentation_block_ack_delay,
        fragmentation_descriptor = PFfragmentation_descriptor
    },
    #'fuota.Deployment'{
        application_id = NFapplication_id,
        devices = NFdevices,
        multicast_group_type = NFmulticast_group_type,
        multicast_dr = NFmulticast_dr,
        multicast_ping_slot_period = NFmulticast_ping_slot_period,
        multicast_frequency = NFmulticast_frequency,
        multicast_group_id = NFmulticast_group_id,
        multicast_timeout = NFmulticast_timeout,
        unicast_timeout = NFunicast_timeout,
        unicast_attempt_count = NFunicast_attempt_count,
        fragmentation_fragment_size = NFfragmentation_fragment_size,
        payload = NFpayload,
        fragmentation_redundancy = NFfragmentation_redundancy,
        fragmentation_session_index = NFfragmentation_session_index,
        fragmentation_matrix = NFfragmentation_matrix,
        fragmentation_block_ack_delay = NFfragmentation_block_ack_delay,
        fragmentation_descriptor = NFfragmentation_descriptor
    },
    TrUserData
) ->
    #'fuota.Deployment'{
        application_id =
            if
                NFapplication_id =:= undefined -> PFapplication_id;
                true -> NFapplication_id
            end,
        devices =
            if
                PFdevices /= undefined, NFdevices /= undefined ->
                    'erlang_++'(PFdevices, NFdevices, TrUserData);
                PFdevices == undefined ->
                    NFdevices;
                NFdevices == undefined ->
                    PFdevices
            end,
        multicast_group_type =
            if
                NFmulticast_group_type =:= undefined -> PFmulticast_group_type;
                true -> NFmulticast_group_type
            end,
        multicast_dr =
            if
                NFmulticast_dr =:= undefined -> PFmulticast_dr;
                true -> NFmulticast_dr
            end,
        multicast_ping_slot_period =
            if
                NFmulticast_ping_slot_period =:= undefined -> PFmulticast_ping_slot_period;
                true -> NFmulticast_ping_slot_period
            end,
        multicast_frequency =
            if
                NFmulticast_frequency =:= undefined -> PFmulticast_frequency;
                true -> NFmulticast_frequency
            end,
        multicast_group_id =
            if
                NFmulticast_group_id =:= undefined -> PFmulticast_group_id;
                true -> NFmulticast_group_id
            end,
        multicast_timeout =
            if
                NFmulticast_timeout =:= undefined -> PFmulticast_timeout;
                true -> NFmulticast_timeout
            end,
        unicast_timeout =
            if
                PFunicast_timeout /= undefined, NFunicast_timeout /= undefined ->
                    'merge_msg_google.protobuf.Duration'(
                        PFunicast_timeout,
                        NFunicast_timeout,
                        TrUserData
                    );
                PFunicast_timeout == undefined ->
                    NFunicast_timeout;
                NFunicast_timeout == undefined ->
                    PFunicast_timeout
            end,
        unicast_attempt_count =
            if
                NFunicast_attempt_count =:= undefined -> PFunicast_attempt_count;
                true -> NFunicast_attempt_count
            end,
        fragmentation_fragment_size =
            if
                NFfragmentation_fragment_size =:= undefined -> PFfragmentation_fragment_size;
                true -> NFfragmentation_fragment_size
            end,
        payload =
            if
                NFpayload =:= undefined -> PFpayload;
                true -> NFpayload
            end,
        fragmentation_redundancy =
            if
                NFfragmentation_redundancy =:= undefined -> PFfragmentation_redundancy;
                true -> NFfragmentation_redundancy
            end,
        fragmentation_session_index =
            if
                NFfragmentation_session_index =:= undefined -> PFfragmentation_session_index;
                true -> NFfragmentation_session_index
            end,
        fragmentation_matrix =
            if
                NFfragmentation_matrix =:= undefined -> PFfragmentation_matrix;
                true -> NFfragmentation_matrix
            end,
        fragmentation_block_ack_delay =
            if
                NFfragmentation_block_ack_delay =:= undefined -> PFfragmentation_block_ack_delay;
                true -> NFfragmentation_block_ack_delay
            end,
        fragmentation_descriptor =
            if
                NFfragmentation_descriptor =:= undefined -> PFfragmentation_descriptor;
                true -> NFfragmentation_descriptor
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_fuota.CreateDeploymentRequest'/3}).
'merge_msg_fuota.CreateDeploymentRequest'(
    #'fuota.CreateDeploymentRequest'{deployment = PFdeployment},
    #'fuota.CreateDeploymentRequest'{deployment = NFdeployment},
    TrUserData
) ->
    #'fuota.CreateDeploymentRequest'{
        deployment =
            if
                PFdeployment /= undefined, NFdeployment /= undefined ->
                    'merge_msg_fuota.Deployment'(PFdeployment, NFdeployment, TrUserData);
                PFdeployment == undefined ->
                    NFdeployment;
                NFdeployment == undefined ->
                    PFdeployment
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_fuota.CreateDeploymentResponse'/3}).
'merge_msg_fuota.CreateDeploymentResponse'(
    #'fuota.CreateDeploymentResponse'{id = PFid},
    #'fuota.CreateDeploymentResponse'{id = NFid},
    _
) ->
    #'fuota.CreateDeploymentResponse'{
        id =
            if
                NFid =:= undefined -> PFid;
                true -> NFid
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_fuota.GetDeploymentStatusRequest'/3}).
'merge_msg_fuota.GetDeploymentStatusRequest'(
    #'fuota.GetDeploymentStatusRequest'{id = PFid},
    #'fuota.GetDeploymentStatusRequest'{id = NFid},
    _
) ->
    #'fuota.GetDeploymentStatusRequest'{
        id =
            if
                NFid =:= undefined -> PFid;
                true -> NFid
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_fuota.DeploymentDeviceStatus'/3}).
'merge_msg_fuota.DeploymentDeviceStatus'(
    #'fuota.DeploymentDeviceStatus'{
        dev_eui = PFdev_eui,
        created_at = PFcreated_at,
        updated_at = PFupdated_at,
        mc_group_setup_completed_at = PFmc_group_setup_completed_at,
        mc_session_completed_at = PFmc_session_completed_at,
        frag_session_setup_completed_at = PFfrag_session_setup_completed_at,
        frag_status_completed_at = PFfrag_status_completed_at
    },
    #'fuota.DeploymentDeviceStatus'{
        dev_eui = NFdev_eui,
        created_at = NFcreated_at,
        updated_at = NFupdated_at,
        mc_group_setup_completed_at = NFmc_group_setup_completed_at,
        mc_session_completed_at = NFmc_session_completed_at,
        frag_session_setup_completed_at = NFfrag_session_setup_completed_at,
        frag_status_completed_at = NFfrag_status_completed_at
    },
    TrUserData
) ->
    #'fuota.DeploymentDeviceStatus'{
        dev_eui =
            if
                NFdev_eui =:= undefined -> PFdev_eui;
                true -> NFdev_eui
            end,
        created_at =
            if
                PFcreated_at /= undefined, NFcreated_at /= undefined ->
                    'merge_msg_google.protobuf.Timestamp'(PFcreated_at, NFcreated_at, TrUserData);
                PFcreated_at == undefined ->
                    NFcreated_at;
                NFcreated_at == undefined ->
                    PFcreated_at
            end,
        updated_at =
            if
                PFupdated_at /= undefined, NFupdated_at /= undefined ->
                    'merge_msg_google.protobuf.Timestamp'(PFupdated_at, NFupdated_at, TrUserData);
                PFupdated_at == undefined ->
                    NFupdated_at;
                NFupdated_at == undefined ->
                    PFupdated_at
            end,
        mc_group_setup_completed_at =
            if
                PFmc_group_setup_completed_at /= undefined,
                NFmc_group_setup_completed_at /= undefined ->
                    'merge_msg_google.protobuf.Timestamp'(
                        PFmc_group_setup_completed_at,
                        NFmc_group_setup_completed_at,
                        TrUserData
                    );
                PFmc_group_setup_completed_at == undefined ->
                    NFmc_group_setup_completed_at;
                NFmc_group_setup_completed_at == undefined ->
                    PFmc_group_setup_completed_at
            end,
        mc_session_completed_at =
            if
                PFmc_session_completed_at /= undefined, NFmc_session_completed_at /= undefined ->
                    'merge_msg_google.protobuf.Timestamp'(
                        PFmc_session_completed_at,
                        NFmc_session_completed_at,
                        TrUserData
                    );
                PFmc_session_completed_at == undefined ->
                    NFmc_session_completed_at;
                NFmc_session_completed_at == undefined ->
                    PFmc_session_completed_at
            end,
        frag_session_setup_completed_at =
            if
                PFfrag_session_setup_completed_at /= undefined,
                NFfrag_session_setup_completed_at /= undefined ->
                    'merge_msg_google.protobuf.Timestamp'(
                        PFfrag_session_setup_completed_at,
                        NFfrag_session_setup_completed_at,
                        TrUserData
                    );
                PFfrag_session_setup_completed_at == undefined ->
                    NFfrag_session_setup_completed_at;
                NFfrag_session_setup_completed_at == undefined ->
                    PFfrag_session_setup_completed_at
            end,
        frag_status_completed_at =
            if
                PFfrag_status_completed_at /= undefined, NFfrag_status_completed_at /= undefined ->
                    'merge_msg_google.protobuf.Timestamp'(
                        PFfrag_status_completed_at,
                        NFfrag_status_completed_at,
                        TrUserData
                    );
                PFfrag_status_completed_at == undefined ->
                    NFfrag_status_completed_at;
                NFfrag_status_completed_at == undefined ->
                    PFfrag_status_completed_at
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_fuota.GetDeploymentStatusResponse'/3}).
'merge_msg_fuota.GetDeploymentStatusResponse'(
    #'fuota.GetDeploymentStatusResponse'{
        created_at = PFcreated_at,
        updated_at = PFupdated_at,
        mc_group_setup_completed_at = PFmc_group_setup_completed_at,
        mc_session_completed_at = PFmc_session_completed_at,
        frag_session_setup_completed_at = PFfrag_session_setup_completed_at,
        enqueue_completed_at = PFenqueue_completed_at,
        frag_status_completed_at = PFfrag_status_completed_at,
        device_status = PFdevice_status
    },
    #'fuota.GetDeploymentStatusResponse'{
        created_at = NFcreated_at,
        updated_at = NFupdated_at,
        mc_group_setup_completed_at = NFmc_group_setup_completed_at,
        mc_session_completed_at = NFmc_session_completed_at,
        frag_session_setup_completed_at = NFfrag_session_setup_completed_at,
        enqueue_completed_at = NFenqueue_completed_at,
        frag_status_completed_at = NFfrag_status_completed_at,
        device_status = NFdevice_status
    },
    TrUserData
) ->
    #'fuota.GetDeploymentStatusResponse'{
        created_at =
            if
                PFcreated_at /= undefined, NFcreated_at /= undefined ->
                    'merge_msg_google.protobuf.Timestamp'(PFcreated_at, NFcreated_at, TrUserData);
                PFcreated_at == undefined ->
                    NFcreated_at;
                NFcreated_at == undefined ->
                    PFcreated_at
            end,
        updated_at =
            if
                PFupdated_at /= undefined, NFupdated_at /= undefined ->
                    'merge_msg_google.protobuf.Timestamp'(PFupdated_at, NFupdated_at, TrUserData);
                PFupdated_at == undefined ->
                    NFupdated_at;
                NFupdated_at == undefined ->
                    PFupdated_at
            end,
        mc_group_setup_completed_at =
            if
                PFmc_group_setup_completed_at /= undefined,
                NFmc_group_setup_completed_at /= undefined ->
                    'merge_msg_google.protobuf.Timestamp'(
                        PFmc_group_setup_completed_at,
                        NFmc_group_setup_completed_at,
                        TrUserData
                    );
                PFmc_group_setup_completed_at == undefined ->
                    NFmc_group_setup_completed_at;
                NFmc_group_setup_completed_at == undefined ->
                    PFmc_group_setup_completed_at
            end,
        mc_session_completed_at =
            if
                PFmc_session_completed_at /= undefined, NFmc_session_completed_at /= undefined ->
                    'merge_msg_google.protobuf.Timestamp'(
                        PFmc_session_completed_at,
                        NFmc_session_completed_at,
                        TrUserData
                    );
                PFmc_session_completed_at == undefined ->
                    NFmc_session_completed_at;
                NFmc_session_completed_at == undefined ->
                    PFmc_session_completed_at
            end,
        frag_session_setup_completed_at =
            if
                PFfrag_session_setup_completed_at /= undefined,
                NFfrag_session_setup_completed_at /= undefined ->
                    'merge_msg_google.protobuf.Timestamp'(
                        PFfrag_session_setup_completed_at,
                        NFfrag_session_setup_completed_at,
                        TrUserData
                    );
                PFfrag_session_setup_completed_at == undefined ->
                    NFfrag_session_setup_completed_at;
                NFfrag_session_setup_completed_at == undefined ->
                    PFfrag_session_setup_completed_at
            end,
        enqueue_completed_at =
            if
                PFenqueue_completed_at /= undefined, NFenqueue_completed_at /= undefined ->
                    'merge_msg_google.protobuf.Timestamp'(
                        PFenqueue_completed_at,
                        NFenqueue_completed_at,
                        TrUserData
                    );
                PFenqueue_completed_at == undefined ->
                    NFenqueue_completed_at;
                NFenqueue_completed_at == undefined ->
                    PFenqueue_completed_at
            end,
        frag_status_completed_at =
            if
                PFfrag_status_completed_at /= undefined, NFfrag_status_completed_at /= undefined ->
                    'merge_msg_google.protobuf.Timestamp'(
                        PFfrag_status_completed_at,
                        NFfrag_status_completed_at,
                        TrUserData
                    );
                PFfrag_status_completed_at == undefined ->
                    NFfrag_status_completed_at;
                NFfrag_status_completed_at == undefined ->
                    PFfrag_status_completed_at
            end,
        device_status =
            if
                PFdevice_status /= undefined, NFdevice_status /= undefined ->
                    'erlang_++'(PFdevice_status, NFdevice_status, TrUserData);
                PFdevice_status == undefined ->
                    NFdevice_status;
                NFdevice_status == undefined ->
                    PFdevice_status
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_fuota.GetDeploymentDeviceLogsRequest'/3}).
'merge_msg_fuota.GetDeploymentDeviceLogsRequest'(
    #'fuota.GetDeploymentDeviceLogsRequest'{deployment_id = PFdeployment_id, dev_eui = PFdev_eui},
    #'fuota.GetDeploymentDeviceLogsRequest'{deployment_id = NFdeployment_id, dev_eui = NFdev_eui},
    _
) ->
    #'fuota.GetDeploymentDeviceLogsRequest'{
        deployment_id =
            if
                NFdeployment_id =:= undefined -> PFdeployment_id;
                true -> NFdeployment_id
            end,
        dev_eui =
            if
                NFdev_eui =:= undefined -> PFdev_eui;
                true -> NFdev_eui
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_fuota.DeploymentDeviceLog'/3}).
'merge_msg_fuota.DeploymentDeviceLog'(
    #'fuota.DeploymentDeviceLog'{
        created_at = PFcreated_at,
        f_port = PFf_port,
        command = PFcommand,
        fields = PFfields
    },
    #'fuota.DeploymentDeviceLog'{
        created_at = NFcreated_at,
        f_port = NFf_port,
        command = NFcommand,
        fields = NFfields
    },
    TrUserData
) ->
    #'fuota.DeploymentDeviceLog'{
        created_at =
            if
                PFcreated_at /= undefined, NFcreated_at /= undefined ->
                    'merge_msg_google.protobuf.Timestamp'(PFcreated_at, NFcreated_at, TrUserData);
                PFcreated_at == undefined ->
                    NFcreated_at;
                NFcreated_at == undefined ->
                    PFcreated_at
            end,
        f_port =
            if
                NFf_port =:= undefined -> PFf_port;
                true -> NFf_port
            end,
        command =
            if
                NFcommand =:= undefined -> PFcommand;
                true -> NFcommand
            end,
        fields =
            if
                PFfields /= undefined, NFfields /= undefined ->
                    'tr_merge_fuota.DeploymentDeviceLog.fields'(PFfields, NFfields, TrUserData);
                PFfields == undefined ->
                    NFfields;
                NFfields == undefined ->
                    PFfields
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_fuota.GetDeploymentDeviceLogsResponse'/3}).
'merge_msg_fuota.GetDeploymentDeviceLogsResponse'(
    #'fuota.GetDeploymentDeviceLogsResponse'{logs = PFlogs},
    #'fuota.GetDeploymentDeviceLogsResponse'{logs = NFlogs},
    TrUserData
) ->
    #'fuota.GetDeploymentDeviceLogsResponse'{
        logs =
            if
                PFlogs /= undefined, NFlogs /= undefined -> 'erlang_++'(PFlogs, NFlogs, TrUserData);
                PFlogs == undefined -> NFlogs;
                NFlogs == undefined -> PFlogs
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_google.protobuf.Timestamp'/3}).
'merge_msg_google.protobuf.Timestamp'(
    #'google.protobuf.Timestamp'{seconds = PFseconds, nanos = PFnanos},
    #'google.protobuf.Timestamp'{seconds = NFseconds, nanos = NFnanos},
    _
) ->
    #'google.protobuf.Timestamp'{
        seconds =
            if
                NFseconds =:= undefined -> PFseconds;
                true -> NFseconds
            end,
        nanos =
            if
                NFnanos =:= undefined -> PFnanos;
                true -> NFnanos
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_google.protobuf.Duration'/3}).
'merge_msg_google.protobuf.Duration'(
    #'google.protobuf.Duration'{seconds = PFseconds, nanos = PFnanos},
    #'google.protobuf.Duration'{seconds = NFseconds, nanos = NFnanos},
    _
) ->
    #'google.protobuf.Duration'{
        seconds =
            if
                NFseconds =:= undefined -> PFseconds;
                true -> NFseconds
            end,
        nanos =
            if
                NFnanos =:= undefined -> PFnanos;
                true -> NFnanos
            end
    }.

verify_msg(Msg) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), []);
verify_msg(X) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'fuota.DeploymentDevice' ->
            'v_msg_fuota.DeploymentDevice'(Msg, [MsgName], TrUserData);
        'fuota.Deployment' ->
            'v_msg_fuota.Deployment'(Msg, [MsgName], TrUserData);
        'fuota.CreateDeploymentRequest' ->
            'v_msg_fuota.CreateDeploymentRequest'(Msg, [MsgName], TrUserData);
        'fuota.CreateDeploymentResponse' ->
            'v_msg_fuota.CreateDeploymentResponse'(Msg, [MsgName], TrUserData);
        'fuota.GetDeploymentStatusRequest' ->
            'v_msg_fuota.GetDeploymentStatusRequest'(Msg, [MsgName], TrUserData);
        'fuota.DeploymentDeviceStatus' ->
            'v_msg_fuota.DeploymentDeviceStatus'(Msg, [MsgName], TrUserData);
        'fuota.GetDeploymentStatusResponse' ->
            'v_msg_fuota.GetDeploymentStatusResponse'(Msg, [MsgName], TrUserData);
        'fuota.GetDeploymentDeviceLogsRequest' ->
            'v_msg_fuota.GetDeploymentDeviceLogsRequest'(Msg, [MsgName], TrUserData);
        'fuota.DeploymentDeviceLog' ->
            'v_msg_fuota.DeploymentDeviceLog'(Msg, [MsgName], TrUserData);
        'fuota.GetDeploymentDeviceLogsResponse' ->
            'v_msg_fuota.GetDeploymentDeviceLogsResponse'(Msg, [MsgName], TrUserData);
        'google.protobuf.Timestamp' ->
            'v_msg_google.protobuf.Timestamp'(Msg, [MsgName], TrUserData);
        'google.protobuf.Duration' ->
            'v_msg_google.protobuf.Duration'(Msg, [MsgName], TrUserData);
        _ ->
            mk_type_error(not_a_known_message, Msg, [])
    end.

-compile({nowarn_unused_function, 'v_msg_fuota.DeploymentDevice'/3}).
-dialyzer({nowarn_function, 'v_msg_fuota.DeploymentDevice'/3}).
'v_msg_fuota.DeploymentDevice'(
    #'fuota.DeploymentDevice'{dev_eui = F1, mc_root_key = F2},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [dev_eui | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_bytes(F2, [mc_root_key | Path], TrUserData)
    end,
    ok;
'v_msg_fuota.DeploymentDevice'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'fuota.DeploymentDevice'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_fuota.Deployment'/3}).
-dialyzer({nowarn_function, 'v_msg_fuota.Deployment'/3}).
'v_msg_fuota.Deployment'(
    #'fuota.Deployment'{
        application_id = F1,
        devices = F2,
        multicast_group_type = F3,
        multicast_dr = F4,
        multicast_ping_slot_period = F5,
        multicast_frequency = F6,
        multicast_group_id = F7,
        multicast_timeout = F8,
        unicast_timeout = F9,
        unicast_attempt_count = F10,
        fragmentation_fragment_size = F11,
        payload = F12,
        fragmentation_redundancy = F13,
        fragmentation_session_index = F14,
        fragmentation_matrix = F15,
        fragmentation_block_ack_delay = F16,
        fragmentation_descriptor = F17
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_int64(F1, [application_id | Path], TrUserData)
    end,
    if
        is_list(F2) ->
            _ = ['v_msg_fuota.DeploymentDevice'(Elem, [devices | Path], TrUserData) || Elem <- F2],
            ok;
        true ->
            mk_type_error({invalid_list_of, {msg, 'fuota.DeploymentDevice'}}, F2, [devices | Path])
    end,
    if
        F3 == undefined -> ok;
        true -> 'v_enum_fuota.MulticastGroupType'(F3, [multicast_group_type | Path], TrUserData)
    end,
    if
        F4 == undefined -> ok;
        true -> v_type_uint32(F4, [multicast_dr | Path], TrUserData)
    end,
    if
        F5 == undefined -> ok;
        true -> v_type_uint32(F5, [multicast_ping_slot_period | Path], TrUserData)
    end,
    if
        F6 == undefined -> ok;
        true -> v_type_uint32(F6, [multicast_frequency | Path], TrUserData)
    end,
    if
        F7 == undefined -> ok;
        true -> v_type_uint32(F7, [multicast_group_id | Path], TrUserData)
    end,
    if
        F8 == undefined -> ok;
        true -> v_type_uint32(F8, [multicast_timeout | Path], TrUserData)
    end,
    if
        F9 == undefined -> ok;
        true -> 'v_msg_google.protobuf.Duration'(F9, [unicast_timeout | Path], TrUserData)
    end,
    if
        F10 == undefined -> ok;
        true -> v_type_uint32(F10, [unicast_attempt_count | Path], TrUserData)
    end,
    if
        F11 == undefined -> ok;
        true -> v_type_uint32(F11, [fragmentation_fragment_size | Path], TrUserData)
    end,
    if
        F12 == undefined -> ok;
        true -> v_type_bytes(F12, [payload | Path], TrUserData)
    end,
    if
        F13 == undefined -> ok;
        true -> v_type_uint32(F13, [fragmentation_redundancy | Path], TrUserData)
    end,
    if
        F14 == undefined -> ok;
        true -> v_type_uint32(F14, [fragmentation_session_index | Path], TrUserData)
    end,
    if
        F15 == undefined -> ok;
        true -> v_type_uint32(F15, [fragmentation_matrix | Path], TrUserData)
    end,
    if
        F16 == undefined -> ok;
        true -> v_type_uint32(F16, [fragmentation_block_ack_delay | Path], TrUserData)
    end,
    if
        F17 == undefined -> ok;
        true -> v_type_bytes(F17, [fragmentation_descriptor | Path], TrUserData)
    end,
    ok;
'v_msg_fuota.Deployment'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'fuota.Deployment'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_fuota.CreateDeploymentRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_fuota.CreateDeploymentRequest'/3}).
'v_msg_fuota.CreateDeploymentRequest'(
    #'fuota.CreateDeploymentRequest'{deployment = F1},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> 'v_msg_fuota.Deployment'(F1, [deployment | Path], TrUserData)
    end,
    ok;
'v_msg_fuota.CreateDeploymentRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'fuota.CreateDeploymentRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_fuota.CreateDeploymentResponse'/3}).
-dialyzer({nowarn_function, 'v_msg_fuota.CreateDeploymentResponse'/3}).
'v_msg_fuota.CreateDeploymentResponse'(
    #'fuota.CreateDeploymentResponse'{id = F1},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [id | Path], TrUserData)
    end,
    ok;
'v_msg_fuota.CreateDeploymentResponse'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'fuota.CreateDeploymentResponse'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_fuota.GetDeploymentStatusRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_fuota.GetDeploymentStatusRequest'/3}).
'v_msg_fuota.GetDeploymentStatusRequest'(
    #'fuota.GetDeploymentStatusRequest'{id = F1},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [id | Path], TrUserData)
    end,
    ok;
'v_msg_fuota.GetDeploymentStatusRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'fuota.GetDeploymentStatusRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_fuota.DeploymentDeviceStatus'/3}).
-dialyzer({nowarn_function, 'v_msg_fuota.DeploymentDeviceStatus'/3}).
'v_msg_fuota.DeploymentDeviceStatus'(
    #'fuota.DeploymentDeviceStatus'{
        dev_eui = F1,
        created_at = F2,
        updated_at = F3,
        mc_group_setup_completed_at = F4,
        mc_session_completed_at = F5,
        frag_session_setup_completed_at = F6,
        frag_status_completed_at = F7
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [dev_eui | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> 'v_msg_google.protobuf.Timestamp'(F2, [created_at | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> 'v_msg_google.protobuf.Timestamp'(F3, [updated_at | Path], TrUserData)
    end,
    if
        F4 == undefined ->
            ok;
        true ->
            'v_msg_google.protobuf.Timestamp'(F4, [mc_group_setup_completed_at | Path], TrUserData)
    end,
    if
        F5 == undefined -> ok;
        true -> 'v_msg_google.protobuf.Timestamp'(F5, [mc_session_completed_at | Path], TrUserData)
    end,
    if
        F6 == undefined ->
            ok;
        true ->
            'v_msg_google.protobuf.Timestamp'(
                F6,
                [frag_session_setup_completed_at | Path],
                TrUserData
            )
    end,
    if
        F7 == undefined -> ok;
        true -> 'v_msg_google.protobuf.Timestamp'(F7, [frag_status_completed_at | Path], TrUserData)
    end,
    ok;
'v_msg_fuota.DeploymentDeviceStatus'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'fuota.DeploymentDeviceStatus'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_fuota.GetDeploymentStatusResponse'/3}).
-dialyzer({nowarn_function, 'v_msg_fuota.GetDeploymentStatusResponse'/3}).
'v_msg_fuota.GetDeploymentStatusResponse'(
    #'fuota.GetDeploymentStatusResponse'{
        created_at = F1,
        updated_at = F2,
        mc_group_setup_completed_at = F3,
        mc_session_completed_at = F4,
        frag_session_setup_completed_at = F5,
        enqueue_completed_at = F6,
        frag_status_completed_at = F7,
        device_status = F8
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> 'v_msg_google.protobuf.Timestamp'(F1, [created_at | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> 'v_msg_google.protobuf.Timestamp'(F2, [updated_at | Path], TrUserData)
    end,
    if
        F3 == undefined ->
            ok;
        true ->
            'v_msg_google.protobuf.Timestamp'(F3, [mc_group_setup_completed_at | Path], TrUserData)
    end,
    if
        F4 == undefined -> ok;
        true -> 'v_msg_google.protobuf.Timestamp'(F4, [mc_session_completed_at | Path], TrUserData)
    end,
    if
        F5 == undefined ->
            ok;
        true ->
            'v_msg_google.protobuf.Timestamp'(
                F5,
                [frag_session_setup_completed_at | Path],
                TrUserData
            )
    end,
    if
        F6 == undefined -> ok;
        true -> 'v_msg_google.protobuf.Timestamp'(F6, [enqueue_completed_at | Path], TrUserData)
    end,
    if
        F7 == undefined -> ok;
        true -> 'v_msg_google.protobuf.Timestamp'(F7, [frag_status_completed_at | Path], TrUserData)
    end,
    if
        is_list(F8) ->
            _ = [
                'v_msg_fuota.DeploymentDeviceStatus'(Elem, [device_status | Path], TrUserData)
                || Elem <- F8
            ],
            ok;
        true ->
            mk_type_error({invalid_list_of, {msg, 'fuota.DeploymentDeviceStatus'}}, F8, [
                device_status
                | Path
            ])
    end,
    ok;
'v_msg_fuota.GetDeploymentStatusResponse'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'fuota.GetDeploymentStatusResponse'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_fuota.GetDeploymentDeviceLogsRequest'/3}).
-dialyzer({nowarn_function, 'v_msg_fuota.GetDeploymentDeviceLogsRequest'/3}).
'v_msg_fuota.GetDeploymentDeviceLogsRequest'(
    #'fuota.GetDeploymentDeviceLogsRequest'{deployment_id = F1, dev_eui = F2},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_bytes(F1, [deployment_id | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_bytes(F2, [dev_eui | Path], TrUserData)
    end,
    ok;
'v_msg_fuota.GetDeploymentDeviceLogsRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'fuota.GetDeploymentDeviceLogsRequest'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_fuota.DeploymentDeviceLog'/3}).
-dialyzer({nowarn_function, 'v_msg_fuota.DeploymentDeviceLog'/3}).
'v_msg_fuota.DeploymentDeviceLog'(
    #'fuota.DeploymentDeviceLog'{created_at = F1, f_port = F2, command = F3, fields = F4},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> 'v_msg_google.protobuf.Timestamp'(F1, [created_at | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_uint32(F2, [f_port | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_string(F3, [command | Path], TrUserData)
    end,
    'v_map<string,string>'(F4, [fields | Path], TrUserData),
    ok;
'v_msg_fuota.DeploymentDeviceLog'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'fuota.DeploymentDeviceLog'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_fuota.GetDeploymentDeviceLogsResponse'/3}).
-dialyzer({nowarn_function, 'v_msg_fuota.GetDeploymentDeviceLogsResponse'/3}).
'v_msg_fuota.GetDeploymentDeviceLogsResponse'(
    #'fuota.GetDeploymentDeviceLogsResponse'{logs = F1},
    Path,
    TrUserData
) ->
    if
        is_list(F1) ->
            _ = ['v_msg_fuota.DeploymentDeviceLog'(Elem, [logs | Path], TrUserData) || Elem <- F1],
            ok;
        true ->
            mk_type_error({invalid_list_of, {msg, 'fuota.DeploymentDeviceLog'}}, F1, [logs | Path])
    end,
    ok;
'v_msg_fuota.GetDeploymentDeviceLogsResponse'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'fuota.GetDeploymentDeviceLogsResponse'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_google.protobuf.Timestamp'/3}).
-dialyzer({nowarn_function, 'v_msg_google.protobuf.Timestamp'/3}).
'v_msg_google.protobuf.Timestamp'(
    #'google.protobuf.Timestamp'{seconds = F1, nanos = F2},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_int64(F1, [seconds | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_int32(F2, [nanos | Path], TrUserData)
    end,
    ok;
'v_msg_google.protobuf.Timestamp'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'google.protobuf.Timestamp'}, X, Path).

-compile({nowarn_unused_function, 'v_msg_google.protobuf.Duration'/3}).
-dialyzer({nowarn_function, 'v_msg_google.protobuf.Duration'/3}).
'v_msg_google.protobuf.Duration'(
    #'google.protobuf.Duration'{seconds = F1, nanos = F2},
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_int64(F1, [seconds | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_int32(F2, [nanos | Path], TrUserData)
    end,
    ok;
'v_msg_google.protobuf.Duration'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'google.protobuf.Duration'}, X, Path).

-compile({nowarn_unused_function, 'v_enum_fuota.MulticastGroupType'/3}).
-dialyzer({nowarn_function, 'v_enum_fuota.MulticastGroupType'/3}).
'v_enum_fuota.MulticastGroupType'('CLASS_B', _Path, _TrUserData) ->
    ok;
'v_enum_fuota.MulticastGroupType'('CLASS_C', _Path, _TrUserData) ->
    ok;
'v_enum_fuota.MulticastGroupType'(V, _Path, _TrUserData) when
    -2147483648 =< V, V =< 2147483647, is_integer(V)
->
    ok;
'v_enum_fuota.MulticastGroupType'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'fuota.MulticastGroupType'}, X, Path).

-compile({nowarn_unused_function, v_type_int32/3}).
-dialyzer({nowarn_function, v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData) when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32}, N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X, Path).

-compile({nowarn_unused_function, v_type_int64/3}).
-dialyzer({nowarn_function, v_type_int64/3}).
v_type_int64(N, _Path, _TrUserData) when -9223372036854775808 =< N, N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64}, N, Path);
v_type_int64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int64, signed, 64}, X, Path).

-compile({nowarn_unused_function, v_type_uint32/3}).
-dialyzer({nowarn_function, v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData) when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned, 32}, N, Path);
v_type_uint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X, Path).

-compile({nowarn_unused_function, v_type_string/3}).
-dialyzer({nowarn_function, v_type_string/3}).
v_type_string(S, Path, _TrUserData) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} -> mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg -> mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function, v_type_bytes/3}).
-dialyzer({nowarn_function, v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) -> ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) -> ok;
v_type_bytes(X, Path, _TrUserData) -> mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function, 'v_map<string,string>'/3}).
-dialyzer({nowarn_function, 'v_map<string,string>'/3}).
'v_map<string,string>'(KVs, Path, TrUserData) when is_list(KVs) ->
    [
        case X of
            {Key, Value} ->
                v_type_string(Key, [key | Path], TrUserData),
                v_type_string(Value, [value | Path], TrUserData);
            _ ->
                mk_type_error(invalid_key_value_tuple, X, Path)
        end
        || X <- KVs
    ],
    ok;
'v_map<string,string>'(X, Path, _TrUserData) ->
    mk_type_error(invalid_list_of_key_value_tuples, X, Path).

-compile({nowarn_unused_function, mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).

-compile({nowarn_unused_function, prettify_path/1}).
-dialyzer({nowarn_function, prettify_path/1}).
prettify_path([]) ->
    top_level;
prettify_path(PathR) ->
    lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR)))).

-compile({nowarn_unused_function, id/2}).
-compile({inline, id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function, v_ok/3}).
-compile({inline, v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function, m_overwrite/3}).
-compile({inline, m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function, cons/3}).
-compile({inline, cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function, lists_reverse/2}).
-compile({inline, lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function, 'erlang_++'/3}).
-compile({inline, 'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.
-compile({inline, 'tr_encode_fuota.DeploymentDeviceLog.fields[x]'/2}).
'tr_encode_fuota.DeploymentDeviceLog.fields[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_r(X, 'map<string,string>').

-compile({inline, 'tr_decode_init_default_fuota.DeploymentDeviceLog.fields'/2}).
'tr_decode_init_default_fuota.DeploymentDeviceLog.fields'(_, _) -> mt_empty_map_r().

-compile({inline, 'tr_merge_fuota.DeploymentDeviceLog.fields'/3}).
'tr_merge_fuota.DeploymentDeviceLog.fields'(X1, X2, _) -> mt_merge_maptuples_r(X1, X2).

-compile({inline, 'tr_decode_repeated_finalize_fuota.DeploymentDeviceLog.fields'/2}).
'tr_decode_repeated_finalize_fuota.DeploymentDeviceLog.fields'(L, _) -> mt_finalize_items_r(L).

-compile({inline, 'tr_decode_repeated_add_elem_fuota.DeploymentDeviceLog.fields'/3}).
'tr_decode_repeated_add_elem_fuota.DeploymentDeviceLog.fields'(Elem, L, _) ->
    mt_add_item_r(Elem, L).

-compile({inline, mt_maptuple_to_pseudomsg_r/2}).
mt_maptuple_to_pseudomsg_r({K, V}, RName) -> {RName, K, V}.

-compile({inline, mt_empty_map_r/0}).
mt_empty_map_r() -> [].

-compile({inline, mt_add_item_r/2}).
mt_add_item_r({_RName, K, V}, Acc) -> [{K, V} | Acc].

-compile({inline, mt_finalize_items_r/1}).
mt_finalize_items_r(Acc) -> mt_finalize_items_r_aux(lists:reverse(Acc), dict:new()).

mt_finalize_items_r_aux([{K, V} | Tl], D) -> mt_finalize_items_r_aux(Tl, dict:store(K, V, D));
mt_finalize_items_r_aux([], D) -> dict:to_list(D).

-compile({inline, mt_merge_maptuples_r/2}).
mt_merge_maptuples_r(L1, L2) ->
    dict:to_list(dict:merge(fun(_Key, _V1, V2) -> V2 end, dict:from_list(L1), dict:from_list(L2))).

get_msg_defs() ->
    [
        {{enum, 'fuota.MulticastGroupType'}, [{'CLASS_B', 0}, {'CLASS_C', 1}]},
        {{msg, 'fuota.DeploymentDevice'}, [
            #field{
                name = dev_eui,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = mc_root_key,
                fnum = 2,
                rnum = 3,
                type = bytes,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'fuota.Deployment'}, [
            #field{
                name = application_id,
                fnum = 1,
                rnum = 2,
                type = int64,
                occurrence = optional,
                opts = []
            },
            #field{
                name = devices,
                fnum = 2,
                rnum = 3,
                type = {msg, 'fuota.DeploymentDevice'},
                occurrence = repeated,
                opts = []
            },
            #field{
                name = multicast_group_type,
                fnum = 3,
                rnum = 4,
                type = {enum, 'fuota.MulticastGroupType'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = multicast_dr,
                fnum = 4,
                rnum = 5,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = multicast_ping_slot_period,
                fnum = 5,
                rnum = 6,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = multicast_frequency,
                fnum = 6,
                rnum = 7,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = multicast_group_id,
                fnum = 7,
                rnum = 8,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = multicast_timeout,
                fnum = 8,
                rnum = 9,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = unicast_timeout,
                fnum = 9,
                rnum = 10,
                type = {msg, 'google.protobuf.Duration'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = unicast_attempt_count,
                fnum = 10,
                rnum = 11,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = fragmentation_fragment_size,
                fnum = 11,
                rnum = 12,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = payload,
                fnum = 12,
                rnum = 13,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = fragmentation_redundancy,
                fnum = 13,
                rnum = 14,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = fragmentation_session_index,
                fnum = 14,
                rnum = 15,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = fragmentation_matrix,
                fnum = 15,
                rnum = 16,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = fragmentation_block_ack_delay,
                fnum = 16,
                rnum = 17,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = fragmentation_descriptor,
                fnum = 17,
                rnum = 18,
                type = bytes,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'fuota.CreateDeploymentRequest'}, [
            #field{
                name = deployment,
                fnum = 1,
                rnum = 2,
                type = {msg, 'fuota.Deployment'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'fuota.CreateDeploymentResponse'}, [
            #field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}
        ]},
        {{msg, 'fuota.GetDeploymentStatusRequest'}, [
            #field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}
        ]},
        {{msg, 'fuota.DeploymentDeviceStatus'}, [
            #field{
                name = dev_eui,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = created_at,
                fnum = 2,
                rnum = 3,
                type = {msg, 'google.protobuf.Timestamp'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = updated_at,
                fnum = 3,
                rnum = 4,
                type = {msg, 'google.protobuf.Timestamp'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = mc_group_setup_completed_at,
                fnum = 4,
                rnum = 5,
                type = {msg, 'google.protobuf.Timestamp'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = mc_session_completed_at,
                fnum = 5,
                rnum = 6,
                type = {msg, 'google.protobuf.Timestamp'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = frag_session_setup_completed_at,
                fnum = 6,
                rnum = 7,
                type = {msg, 'google.protobuf.Timestamp'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = frag_status_completed_at,
                fnum = 7,
                rnum = 8,
                type = {msg, 'google.protobuf.Timestamp'},
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'fuota.GetDeploymentStatusResponse'}, [
            #field{
                name = created_at,
                fnum = 1,
                rnum = 2,
                type = {msg, 'google.protobuf.Timestamp'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = updated_at,
                fnum = 2,
                rnum = 3,
                type = {msg, 'google.protobuf.Timestamp'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = mc_group_setup_completed_at,
                fnum = 3,
                rnum = 4,
                type = {msg, 'google.protobuf.Timestamp'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = mc_session_completed_at,
                fnum = 4,
                rnum = 5,
                type = {msg, 'google.protobuf.Timestamp'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = frag_session_setup_completed_at,
                fnum = 5,
                rnum = 6,
                type = {msg, 'google.protobuf.Timestamp'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = enqueue_completed_at,
                fnum = 6,
                rnum = 7,
                type = {msg, 'google.protobuf.Timestamp'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = frag_status_completed_at,
                fnum = 7,
                rnum = 8,
                type = {msg, 'google.protobuf.Timestamp'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = device_status,
                fnum = 8,
                rnum = 9,
                type = {msg, 'fuota.DeploymentDeviceStatus'},
                occurrence = repeated,
                opts = []
            }
        ]},
        {{msg, 'fuota.GetDeploymentDeviceLogsRequest'}, [
            #field{
                name = deployment_id,
                fnum = 1,
                rnum = 2,
                type = bytes,
                occurrence = optional,
                opts = []
            },
            #field{
                name = dev_eui,
                fnum = 2,
                rnum = 3,
                type = bytes,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'fuota.DeploymentDeviceLog'}, [
            #field{
                name = created_at,
                fnum = 1,
                rnum = 2,
                type = {msg, 'google.protobuf.Timestamp'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = f_port,
                fnum = 2,
                rnum = 3,
                type = uint32,
                occurrence = optional,
                opts = []
            },
            #field{
                name = command,
                fnum = 3,
                rnum = 4,
                type = string,
                occurrence = optional,
                opts = []
            },
            #field{
                name = fields,
                fnum = 4,
                rnum = 5,
                type = {map, string, string},
                occurrence = repeated,
                opts = []
            }
        ]},
        {{msg, 'fuota.GetDeploymentDeviceLogsResponse'}, [
            #field{
                name = logs,
                fnum = 1,
                rnum = 2,
                type = {msg, 'fuota.DeploymentDeviceLog'},
                occurrence = repeated,
                opts = []
            }
        ]},
        {{msg, 'google.protobuf.Timestamp'}, [
            #field{
                name = seconds,
                fnum = 1,
                rnum = 2,
                type = int64,
                occurrence = optional,
                opts = []
            },
            #field{name = nanos, fnum = 2, rnum = 3, type = int32, occurrence = optional, opts = []}
        ]},
        {{msg, 'google.protobuf.Duration'}, [
            #field{
                name = seconds,
                fnum = 1,
                rnum = 2,
                type = int64,
                occurrence = optional,
                opts = []
            },
            #field{name = nanos, fnum = 2, rnum = 3, type = int32, occurrence = optional, opts = []}
        ]}
    ].

get_msg_names() ->
    [
        'fuota.DeploymentDevice',
        'fuota.Deployment',
        'fuota.CreateDeploymentRequest',
        'fuota.CreateDeploymentResponse',
        'fuota.GetDeploymentStatusRequest',
        'fuota.DeploymentDeviceStatus',
        'fuota.GetDeploymentStatusResponse',
        'fuota.GetDeploymentDeviceLogsRequest',
        'fuota.DeploymentDeviceLog',
        'fuota.GetDeploymentDeviceLogsResponse',
        'google.protobuf.Timestamp',
        'google.protobuf.Duration'
    ].

get_group_names() -> [].

get_msg_or_group_names() ->
    [
        'fuota.DeploymentDevice',
        'fuota.Deployment',
        'fuota.CreateDeploymentRequest',
        'fuota.CreateDeploymentResponse',
        'fuota.GetDeploymentStatusRequest',
        'fuota.DeploymentDeviceStatus',
        'fuota.GetDeploymentStatusResponse',
        'fuota.GetDeploymentDeviceLogsRequest',
        'fuota.DeploymentDeviceLog',
        'fuota.GetDeploymentDeviceLogsResponse',
        'google.protobuf.Timestamp',
        'google.protobuf.Duration'
    ].

get_enum_names() -> ['fuota.MulticastGroupType'].

fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.

fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
        Es when is_list(Es) -> Es;
        error -> erlang:error({no_such_enum, EnumName})
    end.

find_msg_def('fuota.DeploymentDevice') ->
    [
        #field{name = dev_eui, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []},
        #field{
            name = mc_root_key,
            fnum = 2,
            rnum = 3,
            type = bytes,
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('fuota.Deployment') ->
    [
        #field{
            name = application_id,
            fnum = 1,
            rnum = 2,
            type = int64,
            occurrence = optional,
            opts = []
        },
        #field{
            name = devices,
            fnum = 2,
            rnum = 3,
            type = {msg, 'fuota.DeploymentDevice'},
            occurrence = repeated,
            opts = []
        },
        #field{
            name = multicast_group_type,
            fnum = 3,
            rnum = 4,
            type = {enum, 'fuota.MulticastGroupType'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = multicast_dr,
            fnum = 4,
            rnum = 5,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = multicast_ping_slot_period,
            fnum = 5,
            rnum = 6,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = multicast_frequency,
            fnum = 6,
            rnum = 7,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = multicast_group_id,
            fnum = 7,
            rnum = 8,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = multicast_timeout,
            fnum = 8,
            rnum = 9,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = unicast_timeout,
            fnum = 9,
            rnum = 10,
            type = {msg, 'google.protobuf.Duration'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = unicast_attempt_count,
            fnum = 10,
            rnum = 11,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = fragmentation_fragment_size,
            fnum = 11,
            rnum = 12,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = payload,
            fnum = 12,
            rnum = 13,
            type = bytes,
            occurrence = optional,
            opts = []
        },
        #field{
            name = fragmentation_redundancy,
            fnum = 13,
            rnum = 14,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = fragmentation_session_index,
            fnum = 14,
            rnum = 15,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = fragmentation_matrix,
            fnum = 15,
            rnum = 16,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = fragmentation_block_ack_delay,
            fnum = 16,
            rnum = 17,
            type = uint32,
            occurrence = optional,
            opts = []
        },
        #field{
            name = fragmentation_descriptor,
            fnum = 17,
            rnum = 18,
            type = bytes,
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('fuota.CreateDeploymentRequest') ->
    [
        #field{
            name = deployment,
            fnum = 1,
            rnum = 2,
            type = {msg, 'fuota.Deployment'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('fuota.CreateDeploymentResponse') ->
    [#field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}];
find_msg_def('fuota.GetDeploymentStatusRequest') ->
    [#field{name = id, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}];
find_msg_def('fuota.DeploymentDeviceStatus') ->
    [
        #field{name = dev_eui, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []},
        #field{
            name = created_at,
            fnum = 2,
            rnum = 3,
            type = {msg, 'google.protobuf.Timestamp'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = updated_at,
            fnum = 3,
            rnum = 4,
            type = {msg, 'google.protobuf.Timestamp'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = mc_group_setup_completed_at,
            fnum = 4,
            rnum = 5,
            type = {msg, 'google.protobuf.Timestamp'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = mc_session_completed_at,
            fnum = 5,
            rnum = 6,
            type = {msg, 'google.protobuf.Timestamp'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = frag_session_setup_completed_at,
            fnum = 6,
            rnum = 7,
            type = {msg, 'google.protobuf.Timestamp'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = frag_status_completed_at,
            fnum = 7,
            rnum = 8,
            type = {msg, 'google.protobuf.Timestamp'},
            occurrence = optional,
            opts = []
        }
    ];
find_msg_def('fuota.GetDeploymentStatusResponse') ->
    [
        #field{
            name = created_at,
            fnum = 1,
            rnum = 2,
            type = {msg, 'google.protobuf.Timestamp'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = updated_at,
            fnum = 2,
            rnum = 3,
            type = {msg, 'google.protobuf.Timestamp'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = mc_group_setup_completed_at,
            fnum = 3,
            rnum = 4,
            type = {msg, 'google.protobuf.Timestamp'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = mc_session_completed_at,
            fnum = 4,
            rnum = 5,
            type = {msg, 'google.protobuf.Timestamp'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = frag_session_setup_completed_at,
            fnum = 5,
            rnum = 6,
            type = {msg, 'google.protobuf.Timestamp'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = enqueue_completed_at,
            fnum = 6,
            rnum = 7,
            type = {msg, 'google.protobuf.Timestamp'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = frag_status_completed_at,
            fnum = 7,
            rnum = 8,
            type = {msg, 'google.protobuf.Timestamp'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = device_status,
            fnum = 8,
            rnum = 9,
            type = {msg, 'fuota.DeploymentDeviceStatus'},
            occurrence = repeated,
            opts = []
        }
    ];
find_msg_def('fuota.GetDeploymentDeviceLogsRequest') ->
    [
        #field{
            name = deployment_id,
            fnum = 1,
            rnum = 2,
            type = bytes,
            occurrence = optional,
            opts = []
        },
        #field{name = dev_eui, fnum = 2, rnum = 3, type = bytes, occurrence = optional, opts = []}
    ];
find_msg_def('fuota.DeploymentDeviceLog') ->
    [
        #field{
            name = created_at,
            fnum = 1,
            rnum = 2,
            type = {msg, 'google.protobuf.Timestamp'},
            occurrence = optional,
            opts = []
        },
        #field{name = f_port, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []},
        #field{name = command, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []},
        #field{
            name = fields,
            fnum = 4,
            rnum = 5,
            type = {map, string, string},
            occurrence = repeated,
            opts = []
        }
    ];
find_msg_def('fuota.GetDeploymentDeviceLogsResponse') ->
    [
        #field{
            name = logs,
            fnum = 1,
            rnum = 2,
            type = {msg, 'fuota.DeploymentDeviceLog'},
            occurrence = repeated,
            opts = []
        }
    ];
find_msg_def('google.protobuf.Timestamp') ->
    [
        #field{name = seconds, fnum = 1, rnum = 2, type = int64, occurrence = optional, opts = []},
        #field{name = nanos, fnum = 2, rnum = 3, type = int32, occurrence = optional, opts = []}
    ];
find_msg_def('google.protobuf.Duration') ->
    [
        #field{name = seconds, fnum = 1, rnum = 2, type = int64, occurrence = optional, opts = []},
        #field{name = nanos, fnum = 2, rnum = 3, type = int32, occurrence = optional, opts = []}
    ];
find_msg_def(_) ->
    error.

find_enum_def('fuota.MulticastGroupType') -> [{'CLASS_B', 0}, {'CLASS_C', 1}];
find_enum_def(_) -> error.

enum_symbol_by_value('fuota.MulticastGroupType', Value) ->
    'enum_symbol_by_value_fuota.MulticastGroupType'(Value).

enum_value_by_symbol('fuota.MulticastGroupType', Sym) ->
    'enum_value_by_symbol_fuota.MulticastGroupType'(Sym).

'enum_symbol_by_value_fuota.MulticastGroupType'(0) -> 'CLASS_B';
'enum_symbol_by_value_fuota.MulticastGroupType'(1) -> 'CLASS_C'.

'enum_value_by_symbol_fuota.MulticastGroupType'('CLASS_B') -> 0;
'enum_value_by_symbol_fuota.MulticastGroupType'('CLASS_C') -> 1.

get_service_names() -> ['fuota.FUOTAServerService'].

get_service_def('fuota.FUOTAServerService') ->
    {{service, 'fuota.FUOTAServerService'}, [
        #rpc{
            name = 'CreateDeployment',
            input = 'fuota.CreateDeploymentRequest',
            output = 'fuota.CreateDeploymentResponse',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'GetDeploymentStatus',
            input = 'fuota.GetDeploymentStatusRequest',
            output = 'fuota.GetDeploymentStatusResponse',
            input_stream = false,
            output_stream = false,
            opts = []
        },
        #rpc{
            name = 'GetDeploymentDeviceLogs',
            input = 'fuota.GetDeploymentDeviceLogsRequest',
            output = 'fuota.GetDeploymentDeviceLogsResponse',
            input_stream = false,
            output_stream = false,
            opts = []
        }
    ]};
get_service_def(_) ->
    error.

get_rpc_names('fuota.FUOTAServerService') ->
    ['CreateDeployment', 'GetDeploymentStatus', 'GetDeploymentDeviceLogs'];
get_rpc_names(_) ->
    error.

find_rpc_def('fuota.FUOTAServerService', RpcName) ->
    'find_rpc_def_fuota.FUOTAServerService'(RpcName);
find_rpc_def(_, _) ->
    error.

'find_rpc_def_fuota.FUOTAServerService'('CreateDeployment') ->
    #rpc{
        name = 'CreateDeployment',
        input = 'fuota.CreateDeploymentRequest',
        output = 'fuota.CreateDeploymentResponse',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_fuota.FUOTAServerService'('GetDeploymentStatus') ->
    #rpc{
        name = 'GetDeploymentStatus',
        input = 'fuota.GetDeploymentStatusRequest',
        output = 'fuota.GetDeploymentStatusResponse',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_fuota.FUOTAServerService'('GetDeploymentDeviceLogs') ->
    #rpc{
        name = 'GetDeploymentDeviceLogs',
        input = 'fuota.GetDeploymentDeviceLogsRequest',
        output = 'fuota.GetDeploymentDeviceLogsResponse',
        input_stream = false,
        output_stream = false,
        opts = []
    };
'find_rpc_def_fuota.FUOTAServerService'(_) ->
    error.

fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
        Def when is_tuple(Def) -> Def;
        error -> erlang:error({no_such_rpc, ServiceName, RpcName})
    end.

%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
fqbin_to_service_name(<<"fuota.FUOTAServerService">>) -> 'fuota.FUOTAServerService';
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).

%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
service_name_to_fqbin('fuota.FUOTAServerService') -> <<"fuota.FUOTAServerService">>;
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).

%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
fqbins_to_service_and_rpc_name(<<"fuota.FUOTAServerService">>, <<"CreateDeployment">>) ->
    {'fuota.FUOTAServerService', 'CreateDeployment'};
fqbins_to_service_and_rpc_name(<<"fuota.FUOTAServerService">>, <<"GetDeploymentStatus">>) ->
    {'fuota.FUOTAServerService', 'GetDeploymentStatus'};
fqbins_to_service_and_rpc_name(<<"fuota.FUOTAServerService">>, <<"GetDeploymentDeviceLogs">>) ->
    {'fuota.FUOTAServerService', 'GetDeploymentDeviceLogs'};
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).

%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
service_and_rpc_name_to_fqbins('fuota.FUOTAServerService', 'CreateDeployment') ->
    {<<"fuota.FUOTAServerService">>, <<"CreateDeployment">>};
service_and_rpc_name_to_fqbins('fuota.FUOTAServerService', 'GetDeploymentStatus') ->
    {<<"fuota.FUOTAServerService">>, <<"GetDeploymentStatus">>};
service_and_rpc_name_to_fqbins('fuota.FUOTAServerService', 'GetDeploymentDeviceLogs') ->
    {<<"fuota.FUOTAServerService">>, <<"GetDeploymentDeviceLogs">>};
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).

fqbin_to_msg_name(<<"fuota.DeploymentDevice">>) ->
    'fuota.DeploymentDevice';
fqbin_to_msg_name(<<"fuota.Deployment">>) ->
    'fuota.Deployment';
fqbin_to_msg_name(<<"fuota.CreateDeploymentRequest">>) ->
    'fuota.CreateDeploymentRequest';
fqbin_to_msg_name(<<"fuota.CreateDeploymentResponse">>) ->
    'fuota.CreateDeploymentResponse';
fqbin_to_msg_name(<<"fuota.GetDeploymentStatusRequest">>) ->
    'fuota.GetDeploymentStatusRequest';
fqbin_to_msg_name(<<"fuota.DeploymentDeviceStatus">>) ->
    'fuota.DeploymentDeviceStatus';
fqbin_to_msg_name(<<"fuota.GetDeploymentStatusResponse">>) ->
    'fuota.GetDeploymentStatusResponse';
fqbin_to_msg_name(<<"fuota.GetDeploymentDeviceLogsRequest">>) ->
    'fuota.GetDeploymentDeviceLogsRequest';
fqbin_to_msg_name(<<"fuota.DeploymentDeviceLog">>) ->
    'fuota.DeploymentDeviceLog';
fqbin_to_msg_name(<<"fuota.GetDeploymentDeviceLogsResponse">>) ->
    'fuota.GetDeploymentDeviceLogsResponse';
fqbin_to_msg_name(<<"google.protobuf.Timestamp">>) ->
    'google.protobuf.Timestamp';
fqbin_to_msg_name(<<"google.protobuf.Duration">>) ->
    'google.protobuf.Duration';
fqbin_to_msg_name(E) ->
    error({gpb_error, {badmsg, E}}).

msg_name_to_fqbin('fuota.DeploymentDevice') ->
    <<"fuota.DeploymentDevice">>;
msg_name_to_fqbin('fuota.Deployment') ->
    <<"fuota.Deployment">>;
msg_name_to_fqbin('fuota.CreateDeploymentRequest') ->
    <<"fuota.CreateDeploymentRequest">>;
msg_name_to_fqbin('fuota.CreateDeploymentResponse') ->
    <<"fuota.CreateDeploymentResponse">>;
msg_name_to_fqbin('fuota.GetDeploymentStatusRequest') ->
    <<"fuota.GetDeploymentStatusRequest">>;
msg_name_to_fqbin('fuota.DeploymentDeviceStatus') ->
    <<"fuota.DeploymentDeviceStatus">>;
msg_name_to_fqbin('fuota.GetDeploymentStatusResponse') ->
    <<"fuota.GetDeploymentStatusResponse">>;
msg_name_to_fqbin('fuota.GetDeploymentDeviceLogsRequest') ->
    <<"fuota.GetDeploymentDeviceLogsRequest">>;
msg_name_to_fqbin('fuota.DeploymentDeviceLog') ->
    <<"fuota.DeploymentDeviceLog">>;
msg_name_to_fqbin('fuota.GetDeploymentDeviceLogsResponse') ->
    <<"fuota.GetDeploymentDeviceLogsResponse">>;
msg_name_to_fqbin('google.protobuf.Timestamp') ->
    <<"google.protobuf.Timestamp">>;
msg_name_to_fqbin('google.protobuf.Duration') ->
    <<"google.protobuf.Duration">>;
msg_name_to_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).

fqbin_to_enum_name(<<"fuota.MulticastGroupType">>) -> 'fuota.MulticastGroupType';
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).

enum_name_to_fqbin('fuota.MulticastGroupType') -> <<"fuota.MulticastGroupType">>;
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).

get_package_name() -> fuota.

%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> true.

source_basename() -> "fuota.proto".

%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["fuota.proto", "timestamp.proto", "duration.proto"].

%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["fuota", "timestamp", "duration"].

get_msg_containment("fuota") ->
    [
        'fuota.CreateDeploymentRequest',
        'fuota.CreateDeploymentResponse',
        'fuota.Deployment',
        'fuota.DeploymentDevice',
        'fuota.DeploymentDeviceLog',
        'fuota.DeploymentDeviceStatus',
        'fuota.GetDeploymentDeviceLogsRequest',
        'fuota.GetDeploymentDeviceLogsResponse',
        'fuota.GetDeploymentStatusRequest',
        'fuota.GetDeploymentStatusResponse'
    ];
get_msg_containment("timestamp") ->
    ['google.protobuf.Timestamp'];
get_msg_containment("duration") ->
    ['google.protobuf.Duration'];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).

get_pkg_containment("fuota") -> fuota;
get_pkg_containment("timestamp") -> 'google.protobuf';
get_pkg_containment("duration") -> 'google.protobuf';
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).

get_service_containment("fuota") -> ['fuota.FUOTAServerService'];
get_service_containment("timestamp") -> [];
get_service_containment("duration") -> [];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).

get_rpc_containment("fuota") ->
    [
        {'fuota.FUOTAServerService', 'CreateDeployment'},
        {'fuota.FUOTAServerService', 'GetDeploymentStatus'},
        {'fuota.FUOTAServerService', 'GetDeploymentDeviceLogs'}
    ];
get_rpc_containment("timestamp") ->
    [];
get_rpc_containment("duration") ->
    [];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).

get_enum_containment("fuota") -> ['fuota.MulticastGroupType'];
get_enum_containment("timestamp") -> [];
get_enum_containment("duration") -> [];
get_enum_containment(P) -> error({gpb_error, {badproto, P}}).

get_proto_by_msg_name_as_fqbin(<<"google.protobuf.Timestamp">>) -> "timestamp";
get_proto_by_msg_name_as_fqbin(<<"fuota.DeploymentDeviceStatus">>) -> "fuota";
get_proto_by_msg_name_as_fqbin(<<"fuota.GetDeploymentStatusRequest">>) -> "fuota";
get_proto_by_msg_name_as_fqbin(<<"fuota.GetDeploymentDeviceLogsRequest">>) -> "fuota";
get_proto_by_msg_name_as_fqbin(<<"fuota.Deployment">>) -> "fuota";
get_proto_by_msg_name_as_fqbin(<<"fuota.CreateDeploymentRequest">>) -> "fuota";
get_proto_by_msg_name_as_fqbin(<<"fuota.GetDeploymentStatusResponse">>) -> "fuota";
get_proto_by_msg_name_as_fqbin(<<"fuota.GetDeploymentDeviceLogsResponse">>) -> "fuota";
get_proto_by_msg_name_as_fqbin(<<"fuota.DeploymentDevice">>) -> "fuota";
get_proto_by_msg_name_as_fqbin(<<"fuota.CreateDeploymentResponse">>) -> "fuota";
get_proto_by_msg_name_as_fqbin(<<"fuota.DeploymentDeviceLog">>) -> "fuota";
get_proto_by_msg_name_as_fqbin(<<"google.protobuf.Duration">>) -> "duration";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).

get_proto_by_service_name_as_fqbin(<<"fuota.FUOTAServerService">>) -> "fuota";
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).

get_proto_by_enum_name_as_fqbin(<<"fuota.MulticastGroupType">>) -> "fuota";
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).

get_protos_by_pkg_name_as_fqbin(<<"fuota">>) -> ["fuota"];
get_protos_by_pkg_name_as_fqbin(<<"google.protobuf">>) -> ["duration", "timestamp"];
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).

gpb_version_as_string() ->
    "4.17.0".

gpb_version_as_list() ->
    [4, 17, 0].
