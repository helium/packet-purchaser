[
    {packet_purchaser, [
        {is_chain_dead, "${PP_IS_CHAIN_DEAD}"},
        {oui, "${PP_OUI}"},
        {pp_udp_worker, [
            {address, "${PP_LNS_ADDRESS}"},
            {port, "${PP_LNS_PORT}"}
        ]},
        {pp_console_api, [
            {endpoint, <<"${PP_CONSOLE_ENDPOINT}">>},
            {ws_endpoint, <<"${PP_CONSOLE_WS_ENDPOINT}">>},
            {secret, <<"${PP_CONSOLE_SECRET}">>},
            {auto_connect, "${PP_CONSOLE_ENABLE}"}
        ]},
        {packet_reporter, #{
            aws_bucket => <<"${PP_PACKET_REPORTER_AWS_BUCKET}">>,
            aws_bucket_region => <<"${PP_PACKET_REPORTER_AWS_BUCKET_REGION}">>,
            report_interval => 300_000,
            report_max_size => 50_000_000
        }},
        {update_from_ws_config, "${PP_CONSOLE_UPDATE_FROM_WS_CONFIG}"},
        {sc_open_dc_amount, "${PP_SC_OPEN_DC_AMOUNT}"},
        {sc_expiration_interval, "${PP_SC_EXPIRATION_INTERVAL}"},
        {sc_expiration_buffer, "${PP_SC_EXPIRATION_BUFFER}"},
        {pp_routing_config_filename, "${PP_BASE_DIR}/${PP_ROUTING_CONFIG_FILE}"},
        {metrics, [
            {unique_offers_cleanup_timer, 10},
            {unique_offers_window, 180}
        ]},
        {http_roaming_port, "${PP_HTTP_DOWNLINK_PORT}"},
        {force_net_id_protocol_version, #{
            16#600013 => pv_1_0,
            16#000004 => pv_1_0
        }},
        {denylist_keys, ["1SbEYKju337P6aYsRd9DT2k4qgK5ZK62kXbSvnJgqeaxK3hqQrYURZjL"]},
        {denylist_url, "https://api.github.com/repos/helium/denylist/releases/latest"}
    ]},
    {blockchain, [
        {port, 2154},
        {seed_nodes, "/ip4/35.166.211.46/tcp/2154,/ip4/44.236.95.167/tcp/2154"},
        {base_dir, "${PP_BASE_DIR}"},
        {update_dir, "update"},
        {snap_source_base_url, "https://snapshots.helium.wtf/mainnet"},
        {fetch_latest_from_snap_source, true},
        {honor_quick_sync, true},
        {quick_sync_mode, blessed_snapshot},
        {blessed_snapshot_block_height, 1469991},
        {blessed_snapshot_block_hash,
            <<228, 109, 63, 62, 128, 210, 153, 145, 214, 101, 72, 249, 132, 71, 169, 232, 182, 113,
                179, 150, 254, 35, 44, 113, 116, 77, 197, 127, 48, 10, 6, 43>>},
        {sc_packet_handler, pp_sc_packet_handler},
        {disable_gateway_cache, true},
        {gw_cache_retention_limit, 0},
        {gw_context_cache_max_size, 0},
        {sc_sup_type, server},
        {sc_hook_close_submit, pp_sc_worker}
    ]},
    {libp2p, [
        {random_peer_pred, fun pp_utils:random_non_miner_predicate/1},
        {network, mainnet},
        {use_dns_for_seeds, true},
        {seed_dns_cname, "seed.helium.io"},
        {seed_config_dns_name, "_seed_config.helium.io"},
        {nat_map, #{
            {"${PP_NAT_INTERNAL_IP}", "${PP_NAT_INTERNAL_PORT}"} =>
                {"${PP_NAT_EXTERNAL_IP}", "${PP_NAT_EXTERNAL_PORT}"}
        }},
        {max_tcp_connections, 500000}
    ]},
    {aws_credentials, [
        {credential_providers, [aws_credentials_env, aws_credentials_ec2]}
        %% uncomment for env usage
        %% {aws_access_key_id, "${PP_PACKET_REPORTER_AWS_KEY}"},
        %% {aws_secret_access_key, "${PP_PACKET_REPORTER_AWS_SECRET}"},
        %% {aws_default_region, "${PP_PACKET_REPORTER_AWS_REGION}"}
    ]},
    {chatterbox, [
        {client_initial_window_size, 16777216},
        {server_initial_window_size, 16777216}
    ]},
    {grpcbox, [
        {client, #{channels => [{ics_channel, [{https, "alb.iot.mainnet.helium.io", 6080, []}], #{}}]}},
        {servers, [
            #{
                grpc_opts => #{
                    service_protos => [router_pb, packet_router_pb],
                    services => #{
                        'helium.router' => helium_pp_service,
                        'helium.packet_router.packet' => helium_packet_service
                    }
                },
                transport_opts => #{ssl => false},
                listen_opts => #{
                    port => 8080,
                    ip => {0, 0, 0, 0}
                },
                pool_opts => #{size => 100},
                server_opts => #{
                    header_table_size => 4096,
                    enable_push => 1,
                    max_concurrent_streams => unlimited,
                    initial_window_size => 65535,
                    max_frame_size => 16384,
                    max_header_list_size => unlimited
                }
            }
        ]}
    ]},
    {prometheus, [
        {collectors, [
            prometheus_boolean,
            prometheus_counter,
            prometheus_gauge,
            prometheus_histogram,
            prometheus_vm_memory_collector,
            prometheus_vm_system_info_collector
        ]},
        {vm_system_info_collector_metrics, [process_count]}
    ]},
    {lager, [
        {suppress_supervisor_start_stop, true},
        {log_root, "${PP_BASE_DIR}/log"},
        {crash_log, "crash.log"},
        {handlers, [
            {lager_file_backend, [
                {file, "packet_purchaser.log"},
                {level, warning},
                {size, 1000000000},
                {date, "$D0"},
                {count, 15},
                {formatter_config, [
                    "[",
                    date,
                    " ",
                    time,
                    "] ",
                    pid,
                    " [",
                    severity,
                    "]",
                    {gateway_id, [" [", gateway_id, "]"], ""},
                    " [",
                    {module, ""},
                    {function, [":", function], ""},
                    {line, [":", line], ""},
                    "] ",
                    message,
                    "\n"
                ]}
            ]}
        ]},
        {traces, [
            {{lager_file_backend, "packet_purchaser.log"}, [{application, packet_purchaser}], info},
            {{lager_file_backend, "packet_purchaser.log"}, [{module, pp_sc_packet_handler}], info}
        ]}
    ]}
].
